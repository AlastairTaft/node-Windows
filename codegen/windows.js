var api = require('windows/api');

var
 CallbackT = api.CallbackT,
 StructT = api.StructT,
 Library = api.Library,
 ArrayT = api.ArrayT,
 EnumT = api.EnumT,
 NULL = api.NULL

var
 _void     = api('void'),
 int8      = api('int8'),
 uint8     = api('uint8'),
 int16     = api('int16'),
 uint16    = api('uint16'),
 int32     = api('int32'),
 uint32    = api('uint32'),
 int64     = api('int64'),
 uint64    = api('uint64'),
 float     = api('float'),
 double    = api('double'),
 CString   = api('CString'),
 WString   = api('WString'),
 bool      = api('bool'),
 byte      = api('byte'),
 char      = api('char'),
 uchar     = api('uchar'),
 short     = api('short'),
 ushort    = api('ushort'),
 int       = api('int'),
 uint      = api('uint'),
 long      = api('long'),
 ulong     = api('ulong'),
 longlong  = api('longlong'),
 ulonglong = api('ulonglong'),
 size_t    = api('size_t'),
 charΔ     = api('charΔ'),
 voidΔ     = api('voidΔ'),
 intΔ      = api('intΔ'),
 NULL      = api('NULL'),
 VoidT     = api('VoidT');

var
 uintptr_t = uint.typedef('uintptr_t'),
 va_list = char.Δ.typedef('va_list'),
 size_t = uint.typedef('size_t'),
 rsize_t = uint.typedef('rsize_t'),
 wchar_t = ushort.typedef('wchar_t'),
 wint_t = ushort.typedef('wint_t'),
 wctype_t = ushort.typedef('wctype_t'),
 errno_t = int.typedef('errno_t'),
 ULONG = ulong.typedef('ULONG'),
 PULONG = ulong.Δ.typedef('PULONG'),
 USHORT = ushort.typedef('USHORT'),
 PUSHORT = ushort.Δ.typedef('PUSHORT'),
 UCHAR = uchar.typedef('UCHAR'),
 PUCHAR = uchar.Δ.typedef('PUCHAR'),
 DWORD = ulong.typedef('DWORD'),
 BOOL = int.typedef('BOOL'),
 BYTE = uchar.typedef('BYTE'),
 WORD = ushort.typedef('WORD'),
 FLOAT = float.typedef('FLOAT'),
 PFLOAT = float.Δ.typedef('PFLOAT'),
 PBOOL = int.Δ.typedef('PBOOL'),
 LPBOOL = int.Δ.typedef('LPBOOL'),
 PBYTE = uchar.Δ.typedef('PBYTE'),
 LPBYTE = uchar.Δ.typedef('LPBYTE'),
 LPINT = int.Δ.typedef('LPINT'),
 PWORD = ushort.Δ.typedef('PWORD'),
 LPWORD = ushort.Δ.typedef('LPWORD'),
 LPLONG = long.Δ.typedef('LPLONG'),
 PDWORD = ulong.Δ.typedef('PDWORD'),
 LPDWORD = ulong.Δ.typedef('LPDWORD'),
 LPVOID = _void.Δ.typedef('LPVOID'),
 LPCVOID = _void.Δ.typedef('LPCVOID'),
 INT = int.typedef('INT'),
 UINT = uint.typedef('UINT'),
 PUINT = uint.Δ.typedef('PUINT'),
 UINT16 = ushort.typedef('UINT16'),
 UINT32 = uint.typedef('UINT32'),
 UINT64 = ulonglong.typedef('UINT64'),
 INT_PTR = int.typedef('INT_PTR'),
 UINT_PTR = uint.typedef('UINT_PTR'),
 PUINT_PTR = uint.Δ.typedef('PUINT_PTR'),
 LONG_PTR = long.typedef('LONG_PTR'),
 ULONG_PTR = ulong.typedef('ULONG_PTR'),
 PULONG_PTR = ulong.Δ.typedef('PULONG_PTR'),
 SIZE_T = ulong.typedef('SIZE_T'),
 PSIZE_T = ulong.Δ.typedef('PSIZE_T'),
 DWORD_PTR = ulong.typedef('DWORD_PTR'),
 PDWORD_PTR = ulong.Δ.typedef('PDWORD_PTR'),
 LONG64 = longlong.typedef('LONG64'),
 ULONG64 = ulonglong.typedef('ULONG64'),
 PULONG64 = ulonglong.Δ.typedef('PULONG64'),
 DWORD64 = ulonglong.typedef('DWORD64'),
 KAFFINITY = ulong.typedef('KAFFINITY'),
 PVOID = _void.Δ.typedef('PVOID'),
 PVOID64 = _void.Δ.typedef('PVOID64'),
 CHAR = char.typedef('CHAR'),
 SHORT = short.typedef('SHORT'),
 LONG = long.typedef('LONG'),
 WCHAR = ushort.typedef('WCHAR'),
 PWCHAR = ushort.Δ.typedef('PWCHAR'),
 LPWCH = ushort.Δ.typedef('LPWCH'),
 LPWSTR = ushort.Δ.typedef('LPWSTR'),
 PWSTR = ushort.Δ.typedef('PWSTR'),
 PUWSTR = ushort.Δ.typedef('PUWSTR'),
 LPCWSTR = ushort.Δ.typedef('LPCWSTR'),
 PCWSTR = ushort.Δ.typedef('PCWSTR'),
 PCUWSTR = ushort.Δ.typedef('PCUWSTR'),
 PZZWSTR = ushort.Δ.typedef('PZZWSTR'),
 PCZZWSTR = ushort.Δ.typedef('PCZZWSTR'),
 PCNZWCH = ushort.Δ.typedef('PCNZWCH'),
 LPCH = char.Δ.typedef('LPCH'),
 LPCCH = char.Δ.typedef('LPCCH'),
 LPSTR = char.Δ.typedef('LPSTR'),
 PSTR = char.Δ.typedef('PSTR'),
 LPCSTR = char.Δ.typedef('LPCSTR'),
 PCNZCH = char.Δ.typedef('PCNZCH'),
 PLONG = long.Δ.typedef('PLONG'),
 HANDLE = ulong.typedef('HANDLE'),
 HRESULT = long.typedef('HRESULT'),
 CCHAR = char.typedef('CCHAR'),
 LCID = ulong.typedef('LCID'),
 LANGID = ushort.typedef('LANGID'),
 LONGLONG = longlong.typedef('LONGLONG'),
 ULONGLONG = ulonglong.typedef('ULONGLONG'),
 PULONGLONG = ulonglong.Δ.typedef('PULONGLONG'),
 USN = longlong.typedef('USN'),
 DWORDLONG = ulonglong.typedef('DWORDLONG'),
 BOOLEAN = uchar.typedef('BOOLEAN'),
 PBOOLEAN = uchar.Δ.typedef('PBOOLEAN'),
 PACCESS_TOKEN = _void.Δ.typedef('PACCESS_TOKEN'),
 PSECURITY_DESCRIPTOR = _void.Δ.typedef('PSECURITY_DESCRIPTOR'),
 PSID = _void.Δ.typedef('PSID'),
 ACCESS_MASK = ulong.typedef('ACCESS_MASK'),
 PACCESS_MASK = ulong.Δ.typedef('PACCESS_MASK'),
 SID_HASH_ENTRY = ulong.typedef('SID_HASH_ENTRY'),
 SECURITY_DESCRIPTOR_CONTROL = ushort.typedef('SECURITY_DESCRIPTOR_CONTROL'),
 PSECURITY_DESCRIPTOR_CONTROL = ushort.Δ.typedef('PSECURITY_DESCRIPTOR_CONTROL'),
 ACCESS_REASON = ulong.typedef('ACCESS_REASON'),
 SECURITY_CONTEXT_TRACKING_MODE = uchar.typedef('SECURITY_CONTEXT_TRACKING_MODE'),
 SECURITY_INFORMATION = ulong.typedef('SECURITY_INFORMATION'),
 PSECURITY_INFORMATION = ulong.Δ.typedef('PSECURITY_INFORMATION'),
 EXECUTION_STATE = ulong.typedef('EXECUTION_STATE'),
 SAVEPOINT_ID = ulong.typedef('SAVEPOINT_ID'),
 TP_VERSION = ulong.typedef('TP_VERSION'),
 WPARAM = uint.typedef('WPARAM'),
 LPARAM = long.typedef('LPARAM'),
 LRESULT = long.typedef('LRESULT'),
 ATOM = ushort.typedef('ATOM'),
 HGLOBAL = _void.Δ.typedef('HGLOBAL'),
 HLOCAL = _void.Δ.typedef('HLOCAL'),
 HGDIOBJ = _void.Δ.typedef('HGDIOBJ'),
 HFILE = int.typedef('HFILE'),
 COLORREF = ulong.typedef('COLORREF'),
 PUMS_CONTEXT = _void.Δ.typedef('PUMS_CONTEXT'),
 PUMS_COMPLETION_LIST = _void.Δ.typedef('PUMS_COMPLETION_LIST'),
 LCSCSTYPE = long.typedef('LCSCSTYPE'),
 LCSGAMUTMATCH = long.typedef('LCSGAMUTMATCH'),
 FXPT2DOT30 = long.typedef('FXPT2DOT30'),
 COLOR16 = ushort.typedef('COLOR16'),
 HDWP = _void.Δ.typedef('HDWP'),
 HDEVNOTIFY = _void.Δ.typedef('HDEVNOTIFY'),
 HPOWERNOTIFY = _void.Δ.typedef('HPOWERNOTIFY'),
 LGRPID = ulong.typedef('LGRPID'),
 LCTYPE = ulong.typedef('LCTYPE'),
 CALTYPE = ulong.typedef('CALTYPE'),
 CALID = ulong.typedef('CALID'),
 NLS_FUNCTION = ulong.typedef('NLS_FUNCTION'),
 GEOID = long.typedef('GEOID'),
 GEOTYPE = ulong.typedef('GEOTYPE'),
 GEOCLASS = ulong.typedef('GEOCLASS'),
 REGSAM = ulong.typedef('REGSAM'),
 LSTATUS = long.typedef('LSTATUS'),
 MMVERSION = uint.typedef('MMVERSION'),
 MMRESULT = uint.typedef('MMRESULT'),
 LPUINT = uint.Δ.typedef('LPUINT'),
 FOURCC = ulong.typedef('FOURCC'),
 HPSTR = char.Δ.typedef('HPSTR'),
 MCIERROR = ulong.typedef('MCIERROR'),
 MCIDEVICEID = uint.typedef('MCIDEVICEID'),
 RPC_STATUS = long.typedef('RPC_STATUS'),
 RPC_CSTR = uchar.Δ.typedef('RPC_CSTR'),
 RPC_WSTR = ushort.Δ.typedef('RPC_WSTR'),
 RPC_BINDING_HANDLE = _void.Δ.typedef('RPC_BINDING_HANDLE'),
 handle_t = _void.Δ.typedef('handle_t'),
 RPC_IF_HANDLE = _void.Δ.typedef('RPC_IF_HANDLE'),
 RPC_AUTH_IDENTITY_HANDLE = _void.Δ.typedef('RPC_AUTH_IDENTITY_HANDLE'),
 RPC_ADDRESS_CHANGE_FN = new CallbackT(_void, [_void.Δ]).typedef('RPC_ADDRESS_CHANGE_FN'),
 I_RPC_MUTEX = _void.Δ.typedef('I_RPC_MUTEX'),
 RPC_NS_HANDLE = _void.Δ.typedef('RPC_NS_HANDLE'),
 FILEOP_FLAGS = ushort.typedef('FILEOP_FLAGS'),
 u_short = ushort.typedef('u_short'),
 u_int = uint.typedef('u_int'),
 u_long = ulong.typedef('u_long'),
 SOCKET = uint.typedef('SOCKET'),
 ALG_ID = uint.typedef('ALG_ID'),
 HCRYPTPROV = ulong.typedef('HCRYPTPROV'),
 HCRYPTKEY = ulong.typedef('HCRYPTKEY'),
 HCRYPTHASH = ulong.typedef('HCRYPTHASH'),
 NTSTATUS = long.typedef('NTSTATUS'),
 BCRYPT_HANDLE = _void.Δ.typedef('BCRYPT_HANDLE'),
 BCRYPT_ALG_HANDLE = _void.Δ.typedef('BCRYPT_ALG_HANDLE'),
 BCRYPT_KEY_HANDLE = _void.Δ.typedef('BCRYPT_KEY_HANDLE'),
 BCRYPT_HASH_HANDLE = _void.Δ.typedef('BCRYPT_HASH_HANDLE'),
 BCRYPT_SECRET_HANDLE = _void.Δ.typedef('BCRYPT_SECRET_HANDLE'),
 SECURITY_STATUS = long.typedef('SECURITY_STATUS'),
 NCRYPT_HANDLE = ulong.typedef('NCRYPT_HANDLE'),
 NCRYPT_PROV_HANDLE = ulong.typedef('NCRYPT_PROV_HANDLE'),
 NCRYPT_KEY_HANDLE = ulong.typedef('NCRYPT_KEY_HANDLE'),
 NCRYPT_SECRET_HANDLE = ulong.typedef('NCRYPT_SECRET_HANDLE'),
 HCRYPTPROV_OR_NCRYPT_KEY_HANDLE = ulong.typedef('HCRYPTPROV_OR_NCRYPT_KEY_HANDLE'),
 HCRYPTPROV_LEGACY = ulong.typedef('HCRYPTPROV_LEGACY'),
 HCRYPTOIDFUNCSET = _void.Δ.typedef('HCRYPTOIDFUNCSET'),
 HCRYPTOIDFUNCADDR = _void.Δ.typedef('HCRYPTOIDFUNCADDR'),
 HCRYPTMSG = _void.Δ.typedef('HCRYPTMSG'),
 HCERTSTORE = _void.Δ.typedef('HCERTSTORE'),
 HCERTSTOREPROV = _void.Δ.typedef('HCERTSTOREPROV'),
 HCRYPTDEFAULTCONTEXT = _void.Δ.typedef('HCRYPTDEFAULTCONTEXT'),
 HCRYPTASYNC = _void.Δ.typedef('HCRYPTASYNC'),
 HCERTCHAINENGINE = _void.Δ.typedef('HCERTCHAINENGINE'),
 HCERT_SERVER_OCSP_RESPONSE = _void.Δ.typedef('HCERT_SERVER_OCSP_RESPONSE'),
 byte = uchar.typedef('byte'),
 NDR_CCONTEXT = _void.Δ.typedef('NDR_CCONTEXT'),
 PFORMAT_STRING = uchar.Δ.typedef('PFORMAT_STRING'),
 RPC_SS_THREAD_HANDLE = _void.Δ.typedef('RPC_SS_THREAD_HANDLE'),
 OLECHAR = ushort.typedef('OLECHAR'),
 LPOLESTR = ushort.Δ.typedef('LPOLESTR'),
 LPCOLESTR = ushort.Δ.typedef('LPCOLESTR'),
 DOUBLE = double.typedef('DOUBLE'),
 SCODE = long.typedef('SCODE'),
 CLIPFORMAT = ushort.typedef('CLIPFORMAT'),
 HMETAFILEPICT = _void.Δ.typedef('HMETAFILEPICT'),
 DATE = double.typedef('DATE'),
 BSTR = ushort.Δ.typedef('BSTR'),
 VARIANT_BOOL = short.typedef('VARIANT_BOOL'),
 VARTYPE = ushort.typedef('VARTYPE'),
 PROPID = ulong.typedef('PROPID'),
 DEVICE_DATA_MANAGEMENT_SET_ACTION = ulong.typedef('DEVICE_DATA_MANAGEMENT_SET_ACTION'),
 LPCBYTE = uchar.Δ.typedef('LPCBYTE'),
 SCARDCONTEXT = ulong.typedef('SCARDCONTEXT'),
 LPSCARDCONTEXT = ulong.Δ.typedef('LPSCARDCONTEXT'),
 SCARDHANDLE = ulong.typedef('SCARDHANDLE'),
 LPSCARDHANDLE = ulong.Δ.typedef('LPSCARDHANDLE'),
 RPCOLEDATAREP = ulong.typedef('RPCOLEDATAREP'),
 HOLEMENU = _void.Δ.typedef('HOLEMENU'),
 DISPID = long.typedef('DISPID'),
 MEMBERID = long.typedef('MEMBERID'),
 HREFTYPE = ulong.typedef('HREFTYPE'),
 PROPVAR_PAD1 = ushort.typedef('PROPVAR_PAD1'),
 PROPVAR_PAD2 = ushort.typedef('PROPVAR_PAD2'),
 PROPVAR_PAD3 = ushort.typedef('PROPVAR_PAD3'),
 SC_LOCK = _void.Δ.typedef('SC_LOCK');

var
 HWND = HANDLE.typedef('HWND'),
 HHOOK = HANDLE.typedef('HHOOK'),
 HKEY = HANDLE.typedef('HKEY'),
 HACCEL = HANDLE.typedef('HACCEL'),
 HBITMAP = HANDLE.typedef('HBITMAP'),
 HBRUSH = HANDLE.typedef('HBRUSH'),
 HCOLORSPACE = HANDLE.typedef('HCOLORSPACE'),
 HDC = HANDLE.typedef('HDC'),
 HGLRC = HANDLE.typedef('HGLRC'),
 HDESK = HANDLE.typedef('HDESK'),
 HENHMETAFILE = HANDLE.typedef('HENHMETAFILE'),
 HFONT = HANDLE.typedef('HFONT'),
 HICON = HANDLE.typedef('HICON'),
 HMENU = HANDLE.typedef('HMENU'),
 HMETAFILE = HANDLE.typedef('HMETAFILE'),
 HINSTANCE = HANDLE.typedef('HINSTANCE'),
 HPALETTE = HANDLE.typedef('HPALETTE'),
 HPEN = HANDLE.typedef('HPEN'),
 HRGN = HANDLE.typedef('HRGN'),
 HRSRC = HANDLE.typedef('HRSRC'),
 HSPRITE = HANDLE.typedef('HSPRITE'),
 HLSURF = HANDLE.typedef('HLSURF'),
 HSTR = HANDLE.typedef('HSTR'),
 HTASK = HANDLE.typedef('HTASK'),
 HWINSTA = HANDLE.typedef('HWINSTA'),
 HKL = HANDLE.typedef('HKL'),
 HWINEVENTHOOK = HANDLE.typedef('HWINEVENTHOOK'),
 HMONITOR = HANDLE.typedef('HMONITOR'),
 HUMPD = HANDLE.typedef('HUMPD');

var EXCEPTION_DISPOSITION = new EnumT('EXCEPTION_DISPOSITION', {
 ContinueExecution: 0,
 ContinueSearch: 1,
 NestedException: 2,
 CollidedUnwind: 3
});

var SID_NAME_USE = new EnumT('SID_NAME_USE', {
 TypeUser: 1,
 TypeGroup: 1,
 TypeDomain: 2,
 TypeAlias: 3,
 TypeWellKnownGroup: 4,
 TypeDeletedAccount: 5,
 TypeInvalid: 6,
 TypeUnknown: 7,
 TypeComputer: 8,
 TypeLabel: 9
});

var WELL_KNOWN_SID_TYPE = new EnumT('WELL_KNOWN_SID_TYPE', {
 WinNullSid: 0,
 WinWorldSid: 1,
 WinLocalSid: 2,
 WinCreatorOwnerSid: 3,
 WinCreatorGroupSid: 4,
 WinCreatorOwnerServerSid: 5,
 WinCreatorGroupServerSid: 6,
 WinNtAuthoritySid: 7,
 WinDialupSid: 8,
 WinNetworkSid: 9,
 WinBatchSid: 10,
 WinInteractiveSid: 11,
 WinServiceSid: 12,
 WinAnonymousSid: 13,
 WinProxySid: 14,
 WinEnterpriseControllersSid: 15,
 WinSelfSid: 16,
 WinAuthenticatedUserSid: 17,
 WinRestrictedCodeSid: 18,
 WinTerminalServerSid: 19,
 WinRemoteLogonSid: 20,
 WinLogonIdsSid: 21,
 WinLocalSystemSid: 22,
 WinLocalServiceSid: 23,
 WinNetworkServiceSid: 24,
 WinBuiltinDomainSid: 25,
 WinBuiltinAdministratorsSid: 26,
 WinBuiltinUsersSid: 27,
 WinBuiltinGuestsSid: 28,
 WinBuiltinPowerUsersSid: 29,
 WinBuiltinAccountOperatorsSid: 30,
 WinBuiltinSystemOperatorsSid: 31,
 WinBuiltinPrintOperatorsSid: 32,
 WinBuiltinBackupOperatorsSid: 33,
 WinBuiltinReplicatorSid: 34,
 WinBuiltinPreWindows2000CompatibleAccessSid: 35,
 WinBuiltinRemoteDesktopUsersSid: 36,
 WinBuiltinNetworkConfigurationOperatorsSid: 37,
 WinAccountAdministratorSid: 38,
 WinAccountGuestSid: 39,
 WinAccountKrbtgtSid: 40,
 WinAccountDomainAdminsSid: 41,
 WinAccountDomainUsersSid: 42,
 WinAccountDomainGuestsSid: 43,
 WinAccountComputersSid: 44,
 WinAccountControllersSid: 45,
 WinAccountCertAdminsSid: 46,
 WinAccountSchemaAdminsSid: 47,
 WinAccountEnterpriseAdminsSid: 48,
 WinAccountPolicyAdminsSid: 49,
 WinAccountRasAndIasServersSid: 50,
 WinNtlmAuthenticationSid: 51,
 WinDigestAuthenticationSid: 52,
 WinChannelAuthenticationSid: 53,
 WinThisOrganizationSid: 54,
 WinOtherOrganizationSid: 55,
 WinBuiltinIncomingForestTrustBuildersSid: 56,
 WinBuiltinPerfMonitoringUsersSid: 57,
 WinBuiltinPerfLoggingUsersSid: 58,
 WinBuiltinAuthorizationAccessSid: 59,
 WinBuiltinTerminalServerLicenseServersSid: 60,
 WinBuiltinDcomUsersSid: 61,
 WinBuiltinUsersSid: 62,
 WinUserSid: 63,
 WinBuiltinCryptoOperatorsSid: 64,
 WinUntrustedLabelSid: 65,
 WinLowLabelSid: 66,
 WinMediumLabelSid: 67,
 WinHighLabelSid: 68,
 WinSystemLabelSid: 69,
 WinWriteRestrictedCodeSid: 70,
 WinCreatorOwnerRightsSid: 71,
 WinCacheablePrincipalsGroupSid: 72,
 WinNonCacheablePrincipalsGroupSid: 73,
 WinEnterpriseReadonlyControllersSid: 74,
 WinAccountReadonlyControllersSid: 75,
 WinBuiltinEventLogReadersGroup: 76,
 WinNewEnterpriseReadonlyControllersSid: 77,
 WinBuiltinCertSvcComAccessGroup: 78,
 WinMediumPlusLabelSid: 79,
 WinLocalLogonSid: 80,
 WinConsoleLogonSid: 81,
 WinThisOrganizationCertificateSid: 82
});

var ACL_INFORMATION_CLASS = new EnumT('ACL_INFORMATION_CLASS', {
 RevisionInformation: 1,
 SizeInformation: 1
});

var AUDIT_EVENT_TYPE = new EnumT('AUDIT_EVENT_TYPE', {
 ObjectAccess: 0,
 DirectoryServiceAccess: 1
});

var ACCESS_REASON_TYPE = new EnumT('ACCESS_REASON_TYPE', {
 None: 0x00000000,
 AllowedAce: 0x00010000,
 DeniedAce: 0x00020000,
 AllowedParentAce: 0x00030000,
 DeniedParentAce: 0x00040000,
 MissingPrivilege: 0x00100000,
 FromPrivilege: 0x00200000,
 IntegrityLevel: 0x00300000,
 Ownership: 0x00400000,
 NullDacl: 0x00500000,
 EmptyDacl: 0x00600000,
 NoSd: 0x00700000,
 NoGrant: 0x00800000
});

var SECURITY_IMPERSONATION_LEVEL = new EnumT('SECURITY_IMPERSONATION_LEVEL', {
 Anonymous: 0,
 Identification: 1,
 Impersonation: 2,
 Delegation: 3
});

var TOKEN_TYPE = new EnumT('TOKEN_TYPE', {
 Primary: 1,
 Impersonation: 1
});

var TOKEN_ELEVATION_TYPE = new EnumT('TOKEN_ELEVATION_TYPE', {
 Default: 1,
 Full: 1,
 Limited: 2
});

var TOKEN_INFORMATION_CLASS = new EnumT('TOKEN_INFORMATION_CLASS', {
 User: 1,
 Groups: 1,
 Privileges: 2,
 Owner: 3,
 PrimaryGroup: 4,
 DefaultDacl: 5,
 Source: 6,
 Type: 7,
 ImpersonationLevel: 8,
 Statistics: 9,
 RestrictedSids: 10,
 SessionId: 11,
 GroupsAndPrivileges: 12,
 SessionReference: 13,
 SandBoxInert: 14,
 AuditPolicy: 15,
 Origin: 16,
 ElevationType: 17,
 LinkedToken: 18,
 Elevation: 19,
 HasRestrictions: 20,
 AccessInformation: 21,
 VirtualizationAllowed: 22,
 VirtualizationEnabled: 23,
 IntegrityLevel: 24,
 UiAccess: 25,
 MandatoryPolicy: 26,
 LogonSid: 27,
 MaxClass: 28
});

var MANDATORY_LEVEL = new EnumT('MANDATORY_LEVEL', {
 Untrusted: 0,
 Low: 1,
 Medium: 2,
 High: 3,
 System: 4,
 SecureProcess: 5,
 Count: 6
});

var HARDWARE_COUNTER_TYPE = new EnumT('HARDWARE_COUNTER_TYPE', {
 PmcCounter: 0,
 MaxType: 1
});

var JOBOBJECTINFOCLASS = new EnumT('JOBOBJECTINFOCLASS', {
 BasicAccountingInformation: 1,
 BasicLimitInformation: 1,
 BasicProcessIdList: 2,
 BasicUiRestrictions: 3,
 SecurityLimitInformation: 4,
 EndOfTimeInformation: 5,
 AssociateCompletionPortInformation: 6,
 BasicAndIoAccountingInformation: 7,
 ExtendedLimitInformation: 8,
 SetInformation: 9,
 GroupInformation: 10,
 MaxClass: 11
});

var LOGICAL_PROCESSOR_RELATIONSHIP = new EnumT('LOGICAL_PROCESSOR_RELATIONSHIP', {
 Core: 0,
 NumaNode: 1,
 Cache: 2,
 Package: 3,
 Group: 4,
 All: 0xffff
});

var PROCESSOR_CACHE_TYPE = new EnumT('PROCESSOR_CACHE_TYPE', {
 Unified: 0,
 Instruction: 1,
 Data: 2,
 Trace: 3
});

var SYSTEM_POWER_STATE = new EnumT('SYSTEM_POWER_STATE', {
 Unspecified: 0,
 Working: 1,
 Sleeping1: 2,
 Sleeping2: 3,
 Sleeping3: 4,
 Hibernate: 5,
 Shutdown: 6,
 Maximum: 7
});

var POWER_ACTION = new EnumT('POWER_ACTION', {
 None: 0,
 Reserved: 1,
 Sleep: 2,
 Hibernate: 3,
 Shutdown: 4,
 ShutdownReset: 5,
 ShutdownOff: 6,
 WarmEject: 7
});

var DEVICE_POWER_STATE = new EnumT('DEVICE_POWER_STATE', {
 Unspecified: 0,
 D0: 1,
 D1: 2,
 D2: 3,
 D3: 4,
 Maximum: 5
});

var MONITOR_DISPLAY_STATE = new EnumT('MONITOR_DISPLAY_STATE', {
 PowerOff: 0,
 PowerOn: 1,
 PowerDim: 2
});

var LATENCY_TIME = new EnumT('LATENCY_TIME', {
 LtDontCare: 0,
 LtLowestLatency: 1
});

var POWER_REQUEST_TYPE = new EnumT('POWER_REQUEST_TYPE', {
 DisplayRequired: 0,
 SystemRequired: 1,
 AwayModeRequired: 2
});

var POWER_INFORMATION_LEVEL = new EnumT('POWER_INFORMATION_LEVEL', {
 SystemPolicyAc: 0,
 SystemPolicyDc: 1,
 VerifySystemPolicyAc: 2,
 VerifySystemPolicyDc: 3,
 SystemCapabilities: 4,
 SystemBatteryState: 5,
 SystemStateHandler: 6,
 ProcessorStateHandler: 7,
 SystemPolicyCurrent: 8,
 AdministratorPolicy: 9,
 SystemReserveHiberFile: 10,
 ProcessorInformation: 11,
 SystemInformation: 12,
 ProcessorStateHandler2: 13,
 LastWakeTime: 14,
 LastSleepTime: 15,
 SystemExecutionState: 16,
 SystemStateNotifyHandler: 17,
 ProcessorPolicyAc: 18,
 ProcessorPolicyDc: 19,
 VerifyProcessorPolicyAc: 20,
 VerifyProcessorPolicyDc: 21,
 ProcessorPolicyCurrent: 22,
 SystemStateLogging: 23,
 SystemLoggingEntry: 24,
 SetSettingValue: 25,
 NotifyUserSetting: 26,
 Unused0: 27,
 Unused1: 28,
 SystemVideoState: 29,
 TraceApplicationMessage: 30,
 TraceApplicationMessageEnd: 31,
 ProcessorPerfStates: 32,
 ProcessorIdleStates: 33,
 ProcessorCap: 34,
 SystemWakeSource: 35,
 SystemHiberFileInformation: 36,
 TraceServiceMessage: 37,
 ProcessorLoad: 38,
 ShutdownNotification: 39,
 MonitorCapabilities: 40,
 SessionInit: 41,
 SessionDisplayState: 42,
 RequestCreate: 43,
 RequestAction: 44,
 GetRequestList: 45,
 ProcessorEx: 46,
 NotifyUserModeLegacyEvent: 47,
 GroupPark: 48,
 ProcessorIdleDomains: 49,
 WakeTimerList: 50,
 SystemHiberFileSize: 51,
 Maximum: 52
});

var SYSTEM_POWER_CONDITION = new EnumT('SYSTEM_POWER_CONDITION', {
 Ac: 0,
 Dc: 1,
 Hot: 2,
 Maximum: 3
});

var POWER_PLATFORM_ROLE = new EnumT('POWER_PLATFORM_ROLE', {
 Unspecified: 0,
 Desktop: 1,
 Mobile: 2,
 Workstation: 3,
 EnterpriseServer: 4,
 SohoServer: 5,
 AppliancePc: 6,
 PerformanceServer: 7,
 Maximum: 8
});

var IMAGE_AUX_SYMBOL_TYPE = new EnumT('IMAGE_AUX_SYMBOL_TYPE', {
 TokenDef: 1
});

var IMPORT_OBJECT_TYPE = new EnumT('IMPORT_OBJECT_TYPE', {
 Code: 0,
 Data: 1,
 Const: 2
});

var IMPORT_OBJECT_NAME_TYPE = new EnumT('IMPORT_OBJECT_NAME_TYPE', {
 Ordinal: 0,
 Name: 1,
 NoPrefix: 2,
 Undecorate: 3
});

var ReplacesCorHdrNumericDefines = new EnumT('ReplacesCorHdrNumericDefines', {
 ComimageFlagsIlonly: 0x00000001,
 ComimageFlags32bitrequired: 0x00000002,
 ComimageFlagsIlLibrary: 0x00000004,
 ComimageFlagsStrongnamesigned: 0x00000008,
 ComimageFlagsNativeEntrypoint: 0x00000010,
 ComimageFlagsTrackdebugdata: 0x00010000,
 VersionMajorV2: 2,
 VersionMajor: 7,
 VersionMinor: 0,
 DeletedNameLength: 8,
 VtablegapNameLength: 8,
 NativeTypeMaxCb: 1,
 IlmethodSectSmallMaxDatasize: 0xFF,
 ImageMihMethodrva: 0x01,
 ImageMihEhrva: 0x02,
 ImageMihBasicblock: 0x08,
 Vtable32bit: 0x01,
 Vtable64bit: 0x02,
 VtableFromUnmanaged: 0x04,
 VtableFromUnmanagedRetainAppdomain: 0x08,
 VtableCallMostDerived: 0x10,
 ImageEatjThunkSize: 32,
 MaxClassName: 1024,
 MaxPackageName: 1024
});

var UMS_THREAD_INFO_CLASS = new EnumT('UMS_THREAD_INFO_CLASS', {
 InvalidClass: 0,
 UserContext: 1,
 Priority: 2,
 Affinity: 3,
 Teb: 4,
 IsSuspended: 5,
 IsTerminated: 6,
 MaxClass: 7
});

var UMS_SCHEDULER_REASON = new EnumT('UMS_SCHEDULER_REASON', {
 Startup: 0,
 ThreadBlocked: 1,
 ThreadYield: 2
});

var HEAP_INFORMATION_CLASS = new EnumT('HEAP_INFORMATION_CLASS', {
 CompatibilityInformation: 0,
 EnableTerminationCorruption: 1
});

var ACTIVATION_CONTEXT_INFO_CLASS = new EnumT('ACTIVATION_CONTEXT_INFO_CLASS', {
 BasicInformation: 1,
 DetailedInformation: 2,
 AssemblyDetailedInformationContext: 3,
 FileInformationAssemblyOfAssemblyContext: 4,
 RunlevelInformationContext: 5,
 CompatibilityInformationContext: 6,
 ManifestResourceName: 7,
 MaxClass: 7,
 AssemblyDetailedInformationContxt: 3,
 FileInformationAssemblyOfAssemblyContxt: 4
});

var ACTCTX_REQUESTED_RUN_LEVEL = new EnumT('ACTCTX_REQUESTED_RUN_LEVEL', {
 Unspecified: 0,
 AsInvoker: 1,
 HighestAvailable: 2,
 RequireAdmin: 3,
 Numbers: 4
});

var ACTCTX_COMPATIBILITY_ELEMENT_TYPE = new EnumT('ACTCTX_COMPATIBILITY_ELEMENT_TYPE', {
 Unknown: 0,
 Os: 1,
 Mitigation: 2
});

var SERVICE_NODE_TYPE = new EnumT('SERVICE_NODE_TYPE', {
 DriverType: SERVICE_KERNEL_DRIVER,
 FileSystemType: SERVICE_FILE_SYSTEM_DRIVER,
 Win32OwnProcess: SERVICE_WIN32_OWN_PROCESS,
 Win32ShareProcess: SERVICE_WIN32_SHARE_PROCESS,
 AdapterType: SERVICE_ADAPTER,
 RecognizerType: SERVICE_RECOGNIZER_DRIVER
});

var SERVICE_LOAD_TYPE = new EnumT('SERVICE_LOAD_TYPE', {
 BootLoad: SERVICE_BOOT_START,
 SystemLoad: SERVICE_SYSTEM_START,
 AutoLoad: SERVICE_AUTO_START,
 DemandLoad: SERVICE_DEMAND_START,
 DisableLoad: SERVICE_DISABLED
});

var SERVICE_ERROR_TYPE = new EnumT('SERVICE_ERROR_TYPE', {
 IgnoreError: SERVICE_ERROR_IGNORE,
 NormalError: SERVICE_ERROR_NORMAL,
 SevereError: SERVICE_ERROR_SEVERE,
 CriticalError: SERVICE_ERROR_CRITICAL
});

var TAPE_DRIVE_PROBLEM_TYPE = new EnumT('TAPE_DRIVE_PROBLEM_TYPE', {
 None: 0,
 ReadWriteWarning: 1,
 ReadWriteError: 2,
 ReadWarning: 3,
 WriteWarning: 4,
 ReadError: 5,
 WriteError: 6,
 HardwareError: 7,
 UnsupportedMedia: 8,
 ScsiConnectionError: 9,
 TimetoClean: 10,
 CleanNow: 11,
 MediaLifeExpired: 12,
 SnappedTape: 13
});

var TRANSACTION_OUTCOME = new EnumT('TRANSACTION_OUTCOME', {
 Undetermined: 1,
 Committed: 1,
 Aborted: 2
});

var TRANSACTION_STATE = new EnumT('TRANSACTION_STATE', {
 Normal: 1,
 Indoubt: 1,
 CommittedNotify: 2
});

var TRANSACTION_INFORMATION_CLASS = new EnumT('TRANSACTION_INFORMATION_CLASS', {
 BasicInformation: 0,
 PropertiesInformation: 1,
 EnlistmentInformation: 2,
 SuperiorEnlistmentInformation: 3,
 BindInformation: 4,
 DtcPrivateInformation: 5
});

var TRANSACTIONMANAGER_INFORMATION_CLASS = new EnumT('TRANSACTIONMANAGER_INFORMATION_CLASS', {
 BasicInformation: 0,
 LogInformation: 1,
 LogPathInformation: 2,
 RecoveryInformation: 4,
 OnlineProbeInformation: 3,
 OldestInformation: 5
});

var RESOURCEMANAGER_INFORMATION_CLASS = new EnumT('RESOURCEMANAGER_INFORMATION_CLASS', {
 BasicInformation: 0,
 CompletionInformation: 1
});

var ENLISTMENT_INFORMATION_CLASS = new EnumT('ENLISTMENT_INFORMATION_CLASS', {
 BasicInformation: 0,
 RecoveryInformation: 1,
 CrmInformation: 2
});

var KTMOBJECT_TYPE = new EnumT('KTMOBJECT_TYPE', {
 Transaction: 0,
 TransactionManager: 1,
 ResourceManager: 2,
 Enlistment: 3,
 Invalid: 4
});

var TP_CALLBACK_PRIORITY = new EnumT('TP_CALLBACK_PRIORITY', {
 High: 0,
 Normal: 1,
 Low: 2,
 Invalid: 3
});

var DEP_SYSTEM_POLICY_TYPE = new EnumT('DEP_SYSTEM_POLICY_TYPE', {
 AlwaysOff: 0,
 AlwaysOn: 1,
 OptIn: 2,
 OptOut: 3,
 TotalCount: 4
});

var MEMORY_RESOURCE_NOTIFICATION_TYPE = new EnumT('MEMORY_RESOURCE_NOTIFICATION_TYPE', {
 LowNotification: 0,
 HighNotification: 1
});

var PROC_THREAD_ATTRIBUTE_NUM = new EnumT('PROC_THREAD_ATTRIBUTE_NUM', {
 ParentProcess: 0,
 ExtendedFlags: 1,
 HandleList: 2,
 GroupAffinity: 3,
 PreferredNode: 4,
 IdealProcessor: 5,
 UmsThread: 6,
 MitigationPolicy: 7,
 Max: 8
});

var GET_FILEEX_INFO_LEVELS = new EnumT('GET_FILEEX_INFO_LEVELS', {
 Standard: 0,
 MaxLevel: 1
});

var FINDEX_INFO_LEVELS = new EnumT('FINDEX_INFO_LEVELS', {
 Standard: 0,
 Basic: 1,
 MaxLevel: 2
});

var FINDEX_SEARCH_OPS = new EnumT('FINDEX_SEARCH_OPS', {
 NameMatch: 0,
 LimitToDirectories: 1,
 LimitToDevices: 2,
 MaxOp: 3
});

var STREAM_INFO_LEVELS = new EnumT('STREAM_INFO_LEVELS', {
 FindStandard: 0,
 FindMaxLevel: 1
});

var PIPE_ATTRIBUTE_TYPE = new EnumT('PIPE_ATTRIBUTE_TYPE', {
 Attribute: 0,
 ConnectionAttribute: 1,
 HandleAttribute: 2
});

var COMPUTER_NAME_FORMAT = new EnumT('COMPUTER_NAME_FORMAT', {
 NetBios: 0,
 DnsHostname: 1,
 DnsDomain: 2,
 DnsFullyQualified: 3,
 PhysicalNetBios: 4,
 PhysicalDnsHostname: 5,
 PhysicalDnsDomain: 6,
 PhysicalDnsFullyQualified: 7,
 Max: 8
});

var FILE_INFO_BY_HANDLE_CLASS = new EnumT('FILE_INFO_BY_HANDLE_CLASS', {
 BasicInfo: 0,
 StandardInfo: 1,
 NameInfo: 2,
 RenameInfo: 3,
 DispositionInfo: 4,
 AllocationInfo: 5,
 EndOfInfo: 6,
 StreamInfo: 7,
 CompressionInfo: 8,
 AttributeTagInfo: 9,
 IdBothDirectoryInfo: 10,
 IdBothDirectoryRestartInfo: 11,
 IoPriorityHintInfo: 12,
 RemoteProtocolInfo: 13,
 MaximumClass: 14
});

var PRIORITY_HINT = new EnumT('PRIORITY_HINT', {
 VeryLow: 0,
 Low: 1,
 Normal: 2,
 MaximumType: 3
});

var FILE_ID_TYPE = new EnumT('FILE_ID_TYPE', {
 Type: 0,
 ObjectType: 1,
 MaximumType: 2
});

var DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = new EnumT('DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY', {
 Other: 0,
 Hd15: 0,
 Svideo: 1,
 CompositeVideo: 2,
 ComponentVideo: 3,
 Dvi: 4,
 Hdmi: 5,
 Lvds: 6,
 Jpn: 8,
 Sdi: 9,
 DisplayportExternal: 10,
 DisplayportEmbedded: 11,
 UdiExternal: 12,
 UdiEmbedded: 13,
 Sdtvdongle: 14,
 Internal: 15,
 ForceUint32: 16
});

var DISPLAYCONFIG_SCANLINE_ORDERING = new EnumT('DISPLAYCONFIG_SCANLINE_ORDERING', {
 Unspecified: 0,
 Progressive: 1,
 Interlaced: 2,
 InterlacedUpperfieldfirst: 3,
 InterlacedLowerfieldfirst: 3,
 ForceUint32: 5
});

var DISPLAYCONFIG_SCALING = new EnumT('DISPLAYCONFIG_SCALING', {
 Identity: 1,
 Centered: 2,
 Stretched: 3,
 Aspectratiocenteredmax: 4,
 Custom: 5,
 Preferred: 128,
 ForceUint32: 6
});

var DISPLAYCONFIG_ROTATION = new EnumT('DISPLAYCONFIG_ROTATION', {
 Identity: 1,
 Rotate90: 2,
 Rotate180: 3,
 Rotate270: 4,
 ForceUint32: 4
});

var DISPLAYCONFIG_MODE_INFO_TYPE = new EnumT('DISPLAYCONFIG_MODE_INFO_TYPE', {
 Source: 1,
 Target: 2,
 ForceUint32: 2
});

var DISPLAYCONFIG_PIXELFORMAT = new EnumT('DISPLAYCONFIG_PIXELFORMAT', {
 8bpp: 1,
 16bpp: 2,
 24bpp: 3,
 32bpp: 4,
 Nongdi: 5,
 ForceUint32: 5
});

var DISPLAYCONFIG_TOPOLOGY_ID = new EnumT('DISPLAYCONFIG_TOPOLOGY_ID', {
 Internal: 0x00000001,
 Clone: 0x00000002,
 Extend: 0x00000004,
 External: 0x00000008,
 ForceUint32: 4
});

var DISPLAYCONFIG_DEVICE_INFO_TYPE = new EnumT('DISPLAYCONFIG_DEVICE_INFO_TYPE', {
 GetSourceName: 1,
 GetTargetName: 2,
 GetTargetPreferredMode: 3,
 GetAdapterName: 4,
 SetTargetPersistence: 5,
 ForceUint32: 5
});

var SYSNLS_FUNCTION = new EnumT('SYSNLS_FUNCTION', {
 CompareString: 0x0001
});

var SYSGEOTYPE = new EnumT('SYSGEOTYPE', {
 Nation: 0x0001,
 Latitude: 0x0002,
 Longitude: 0x0003,
 Iso2: 0x0004,
 Iso3: 0x0005,
 Rfc1766: 0x0006,
 Lcid: 0x0007,
 Friendlyname: 0x0008,
 Officialname: 0x0009,
 Timezones: 0x000A,
 Officiallanguages: 0x000B
});

var SYSGEOCLASS = new EnumT('SYSGEOCLASS', {
 Nation: 16,
 Region: 14
});

var NORM_FORM = new EnumT('NORM_FORM', {
 NormalizationOther: 0,
 NormalizationC: 0x1,
 NormalizationD: 0x2,
 NormalizationKc: 0x5,
 NormalizationKd: 0x6
});

var RPC_HTTP_REDIRECTOR_STAGE = new EnumT('RPC_HTTP_REDIRECTOR_STAGE', {
 Redirect: 1,
 Access1: 1,
 Session: 2,
 Access2: 3,
 Interface: 4
});

var RPC_ADDRESS_CHANGE_TYPE = new EnumT('RPC_ADDRESS_CHANGE_TYPE', {
 ProtocolNotLoaded: 1,
 ProtocolLoaded: 1,
 ProtocolChange: 2
});

var RpcPerfCounters = new EnumT('RpcPerfCounters', {
 CurrentUniqueUser: 1,
 BackEndConnectionAttempts: 1,
 BackEndConnectionFailed: 2,
 RequestsSecond: 3,
 IncomingConnections: 4,
 IncomingBandwidth: 5,
 OutgoingBandwidth: 6,
 AttemptedLbsDecisions: 7,
 FailedLbsDecisions: 8,
 AttemptedLbsMessages: 9,
 FailedLbsMessages: 10,
 LastCounter: 11
});

var RPC_NOTIFICATION_TYPES = new EnumT('RPC_NOTIFICATION_TYPES', {
 None: 0,
 Event: 1,
 Apc: 2,
 Ioc: 3,
 Hwnd: 4,
 Callback: 5
});

var RPC_ASYNC_EVENT = new EnumT('RPC_ASYNC_EVENT', {
 CallComplete: 0,
 SendComplete: 1,
 ReceiveComplete: 2,
 ClientDisconnect: 3,
 ClientCancel: 4
});

var ExtendedErrorParamTypes = new EnumT('ExtendedErrorParamTypes', {
 EeptAnsiString: 1,
 EeptUnicodeString: 1,
 EeptLongVal: 2,
 EeptShortVal: 3,
 EeptPointerVal: 4,
 EeptNone: 5,
 EeptBinary: 6
});

var RpcLocalAddressFormat = new EnumT('RpcLocalAddressFormat', {
 RlafInvalid: 0,
 RlafiPv4: 1,
 RlafiPv6: 2
});

var RpcCallType = new EnumT('RpcCallType', {
 RctInvalid: 0,
 RctNormal: 1,
 RctTraining: 2,
 RctGuaranteed: 3
});

var RpcCallClientLocality = new EnumT('RpcCallClientLocality', {
 RcclInvalid: 0,
 RcclLocal: 1,
 RcclRemote: 2,
 RcclUnknownLocality: 3
});

var RPC_NOTIFICATIONS = new EnumT('RPC_NOTIFICATIONS', {
 CallNone: 0,
 ClientDisconnect: 1,
 CallCancel: 2
});

var ASSOCCLASS = new EnumT('ASSOCCLASS', {
 ShellKey: 0,
 ProgidKey: 1,
 ProgidStr: 2,
 ClsidKey: 3,
 ClsidStr: 4,
 AppKey: 5,
 AppStr: 6,
 SystemStr: 7,
 Folder: 8,
 Star: 9
});

var QUERY_USER_NOTIFICATION_STATE = new EnumT('QUERY_USER_NOTIFICATION_STATE', {
 QunsPresent: 1,
 QunsBusy: 2,
 QunsRunningD3dFullScreen: 3,
 QunsPresentationMode: 4,
 QunsAcceptsNotifications: 5,
 QunsQuietTime: 6
});

var SHSTOCKICONID = new EnumT('SHSTOCKICONID', {
 SiidDocnoassoc: 0,
 SiidDocassoc: 1,
 SiidApplication: 2,
 SiidFolder: 3,
 SiidFolderopen: 4,
 SiidDrive525: 5,
 SiidDrive35: 6,
 SiidDriveremove: 7,
 SiidDrivefixed: 8,
 SiidDrivenet: 9,
 SiidDrivenetdisabled: 10,
 SiidDrivecd: 11,
 SiidDriveram: 12,
 SiidWorld: 13,
 SiidServer: 15,
 SiidPrinter: 16,
 SiidMynetwork: 17,
 SiidFind: 22,
 SiidHelp: 23,
 SiidShare: 28,
 SiidLink: 29,
 SiidSlowfile: 30,
 SiidRecycler: 31,
 SiidRecyclerfull: 32,
 SiidMediacdaudio: 40,
 SiidLock: 47,
 SiidAutolist: 49,
 SiidPrinternet: 50,
 SiidServershare: 51,
 SiidPrinterfax: 52,
 SiidPrinterfaxnet: 53,
 SiidPrinterfile: 54,
 SiidStack: 55,
 SiidMediasvcd: 56,
 SiidStuffedfolder: 57,
 SiidDriveunknown: 58,
 SiidDrivedvd: 59,
 SiidMediadvd: 60,
 SiidMediadvdram: 61,
 SiidMediadvdrw: 62,
 SiidMediadvdr: 63,
 SiidMediadvdrom: 64,
 SiidMediacdaudioplus: 65,
 SiidMediacdrw: 66,
 SiidMediacdr: 67,
 SiidMediacdburn: 68,
 SiidMediablankcd: 69,
 SiidMediacdrom: 70,
 SiidAudiofiles: 71,
 SiidImagefiles: 72,
 SiidVideofiles: 73,
 SiidMixedfiles: 74,
 SiidFolderback: 75,
 SiidFolderfront: 76,
 SiidShield: 77,
 SiidWarning: 78,
 SiidInfo: 79,
 SiidError: 80,
 SiidKey: 81,
 SiidSoftware: 82,
 SiidRename: 83,
 SiidDelete: 84,
 SiidMediaaudiodvd: 85,
 SiidMediamoviedvd: 86,
 SiidMediaenhancedcd: 87,
 SiidMediaenhanceddvd: 88,
 SiidMediahddvd: 89,
 SiidMediabluray: 90,
 SiidMediavcd: 91,
 SiidMediadvdplusr: 92,
 SiidMediadvdplusrw: 93,
 SiidDesktoppc: 94,
 SiidMobilepc: 95,
 SiidUsers: 96,
 SiidMediasmartmedia: 97,
 SiidMediacompactflash: 98,
 SiidDevicecellphone: 99,
 SiidDevicecamera: 100,
 SiidDevicevideocamera: 101,
 SiidDeviceaudioplayer: 102,
 SiidNetworkconnect: 103,
 SiidInternet: 104,
 SiidZipfile: 105,
 SiidSettings: 106,
 SiidDrivehddvd: 132,
 SiidDrivebd: 133,
 SiidMediahddvdrom: 134,
 SiidMediahddvdr: 135,
 SiidMediahddvdram: 136,
 SiidMediabdrom: 137,
 SiidMediabdr: 138,
 SiidMediabdre: 139,
 SiidClustereddrive: 140,
 SiidMaxIcons: 174
});

var USER_MARSHAL_CB_TYPE = new EnumT('USER_MARSHAL_CB_TYPE', {
 BufferSize: 0,
 Marshall: 1,
 Unmarshall: 2,
 Free: 3
});

var IDL_CS_CONVERT = new EnumT('IDL_CS_CONVERT', {
 NoConvert: 0,
 InPlaceConvert: 1,
 NewBufferConvert: 2
});

var XLAT_SIDE = new EnumT('XLAT_SIDE', {
 Server: 1,
 Client: 1
});

var STUB_PHASE = new EnumT('STUB_PHASE', {
 Unmarshal: 0,
 CallServer: 1,
 Marshal: 2,
 CallServerNoHresult: 3
});

var PROXY_PHASE = new EnumT('PROXY_PHASE', {
 Calcsize: 0,
 Getbuffer: 1,
 Marshal: 2,
 Sendreceive: 3,
 Unmarshal: 4
});

var MEMCTX = new EnumT('MEMCTX', {
 Task: 1,
 Shared: 2,
 Macsystem: 3,
 Unknown: 3,
 Same: 4
});

var CLSCTX = new EnumT('CLSCTX', {
 InprocServer: 0x1,
 InprocHandler: 0x2,
 LocalServer: 0x4,
 InprocServer16: 0x8,
 RemoteServer: 0x10,
 InprocHandler16: 0x20,
 Reserved1: 0x40,
 Reserved2: 0x80,
 Reserved3: 0x100,
 Reserved4: 0x200,
 NoCodeDownload: 0x400,
 Reserved5: 0x800,
 NoCustomMarshal: 0x1000,
 EnableCodeDownload: 0x2000,
 NoFailureLog: 0x4000,
 DisableAaa: 0x8000,
 EnableAaa: 0x10000,
 FromDefaultContext: 0x20000,
 Activate32BitServer: 0x40000,
 Activate64BitServer: 0x80000,
 EnableCloaking: 0x100000,
 PsDll: 21
});

var MSHLFLAGS = new EnumT('MSHLFLAGS', {
 Normal: 0,
 Tablestrong: 1,
 Tableweak: 2,
 Noping: 4,
 Reserved1: 8,
 Reserved2: 16,
 Reserved3: 32,
 Reserved4: 64
});

var MSHCTX = new EnumT('MSHCTX', {
 Local: 0,
 Nosharedmem: 1,
 Differentmachine: 2,
 Inproc: 3,
 Crossctx: 4
});

var DVASPECT = new EnumT('DVASPECT', {
 Content: 1,
 Thumbnail: 2,
 Icon: 4,
 Docprint: 8
});

var STGC = new EnumT('STGC', {
 Default: 0,
 Overwrite: 1,
 Onlyifcurrent: 2,
 Dangerouslycommitmerelytodiskcache: 4,
 Consolidate: 8
});

var STGMOVE = new EnumT('STGMOVE', {
 Move: 0,
 Copy: 1,
 Shallowcopy: 2
});

var STATFLAG = new EnumT('STATFLAG', {
 Default: 0,
 Noname: 1,
 Noopen: 2
});

var VARENUM = new EnumT('VARENUM', {
 VtEmpty: 0,
 VtNull: 1,
 VtI2: 2,
 VtI4: 3,
 VtR4: 4,
 VtR8: 5,
 VtCy: 6,
 VtDate: 7,
 VtBstr: 8,
 VtDispatch: 9,
 VtError: 10,
 VtBool: 11,
 VtVariant: 12,
 VtUnknown: 13,
 VtDecimal: 14,
 VtI1: 16,
 VtUi1: 17,
 VtUi2: 18,
 VtUi4: 19,
 VtI8: 20,
 VtUi8: 21,
 VtInt: 22,
 VtUint: 23,
 VtVoid: 24,
 VtHresult: 25,
 VtPtr: 26,
 VtSafearray: 27,
 VtCarray: 28,
 VtUserdefined: 29,
 VtLpstr: 30,
 VtLpwstr: 31,
 VtRecord: 36,
 VtIntPtr: 37,
 VtUintPtr: 38,
 VtFiletime: 64,
 VtBlob: 65,
 VtStream: 66,
 VtStorage: 67,
 VtStreamedObject: 68,
 VtStoredObject: 69,
 VtBlobObject: 70,
 VtCf: 71,
 VtClsid: 72,
 VtVersionedStream: 73,
 VtBstrBlob: 0xfff,
 VtVector: 0x1000,
 VtArray: 0x2000,
 VtByref: 0x4000,
 VtReserved: 0x8000,
 VtIllegal: 0xffff,
 VtIllegalmasked: 0xfff,
 VtTypemask: 0xfff
});

var TYSPEC = new EnumT('TYSPEC', {
 Clsid: 0,
 Fileext: 1,
 Mimetype: 2,
 Filename: 3,
 Progid: 4,
 Packagename: 5,
 Objectid: 6
});

var STORAGE_MEDIA_TYPE = new EnumT('STORAGE_MEDIA_TYPE', {
 Dds4mm: 0x20,
 MiniQic: 1,
 Travan: 2,
 Qic: 3,
 Mp8mm: 4,
 Ame8mm: 5,
 Ait18mm: 6,
 Dlt: 7,
 Nctp: 8,
 Ibm3480: 9,
 Ibm3490e: 10,
 IbmMagstar3590: 11,
 IbmMagstarMp: 12,
 StkDataD3: 13,
 SonyDtf: 14,
 Dv6mm: 15,
 Dmi: 16,
 SonyD2: 17,
 CleanerCartridge: 18,
 CdRom: 19,
 CdR: 20,
 CdRw: 21,
 DvdRom: 22,
 DvdR: 23,
 DvdRw: 24,
 Mo3Rw: 25,
 Mo5Wo: 26,
 Mo5Rw: 27,
 Mo5Limdow: 28,
 Pc5Wo: 29,
 Pc5Rw: 30,
 Pd5Rw: 31,
 Abl5Wo: 32,
 PinnacleApex5Rw: 33,
 Sony12Wo: 34,
 Philips12Wo: 35,
 Hitachi12Wo: 36,
 Cygnet12Wo: 37,
 Kodak14Wo: 38,
 MoNfr525: 39,
 Nikon12Rw: 40,
 IomegaZip: 41,
 IomegaJaz: 42,
 SyquestEz135: 43,
 SyquestEzflyer: 44,
 SyquestSyjet: 45,
 AvatarF2: 46,
 Mp28mm: 47,
 DstS: 48,
 DstM: 49,
 DstL: 50,
 VxaTape1: 51,
 VxaTape2: 52,
 Stk9840: 53,
 LtoUltrium: 54,
 LtoAccelis: 55,
 DvdRam: 56,
 Ait8mm: 57,
 Adr1: 58,
 Adr2: 59,
 Stk9940: 60,
 Sait: 61,
 VxaTape: 62
});

var STORAGE_BUS_TYPE = new EnumT('STORAGE_BUS_TYPE', {
 Unknown: 0x00,
 Scsi: 1,
 Atapi: 2,
 Ata: 3,
 1394: 4,
 Ssa: 5,
 Fibre: 6,
 Usb: 7,
 Raid: 8,
 TypeiScsi: 9,
 Sas: 10,
 Sata: 11,
 Sd: 12,
 Mmc: 13,
 Virtual: 14,
 FileBackedVirtual: 15,
 Max: 16,
 MaxReserved: 0x7F
});

var STORAGE_QUERY_TYPE = new EnumT('STORAGE_QUERY_TYPE', {
 PropertyStandardQuery: 0,
 PropertyExistsQuery: 1,
 PropertyMaskQuery: 2,
 PropertyMaxDefined: 3
});

var STORAGE_PROPERTY_ID = new EnumT('STORAGE_PROPERTY_ID', {
 DeviceProperty: 0,
 AdapterProperty: 1,
 DeviceProperty: 2,
 DeviceUniqueProperty: 3,
 DeviceWriteCacheProperty: 4,
 MiniportProperty: 5,
 AccessAlignmentProperty: 6,
 DeviceSeekPenaltyProperty: 7,
 DeviceTrimProperty: 8,
 DeviceWriteAggregationProperty: 9
});

var STORAGE_PORT_CODE_SET = new EnumT('STORAGE_PORT_CODE_SET', {
 Reserved: 0,
 Storport: 1,
 ScsIport: 2
});

var STORAGE_IDENTIFIER_CODE_SET = new EnumT('STORAGE_IDENTIFIER_CODE_SET', {
 Reserved: 0,
 Binary: 1,
 Ascii: 2,
 Utf8: 3
});

var STORAGE_IDENTIFIER_TYPE = new EnumT('STORAGE_IDENTIFIER_TYPE', {
 VendorSpecific: 0,
 VendorId: 1,
 Eui64: 2,
 FcphName: 3,
 PortRelative: 4,
 TargetPortGroup: 5,
 LogicalUnitGroup: 6,
 Md5LogicalUnitIdentifier: 7,
 ScsiNameString: 8
});

var STORAGE_ID_NAA_FORMAT = new EnumT('STORAGE_ID_NAA_FORMAT', {
 IeeeExtended: 2,
 IeeeRegistered: 3,
 IeeeeRegisteredExtended: 5
});

var STORAGE_ASSOCIATION_TYPE = new EnumT('STORAGE_ASSOCIATION_TYPE', {
 IdDevice: 0,
 IdPort: 1,
 IdTarget: 2
});

var WRITE_CACHE_TYPE = new EnumT('WRITE_CACHE_TYPE', {
 Unknown: 0,
 None: 1,
 Back: 2,
 Through: 3
});

var WRITE_CACHE_ENABLE = new EnumT('WRITE_CACHE_ENABLE', {
 Unknown: 0,
 Disabled: 1,
 Enabled: 2
});

var WRITE_CACHE_CHANGE = new EnumT('WRITE_CACHE_CHANGE', {
 Unknown: 0,
 NotChangeable: 1,
 Changeable: 2
});

var WRITE_THROUGH = new EnumT('WRITE_THROUGH', {
 Unknown: 0,
 NotSupported: 1,
 Supported: 2
});

var MEDIA_TYPE = new EnumT('MEDIA_TYPE', {
 Unknown: 0,
 F51Pt2512: 1,
 F31Pt44512: 2,
 F32Pt88512: 3,
 F320Pt8512: 4,
 F3720512: 5,
 F5360512: 6,
 F5320512: 7,
 F53201024: 8,
 F5180512: 9,
 F5160512: 10,
 RemovableMedia: 11,
 FixedMedia: 12,
 F3120m512: 13,
 F3640512: 14,
 F5640512: 15,
 F5720512: 16,
 F31Pt2512: 17,
 F31Pt231024: 18,
 F51Pt231024: 19,
 F3128Mb512: 20,
 F3230Mb512: 21,
 F8256128: 22,
 F3200Mb512: 23,
 F3240m512: 24,
 F332m512: 25
});

var PARTITION_STYLE = new EnumT('PARTITION_STYLE', {
 Mbr: 0,
 Gpt: 1,
 Raw: 2
});

var DETECTION_TYPE = new EnumT('DETECTION_TYPE', {
 None: 0,
 Int13: 1,
 ExInt13: 2
});

var DISK_CACHE_RETENTION_PRIORITY = new EnumT('DISK_CACHE_RETENTION_PRIORITY', {
 EqualPriority: 0,
 KeepPrefetchedData: 1,
 KeepReadData: 2
});

var BIN_TYPES = new EnumT('BIN_TYPES', {
 RequestSize: 0,
 RequestLocation: 1
});

var ELEMENT_TYPE = new EnumT('ELEMENT_TYPE', {
 AllElements: 0,
 ChangerTransport: 1,
 ChangerSlot: 2,
 ChangerIePort: 3,
 ChangerDrive: 4,
 ChangerDoor: 5,
 ChangerKeypad: 6,
 ChangerMaxElement: 7
});

var CHANGER_DEVICE_PROBLEM_TYPE = new EnumT('CHANGER_DEVICE_PROBLEM_TYPE', {
 None: 0,
 Hardware: 1,
 ChmError: 2,
 DoorOpen: 3,
 CalibrationError: 4,
 TargetFailure: 5,
 ChmMoveError: 6,
 ChmZeroError: 7,
 CartridgeInsertError: 8,
 PositionError: 9,
 SensorError: 10,
 CartridgeEjectError: 11,
 GripperError: 12,
 DriveError: 13
});

var SHRINK_VOLUME_REQUEST_TYPES = new EnumT('SHRINK_VOLUME_REQUEST_TYPES', {
 Prepare: 1,
 Commit: 1,
 Abort: 2
});

var BIDI_TYPE = new EnumT('BIDI_TYPE', {
 Null: 0,
 Int: 1,
 Float: 2,
 Bool: 3,
 String: 4,
 Text: 5,
 Enum: 6,
 Blob: 7
});

var PRINTER_OPTION_FLAGS = new EnumT('PRINTER_OPTION_FLAGS', {
 NoCache: 0,
 Cache: 1,
 ClientChange: 2,
 NoClientData: 3
});

var EPrintPropertyType = new EnumT('EPrintPropertyType', {
 KString: 1,
 K32: 1,
 K64: 2,
 KByte: 3,
 KTime: 4,
 KDevMode: 5,
 KSd: 6,
 KNotificationReply: 7,
 KNotificationOptions: 8,
 KBuffer: 9
});

var EPrintXPSJobProgress = new EnumT('EPrintXPSJobProgress', {
 KAddingDocumentSequence: 0,
 KDocumentSequenceAdded: 1,
 KAddingFixedDocument: 2,
 KFixedDocumentAdded: 3,
 KAddingFixedPage: 4,
 KFixedPageAdded: 5,
 KResourceAdded: 6,
 KFontAdded: 7,
 KImageAdded: 8,
 KDocumentCommitted: 9
});

var EPrintXPSJobOperation = new EnumT('EPrintXPSJobOperation', {
 KProduction: 1,
 KConsumption: 1
});

var PRINT_EXECUTION_CONTEXT = new EnumT('PRINT_EXECUTION_CONTEXT', {
 Application: 0,
 SpoolerService: 1,
 SpoolerIsolationHost: 2,
 FilterPipeline: 3,
 Wow64: 4
});

var REGCLS = new EnumT('REGCLS', {
 Singleuse: 0,
 Multipleuse: 1,
 MultiSeparate: 2,
 Suspended: 4,
 Surrogate: 8
});

var EXTCONN = new EnumT('EXTCONN', {
 Strong: 0x1,
 Weak: 0x2,
 Callable: 0x4
});

var BIND_FLAGS = new EnumT('BIND_FLAGS', {
 Maybotheruser: 1,
 Justtestexistence: 2
});

var MKSYS = new EnumT('MKSYS', {
 None: 0,
 Genericcomposite: 1,
 Filemoniker: 2,
 Antimoniker: 3,
 Itemmoniker: 4,
 Pointermoniker: 5,
 Classmoniker: 7,
 Objrefmoniker: 8,
 Sessionmoniker: 9,
 Luamoniker: 10
});

var MKRREDUCE = new EnumT('MKRREDUCE', {
 One: 0,
 Touser: 1,
 Throughuser: 2,
 All: 0
});

var STGTY = new EnumT('STGTY', {
 Storage: 1,
 Stream: 2,
 Lockbytes: 3,
 Property: 4
});

var STREAM_SEEK = new EnumT('STREAM_SEEK', {
 Set: 0,
 Cur: 1,
 End: 2
});

var LOCKTYPE = new EnumT('LOCKTYPE', {
 Write: 1,
 Exclusive: 2,
 Onlyonce: 4
});

var ADVF = new EnumT('ADVF', {
 Nodata: 1,
 Primefirst: 2,
 Onlyonce: 4,
 Dataonstop: 64,
 AdvfcacheNohandler: 8,
 AdvfcacheForcebuiltin: 16,
 AdvfcacheOnsave: 32
});

var TYMED = new EnumT('TYMED', {
 Hglobal: 1,
 File: 2,
 Istream: 4,
 Istorage: 8,
 Gdi: 16,
 Mfpict: 32,
 Enhmf: 64,
 Null: 0
});

var DATADIR = new EnumT('DATADIR', {
 Get: 1,
 Set: 2
});

var CALLTYPE = new EnumT('CALLTYPE', {
 Toplevel: 1,
 Nested: 2,
 Async: 3,
 ToplevelCallpending: 4,
 AsyncCallpending: 5
});

var SERVERCALL = new EnumT('SERVERCALL', {
 Ishandled: 0,
 Rejected: 1,
 Retrylater: 2
});

var PENDINGTYPE = new EnumT('PENDINGTYPE', {
 Toplevel: 1,
 Nested: 2
});

var PENDINGMSG = new EnumT('PENDINGMSG', {
 Cancelcall: 0,
 Waitnoprocess: 1,
 Waitdefprocess: 2
});

var EOLE_AUTHENTICATION_CAPABILITIES = new EnumT('EOLE_AUTHENTICATION_CAPABILITIES', {
 EoacNone: 0,
 EoacMutualAuth: 0x1,
 EoacStaticCloaking: 0x20,
 EoacDynamicCloaking: 0x40,
 EoacAnyAuthority: 0x80,
 EoacMakeFullsic: 0x100,
 EoacDefault: 0x800,
 EoacSecureRefs: 0x2,
 EoacAccessControl: 0x4,
 EoacAppid: 0x8,
 EoacDynamic: 0x10,
 EoacRequireFullsic: 0x200,
 EoacAutoImpersonate: 0x400,
 EoacNoCustomMarshal: 0x2000,
 EoacDisableAaa: 0x1000
});

var RPCOPT_PROPERTIES = new EnumT('RPCOPT_PROPERTIES', {
 CombndRpctimeout: 0x1,
 CombndServerLocality: 0x2
});

var RPCOPT_SERVER_LOCALITY_VALUES = new EnumT('RPCOPT_SERVER_LOCALITY_VALUES', {
 ProcessLocal: 0,
 MachineLocal: 1,
 Remote: 2
});

var GLOBALOPT_PROPERTIES = new EnumT('GLOBALOPT_PROPERTIES', {
 ComglbExceptionHandling: 1,
 ComglbAppid: 2,
 ComglbRpcThreadpoolSetting: 3
});

var GLOBALOPT_EH_VALUES = new EnumT('GLOBALOPT_EH_VALUES', {
 ComglbExceptionHandle: 0,
 ComglbExceptionDonotHandleFatal: 1,
 ComglbExceptionDonotHandle: 2,
 ComglbExceptionDonotHandleAny: 2
});

var GLOBALOPT_RPCTP_VALUES = new EnumT('GLOBALOPT_RPCTP_VALUES', {
 ComglbThreadpoolSettingDefaultPool: 0,
 ComglbThreadpoolSettingPrivatePool: 1
});

var DCOM_CALL_STATE = new EnumT('DCOM_CALL_STATE', {
 None: 0,
 Complete: 0x1,
 Canceled: 0x2
});

var ApplicationType = new EnumT('ApplicationType', {
 ServerApplication: 0,
 LibraryApplication: 1
});

var ShutdownType = new EnumT('ShutdownType', {
 IdleShutdown: 0,
 ForcedShutdown: 1
});

var APTTYPEQUALIFIER = new EnumT('APTTYPEQUALIFIER', {
 None: 0,
 ImplicitMta: 1,
 NaOnMta: 2,
 NaOnSta: 3,
 NaOnImplicitMta: 4,
 NaOnMainsta: 5
});

var APTTYPE = new EnumT('APTTYPE', {
 Current: 0,
 Sta: 0,
 Mta: 1,
 Na: 2,
 Mainsta: 3
});

var THDTYPE = new EnumT('THDTYPE', {
 Blockmessages: 0,
 Processmessages: 1
});

var COINIT = new EnumT('COINIT', {
 Apartmentthreaded: 0x2,
 Multithreaded: 0x0,
 DisableOle1dde: 0x4,
 SpeedOverMemory: 0x8
});

var COMSD = new EnumT('COMSD', {
 Launchpermissions: 0,
 Accesspermissions: 1,
 Launchrestrictions: 2,
 Accessrestrictions: 3
});

var STDMSHLFLAGS = new EnumT('STDMSHLFLAGS', {
 SmexfServer: 0x01,
 SmexfHandler: 0x02
});

var COWAIT_FLAGS = new EnumT('COWAIT_FLAGS', {
 Waitall: 1,
 Alertable: 2,
 Inputavailable: 4
});

var DISCARDCACHE = new EnumT('DISCARDCACHE', {
 Saveifdirty: 0,
 Nosave: 1
});

var OLEGETMONIKER = new EnumT('OLEGETMONIKER', {
 Onlyifthere: 1,
 Forceassign: 2,
 Unassign: 3,
 Tempforuser: 4
});

var OLEWHICHMK = new EnumT('OLEWHICHMK', {
 Container: 1,
 Objrel: 2,
 Objfull: 3
});

var USERCLASSTYPE = new EnumT('USERCLASSTYPE', {
 Full: 1,
 Short: 2,
 Appname: 3
});

var OLEMISC = new EnumT('OLEMISC', {
 Recomposeonresize: 0x1,
 Onlyiconic: 0x2,
 Insertnotreplace: 0x4,
 Static: 0x8,
 Cantlinkinside: 0x10,
 Canlinkbyole1: 0x20,
 Islinkobject: 0x40,
 Insideout: 0x80,
 Activatewhenvisible: 0x100,
 Renderingisdeviceindependent: 0x200,
 Invisibleatruntime: 0x400,
 Alwaysrun: 0x800,
 Actslikebutton: 0x1000,
 Actslikelabel: 0x2000,
 Nouiactivate: 0x4000,
 Alignable: 0x8000,
 Simpleframe: 0x10000,
 Setclientsitefirst: 0x20000,
 Imemode: 0x40000,
 Ignoreactivatewhenvisible: 0x80000,
 Wantstomenumerge: 0x100000,
 Supportsmultilevelundo: 0x200000
});

var OLECLOSE = new EnumT('OLECLOSE', {
 Saveifdirty: 0,
 Nosave: 1,
 Promptsave: 2
});

var OLERENDER = new EnumT('OLERENDER', {
 None: 0,
 Draw: 1,
 Format: 2,
 Asis: 3
});

var OLEUPDATE = new EnumT('OLEUPDATE', {
 Always: 1,
 Oncall: 3
});

var OLELINKBIND = new EnumT('OLELINKBIND', {
 Evenifclassdiff: 1
});

var BINDSPEED = new EnumT('BINDSPEED', {
 Indefinite: 1,
 Moderate: 2,
 Immediate: 3
});

var OLECONTF = new EnumT('OLECONTF', {
 Embeddings: 1,
 Links: 2,
 Others: 4,
 Onlyuser: 8,
 Onlyifrunning: 16
});

var OLEVERBATTRIB = new EnumT('OLEVERBATTRIB', {
 Neverdirties: 1,
 Oncontainermenu: 2
});

var SF_TYPE = new EnumT('SF_TYPE', {
 Error: 0,
 I1: 1,
 I2: 2,
 I4: 3,
 I8: 4,
 Bstr: 5,
 Unknown: 6,
 Dispatch: 7,
 Variant: 8,
 Record: 9,
 Haveiid: 10
});

var TYPEKIND = new EnumT('TYPEKIND', {
 TkindEnum: 0,
 TkindRecord: 1,
 TkindModule: 2,
 TkindInterface: 3,
 TkindDispatch: 4,
 TkindCoclass: 5,
 TkindAlias: 6,
 TkindUnion: 7,
 TkindMax: 8
});

var CALLCONV = new EnumT('CALLCONV', {
 CcFastcall: 0,
 CcCdecl: 1,
 CcMscpascal: 2,
 CcPascal: 3,
 CcMacpascal: 4,
 CcStdcall: 5,
 CcFpfastcall: 6,
 CcSyscall: 7,
 CcMpwcdecl: 8,
 CcMpwpascal: 9,
 CcMax: 10
});

var FUNCKIND = new EnumT('FUNCKIND', {
 Virtual: 0,
 Purevirtual: 1,
 Nonvirtual: 2,
 Static: 3,
 Dispatch: 4
});

var INVOKEKIND = new EnumT('INVOKEKIND', {
 Func: 1,
 Propertyget: 2,
 Propertyput: 4,
 Propertyputref: 8
});

var VARKIND = new EnumT('VARKIND', {
 Perinstance: 0,
 Static: 1,
 Const: 2,
 Dispatch: 3
});

var TYPEFLAGS = new EnumT('TYPEFLAGS', {
 Fappobject: 0x1,
 Fcancreate: 0x2,
 Flicensed: 0x4,
 Fpredeclid: 0x8,
 Fhidden: 0x10,
 Fcontrol: 0x20,
 Fdual: 0x40,
 Fnonextensible: 0x80,
 Foleautomation: 0x100,
 Frestricted: 0x200,
 Faggregatable: 0x400,
 Freplaceable: 0x800,
 Fdispatchable: 0x1000,
 Freversebind: 0x2000,
 Fproxy: 0x4000
});

var FUNCFLAGS = new EnumT('FUNCFLAGS', {
 Frestricted: 0x1,
 Fsource: 0x2,
 Fbindable: 0x4,
 Frequestedit: 0x8,
 Fdisplaybind: 0x10,
 Fdefaultbind: 0x20,
 Fhidden: 0x40,
 Fusesgetlasterror: 0x80,
 Fdefaultcollelem: 0x100,
 Fuidefault: 0x200,
 Fnonbrowsable: 0x400,
 Freplaceable: 0x800,
 Fimmediatebind: 0x1000
});

var VARFLAGS = new EnumT('VARFLAGS', {
 Freadonly: 0x1,
 Fsource: 0x2,
 Fbindable: 0x4,
 Frequestedit: 0x8,
 Fdisplaybind: 0x10,
 Fdefaultbind: 0x20,
 Fhidden: 0x40,
 Frestricted: 0x80,
 Fdefaultcollelem: 0x100,
 Fuidefault: 0x200,
 Fnonbrowsable: 0x400,
 Freplaceable: 0x800,
 Fimmediatebind: 0x1000
});

var DESCKIND = new EnumT('DESCKIND', {
 None: 0,
 Funcdesc: 1,
 Vardesc: 2,
 Typecomp: 3,
 Implicitappobj: 4,
 Max: 5
});

var SYSKIND = new EnumT('SYSKIND', {
 Win16: 0,
 Win32: 1,
 Mac: 2,
 Win64: 3
});

var LIBFLAGS = new EnumT('LIBFLAGS', {
 Frestricted: 0x1,
 Fcontrol: 0x2,
 Fhidden: 0x4,
 Fhasdiskimage: 0x8
});

var CHANGEKIND = new EnumT('CHANGEKIND', {
 Addmember: 0,
 Deletemember: 1,
 Setnames: 2,
 Setdocumentation: 3,
 General: 4,
 Invalidate: 5,
 Changefailed: 6,
 Max: 7
});

var DOMNodeType = new EnumT('DOMNodeType', {
 Invalid: 0,
 Element: 1,
 Attribute: 2,
 Text: 3,
 CdataSection: 4,
 EntityReference: 5,
 Entity: 6,
 ProcessingInstruction: 7,
 Comment: 8,
 Document: 9,
 DocumentType: 10,
 DocumentFragment: 11,
 Notation: 12
});

var XMLELEM_TYPE = new EnumT('XMLELEM_TYPE', {
 Element: 0,
 Text: 1,
 Comment: 2,
 Document: 3,
 Dtd: 4,
 Pi: 5,
 Other: 6
});

var MONIKERPROPERTY = new EnumT('MONIKERPROPERTY', {
 Mimetypeprop: 0,
 UseSrcUrl: 0x1,
 Classidprop: 0x2,
 Trusteddownloadprop: 0x3,
 Popuplevelprop: 0x4
});

var BINDVERB = new EnumT('BINDVERB', {
 Get: 0,
 Post: 0x1,
 Put: 0x2,
 Custom: 0x3,
 Reserved1: 0x4
});

var BINDINFOF = new EnumT('BINDINFOF', {
 Urlencodestgmeddata: 0x1,
 Urlencodedextrainfo: 0x2
});

var BINDF = new EnumT('BINDF', {
 Asynchronous: 0x1,
 Asyncstorage: 0x2,
 Noprogressiverendering: 0x4,
 Offlineoperation: 0x8,
 Getnewestversion: 0x10,
 Nowritecache: 0x20,
 Needfile: 0x40,
 Pulldata: 0x80,
 Ignoresecurityproblem: 0x100,
 Resynchronize: 0x200,
 Hyperlink: 0x400,
 NoUi: 0x800,
 Silentoperation: 0x1000,
 PragmaNoCache: 0x2000,
 Getclassobject: 0x4000,
 Reserved1: 0x8000,
 FreeThreaded: 0x10000,
 DirectRead: 0x20000,
 FormsSubmit: 0x40000,
 GetfromcacheIfNetFail: 0x80000,
 Fromurlmon: 0x100000,
 FwdBack: 0x200000,
 Preferdefaulthandler: 0x400000,
 Enforcerestricted: 0x800000
});

var URL_ENCODING = new EnumT('URL_ENCODING', {
 None: 0,
 EnableUtf8: 0x10000000,
 DisableUtf8: 0x20000000
});

var BINDINFO_OPTIONS = new EnumT('BINDINFO_OPTIONS', {
 Wininetflag: 0x10000,
 EnableUtf8: 0x20000,
 DisableUtf8: 0x40000,
 UseIeEncoding: 0x80000,
 Bindtoobject: 0x100000,
 Securityoptout: 0x200000,
 Ignoremimetextplain: 0x400000,
 Usebindstringcreds: 0x800000,
 Ignorehttphttpsredirects: 0x1000000,
 IgnoreSslerrorsOnce: 0x2000000,
 WpcDownloadblocked: 0x8000000,
 WpcLoggingEnabled: 0x10000000,
 Allowconnectdata: 0x20000000,
 Disableautoredirects: 0x40000000,
 ShdocvwNavigate: 14
});

var BSCF = new EnumT('BSCF', {
 Firstdatanotification: 0x1,
 Intermediatedatanotification: 0x2,
 Lastdatanotification: 0x4,
 Datafullyavailable: 0x8,
 Availabledatasizeunknown: 0x10,
 Skipdraindataforfileurls: 0x20,
 64bitlengthdownload: 0x40
});

var BINDSTATUS = new EnumT('BINDSTATUS', {
 Findingresource: 1,
 Connecting: 1,
 Redirecting: 2,
 Begindownloaddata: 3,
 Downloadingdata: 4,
 Enddownloaddata: 5,
 Begindownloadcomponents: 6,
 Installingcomponents: 7,
 Enddownloadcomponents: 8,
 Usingcachedcopy: 9,
 Sendingrequest: 10,
 Classidavailable: 11,
 Mimetypeavailable: 12,
 Cachefilenameavailable: 13,
 Beginsyncoperation: 14,
 Endsyncoperation: 15,
 Beginuploaddata: 16,
 Uploadingdata: 17,
 Enduploaddata: 18,
 Protocolclassid: 19,
 Encoding: 20,
 Verifiedmimetypeavailable: 21,
 Classinstalllocation: 22,
 Decoding: 23,
 Loadingmimehandler: 24,
 Contentdispositionattach: 25,
 Filterreportmimetype: 26,
 Clsidcaninstantiate: 27,
 Iunknownavailable: 28,
 Directbind: 29,
 Rawmimetype: 30,
 Proxydetecting: 31,
 Acceptranges: 32,
 CookieSent: 33,
 CompactPolicyReceived: 34,
 CookieSuppressed: 35,
 CookieStateUnknown: 36,
 CookieStateAccept: 37,
 CookieStateReject: 38,
 CookieStatePrompt: 39,
 CookieStateLeash: 40,
 CookieStateDowngrade: 41,
 PolicyHref: 42,
 P3pHeader: 43,
 SessionCookieReceived: 44,
 PersistentCookieReceived: 45,
 SessionCookiesAllowed: 46,
 Cachecontrol: 47,
 Contentdispositionfilename: 48,
 Mimetextplainmismatch: 49,
 Publisheravailable: 50,
 Displaynameavailable: 51,
 SsluxNavblocked: 52,
 ServerMimetypeavailable: 53,
 SniffedClassidavailable: 54,
 64bitProgress: 55
});

var BINDF2 = new EnumT('BINDF2', {
 Disablebasicoverhttp: 0x1,
 Disableautocookiehandling: 0x2,
 ReadDataGreaterThan4gb: 0x4,
 DisableHttpRedirectXsecurityid: 0x8,
 Reserved3: 0x20000000,
 Reserved2: 0x40000000,
 Reserved1: 6
});

var AUTHENTICATEF = new EnumT('AUTHENTICATEF', {
 Proxy: 0x1,
 Basic: 0x2,
 Http: 0x4
});

var CIP_STATUS = new EnumT('CIP_STATUS', {
 DiskFull: 0,
 AccessDenied: 1,
 NewerVersionExists: 2,
 OlderVersionExists: 3,
 NameConflict: 4,
 TrustVerificationComponentMissing: 5,
 ExeSelfRegisterationTimeout: 6,
 UnsafeToAbort: 7,
 NeedReboot: 8,
 NeedRebootUiPermission: 9
});

var Uri_PROPERTY = new EnumT('Uri_PROPERTY', {
 AbsoluteUri: 0,
 StringStart: 1,
 Authority: 1,
 DisplayUri: 2,
 Domain: 3,
 Extension: 4,
 Fragment: 5,
 Host: 6,
 Password: 7,
 Path: 8,
 PathAndQuery: 9,
 Query: 10,
 RawUri: 11,
 SchemeName: 12,
 UserInfo: 13,
 UserName: 14,
 StringLast: 16,
 HostType: 15,
 DwordStart: 18,
 Port: 16,
 Scheme: 17,
 Zone: 18,
 DwordLast: 22
});

var Uri_HOST_TYPE = new EnumT('Uri_HOST_TYPE', {
 Unknown: 0,
 Dns: 1,
 Ipv4: 2,
 Ipv6: 3,
 Idn: 4
});

var BINDSTRING = new EnumT('BINDSTRING', {
 Headers: 1,
 AcceptMimes: 1,
 ExtraUrl: 2,
 Language: 3,
 Username: 4,
 Password: 5,
 UaPixels: 6,
 UaColor: 7,
 Os: 8,
 UserAgent: 9,
 AcceptEncodings: 10,
 PostCookie: 11,
 PostDataMime: 12,
 Url: 13,
 Iid: 14,
 FlagToObject: 15,
 PtrContext: 16,
 XdrOrigin: 17
});

var PI_FLAGS = new EnumT('PI_FLAGS', {
 ParseUrl: 0x1,
 FilterMode: 0x2,
 ForceAsync: 0x4,
 UseWorkerthread: 0x8,
 Mimeverification: 0x10,
 Clsidlookup: 0x20,
 Dataprogress: 0x40,
 Synchronous: 0x80,
 Apartmentthreaded: 0x100,
 Classinstall: 0x200,
 Passonbindctx: 0x2000,
 Nomimehandler: 0x8000,
 Loadappdirect: 0x4000,
 PdForceSwitch: 0x10000,
 Preferdefaulthandler: 0x20000
});

var OIBDG_FLAGS = new EnumT('OIBDG_FLAGS', {
 Apartmentthreaded: 0x100,
 Dataonly: 0x1000
});

var PARSEACTION = new EnumT('PARSEACTION', {
 Canonicalize: 1,
 Friendly: 1,
 SecurityUrl: 2,
 Rootdocument: 3,
 Document: 4,
 Anchor: 5,
 EncodeIsUnescape: 6,
 DecodeIsEscape: 7,
 PathFromUrl: 8,
 UrlFromPath: 9,
 Mime: 10,
 Server: 11,
 Schema: 12,
 Site: 13,
 Domain: 14,
 Location: 15,
 SecurityDomain: 16,
 Escape: 17,
 Unescape: 18
});

var PSUACTION = new EnumT('PSUACTION', {
 Default: 1,
 SecurityUrlOnly: 1
});

var QUERYOPTION = new EnumT('QUERYOPTION', {
 ExpirationDate: 1,
 TimeOfLastChange: 1,
 ContentEncoding: 2,
 ContentType: 3,
 Refresh: 4,
 Recombine: 5,
 CanNavigate: 6,
 UsesNetwork: 7,
 IsCached: 8,
 IsInstalledentry: 9,
 IsCachedOrMapped: 10,
 UsesCache: 11,
 IsSecure: 12,
 IsSafe: 13,
 UsesHistoryfolder: 14
});

var INTERNETFEATURELIST = new EnumT('INTERNETFEATURELIST', {
 ObjectCaching: 0,
 ZoneElevation: 1,
 MimeHandling: 2,
 MimeSniffing: 3,
 WindowRestrictions: 4,
 WebocPopupmanagement: 5,
 Behaviors: 6,
 DisableMkProtocol: 7,
 LocalmachineLockdown: 8,
 Securityband: 9,
 RestrictActivexinstall: 10,
 ValidateNavigateUrl: 11,
 RestrictFiledownload: 12,
 AddonManagement: 13,
 ProtocolLockdown: 14,
 HttpUsernamePasswordDisable: 15,
 SafeBindtoobject: 16,
 UncSavedfilecheck: 17,
 GetUrlDomFilepathUnencoded: 18,
 TabbedBrowsing: 19,
 Sslux: 20,
 DisableNavigationSounds: 21,
 DisableLegacyCompression: 22,
 ForceAddrAndStatus: 23,
 Xmlhttp: 24,
 DisableTelnetProtocol: 25,
 Feeds: 26,
 BlockInputPrompts: 27,
 EntryCount: 28
});

var PUAF = new EnumT('PUAF', {
 Default: 0,
 Noui: 0x1,
 Isfile: 0x2,
 WarnIfDenied: 0x4,
 ForceuiForeground: 0x8,
 CheckTifs: 0x10,
 Dontcheckboxindialog: 0x20,
 Trusted: 0x40,
 AcceptWildcardScheme: 0x80,
 Enforcerestricted: 0x100,
 Nosavedfilecheck: 0x200,
 Requiresavedfilecheck: 0x400,
 DontUseCache: 0x1000,
 Reserved1: 0x2000,
 Reserved2: 0x4000,
 LmzUnlocked: 0x10000,
 LmzLocked: 0x20000,
 Defaultzonepol: 0x40000,
 NplUseLockedIfRestricted: 0x80000,
 Nouiiflocked: 0x100000,
 Dragprotocolcheck: 0x200000
});

var PUAFOUT = new EnumT('PUAFOUT', {
 Default: 0,
 Islockzonepolicy: 0x1
});

var SZM_FLAGS = new EnumT('SZM_FLAGS', {
 Create: 0,
 Delete: 0x1
});

var URLZONE = new EnumT('URLZONE', {
 Invalid: 0,
 PredefinedMin: 0,
 LocalMachine: 0,
 Intranet: 3,
 Trusted: 4,
 Internet: 5,
 Untrusted: 6,
 PredefinedMax: 999,
 UserMin: 1000,
 UserMax: 10000
});

var URLTEMPLATE = new EnumT('URLTEMPLATE', {
 Custom: 0,
 PredefinedMin: 0x10000,
 Low: 0x10000,
 Medlow: 0x10500,
 Medium: 0x11000,
 Medhigh: 0x11500,
 High: 0x12000,
 PredefinedMax: 0x20000
});

var __MIDL_IInternetZoneManager_0001 = new EnumT('__MIDL_IInternetZoneManager_0001', {
 MaxPath: 260,
 MaxDescription: 200
});

var ZAFLAGS = new EnumT('ZAFLAGS', {
 CustomEdit: 0x1,
 AddSites: 0x2,
 RequireVerification: 0x4,
 IncludeProxyOverride: 0x8,
 IncludeIntranetSites: 0x10,
 NoUi: 0x20,
 SupportsVerification: 0x40,
 UncAsIntranet: 0x80,
 DetectIntranet: 0x100,
 UseLockedZones: 0x10000,
 VerifyTemplateSettings: 0x20000,
 NoCache: 0x40000
});

var URLZONEREG = new EnumT('URLZONEREG', {
 Default: 0,
 Hklm: 1,
 Hkcu: 2
});

var PIDMSI_STATUS_VALUE = new EnumT('PIDMSI_STATUS_VALUE', {
 Normal: 0,
 New: 1,
 Prelim: 2,
 Draft: 3,
 Inprogress: 4,
 Edit: 5,
 Review: 6,
 Proof: 7,
 Final: 8,
 Other: 0x7fff
});

var REGKIND = new EnumT('REGKIND', {
 Default: 0,
 Register: 1,
 None: 2
});

var SC_ACTION_TYPE = new EnumT('SC_ACTION_TYPE', {
 None: 0,
 Restart: 1,
 Reboot: 2,
 RunCommand: 3
});

var SC_STATUS_TYPE = new EnumT('SC_STATUS_TYPE', {
 ProcessInfo: 0
});

var SC_ENUM_TYPE = new EnumT('SC_ENUM_TYPE', {
 ProcessInfo: 0
});


  PEXCEPTION_ROUTINE = new CallbackT('PEXCEPTION_ROUTINE', EXCEPTION_DISPOSITION, [_EXCEPTION_RECORD.Δ, _void.Δ, _CONTEXT.Δ, _void.Δ]),
  PIMAGE_TLS_CALLBACK = new CallbackT('PIMAGE_TLS_CALLBACK', _void, [_void.Δ, ulong, _void.Δ]),
  PRTL_RUN_ONCE_INIT_FN = new CallbackT('PRTL_RUN_ONCE_INIT_FN', ulong, [_RTL_RUN_ONCE.Δ, _void.Δ, _void.Δ.Δ]),
  PRTL_UMS_SCHEDULER_ENTRY_POINT = new CallbackT('PRTL_UMS_SCHEDULER_ENTRY_POINT', _void, [RTL_UMS_SCHEDULER_REASON, ulong, _void.Δ]),
  PAPCFUNC = new CallbackT('PAPCFUNC', _void, [ulong]),
  PVECTORED_EXCEPTION_HANDLER = new CallbackT('PVECTORED_EXCEPTION_HANDLER', long, [_EXCEPTION_POINTERS.Δ]),
  WAITORTIMERCALLBACKFUNC = new CallbackT('WAITORTIMERCALLBACKFUNC', _void, [_void.Δ, uchar]),
  WORKERCALLBACKFUNC = new CallbackT('WORKERCALLBACKFUNC', _void, [_void.Δ]),
  APC_CALLBACK_FUNCTION = new CallbackT('APC_CALLBACK_FUNCTION', _void, [ulong, _void.Δ, _void.Δ]),
  PFLS_CALLBACK_FUNCTION = new CallbackT('PFLS_CALLBACK_FUNCTION', _void, [_void.Δ]),
  PSECURE_MEMORY_CACHE_CALLBACK = new CallbackT('PSECURE_MEMORY_CACHE_CALLBACK', uchar, [_void.Δ, ulong]),
  PTP_SIMPLE_CALLBACK = new CallbackT('PTP_SIMPLE_CALLBACK', _void, [_TP_CALLBACK_INSTANCE.Δ, _void.Δ]),
  PTP_CLEANUP_GROUP_CANCEL_CALLBACK = new CallbackT('PTP_CLEANUP_GROUP_CANCEL_CALLBACK', _void, [_void.Δ, _void.Δ]),
  PTP_WORK_CALLBACK = new CallbackT('PTP_WORK_CALLBACK', _void, [_TP_CALLBACK_INSTANCE.Δ, _void.Δ, _TP_WORK.Δ]),
  PTP_TIMER_CALLBACK = new CallbackT('PTP_TIMER_CALLBACK', _void, [_TP_CALLBACK_INSTANCE.Δ, _void.Δ, _TP_TIMER.Δ]),
  PTP_WAIT_CALLBACK = new CallbackT('PTP_WAIT_CALLBACK', _void, [_TP_CALLBACK_INSTANCE.Δ, _void.Δ, _TP_WAIT.Δ, ulong]),
  PTHREAD_START_ROUTINE = new CallbackT('PTHREAD_START_ROUTINE', ulong, [_void.Δ]),
  LPTHREAD_START_ROUTINE = new CallbackT('LPTHREAD_START_ROUTINE', ulong, [_void.Δ]),
  PFIBER_START_ROUTINE = new CallbackT('PFIBER_START_ROUTINE', _void, [_void.Δ]),
  LPFIBER_START_ROUTINE = new CallbackT('LPFIBER_START_ROUTINE', _void, [_void.Δ]),
  PINIT_ONCE_FN = new CallbackT('PINIT_ONCE_FN', int, [_RTL_RUN_ONCE.Δ, _void.Δ, _void.Δ.Δ]),
  PTOP_LEVEL_EXCEPTION_FILTER = new CallbackT('PTOP_LEVEL_EXCEPTION_FILTER', long, [_EXCEPTION_POINTERS.Δ]),
  LPTOP_LEVEL_EXCEPTION_FILTER = new CallbackT('LPTOP_LEVEL_EXCEPTION_FILTER', long, [_EXCEPTION_POINTERS.Δ]),
  PUMS_SCHEDULER_ENTRY_POINT = new CallbackT('PUMS_SCHEDULER_ENTRY_POINT', _void, [UMS_SCHEDULER_REASON, ulong, _void.Δ]),
  PFE_EXPORT_FUNC = new CallbackT('PFE_EXPORT_FUNC', ulong, [uchar.Δ, _void.Δ, ulong]),
  PFE_IMPORT_FUNC = new CallbackT('PFE_IMPORT_FUNC', ulong, [uchar.Δ, _void.Δ, ulong.Δ]),
  LPOVERLAPPED_COMPLETION_ROUTINE = new CallbackT('LPOVERLAPPED_COMPLETION_ROUTINE', _void, [ulong, ulong, _OVERLAPPED.Δ]),
  PTIMERAPCROUTINE = new CallbackT('PTIMERAPCROUTINE', _void, [_void.Δ, ulong, ulong]),
  PGET_MODULE_HANDLE_EXA = new CallbackT('PGET_MODULE_HANDLE_EXA', int, [ulong, char.Δ, HINSTANCE__.Δ.Δ]),
  PGET_MODULE_HANDLE_EXW = new CallbackT('PGET_MODULE_HANDLE_EXW', int, [ulong, ushort.Δ, HINSTANCE__.Δ.Δ]),
  ENUMRESTYPEPROCA = new CallbackT('ENUMRESTYPEPROCA', int, [HINSTANCE__.Δ, char.Δ, long]),
  ENUMRESTYPEPROCW = new CallbackT('ENUMRESTYPEPROCW', int, [HINSTANCE__.Δ, ushort.Δ, long]),
  ENUMRESNAMEPROCA = new CallbackT('ENUMRESNAMEPROCA', int, [HINSTANCE__.Δ, char.Δ, char.Δ, long]),
  ENUMRESNAMEPROCW = new CallbackT('ENUMRESNAMEPROCW', int, [HINSTANCE__.Δ, ushort.Δ, ushort.Δ, long]),
  ENUMRESLANGPROCA = new CallbackT('ENUMRESLANGPROCA', int, [HINSTANCE__.Δ, char.Δ, char.Δ, ushort, long]),
  ENUMRESLANGPROCW = new CallbackT('ENUMRESLANGPROCW', int, [HINSTANCE__.Δ, ushort.Δ, ushort.Δ, ushort, long]),
  PGET_SYSTEM_WOW64_DIRECTORY_A = new CallbackT('PGET_SYSTEM_WOW64_DIRECTORY_A', uint, [char.Δ, uint]),
  PGET_SYSTEM_WOW64_DIRECTORY_W = new CallbackT('PGET_SYSTEM_WOW64_DIRECTORY_W', uint, [ushort.Δ, uint]),
  LPPROGRESS_ROUTINE = new CallbackT('LPPROGRESS_ROUTINE', ulong, [_LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, ulong, ulong, _void.Δ, _void.Δ, _void.Δ]),
  WAITORTIMERCALLBACK = new CallbackT('WAITORTIMERCALLBACK', _void, [_void.Δ, uchar]),
  PTP_WIN32_IO_CALLBACK = new CallbackT('PTP_WIN32_IO_CALLBACK', _void, [_TP_CALLBACK_INSTANCE.Δ, _void.Δ, _void.Δ, ulong, ulong, _TP_IO.Δ]),
  PQUERYACTCTXW_FUNC = new CallbackT('PQUERYACTCTXW_FUNC', int, [ulong, _void.Δ, _void.Δ, ulong, _void.Δ, ulong, ulong.Δ]),
  APPLICATION_RECOVERY_CALLBACK = new CallbackT('APPLICATION_RECOVERY_CALLBACK', ulong, [_void.Δ]),
  OLDFONTENUMPROCA = new CallbackT('OLDFONTENUMPROCA', int, [tagLOGFONTA.Δ, tagTEXTMETRICA.Δ, ulong, long]),
  OLDFONTENUMPROCW = new CallbackT('OLDFONTENUMPROCW', int, [tagLOGFONTW.Δ, tagTEXTMETRICW.Δ, ulong, long]),
  FONTENUMPROCA = new CallbackT('FONTENUMPROCA', int, [tagLOGFONTA.Δ, tagTEXTMETRICA.Δ, ulong, long]),
  FONTENUMPROCW = new CallbackT('FONTENUMPROCW', int, [tagLOGFONTW.Δ, tagTEXTMETRICW.Δ, ulong, long]),
  FONTENUMPROC = new CallbackT('FONTENUMPROC', int, [tagLOGFONTA.Δ, tagTEXTMETRICA.Δ, ulong, long]),
  GOBJENUMPROC = new CallbackT('GOBJENUMPROC', int, [_void.Δ, long]),
  LINEDDAPROC = new CallbackT('LINEDDAPROC', _void, [int, int, long]),
  LPFNDEVMODE = new CallbackT('LPFNDEVMODE', uint, [HWND__.Δ, HINSTANCE__.Δ, _devicemodeA.Δ, char.Δ, char.Δ, _devicemodeA.Δ, char.Δ, uint]),
  LPFNDEVCAPS = new CallbackT('LPFNDEVCAPS', ulong, [char.Δ, char.Δ, uint, char.Δ, _devicemodeA.Δ]),
  MFENUMPROC = new CallbackT('MFENUMPROC', int, [HDC__.Δ, tagHANDLETABLE.Δ, tagMETARECORD.Δ, int, long]),
  ENHMFENUMPROC = new CallbackT('ENHMFENUMPROC', int, [HDC__.Δ, tagHANDLETABLE.Δ, tagENHMETARECORD.Δ, int, long]),
  ABORTPROC = new CallbackT('ABORTPROC', int, [HDC__.Δ, int]),
  ICMENUMPROCA = new CallbackT('ICMENUMPROCA', int, [char.Δ, long]),
  ICMENUMPROCW = new CallbackT('ICMENUMPROCW', int, [ushort.Δ, long]),
  WNDPROC = new CallbackT('WNDPROC', long, [HWND__.Δ, uint, uint, long]),
  DLGPROC = new CallbackT('DLGPROC', int, [HWND__.Δ, uint, uint, long]),
  TIMERPROC = new CallbackT('TIMERPROC', _void, [HWND__.Δ, uint, uint, ulong]),
  GRAYSTRINGPROC = new CallbackT('GRAYSTRINGPROC', int, [HDC__.Δ, long, int]),
  WNDENUMPROC = new CallbackT('WNDENUMPROC', int, [HWND__.Δ, long]),
  HOOKPROC = new CallbackT('HOOKPROC', long, [int, uint, long]),
  SENDASYNCPROC = new CallbackT('SENDASYNCPROC', _void, [HWND__.Δ, uint, ulong, long]),
  PROPENUMPROCA = new CallbackT('PROPENUMPROCA', int, [HWND__.Δ, char.Δ, _void.Δ]),
  PROPENUMPROCW = new CallbackT('PROPENUMPROCW', int, [HWND__.Δ, ushort.Δ, _void.Δ]),
  PROPENUMPROCEXA = new CallbackT('PROPENUMPROCEXA', int, [HWND__.Δ, char.Δ, _void.Δ, ulong]),
  PROPENUMPROCEXW = new CallbackT('PROPENUMPROCEXW', int, [HWND__.Δ, ushort.Δ, _void.Δ, ulong]),
  EDITWORDBREAKPROCA = new CallbackT('EDITWORDBREAKPROCA', int, [char.Δ, int, int, int]),
  EDITWORDBREAKPROCW = new CallbackT('EDITWORDBREAKPROCW', int, [ushort.Δ, int, int, int]),
  DRAWSTATEPROC = new CallbackT('DRAWSTATEPROC', int, [HDC__.Δ, long, uint, int, int]),
  PROPENUMPROC = new CallbackT('PROPENUMPROC', int, [HWND__.Δ, char.Δ, _void.Δ]),
  PROPENUMPROCEX = new CallbackT('PROPENUMPROCEX', int, [HWND__.Δ, char.Δ, _void.Δ, ulong]),
  EDITWORDBREAKPROC = new CallbackT('EDITWORDBREAKPROC', int, [char.Δ, int, int, int]),
  NAMEENUMPROCA = new CallbackT('NAMEENUMPROCA', int, [char.Δ, long]),
  NAMEENUMPROCW = new CallbackT('NAMEENUMPROCW', int, [ushort.Δ, long]),
  WINSTAENUMPROCA = new CallbackT('WINSTAENUMPROCA', int, [char.Δ, long]),
  DESKTOPENUMPROCA = new CallbackT('DESKTOPENUMPROCA', int, [char.Δ, long]),
  WINSTAENUMPROCW = new CallbackT('WINSTAENUMPROCW', int, [ushort.Δ, long]),
  DESKTOPENUMPROCW = new CallbackT('DESKTOPENUMPROCW', int, [ushort.Δ, long]),
  WINSTAENUMPROC = new CallbackT('WINSTAENUMPROC', int, [char.Δ, long]),
  DESKTOPENUMPROC = new CallbackT('DESKTOPENUMPROC', int, [char.Δ, long]),
  PREGISTERCLASSNAMEW = new CallbackT('PREGISTERCLASSNAMEW', uchar, [ushort.Δ]),
  MSGBOXCALLBACK = new CallbackT('MSGBOXCALLBACK', _void, [tagHELPINFO.Δ]),
  MONITORENUMPROC = new CallbackT('MONITORENUMPROC', int, [HMONITOR__.Δ, HDC__.Δ, tagRECT.Δ, long]),
  WINEVENTPROC = new CallbackT('WINEVENTPROC', _void, [HWINEVENTHOOK__.Δ, ulong, HWND__.Δ, long, long, ulong, ulong]),
  LANGUAGEGROUP_ENUMPROCA = new CallbackT('LANGUAGEGROUP_ENUMPROCA', int, [ulong, char.Δ, char.Δ, ulong, long]),
  LANGGROUPLOCALE_ENUMPROCA = new CallbackT('LANGGROUPLOCALE_ENUMPROCA', int, [ulong, ulong, char.Δ, long]),
  UILANGUAGE_ENUMPROCA = new CallbackT('UILANGUAGE_ENUMPROCA', int, [char.Δ, long]),
  LOCALE_ENUMPROCA = new CallbackT('LOCALE_ENUMPROCA', int, [char.Δ]),
  CODEPAGE_ENUMPROCA = new CallbackT('CODEPAGE_ENUMPROCA', int, [char.Δ]),
  DATEFMT_ENUMPROCA = new CallbackT('DATEFMT_ENUMPROCA', int, [char.Δ]),
  DATEFMT_ENUMPROCEXA = new CallbackT('DATEFMT_ENUMPROCEXA', int, [char.Δ, ulong]),
  TIMEFMT_ENUMPROCA = new CallbackT('TIMEFMT_ENUMPROCA', int, [char.Δ]),
  CALINFO_ENUMPROCA = new CallbackT('CALINFO_ENUMPROCA', int, [char.Δ]),
  CALINFO_ENUMPROCEXA = new CallbackT('CALINFO_ENUMPROCEXA', int, [char.Δ, ulong]),
  LANGUAGEGROUP_ENUMPROCW = new CallbackT('LANGUAGEGROUP_ENUMPROCW', int, [ulong, ushort.Δ, ushort.Δ, ulong, long]),
  LANGGROUPLOCALE_ENUMPROCW = new CallbackT('LANGGROUPLOCALE_ENUMPROCW', int, [ulong, ulong, ushort.Δ, long]),
  UILANGUAGE_ENUMPROCW = new CallbackT('UILANGUAGE_ENUMPROCW', int, [ushort.Δ, long]),
  LOCALE_ENUMPROCW = new CallbackT('LOCALE_ENUMPROCW', int, [ushort.Δ]),
  CODEPAGE_ENUMPROCW = new CallbackT('CODEPAGE_ENUMPROCW', int, [ushort.Δ]),
  DATEFMT_ENUMPROCW = new CallbackT('DATEFMT_ENUMPROCW', int, [ushort.Δ]),
  DATEFMT_ENUMPROCEXW = new CallbackT('DATEFMT_ENUMPROCEXW', int, [ushort.Δ, ulong]),
  TIMEFMT_ENUMPROCW = new CallbackT('TIMEFMT_ENUMPROCW', int, [ushort.Δ]),
  CALINFO_ENUMPROCW = new CallbackT('CALINFO_ENUMPROCW', int, [ushort.Δ]),
  CALINFO_ENUMPROCEXW = new CallbackT('CALINFO_ENUMPROCEXW', int, [ushort.Δ, ulong]),
  GEO_ENUMPROC = new CallbackT('GEO_ENUMPROC', int, [long]),
  CALINFO_ENUMPROCEXEX = new CallbackT('CALINFO_ENUMPROCEXEX', int, [ushort.Δ, ulong, ushort.Δ, long]),
  DATEFMT_ENUMPROCEXEX = new CallbackT('DATEFMT_ENUMPROCEXEX', int, [ushort.Δ, ulong, long]),
  TIMEFMT_ENUMPROCEX = new CallbackT('TIMEFMT_ENUMPROCEX', int, [ushort.Δ, long]),
  LOCALE_ENUMPROCEX = new CallbackT('LOCALE_ENUMPROCEX', int, [ushort.Δ, ulong, long]),
  PHANDLER_ROUTINE = new CallbackT('PHANDLER_ROUTINE', int, [ulong]),
  PQUERYHANDLER = new CallbackT('PQUERYHANDLER', ulong, [_void.Δ, val_context.Δ, ulong, _void.Δ, ulong.Δ, ulong]),
  PFNCALLBACK = new CallbackT('PFNCALLBACK', HDDEDATA__.Δ, [uint, uint, HCONV__.Δ, HSZ__.Δ, HSZ__.Δ, HDDEDATA__.Δ, ulong, ulong]),
  DRIVERPROC = new CallbackT('DRIVERPROC', long, [ulong, HDRVR__.Δ, uint, long, long]),
  LPDRVCALLBACK = new CallbackT('LPDRVCALLBACK', _void, [HDRVR__.Δ, uint, ulong, ulong, ulong]),
  PDRVCALLBACK = new CallbackT('PDRVCALLBACK', _void, [HDRVR__.Δ, uint, ulong, ulong, ulong]),
  LPWAVECALLBACK = new CallbackT('LPWAVECALLBACK', _void, [HDRVR__.Δ, uint, ulong, ulong, ulong]),
  LPMIDICALLBACK = new CallbackT('LPMIDICALLBACK', _void, [HDRVR__.Δ, uint, ulong, ulong, ulong]),
  LPTIMECALLBACK = new CallbackT('LPTIMECALLBACK', _void, [uint, uint, ulong, ulong, ulong]),
  LPMMIOPROC = new CallbackT('LPMMIOPROC', long, [char.Δ, uint, long, long]),
  YIELDPROC = new CallbackT('YIELDPROC', uint, [uint, ulong]),
  RPC_NEW_HTTP_PROXY_CHANNEL = new CallbackT('RPC_NEW_HTTP_PROXY_CHANNEL', long, [RPC_HTTP_REDIRECTOR_STAGE, ushort.Δ, ushort.Δ, ushort.Δ, ushort.Δ, _void.Δ, _void.Δ, _void.Δ, _void.Δ, ulong, ushort.Δ.Δ, ushort.Δ.Δ]),
  RPC_HTTP_PROXY_FREE_STRING = new CallbackT('RPC_HTTP_PROXY_FREE_STRING', _void, [ushort.Δ]),
  RPC_AUTH_KEY_RETRIEVAL_FN = new CallbackT('RPC_AUTH_KEY_RETRIEVAL_FN', _void, [_void.Δ, ushort.Δ, ulong, _void.Δ.Δ, long.Δ]),
  RPC_MGMT_AUTHORIZATION_FN = new CallbackT('RPC_MGMT_AUTHORIZATION_FN', int, [_void.Δ, ulong, long.Δ]),
  RPC_DISPATCH_FUNCTION = new CallbackT('RPC_DISPATCH_FUNCTION', _void, [_RPC_MESSAGE.Δ]),
  PRPC_RUNDOWN = new CallbackT('PRPC_RUNDOWN', _void, [_void.Δ]),
  RPCLT_PDU_FILTER_FUNC = new CallbackT('RPCLT_PDU_FILTER_FUNC', _void, [_void.Δ, uint, int]),
  RPC_SETFILTER_FUNC = new CallbackT('RPC_SETFILTER_FUNC', _void, [new CallbackT(_void, [_void.Δ, uint, int]).Δ]),
  RPC_BLOCKING_FN = new CallbackT('RPC_BLOCKING_FN', long, [_void.Δ, _void.Δ, _void.Δ]),
  I_RpcProxyIsValidMachineFn = new CallbackT('I_RpcProxyIsValidMachineFn', long, [ushort.Δ, ushort.Δ, ulong]),
  I_RpcProxyGetClientAddressFn = new CallbackT('I_RpcProxyGetClientAddressFn', long, [_void.Δ, char.Δ, ulong.Δ]),
  I_RpcProxyGetConnectionTimeoutFn = new CallbackT('I_RpcProxyGetConnectionTimeoutFn', long, [ulong.Δ]),
  I_RpcPerformCalloutFn = new CallbackT('I_RpcPerformCalloutFn', long, [_void.Δ, _RDR_CALLOUT_STATE.Δ, RPC_HTTP_REDIRECTOR_STAGE]),
  I_RpcFreeCalloutStateFn = new CallbackT('I_RpcFreeCalloutStateFn', _void, [_RDR_CALLOUT_STATE.Δ]),
  I_RpcProxyGetClientSessionAndResourceUUID = new CallbackT('I_RpcProxyGetClientSessionAndResourceUUID', long, [_void.Δ, int.Δ, _GUID.Δ, int.Δ, _GUID.Δ]),
  I_RpcProxyFilterIfFn = new CallbackT('I_RpcProxyFilterIfFn', long, [_void.Δ, _GUID.Δ, ushort, int.Δ]),
  I_RpcProxyUpdatePerfCounterFn = new CallbackT('I_RpcProxyUpdatePerfCounterFn', _void, [RpcPerfCounters, int, ulong]),
  I_RpcProxyUpdatePerfCounterBackendServerFn = new CallbackT('I_RpcProxyUpdatePerfCounterBackendServerFn', _void, [ushort.Δ, int]),
  PFN_RPCNOTIFICATION_ROUTINE = new CallbackT('PFN_RPCNOTIFICATION_ROUTINE', _void, [_RPC_ASYNC_STATE.Δ, _void.Δ, RPC_ASYNC_EVENT]),
  PFNCANSHAREFOLDERW = new CallbackT('PFNCANSHAREFOLDERW', long, [ushort.Δ]),
  PFNSHOWSHAREFOLDERUIW = new CallbackT('PFNSHOWSHAREFOLDERUIW', long, [HWND__.Δ, ushort.Δ]),
  PCRYPT_DECRYPT_PRIVATE_KEY_FUNC = new CallbackT('PCRYPT_DECRYPT_PRIVATE_KEY_FUNC', int, [CRYPT_ALGORITHM_IDENTIFIER, CRYPT_ATTR_BLOB, uchar.Δ, ulong.Δ, _void.Δ]),
  PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC = new CallbackT('PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC', int, [_CRYPT_ALGORITHM_IDENTIFIER.Δ, _CRYPTOAPI_BLOB.Δ, uchar.Δ, ulong.Δ, _void.Δ]),
  PCRYPT_RESOLVE_HCRYPTPROV_FUNC = new CallbackT('PCRYPT_RESOLVE_HCRYPTPROV_FUNC', int, [_CRYPT_PRIVATE_KEY_INFO.Δ, ulong.Δ, _void.Δ]),
  PFN_CRYPT_ALLOC = new CallbackT('PFN_CRYPT_ALLOC', _void.Δ, [uint]),
  PFN_CRYPT_FREE = new CallbackT('PFN_CRYPT_FREE', _void, [_void.Δ]),
  PFN_CRYPT_ENUM_OID_FUNC = new CallbackT('PFN_CRYPT_ENUM_OID_FUNC', int, [ulong, char.Δ, char.Δ, ulong, ulong.Δ, ushort.Δ.Δ, uchar.Δ.Δ, ulong.Δ, _void.Δ]),
  PFN_CRYPT_ENUM_OID_INFO = new CallbackT('PFN_CRYPT_ENUM_OID_INFO', int, [_CRYPT_OID_INFO.Δ, _void.Δ]),
  PFN_CMSG_STREAM_OUTPUT = new CallbackT('PFN_CMSG_STREAM_OUTPUT', int, [_void.Δ, uchar.Δ, ulong, int]),
  PFN_CMSG_ALLOC = new CallbackT('PFN_CMSG_ALLOC', _void.Δ, [uint]),
  PFN_CMSG_FREE = new CallbackT('PFN_CMSG_FREE', _void, [_void.Δ]),
  PFN_CMSG_GEN_ENCRYPT_KEY = new CallbackT('PFN_CMSG_GEN_ENCRYPT_KEY', int, [ulong.Δ, _CRYPT_ALGORITHM_IDENTIFIER.Δ, _void.Δ, _CERT_PUBLIC_KEY_INFO.Δ, new CallbackT(_void.Δ, [uint]).Δ, ulong.Δ, uchar.Δ.Δ, ulong.Δ]),
  PFN_CMSG_EXPORT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_EXPORT_ENCRYPT_KEY', int, [ulong, ulong, _CERT_PUBLIC_KEY_INFO.Δ, uchar.Δ, ulong.Δ]),
  PFN_CMSG_IMPORT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_IMPORT_ENCRYPT_KEY', int, [ulong, ulong, _CRYPT_ALGORITHM_IDENTIFIER.Δ, _CRYPT_ALGORITHM_IDENTIFIER.Δ, uchar.Δ, ulong, ulong.Δ]),
  PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY', int, [_CMSG_CONTENT_ENCRYPT_INFO.Δ, ulong, _void.Δ]),
  PFN_CMSG_EXPORT_KEY_TRANS = new CallbackT('PFN_CMSG_EXPORT_KEY_TRANS', int, [_CMSG_CONTENT_ENCRYPT_INFO.Δ, _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO.Δ, _CMSG_KEY_TRANS_ENCRYPT_INFO.Δ, ulong, _void.Δ]),
  PFN_CMSG_EXPORT_KEY_AGREE = new CallbackT('PFN_CMSG_EXPORT_KEY_AGREE', int, [_CMSG_CONTENT_ENCRYPT_INFO.Δ, _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO.Δ, _CMSG_KEY_AGREE_ENCRYPT_INFO.Δ, ulong, _void.Δ]),
  PFN_CMSG_EXPORT_MAIL_LIST = new CallbackT('PFN_CMSG_EXPORT_MAIL_LIST', int, [_CMSG_CONTENT_ENCRYPT_INFO.Δ, _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO.Δ, _CMSG_MAIL_LIST_ENCRYPT_INFO.Δ, ulong, _void.Δ]),
  PFN_CMSG_IMPORT_KEY_TRANS = new CallbackT('PFN_CMSG_IMPORT_KEY_TRANS', int, [_CRYPT_ALGORITHM_IDENTIFIER.Δ, _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.Δ, ulong, _void.Δ, ulong.Δ]),
  PFN_CMSG_IMPORT_KEY_AGREE = new CallbackT('PFN_CMSG_IMPORT_KEY_AGREE', int, [_CRYPT_ALGORITHM_IDENTIFIER.Δ, _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.Δ, ulong, _void.Δ, ulong.Δ]),
  PFN_CMSG_IMPORT_MAIL_LIST = new CallbackT('PFN_CMSG_IMPORT_MAIL_LIST', int, [_CRYPT_ALGORITHM_IDENTIFIER.Δ, _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA.Δ, ulong, _void.Δ, ulong.Δ]),
  PFN_CMSG_CNG_IMPORT_KEY_TRANS = new CallbackT('PFN_CMSG_CNG_IMPORT_KEY_TRANS', int, [_CMSG_CNG_CONTENT_DECRYPT_INFO.Δ, _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA.Δ, ulong, _void.Δ]),
  PFN_CMSG_CNG_IMPORT_KEY_AGREE = new CallbackT('PFN_CMSG_CNG_IMPORT_KEY_AGREE', int, [_CMSG_CNG_CONTENT_DECRYPT_INFO.Δ, _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA.Δ, ulong, _void.Δ]),
  PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY = new CallbackT('PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY', int, [_CMSG_CNG_CONTENT_DECRYPT_INFO.Δ, ulong, _void.Δ]),
  PFN_CERT_DLL_OPEN_STORE_PROV_FUNC = new CallbackT('PFN_CERT_DLL_OPEN_STORE_PROV_FUNC', int, [char.Δ, ulong, ulong, ulong, _void.Δ, _void.Δ, _CERT_STORE_PROV_INFO.Δ]),
  PFN_CERT_STORE_PROV_CLOSE = new CallbackT('PFN_CERT_STORE_PROV_CLOSE', _void, [_void.Δ, ulong]),
  PFN_CERT_STORE_PROV_READ_CERT = new CallbackT('PFN_CERT_STORE_PROV_READ_CERT', int, [_void.Δ, _CERT_CONTEXT.Δ, ulong, _CERT_CONTEXT.Δ.Δ]),
  PFN_CERT_STORE_PROV_WRITE_CERT = new CallbackT('PFN_CERT_STORE_PROV_WRITE_CERT', int, [_void.Δ, _CERT_CONTEXT.Δ, ulong]),
  PFN_CERT_STORE_PROV_DELETE_CERT = new CallbackT('PFN_CERT_STORE_PROV_DELETE_CERT', int, [_void.Δ, _CERT_CONTEXT.Δ, ulong]),
  PFN_CERT_STORE_PROV_SET_CERT_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_SET_CERT_PROPERTY', int, [_void.Δ, _CERT_CONTEXT.Δ, ulong, ulong, _void.Δ]),
  PFN_CERT_STORE_PROV_READ_CRL = new CallbackT('PFN_CERT_STORE_PROV_READ_CRL', int, [_void.Δ, _CRL_CONTEXT.Δ, ulong, _CRL_CONTEXT.Δ.Δ]),
  PFN_CERT_STORE_PROV_WRITE_CRL = new CallbackT('PFN_CERT_STORE_PROV_WRITE_CRL', int, [_void.Δ, _CRL_CONTEXT.Δ, ulong]),
  PFN_CERT_STORE_PROV_DELETE_CRL = new CallbackT('PFN_CERT_STORE_PROV_DELETE_CRL', int, [_void.Δ, _CRL_CONTEXT.Δ, ulong]),
  PFN_CERT_STORE_PROV_SET_CRL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_SET_CRL_PROPERTY', int, [_void.Δ, _CRL_CONTEXT.Δ, ulong, ulong, _void.Δ]),
  PFN_CERT_STORE_PROV_READ_CTL = new CallbackT('PFN_CERT_STORE_PROV_READ_CTL', int, [_void.Δ, _CTL_CONTEXT.Δ, ulong, _CTL_CONTEXT.Δ.Δ]),
  PFN_CERT_STORE_PROV_WRITE_CTL = new CallbackT('PFN_CERT_STORE_PROV_WRITE_CTL', int, [_void.Δ, _CTL_CONTEXT.Δ, ulong]),
  PFN_CERT_STORE_PROV_DELETE_CTL = new CallbackT('PFN_CERT_STORE_PROV_DELETE_CTL', int, [_void.Δ, _CTL_CONTEXT.Δ, ulong]),
  PFN_CERT_STORE_PROV_SET_CTL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_SET_CTL_PROPERTY', int, [_void.Δ, _CTL_CONTEXT.Δ, ulong, ulong, _void.Δ]),
  PFN_CERT_STORE_PROV_CONTROL = new CallbackT('PFN_CERT_STORE_PROV_CONTROL', int, [_void.Δ, ulong, ulong, _void.Δ]),
  PFN_CERT_STORE_PROV_FIND_CERT = new CallbackT('PFN_CERT_STORE_PROV_FIND_CERT', int, [_void.Δ, _CERT_STORE_PROV_FIND_INFO.Δ, _CERT_CONTEXT.Δ, ulong, _void.Δ.Δ, _CERT_CONTEXT.Δ.Δ]),
  PFN_CERT_STORE_PROV_FREE_FIND_CERT = new CallbackT('PFN_CERT_STORE_PROV_FREE_FIND_CERT', int, [_void.Δ, _CERT_CONTEXT.Δ, _void.Δ, ulong]),
  PFN_CERT_STORE_PROV_GET_CERT_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_GET_CERT_PROPERTY', int, [_void.Δ, _CERT_CONTEXT.Δ, ulong, ulong, _void.Δ, ulong.Δ]),
  PFN_CERT_STORE_PROV_FIND_CRL = new CallbackT('PFN_CERT_STORE_PROV_FIND_CRL', int, [_void.Δ, _CERT_STORE_PROV_FIND_INFO.Δ, _CRL_CONTEXT.Δ, ulong, _void.Δ.Δ, _CRL_CONTEXT.Δ.Δ]),
  PFN_CERT_STORE_PROV_FREE_FIND_CRL = new CallbackT('PFN_CERT_STORE_PROV_FREE_FIND_CRL', int, [_void.Δ, _CRL_CONTEXT.Δ, _void.Δ, ulong]),
  PFN_CERT_STORE_PROV_GET_CRL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_GET_CRL_PROPERTY', int, [_void.Δ, _CRL_CONTEXT.Δ, ulong, ulong, _void.Δ, ulong.Δ]),
  PFN_CERT_STORE_PROV_FIND_CTL = new CallbackT('PFN_CERT_STORE_PROV_FIND_CTL', int, [_void.Δ, _CERT_STORE_PROV_FIND_INFO.Δ, _CTL_CONTEXT.Δ, ulong, _void.Δ.Δ, _CTL_CONTEXT.Δ.Δ]),
  PFN_CERT_STORE_PROV_FREE_FIND_CTL = new CallbackT('PFN_CERT_STORE_PROV_FREE_FIND_CTL', int, [_void.Δ, _CTL_CONTEXT.Δ, _void.Δ, ulong]),
  PFN_CERT_STORE_PROV_GET_CTL_PROPERTY = new CallbackT('PFN_CERT_STORE_PROV_GET_CTL_PROPERTY', int, [_void.Δ, _CTL_CONTEXT.Δ, ulong, ulong, _void.Δ, ulong.Δ]),
  PFN_CERT_CREATE_CONTEXT_SORT_FUNC = new CallbackT('PFN_CERT_CREATE_CONTEXT_SORT_FUNC', int, [ulong, ulong, ulong, _void.Δ]),
  PFN_CERT_ENUM_SYSTEM_STORE_LOCATION = new CallbackT('PFN_CERT_ENUM_SYSTEM_STORE_LOCATION', int, [ushort.Δ, ulong, _void.Δ, _void.Δ]),
  PFN_CERT_ENUM_SYSTEM_STORE = new CallbackT('PFN_CERT_ENUM_SYSTEM_STORE', int, [_void.Δ, ulong, _CERT_SYSTEM_STORE_INFO.Δ, _void.Δ, _void.Δ]),
  PFN_CERT_ENUM_PHYSICAL_STORE = new CallbackT('PFN_CERT_ENUM_PHYSICAL_STORE', int, [_void.Δ, ulong, ushort.Δ, _CERT_PHYSICAL_STORE_INFO.Δ, _void.Δ, _void.Δ]),
  PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC = new CallbackT('PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC', int, [ulong, _CRYPT_ALGORITHM_IDENTIFIER.Δ, _void.Δ.Δ, ushort.Δ.Δ]),
  PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC = new CallbackT('PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC', int, [ulong, ulong, _CRYPT_ALGORITHM_IDENTIFIER.Δ, _void.Δ, ushort.Δ, ushort.Δ, uchar.Δ, ulong, uchar.Δ, ulong.Δ]),
  PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC = new CallbackT('PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC', int, [ulong, _CERT_PUBLIC_KEY_INFO.Δ, _CRYPT_ALGORITHM_IDENTIFIER.Δ, _void.Δ, ushort.Δ, ushort.Δ, uchar.Δ, ulong, uchar.Δ, ulong]),
  PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC = new CallbackT('PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC', int, [ulong, ulong, char.Δ, ulong, _void.Δ, _CERT_PUBLIC_KEY_INFO.Δ, ulong.Δ]),
  PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC = new CallbackT('PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC', int, [_void.Δ, ulong, char.Δ, ulong, _void.Δ, _CERT_PUBLIC_KEY_INFO.Δ, ulong.Δ]),
  PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC = new CallbackT('PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC', int, [ulong, _CERT_PUBLIC_KEY_INFO.Δ, ulong, _void.Δ, _void.Δ.Δ]),
  PFN_IMPORT_PRIV_KEY_FUNC = new CallbackT('PFN_IMPORT_PRIV_KEY_FUNC', int, [ulong, _CRYPT_PRIVATE_KEY_INFO.Δ, ulong, _void.Δ]),
  PFN_EXPORT_PRIV_KEY_FUNC = new CallbackT('PFN_EXPORT_PRIV_KEY_FUNC', int, [ulong, ulong, char.Δ, ulong, _void.Δ, _CRYPT_PRIVATE_KEY_INFO.Δ, ulong.Δ]),
  PFN_CRYPT_GET_SIGNER_CERTIFICATE = new CallbackT('PFN_CRYPT_GET_SIGNER_CERTIFICATE', _CERT_CONTEXT.Δ, [_void.Δ, ulong, _CERT_INFO.Δ, _void.Δ]),
  PFN_CRYPT_ASYNC_PARAM_FREE_FUNC = new CallbackT('PFN_CRYPT_ASYNC_PARAM_FREE_FUNC', _void, [char.Δ, _void.Δ]),
  PFN_FREE_ENCODED_OBJECT_FUNC = new CallbackT('PFN_FREE_ENCODED_OBJECT_FUNC', _void, [char.Δ, _CRYPT_BLOB_new ArrayT.Δ, _void.Δ]),
  PFN_CRYPT_CANCEL_RETRIEVAL = new CallbackT('PFN_CRYPT_CANCEL_RETRIEVAL', int, [ulong, _void.Δ]),
  PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC = new CallbackT('PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC', _void, [_void.Δ, ulong, char.Δ, char.Δ, _void.Δ]),
  PFN_CANCEL_ASYNC_RETRIEVAL_FUNC = new CallbackT('PFN_CANCEL_ASYNC_RETRIEVAL_FUNC', int, [_void.Δ]),
  PFN_CRYPT_ENUM_KEYID_PROP = new CallbackT('PFN_CRYPT_ENUM_KEYID_PROP', int, [_CRYPTOAPI_BLOB.Δ, ulong, _void.Δ, _void.Δ, ulong, ulong.Δ, _void.Δ.Δ, ulong.Δ]),
  PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK = new CallbackT('PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK', int, [_CERT_CONTEXT.Δ, _void.Δ]),
  NDR_RUNDOWN = new CallbackT('NDR_RUNDOWN', _void, [_void.Δ]),
  NDR_NOTIFY_ROUTINE = new CallbackT('NDR_NOTIFY_ROUTINE', _void, []),
  NDR_NOTIFY2_ROUTINE = new CallbackT('NDR_NOTIFY2_ROUTINE', _void, [uchar]),
  EXPR_EVAL = new CallbackT('EXPR_EVAL', _void, [_MIDL_STUB_MESSAGE.Δ]),
  GENERIC_BINDING_ROUTINE = new CallbackT('GENERIC_BINDING_ROUTINE', _void.Δ, [_void.Δ]),
  GENERIC_UNBIND_ROUTINE = new CallbackT('GENERIC_UNBIND_ROUTINE', _void, [_void.Δ, uchar.Δ]),
  XMIT_HELPER_ROUTINE = new CallbackT('XMIT_HELPER_ROUTINE', _void, [_MIDL_STUB_MESSAGE.Δ]),
  USER_MARSHAL_SIZING_ROUTINE = new CallbackT('USER_MARSHAL_SIZING_ROUTINE', ulong, [ulong.Δ, ulong, _void.Δ]),
  USER_MARSHAL_MARSHALLING_ROUTINE = new CallbackT('USER_MARSHAL_MARSHALLING_ROUTINE', uchar.Δ, [ulong.Δ, uchar.Δ, _void.Δ]),
  USER_MARSHAL_UNMARSHALLING_ROUTINE = new CallbackT('USER_MARSHAL_UNMARSHALLING_ROUTINE', uchar.Δ, [ulong.Δ, uchar.Δ, _void.Δ]),
  USER_MARSHAL_FREEING_ROUTINE = new CallbackT('USER_MARSHAL_FREEING_ROUTINE', _void, [ulong.Δ, _void.Δ]),
  CS_TYPE_NET_SIZE_ROUTINE = new CallbackT('CS_TYPE_NET_SIZE_ROUTINE', _void, [_void.Δ, ulong, ulong, _IDL_CS_CONVERT.Δ, ulong.Δ, ulong.Δ]),
  CS_TYPE_LOCAL_SIZE_ROUTINE = new CallbackT('CS_TYPE_LOCAL_SIZE_ROUTINE', _void, [_void.Δ, ulong, ulong, _IDL_CS_CONVERT.Δ, ulong.Δ, ulong.Δ]),
  CS_TYPE_TO_NETCS_ROUTINE = new CallbackT('CS_TYPE_TO_NETCS_ROUTINE', _void, [_void.Δ, ulong, _void.Δ, ulong, uchar.Δ, ulong.Δ, ulong.Δ]),
  CS_TYPE_FROM_NETCS_ROUTINE = new CallbackT('CS_TYPE_FROM_NETCS_ROUTINE', _void, [_void.Δ, ulong, uchar.Δ, ulong, ulong, _void.Δ, ulong.Δ, ulong.Δ]),
  CS_TAG_GETTING_ROUTINE = new CallbackT('CS_TAG_GETTING_ROUTINE', _void, [_void.Δ, int, ulong.Δ, ulong.Δ, ulong.Δ, ulong.Δ]),
  STUB_THUNK = new CallbackT('STUB_THUNK', _void, [_MIDL_STUB_MESSAGE.Δ]),
  LPOCNCONNPROCA = new CallbackT('LPOCNCONNPROCA', ulong, [ulong, char.Δ, char.Δ, _void.Δ]),
  LPOCNCONNPROCW = new CallbackT('LPOCNCONNPROCW', ulong, [ulong, ushort.Δ, ushort.Δ, _void.Δ]),
  LPOCNCHKPROC = new CallbackT('LPOCNCHKPROC', int, [ulong, ulong, _void.Δ]),
  LPOCNDSCPROC = new CallbackT('LPOCNDSCPROC', _void, [ulong, ulong, _void.Δ]),
  LPFNPSPCALLBACKA = new CallbackT('LPFNPSPCALLBACKA', uint, [HWND__.Δ, uint, _PROPSHEETPAGEA.Δ]),
  LPFNPSPCALLBACKW = new CallbackT('LPFNPSPCALLBACKW', uint, [HWND__.Δ, uint, _PROPSHEETPAGEW.Δ]),
  PFNPROPSHEETCALLBACK = new CallbackT('PFNPROPSHEETCALLBACK', int, [HWND__.Δ, uint, long]),
  LPFNADDPROPSHEETPAGE = new CallbackT('LPFNADDPROPSHEETPAGE', int, [_PSP.Δ, long]),
  LPFNADDPROPSHEETPAGES = new CallbackT('LPFNADDPROPSHEETPAGES', int, [_void.Δ, new CallbackT(int, [_PSP.Δ, long]).Δ, long]),
  _onexit_t = new CallbackT('_onexit_t', int, []),
  _purecall_handler = new CallbackT('_purecall_handler', _void, []),
  _invalid_parameter_handler = new CallbackT('_invalid_parameter_handler', _void, [ushort.Δ, ushort.Δ, ushort.Δ, uint, uint]),
  LPFNGETCLASSOBJECT = new CallbackT('LPFNGETCLASSOBJECT', long, [_GUID.Δ, _GUID.Δ, _void.Δ.Δ]),
  LPFNCANUNLOADNOW = new CallbackT('LPFNCANUNLOADNOW', long, []),
  LPOFNHOOKPROC = new CallbackT('LPOFNHOOKPROC', uint, [HWND__.Δ, uint, uint, long]),
  LPCCHOOKPROC = new CallbackT('LPCCHOOKPROC', uint, [HWND__.Δ, uint, uint, long]),
  LPFRHOOKPROC = new CallbackT('LPFRHOOKPROC', uint, [HWND__.Δ, uint, uint, long]),
  LPCFHOOKPROC = new CallbackT('LPCFHOOKPROC', uint, [HWND__.Δ, uint, uint, long]),
  LPPRINTHOOKPROC = new CallbackT('LPPRINTHOOKPROC', uint, [HWND__.Δ, uint, uint, long]),
  LPSETUPHOOKPROC = new CallbackT('LPSETUPHOOKPROC', uint, [HWND__.Δ, uint, uint, long]),
  LPPAGEPAINTHOOK = new CallbackT('LPPAGEPAINTHOOK', uint, [HWND__.Δ, uint, uint, long]),
  LPPAGESETUPHOOK = new CallbackT('LPPAGESETUPHOOK', uint, [HWND__.Δ, uint, uint, long]),
  LPSERVICE_MAIN_FUNCTIONW = new CallbackT('LPSERVICE_MAIN_FUNCTIONW', _void, [ulong, ushort.Δ.Δ]),
  LPSERVICE_MAIN_FUNCTIONA = new CallbackT('LPSERVICE_MAIN_FUNCTIONA', _void, [ulong, char.Δ.Δ]),
  LPHANDLER_FUNCTION = new CallbackT('LPHANDLER_FUNCTION', _void, [ulong]),
  LPHANDLER_FUNCTION_EX = new CallbackT('LPHANDLER_FUNCTION_EX', ulong, [ulong, ulong, _void.Δ, _void.Δ]),
  PFN_SC_NOTIFY_CALLBACK = new CallbackT('PFN_SC_NOTIFY_CALLBACK', _void, [_void.Δ]),
  IMCENUMPROC = new CallbackT('IMCENUMPROC', int, [HIMC__.Δ, long]),
  REGISTERWORDENUMPROCA = new CallbackT('REGISTERWORDENUMPROCA', int, [char.Δ, ulong, char.Δ, _void.Δ]),
  REGISTERWORDENUMPROCW = new CallbackT('REGISTERWORDENUMPROCW', int, [ushort.Δ, ulong, ushort.Δ, _void.Δ]),

var threadlocinfo = new StructT('threadlocinfo', {
 refcount: int,
 lc_codepage: uint,
 lc_collate_cp: uint,
 lc_handle: new ArrayT(undefined, 6),
 lc_id: new ArrayT(LC_ID, 6),
 lc_category: new ArrayT(undefined, 6),
 lc_clike: int,
 mb_cur_max: int,
 lconv_intl_refcount: int.Δ,
 lconv_num_refcount: int.Δ,
 lconv_mon_refcount: int.Δ,
 lconv: lconv.Δ,
 ctype1_refcount: int.Δ,
 ctype1: ushort.Δ,
 pctype: ushort.Δ,
 pclmap: uchar.Δ,
 pcumap: uchar.Δ,
 lc_time_curr: __lc_time_data.Δ
});



var _locale_tstruct = new StructT('_locale_tstruct', {
 locinfo: pthreadlocinfo,
 mbcinfo: pthreadmbcinfo
});

var LC_ID = new StructT('LC_ID', {
 wLanguage: ushort,
 wCountry: ushort,
 wCodePage: ushort
});

var undefined = new StructT('undefined', {
 locale: char.Δ,
 wlocale: wchar_t.Δ,
 refcount: int.Δ,
 wrefcount: int.Δ
});


var EXCEPTION_RECORD = new StructT('EXCEPTION_RECORD', {
 ExceptionCode: DWORD,
 ExceptionFlags: DWORD,
 ExceptionRecord: _EXCEPTION_RECORD.Δ,
 ExceptionAddress: PVOID,
 NumberParameters: DWORD,
 ExceptionInformation: new ArrayT(ULONG_PTR, EXCEPTION_MAXIMUM_PARAMETERS)
});

var CONTEXT = new StructT('CONTEXT', {
 ContextFlags: DWORD,
 Dr0: DWORD,
 Dr1: DWORD,
 Dr2: DWORD,
 Dr3: DWORD,
 Dr6: DWORD,
 Dr7: DWORD,
 FloatSave: FLOATING_SAVE_AREA,
 SegGs: DWORD,
 SegFs: DWORD,
 SegEs: DWORD,
 SegDs: DWORD,
 Edi: DWORD,
 Esi: DWORD,
 Ebx: DWORD,
 Edx: DWORD,
 Ecx: DWORD,
 Eax: DWORD,
 Ebp: DWORD,
 Eip: DWORD,
 SegCs: DWORD,
 EFlags: DWORD,
 Esp: DWORD,
 SegSs: DWORD,
 ExtendedRegisters: new ArrayT(BYTE, MAXIMUM_SUPPORTED_EXTENSION)
});

var PROCESSOR_NUMBER = new StructT('PROCESSOR_NUMBER', {
 Group: WORD,
 Number: BYTE,
 Reserved: BYTE
});

var GROUP_AFFINITY = new StructT('GROUP_AFFINITY', {
 Mask: KAFFINITY,
 Group: WORD,
 Reserved: new ArrayT(WORD, 3)
});

var FLOAT128 = new StructT('FLOAT128', {
 LowPart: longlong,
 HighPart: longlong
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: LONG
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: LONG
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: DWORD
});

var undefined = new StructT('undefined', {
 LowPart: DWORD,
 HighPart: DWORD
});

var LUID = new StructT('LUID', {
 LowPart: DWORD,
 HighPart: LONG
});

var LIST_ENTRY = new StructT('LIST_ENTRY', {
 Flink: _LIST_ENTRY.Δ,
 Blink: _LIST_ENTRY.Δ
});

var SLIST_ENTRY32 = new StructT('SLIST_ENTRY32', {
 Next: _SINGLE_LIST_ENTRY.Δ
});

var LIST_ENTRY32 = new StructT('LIST_ENTRY32', {
 Flink: DWORD,
 Blink: DWORD
});

var LIST_ENTRY64 = new StructT('LIST_ENTRY64', {
 Flink: ULONGLONG,
 Blink: ULONGLONG
});

var UUID = new StructT('UUID', {
 Data1: ulong,
 Data2: ushort,
 Data3: ushort,
 Data4: new Array(CHAR, 8)
});

var GUID = new StructT('GUID', {
 Data1: ulong,
 Data2: ushort,
 Data3: ushort,
 Data4: new Array(CHAR, 8)
});


var OBJECTID = new StructT('OBJECTID', {
 Lineage: GUID,
 Uniquifier: DWORD
});

var M128A = new StructT('M128A', {
 Low: ULONGLONG,
 High: LONGLONG
});

var XSAVE_FORMAT = new StructT('XSAVE_FORMAT', {
 ControlWord: WORD,
 StatusWord: WORD,
 TagWord: BYTE,
 Reserved1: BYTE,
 ErrorOpcode: WORD,
 ErrorOffset: DWORD,
 ErrorSelector: WORD,
 Reserved2: WORD,
 DataOffset: DWORD,
 DataSelector: WORD,
 Reserved3: WORD,
 MxCsr: DWORD,
 MxCsr_Mask: DWORD,
 FloatRegisters: new ArrayT(M128A, 8),
 XmmRegisters: new ArrayT(M128A, 8),
 Reserved4: new ArrayT(BYTE, 192),
 StackControl: new ArrayT(DWORD, 7),
 Cr0NpxState: DWORD
});

var XSAVE_AREA_HEADER = new StructT('XSAVE_AREA_HEADER', {
 Mask: DWORD64,
 Reserved: new ArrayT(DWORD64, 7)
});

var XSAVE_AREA = new StructT('XSAVE_AREA', {
 LegacyState: XSAVE_FORMAT,
 Header: XSAVE_AREA_HEADER
});

var XSTATE_CONTEXT = new StructT('XSTATE_CONTEXT', {
 Mask: DWORD64,
 Length: DWORD,
 Reserved1: DWORD,
 Area: PXSAVE_AREA,
 Reserved2: DWORD,
 Buffer: PVOID,
 Reserved3: DWORD
});

var CONTEXT_CHUNK = new StructT('CONTEXT_CHUNK', {
 Offset: LONG,
 Length: DWORD
});

var CONTEXT_EX = new StructT('CONTEXT_EX', {
 All: CONTEXT_CHUNK,
 Legacy: CONTEXT_CHUNK,
 XState: CONTEXT_CHUNK
});

var FLOATING_SAVE_AREA = new StructT('FLOATING_SAVE_AREA', {
 ControlWord: DWORD,
 StatusWord: DWORD,
 TagWord: DWORD,
 ErrorOffset: DWORD,
 ErrorSelector: DWORD,
 DataOffset: DWORD,
 DataSelector: DWORD,
 RegisterArea: new ArrayT(BYTE, SIZE_OF_80387_REGISTERS),
 Cr0NpxState: DWORD
});

var LDT_ENTRY = new StructT('LDT_ENTRY', {
 LimitLow: WORD,
 BaseLow: WORD,
 HighWord: c:winnt.h@127863@S@_LDT_ENTRY@Ua
});

var undefined = new StructT('undefined', {
 BaseMid: BYTE,
 Flags1: BYTE,
 Flags2: BYTE,
 BaseHi: BYTE
});

var undefined = new StructT('undefined', {
 BaseMid: DWORD,
 Type: DWORD,
 Dpl: DWORD,
 Pres: DWORD,
 LimitHi: DWORD,
 Sys: DWORD,
 Reserved_0: DWORD,
 Default_Big: DWORD,
 Granularity: DWORD,
 BaseHi: DWORD
});

var WOW64_FLOATING_SAVE_AREA = new StructT('WOW64_FLOATING_SAVE_AREA', {
 ControlWord: DWORD,
 StatusWord: DWORD,
 TagWord: DWORD,
 ErrorOffset: DWORD,
 ErrorSelector: DWORD,
 DataOffset: DWORD,
 DataSelector: DWORD,
 RegisterArea: new ArrayT(BYTE, WOW64_SIZE_OF_80387_REGISTERS),
 Cr0NpxState: DWORD
});

var WOW64_CONTEXT = new StructT('WOW64_CONTEXT', {
 ContextFlags: DWORD,
 Dr0: DWORD,
 Dr1: DWORD,
 Dr2: DWORD,
 Dr3: DWORD,
 Dr6: DWORD,
 Dr7: DWORD,
 FloatSave: WOW64_FLOATING_SAVE_AREA,
 SegGs: DWORD,
 SegFs: DWORD,
 SegEs: DWORD,
 SegDs: DWORD,
 Edi: DWORD,
 Esi: DWORD,
 Ebx: DWORD,
 Edx: DWORD,
 Ecx: DWORD,
 Eax: DWORD,
 Ebp: DWORD,
 Eip: DWORD,
 SegCs: DWORD,
 EFlags: DWORD,
 Esp: DWORD,
 SegSs: DWORD,
 ExtendedRegisters: new ArrayT(BYTE, WOW64_MAXIMUM_SUPPORTED_EXTENSION)
});

var WOW64_LDT_ENTRY = new StructT('WOW64_LDT_ENTRY', {
 LimitLow: WORD,
 BaseLow: WORD,
 HighWord: c:winnt.h@178995@S@_WOW64_LDT_ENTRY@Ua
});

var undefined = new StructT('undefined', {
 BaseMid: BYTE,
 Flags1: BYTE,
 Flags2: BYTE,
 BaseHi: BYTE
});

var undefined = new StructT('undefined', {
 BaseMid: DWORD,
 Type: DWORD,
 Dpl: DWORD,
 Pres: DWORD,
 LimitHi: DWORD,
 Sys: DWORD,
 Reserved_0: DWORD,
 Default_Big: DWORD,
 Granularity: DWORD,
 BaseHi: DWORD
});

var WOW64_DESCRIPTOR_TABLE_ENTRY = new StructT('WOW64_DESCRIPTOR_TABLE_ENTRY', {
 Selector: DWORD,
 Descriptor: WOW64_LDT_ENTRY
});

var EXCEPTION_RECORD32 = new StructT('EXCEPTION_RECORD32', {
 ExceptionCode: DWORD,
 ExceptionFlags: DWORD,
 ExceptionRecord: DWORD,
 ExceptionAddress: DWORD,
 NumberParameters: DWORD,
 ExceptionInformation: new ArrayT(DWORD, EXCEPTION_MAXIMUM_PARAMETERS)
});

var EXCEPTION_RECORD64 = new StructT('EXCEPTION_RECORD64', {
 ExceptionCode: DWORD,
 ExceptionFlags: DWORD,
 ExceptionRecord: DWORD64,
 ExceptionAddress: DWORD64,
 NumberParameters: DWORD,
 __unusedAlignment: DWORD,
 ExceptionInformation: new ArrayT(DWORD64, EXCEPTION_MAXIMUM_PARAMETERS)
});

var EXCEPTION_POINTERS = new StructT('EXCEPTION_POINTERS', {
 ExceptionRecord: PEXCEPTION_RECORD,
 ContextRecord: PCONTEXT
});

var GENERIC_MAPPING = new StructT('GENERIC_MAPPING', {
 GenericRead: ACCESS_MASK,
 GenericWrite: ACCESS_MASK,
 GenericExecute: ACCESS_MASK,
 GenericAll: ACCESS_MASK
});

var LUID_AND_ATTRIBUTES = new StructT('LUID_AND_ATTRIBUTES', {
 Luid: LUID,
 Attributes: DWORD
});

var SID_IDENTIFIER_AUTHORITY = new StructT('SID_IDENTIFIER_AUTHORITY', {
 Value: new ArrayT(BYTE, 6)
});

var SID = new StructT('SID', {
 Revision: BYTE,
 SubAuthorityCount: BYTE,
 IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
 SubAuthority: new ArrayT(DWORD, ANYSIZE_new ArrayT)
});

var SID_AND_ATTRIBUTES = new StructT('SID_AND_ATTRIBUTES', {
 Sid: PSID,
 Attributes: DWORD
});

var SID_AND_ATTRIBUTES_HASH = new StructT('SID_AND_ATTRIBUTES_HASH', {
 SidCount: DWORD,
 SidAttr: PSID_AND_ATTRIBUTES,
 Hash: new ArrayT(SID_HASH_ENTRY, SID_HASH_SIZE)
});

var ACL = new StructT('ACL', {
 AclRevision: BYTE,
 Sbz1: BYTE,
 AclSize: WORD,
 AceCount: WORD,
 Sbz2: WORD
});

var ACE_HEADER = new StructT('ACE_HEADER', {
 AceType: BYTE,
 AceFlags: BYTE,
 AceSize: WORD
});

var ACCESS_ALLOWED_ACE = new StructT('ACCESS_ALLOWED_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var ACCESS_DENIED_ACE = new StructT('ACCESS_DENIED_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var SYSTEM_AUDIT_ACE = new StructT('SYSTEM_AUDIT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var SYSTEM_ALARM_ACE = new StructT('SYSTEM_ALARM_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var SYSTEM_MANDATORY_LABEL_ACE = new StructT('SYSTEM_MANDATORY_LABEL_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var ACCESS_ALLOWED_OBJECT_ACE = new StructT('ACCESS_ALLOWED_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var ACCESS_DENIED_OBJECT_ACE = new StructT('ACCESS_DENIED_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var SYSTEM_AUDIT_OBJECT_ACE = new StructT('SYSTEM_AUDIT_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var SYSTEM_ALARM_OBJECT_ACE = new StructT('SYSTEM_ALARM_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var ACCESS_ALLOWED_CALLBACK_ACE = new StructT('ACCESS_ALLOWED_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var ACCESS_DENIED_CALLBACK_ACE = new StructT('ACCESS_DENIED_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var SYSTEM_AUDIT_CALLBACK_ACE = new StructT('SYSTEM_AUDIT_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var SYSTEM_ALARM_CALLBACK_ACE = new StructT('SYSTEM_ALARM_CALLBACK_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 SidStart: DWORD
});

var ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = new StructT('ACCESS_ALLOWED_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var ACCESS_DENIED_CALLBACK_OBJECT_ACE = new StructT('ACCESS_DENIED_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = new StructT('SYSTEM_AUDIT_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var SYSTEM_ALARM_CALLBACK_OBJECT_ACE = new StructT('SYSTEM_ALARM_CALLBACK_OBJECT_ACE', {
 Header: ACE_HEADER,
 Mask: ACCESS_MASK,
 Flags: DWORD,
 ObjectType: GUID,
 InheritedObjectType: GUID,
 SidStart: DWORD
});

var ACL_REVISION_INFORMATION = new StructT('ACL_REVISION_INFORMATION', {
 AclRevision: DWORD
});

var ACL_SIZE_INFORMATION = new StructT('ACL_SIZE_INFORMATION', {
 AceCount: DWORD,
 AclBytesInUse: DWORD,
 AclBytesFree: DWORD
});

var SECURITY_DESCRIPTOR_RELATIVE = new StructT('SECURITY_DESCRIPTOR_RELATIVE', {
 Revision: BYTE,
 Sbz1: BYTE,
 Control: SECURITY_DESCRIPTOR_CONTROL,
 Owner: DWORD,
 Group: DWORD,
 Sacl: DWORD,
 Dacl: DWORD
});

var SECURITY_DESCRIPTOR = new StructT('SECURITY_DESCRIPTOR', {
 Revision: BYTE,
 Sbz1: BYTE,
 Control: SECURITY_DESCRIPTOR_CONTROL,
 Owner: PSID,
 Group: PSID,
 Sacl: PACL,
 Dacl: PACL
});

var OBJECT_TYPE_LIST = new StructT('OBJECT_TYPE_LIST', {
 Level: WORD,
 Sbz: WORD,
 ObjectType: GUID.Δ
});

var PRIVILEGE_SET = new StructT('PRIVILEGE_SET', {
 PrivilegeCount: DWORD,
 Control: DWORD,
 Privilege: new ArrayT(LUID_AND_ATTRIBUTES, ANYSIZE_new ArrayT)
});

var ACCESS_REASONS = new StructT('ACCESS_REASONS', {
 Data: new ArrayT(ACCESS_REASON, 32)
});

var SE_SECURITY_DESCRIPTOR = new StructT('SE_SECURITY_DESCRIPTOR', {
 Size: DWORD,
 Flags: DWORD,
 SecurityDescriptor: PSECURITY_DESCRIPTOR
});

var SE_ACCESS_REQUEST = new StructT('SE_ACCESS_REQUEST', {
 Size: DWORD,
 SeSecurityDescriptor: PSE_SECURITY_DESCRIPTOR,
 DesiredAccess: ACCESS_MASK,
 PreviouslyGrantedAccess: ACCESS_MASK,
 PrincipalSelfSid: PSID,
 GenericMapping: PGENERIC_MAPPING,
 ObjectTypeListCount: DWORD,
 ObjectTypeList: POBJECT_TYPE_LIST
});

var SE_ACCESS_REPLY = new StructT('SE_ACCESS_REPLY', {
 Size: DWORD,
 ResultListCount: DWORD,
 GrantedAccess: PACCESS_MASK,
 AccessStatus: PDWORD,
 AccessReason: PACCESS_REASONS,
 Privileges: PPRIVILEGE_SET.Δ
});

var TOKEN_USER = new StructT('TOKEN_USER', {
 User: SID_AND_ATTRIBUTES
});

var TOKEN_GROUPS = new StructT('TOKEN_GROUPS', {
 GroupCount: DWORD,
 Groups: new ArrayT(SID_AND_ATTRIBUTES, ANYSIZE_new ArrayT)
});

var TOKEN_PRIVILEGES = new StructT('TOKEN_PRIVILEGES', {
 PrivilegeCount: DWORD,
 Privileges: new ArrayT(LUID_AND_ATTRIBUTES, ANYSIZE_new ArrayT)
});

var TOKEN_OWNER = new StructT('TOKEN_OWNER', {
 Owner: PSID
});

var TOKEN_PRIMARY_GROUP = new StructT('TOKEN_PRIMARY_GROUP', {
 PrimaryGroup: PSID
});

var TOKEN_DEFAULT_DACL = new StructT('TOKEN_DEFAULT_DACL', {
 DefaultDacl: PACL
});

var TOKEN_GROUPS_AND_PRIVILEGES = new StructT('TOKEN_GROUPS_AND_PRIVILEGES', {
 SidCount: DWORD,
 SidLength: DWORD,
 Sids: PSID_AND_ATTRIBUTES,
 RestrictedSidCount: DWORD,
 RestrictedSidLength: DWORD,
 RestrictedSids: PSID_AND_ATTRIBUTES,
 PrivilegeCount: DWORD,
 PrivilegeLength: DWORD,
 Privileges: PLUID_AND_ATTRIBUTES,
 AuthenticationId: LUID
});

var TOKEN_LINKED_TOKEN = new StructT('TOKEN_LINKED_TOKEN', {
 LinkedToken: HANDLE
});

var TOKEN_ELEVATION = new StructT('TOKEN_ELEVATION', {
 TokenIsElevated: DWORD
});

var TOKEN_MANDATORY_LABEL = new StructT('TOKEN_MANDATORY_LABEL', {
 Label: SID_AND_ATTRIBUTES
});

var TOKEN_MANDATORY_POLICY = new StructT('TOKEN_MANDATORY_POLICY', {
 Policy: DWORD
});

var TOKEN_ACCESS_INFORMATION = new StructT('TOKEN_ACCESS_INFORMATION', {
 SidHash: PSID_AND_ATTRIBUTES_HASH,
 RestrictedSidHash: PSID_AND_ATTRIBUTES_HASH,
 Privileges: PTOKEN_PRIVILEGES,
 AuthenticationId: LUID,
 TokenType: TOKEN_TYPE,
 ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
 MandatoryPolicy: TOKEN_MANDATORY_POLICY,
 Flags: DWORD
});

var TOKEN_AUDIT_POLICY = new StructT('TOKEN_AUDIT_POLICY', {
 PerUserPolicy: new ArrayT(BYTE, undefined)
});

var TOKEN_SOURCE = new StructT('TOKEN_SOURCE', {
 SourceName: new ArrayT(CHAR, TOKEN_SOURCE_LENGTH),
 SourceIdentifier: LUID
});

var TOKEN_STATISTICS = new StructT('TOKEN_STATISTICS', {
 TokenId: LUID,
 AuthenticationId: LUID,
 ExpirationTime: LARGE_INTEGER,
 TokenType: TOKEN_TYPE,
 ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
 DynamicCharged: DWORD,
 DynamicAvailable: DWORD,
 GroupCount: DWORD,
 PrivilegeCount: DWORD,
 ModifiedId: LUID
});

var TOKEN_CONTROL = new StructT('TOKEN_CONTROL', {
 TokenId: LUID,
 AuthenticationId: LUID,
 ModifiedId: LUID,
 TokenSource: TOKEN_SOURCE
});

var TOKEN_ORIGIN = new StructT('TOKEN_ORIGIN', {
 OriginatingLogonSession: LUID
});

var SECURITY_QUALITY_OF_SERVICE = new StructT('SECURITY_QUALITY_OF_SERVICE', {
 Length: DWORD,
 ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
 ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE,
 EffectiveOnly: BOOLEAN
});

var SE_IMPERSONATION_STATE = new StructT('SE_IMPERSONATION_STATE', {
 Token: PACCESS_TOKEN,
 CopyOnOpen: BOOLEAN,
 EffectiveOnly: BOOLEAN,
 Level: SECURITY_IMPERSONATION_LEVEL
});

var JOB_SET_new ArrayT = new StructT('JOB_SET_new ArrayT', {
 JobHandle: HANDLE,
 MemberLevel: DWORD,
 Flags: DWORD
});

var NT_TIB = new StructT('NT_TIB', {
 ExceptionList: _EXCEPTION_REGISTRATION_RECORD.Δ,
 StackBase: PVOID,
 StackLimit: PVOID,
 SubSystemTib: PVOID,
 ArbitraryUserPointer: PVOID,
 Self: _NT_TIB.Δ
});


var NT_TIB32 = new StructT('NT_TIB32', {
 ExceptionList: DWORD,
 StackBase: DWORD,
 StackLimit: DWORD,
 SubSystemTib: DWORD,
 ArbitraryUserPointer: DWORD,
 Self: DWORD
});

var NT_TIB64 = new StructT('NT_TIB64', {
 ExceptionList: DWORD64,
 StackBase: DWORD64,
 StackLimit: DWORD64,
 SubSystemTib: DWORD64,
 ArbitraryUserPointer: DWORD64,
 Self: DWORD64
});

var UMS_CREATE_THREAD_ATTRIBUTES = new StructT('UMS_CREATE_THREAD_ATTRIBUTES', {
 UmsVersion: DWORD,
 UmsContext: PVOID,
 UmsCompletionList: PVOID
});

var QUOTA_LIMITS = new StructT('QUOTA_LIMITS', {
 PagedPoolLimit: SIZE_T,
 NonPagedPoolLimit: SIZE_T,
 MinimumWorkingSetSize: SIZE_T,
 MaximumWorkingSetSize: SIZE_T,
 PagefileLimit: SIZE_T,
 TimeLimit: LARGE_INTEGER
});

var undefined = new StructT('undefined', {
 RatePercent: DWORD,
 Reserved0: DWORD
});

var QUOTA_LIMITS_EX = new StructT('QUOTA_LIMITS_EX', {
 PagedPoolLimit: SIZE_T,
 NonPagedPoolLimit: SIZE_T,
 MinimumWorkingSetSize: SIZE_T,
 MaximumWorkingSetSize: SIZE_T,
 PagefileLimit: SIZE_T,
 TimeLimit: LARGE_INTEGER,
 WorkingSetLimit: SIZE_T,
 Reserved2: SIZE_T,
 Reserved3: SIZE_T,
 Reserved4: SIZE_T,
 Flags: DWORD,
 CpuRateLimit: RATE_QUOTA_LIMIT
});

var IO_COUNTERS = new StructT('IO_COUNTERS', {
 ReadOperationCount: ULONGLONG,
 WriteOperationCount: ULONGLONG,
 OtherOperationCount: ULONGLONG,
 ReadTransferCount: ULONGLONG,
 WriteTransferCount: ULONGLONG,
 OtherTransferCount: ULONGLONG
});

var JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = new StructT('JOBOBJECT_BASIC_ACCOUNTING_INFORMATION', {
 TotalUserTime: LARGE_INTEGER,
 TotalKernelTime: LARGE_INTEGER,
 ThisPeriodTotalUserTime: LARGE_INTEGER,
 ThisPeriodTotalKernelTime: LARGE_INTEGER,
 TotalPageFaultCount: DWORD,
 TotalProcesses: DWORD,
 ActiveProcesses: DWORD,
 TotalTerminatedProcesses: DWORD
});

var JOBOBJECT_BASIC_LIMIT_INFORMATION = new StructT('JOBOBJECT_BASIC_LIMIT_INFORMATION', {
 PerProcessUserTimeLimit: LARGE_INTEGER,
 PerJobUserTimeLimit: LARGE_INTEGER,
 LimitFlags: DWORD,
 MinimumWorkingSetSize: SIZE_T,
 MaximumWorkingSetSize: SIZE_T,
 ActiveProcessLimit: DWORD,
 Affinity: ULONG_PTR,
 PriorityClass: DWORD,
 SchedulingClass: DWORD
});

var JOBOBJECT_EXTENDED_LIMIT_INFORMATION = new StructT('JOBOBJECT_EXTENDED_LIMIT_INFORMATION', {
 BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,
 IoInfo: IO_COUNTERS,
 ProcessMemoryLimit: SIZE_T,
 JobMemoryLimit: SIZE_T,
 PeakProcessMemoryUsed: SIZE_T,
 PeakJobMemoryUsed: SIZE_T
});

var JOBOBJECT_BASIC_PROCESS_ID_LIST = new StructT('JOBOBJECT_BASIC_PROCESS_ID_LIST', {
 NumberOfAssignedProcesses: DWORD,
 NumberOfProcessIdsInList: DWORD,
 ProcessIdList: new ArrayT(ULONG_PTR, 1)
});

var JOBOBJECT_BASIC_UI_RESTRICTIONS = new StructT('JOBOBJECT_BASIC_UI_RESTRICTIONS', {
 UIRestrictionsClass: DWORD
});

var JOBOBJECT_SECURITY_LIMIT_INFORMATION = new StructT('JOBOBJECT_SECURITY_LIMIT_INFORMATION', {
 SecurityLimitFlags: DWORD,
 JobToken: HANDLE,
 SidsToDisable: PTOKEN_GROUPS,
 PrivilegesToDelete: PTOKEN_PRIVILEGES,
 RestrictedSids: PTOKEN_GROUPS
});

var JOBOBJECT_END_OF_JOB_TIME_INFORMATION = new StructT('JOBOBJECT_END_OF_JOB_TIME_INFORMATION', {
 EndOfJobTimeAction: DWORD
});

var JOBOBJECT_ASSOCIATE_COMPLETION_PORT = new StructT('JOBOBJECT_ASSOCIATE_COMPLETION_PORT', {
 CompletionKey: PVOID,
 CompletionPort: HANDLE
});

var JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = new StructT('JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION', {
 BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
 IoInfo: IO_COUNTERS
});

var JOBOBJECT_JOBSET_INFORMATION = new StructT('JOBOBJECT_JOBSET_INFORMATION', {
 MemberLevel: DWORD
});

var CACHE_DESCRIPTOR = new StructT('CACHE_DESCRIPTOR', {
 Level: BYTE,
 Associativity: BYTE,
 LineSize: WORD,
 Size: DWORD,
 Type: PROCESSOR_CACHE_TYPE
});

var SYSTEM_LOGICAL_PROCESSOR_INFORMATION = new StructT('SYSTEM_LOGICAL_PROCESSOR_INFORMATION', {
 ProcessorMask: ULONG_PTR,
 Relationship: LOGICAL_PROCESSOR_RELATIONSHIP
});

var undefined = new StructT('undefined', {
 Flags: BYTE
});

var undefined = new StructT('undefined', {
 NodeNumber: DWORD
});

var PROCESSOR_RELATIONSHIP = new StructT('PROCESSOR_RELATIONSHIP', {
 Flags: BYTE,
 Reserved: new ArrayT(BYTE, 21),
 GroupCount: WORD,
 GroupMask: new ArrayT(GROUP_AFFINITY, ANYSIZE_new ArrayT)
});

var NUMA_NODE_RELATIONSHIP = new StructT('NUMA_NODE_RELATIONSHIP', {
 NodeNumber: DWORD,
 Reserved: new ArrayT(BYTE, 20),
 GroupMask: GROUP_AFFINITY
});

var CACHE_RELATIONSHIP = new StructT('CACHE_RELATIONSHIP', {
 Level: BYTE,
 Associativity: BYTE,
 LineSize: WORD,
 CacheSize: DWORD,
 Type: PROCESSOR_CACHE_TYPE,
 Reserved: new ArrayT(BYTE, 20),
 GroupMask: GROUP_AFFINITY
});

var PROCESSOR_GROUP_INFO = new StructT('PROCESSOR_GROUP_INFO', {
 MaximumProcessorCount: BYTE,
 ActiveProcessorCount: BYTE,
 Reserved: new ArrayT(BYTE, 38),
 ActiveProcessorMask: KAFFINITY
});

var GROUP_RELATIONSHIP = new StructT('GROUP_RELATIONSHIP', {
 MaximumGroupCount: WORD,
 ActiveGroupCount: WORD,
 Reserved: new ArrayT(BYTE, 20),
 GroupInfo: new ArrayT(PROCESSOR_GROUP_INFO, ANYSIZE_new ArrayT)
});

var SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = new StructT('SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX', {
 Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
 Size: DWORD
});

var SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = new StructT('SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION', {
 CycleTime: DWORD64
});

var XSTATE_FEATURE = new StructT('XSTATE_FEATURE', {
 Offset: DWORD,
 Size: DWORD
});

var XSTATE_CONFIGURATION = new StructT('XSTATE_CONFIGURATION', {
 EnabledFeatures: DWORD64,
 Size: DWORD,
 OptimizedSave: DWORD,
 Features: new ArrayT(XSTATE_FEATURE, MAXIMUM_XSTATE_FEATURES)
});

var MEMORY_BASIC_INFORMATION = new StructT('MEMORY_BASIC_INFORMATION', {
 BaseAddress: PVOID,
 AllocationBase: PVOID,
 AllocationProtect: DWORD,
 RegionSize: SIZE_T,
 State: DWORD,
 Protect: DWORD,
 Type: DWORD
});

var MEMORY_BASIC_INFORMATION32 = new StructT('MEMORY_BASIC_INFORMATION32', {
 BaseAddress: DWORD,
 AllocationBase: DWORD,
 AllocationProtect: DWORD,
 RegionSize: DWORD,
 State: DWORD,
 Protect: DWORD,
 Type: DWORD
});

var MEMORY_BASIC_INFORMATION64 = new StructT('MEMORY_BASIC_INFORMATION64', {
 BaseAddress: ULONGLONG,
 AllocationBase: ULONGLONG,
 AllocationProtect: DWORD,
 __alignment1: DWORD,
 RegionSize: ULONGLONG,
 State: DWORD,
 Protect: DWORD,
 Type: DWORD,
 __alignment2: DWORD
});

var FILE_NOTIFY_INFORMATION = new StructT('FILE_NOTIFY_INFORMATION', {
 NextEntryOffset: DWORD,
 Action: DWORD,
 FileNameLength: DWORD,
 FileName: new ArrayT(WCHAR, 1)
});

var REPARSE_GUID_DATA_BUFFER = new StructT('REPARSE_GUID_DATA_BUFFER', {
 ReparseTag: DWORD,
 ReparseDataLength: WORD,
 Reserved: WORD,
 ReparseGuid: GUID,
 GenericReparseBuffer:
});

var undefined = new StructT('undefined', {
 DataBuffer: new ArrayT(BYTE, 1)
});

var CM_POWER_DATA = new StructT('CM_POWER_DATA', {
 PD_Size: DWORD,
 PD_MostRecentPowerState: DEVICE_POWER_STATE,
 PD_Capabilities: DWORD,
 PD_D1Latency: DWORD,
 PD_D2Latency: DWORD,
 PD_D3Latency: DWORD,
 PD_PowerStateMapping: new ArrayT(DEVICE_POWER_STATE, POWER_SYSTEM_MAXIMUM),
 PD_DeepestSystemWake: SYSTEM_POWER_STATE
});

var SET_POWER_SETTING_VALUE = new StructT('SET_POWER_SETTING_VALUE', {
 Version: DWORD,
 Guid: GUID,
 PowerCondition: SYSTEM_POWER_CONDITION,
 DataLength: DWORD,
 Data: new ArrayT(BYTE, ANYSIZE_new ArrayT)
});

var NOTIFY_USER_POWER_SETTING = new StructT('NOTIFY_USER_POWER_SETTING', {
 Guid: GUID
});

var APPLICATIONLAUNCH_SETTING_VALUE = new StructT('APPLICATIONLAUNCH_SETTING_VALUE', {
 ActivationTime: LARGE_INTEGER,
 Flags: DWORD,
 ButtonInstanceID: DWORD
});

var BATTERY_REPORTING_SCALE = new StructT('BATTERY_REPORTING_SCALE', {
 Granularity: DWORD,
 Capacity: DWORD
});

var PPM_WMI_LEGACY_PERFSTATE = new StructT('PPM_WMI_LEGACY_PERFSTATE', {
 Frequency: DWORD,
 Flags: DWORD,
 PercentFrequency: DWORD
});

var PPM_WMI_IDLE_STATE = new StructT('PPM_WMI_IDLE_STATE', {
 Latency: DWORD,
 Power: DWORD,
 TimeCheck: DWORD,
 PromotePercent: BYTE,
 DemotePercent: BYTE,
 StateType: BYTE,
 Reserved: BYTE,
 StateFlags: DWORD,
 Context: DWORD,
 IdleHandler: DWORD,
 Reserved1: DWORD
});

var PPM_WMI_IDLE_STATES = new StructT('PPM_WMI_IDLE_STATES', {
 Type: DWORD,
 Count: DWORD,
 TargetState: DWORD,
 OldState: DWORD,
 TargetProcessors: DWORD64,
 State: new ArrayT(PPM_WMI_IDLE_STATE, ANYSIZE_new ArrayT)
});

var PPM_WMI_IDLE_STATES_EX = new StructT('PPM_WMI_IDLE_STATES_EX', {
 Type: DWORD,
 Count: DWORD,
 TargetState: DWORD,
 OldState: DWORD,
 TargetProcessors: PVOID,
 State: new ArrayT(PPM_WMI_IDLE_STATE, ANYSIZE_new ArrayT)
});

var PPM_WMI_PERF_STATE = new StructT('PPM_WMI_PERF_STATE', {
 Frequency: DWORD,
 Power: DWORD,
 PercentFrequency: BYTE,
 IncreaseLevel: BYTE,
 DecreaseLevel: BYTE,
 Type: BYTE,
 IncreaseTime: DWORD,
 DecreaseTime: DWORD,
 Control: DWORD64,
 Status: DWORD64,
 HitCount: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD64,
 Reserved3: DWORD64
});

var PPM_WMI_PERF_STATES = new StructT('PPM_WMI_PERF_STATES', {
 Count: DWORD,
 MaxFrequency: DWORD,
 CurrentState: DWORD,
 MaxPerfState: DWORD,
 MinPerfState: DWORD,
 LowestPerfState: DWORD,
 ThermalConstraint: DWORD,
 BusyAdjThreshold: BYTE,
 PolicyType: BYTE,
 Type: BYTE,
 Reserved: BYTE,
 TimerInterval: DWORD,
 TargetProcessors: DWORD64,
 PStateHandler: DWORD,
 PStateContext: DWORD,
 TStateHandler: DWORD,
 TStateContext: DWORD,
 FeedbackHandler: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD64,
 State: new ArrayT(PPM_WMI_PERF_STATE, ANYSIZE_new ArrayT)
});

var PPM_WMI_PERF_STATES_EX = new StructT('PPM_WMI_PERF_STATES_EX', {
 Count: DWORD,
 MaxFrequency: DWORD,
 CurrentState: DWORD,
 MaxPerfState: DWORD,
 MinPerfState: DWORD,
 LowestPerfState: DWORD,
 ThermalConstraint: DWORD,
 BusyAdjThreshold: BYTE,
 PolicyType: BYTE,
 Type: BYTE,
 Reserved: BYTE,
 TimerInterval: DWORD,
 TargetProcessors: PVOID,
 PStateHandler: DWORD,
 PStateContext: DWORD,
 TStateHandler: DWORD,
 TStateContext: DWORD,
 FeedbackHandler: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD64,
 State: new ArrayT(PPM_WMI_PERF_STATE, ANYSIZE_new ArrayT)
});

var PPM_IDLE_STATE_ACCOUNTING = new StructT('PPM_IDLE_STATE_ACCOUNTING', {
 IdleTransitions: DWORD,
 FailedTransitions: DWORD,
 InvalidBucketIndex: DWORD,
 TotalTime: DWORD64,
 IdleTimeBuckets: new ArrayT(DWORD, PROC_IDLE_BUCKET_COUNT)
});

var PPM_IDLE_ACCOUNTING = new StructT('PPM_IDLE_ACCOUNTING', {
 StateCount: DWORD,
 TotalTransitions: DWORD,
 ResetCount: DWORD,
 StartTime: DWORD64,
 State: new ArrayT(PPM_IDLE_STATE_ACCOUNTING, ANYSIZE_new ArrayT)
});

var PPM_IDLE_STATE_BUCKET_EX = new StructT('PPM_IDLE_STATE_BUCKET_EX', {
 TotalTimeUs: DWORD64,
 MinTimeUs: DWORD,
 MaxTimeUs: DWORD,
 Count: DWORD
});

var PPM_IDLE_STATE_ACCOUNTING_EX = new StructT('PPM_IDLE_STATE_ACCOUNTING_EX', {
 TotalTime: DWORD64,
 IdleTransitions: DWORD,
 FailedTransitions: DWORD,
 InvalidBucketIndex: DWORD,
 MinTimeUs: DWORD,
 MaxTimeUs: DWORD,
 IdleTimeBuckets: new ArrayT(PPM_IDLE_STATE_BUCKET_EX, PROC_IDLE_BUCKET_COUNT_EX)
});

var PPM_IDLE_ACCOUNTING_EX = new StructT('PPM_IDLE_ACCOUNTING_EX', {
 StateCount: DWORD,
 TotalTransitions: DWORD,
 ResetCount: DWORD,
 StartTime: DWORD64,
 State: new ArrayT(PPM_IDLE_STATE_ACCOUNTING_EX, ANYSIZE_new ArrayT)
});

var PPM_PERFSTATE_EVENT = new StructT('PPM_PERFSTATE_EVENT', {
 State: DWORD,
 Status: DWORD,
 Latency: DWORD,
 Speed: DWORD,
 Processor: DWORD
});

var PPM_PERFSTATE_DOMAIN_EVENT = new StructT('PPM_PERFSTATE_DOMAIN_EVENT', {
 State: DWORD,
 Latency: DWORD,
 Speed: DWORD,
 Processors: DWORD64
});

var PPM_IDLESTATE_EVENT = new StructT('PPM_IDLESTATE_EVENT', {
 NewState: DWORD,
 OldState: DWORD,
 Processors: DWORD64
});

var PPM_THERMALCHANGE_EVENT = new StructT('PPM_THERMALCHANGE_EVENT', {
 ThermalConstraint: DWORD,
 Processors: DWORD64
});

var PPM_THERMAL_POLICY_EVENT = new StructT('PPM_THERMAL_POLICY_EVENT', {
 Mode: BYTE,
 Processors: DWORD64
});

var POWER_ACTION_POLICY = new StructT('POWER_ACTION_POLICY', {
 Action: POWER_ACTION,
 Flags: DWORD,
 EventCode: DWORD
});

var SYSTEM_POWER_LEVEL = new StructT('SYSTEM_POWER_LEVEL', {
 Enable: BOOLEAN,
 Spare: new ArrayT(BYTE, 3),
 BatteryLevel: DWORD,
 PowerPolicy: POWER_ACTION_POLICY,
 MinSystemState: SYSTEM_POWER_STATE
});

var SYSTEM_POWER_POLICY = new StructT('SYSTEM_POWER_POLICY', {
 Revision: DWORD,
 PowerButton: POWER_ACTION_POLICY,
 SleepButton: POWER_ACTION_POLICY,
 LidClose: POWER_ACTION_POLICY,
 LidOpenWake: SYSTEM_POWER_STATE,
 Reserved: DWORD,
 Idle: POWER_ACTION_POLICY,
 IdleTimeout: DWORD,
 IdleSensitivity: BYTE,
 DynamicThrottle: BYTE,
 Spare2: new ArrayT(BYTE, 2),
 MinSleep: SYSTEM_POWER_STATE,
 MaxSleep: SYSTEM_POWER_STATE,
 ReducedLatencySleep: SYSTEM_POWER_STATE,
 WinLogonFlags: DWORD,
 Spare3: DWORD,
 DozeS4Timeout: DWORD,
 BroadcastCapacityResolution: DWORD,
 DischargePolicy: new ArrayT(SYSTEM_POWER_LEVEL, NUM_DISCHARGE_POLICIES),
 VideoTimeout: DWORD,
 VideoDimDisplay: BOOLEAN,
 VideoReserved: new ArrayT(DWORD, 3),
 SpindownTimeout: DWORD,
 OptimizeForPower: BOOLEAN,
 FanThrottleTolerance: BYTE,
 ForcedThrottle: BYTE,
 MinThrottle: BYTE,
 OverThrottled: POWER_ACTION_POLICY
});

var PROCESSOR_IDLESTATE_INFO = new StructT('PROCESSOR_IDLESTATE_INFO', {
 TimeCheck: DWORD,
 DemotePercent: BYTE,
 PromotePercent: BYTE,
 Spare: new ArrayT(BYTE, 2)
});

var PROCESSOR_IDLESTATE_POLICY = new StructT('PROCESSOR_IDLESTATE_POLICY', {
 Revision: WORD,
 Flags: c:winnt.h@338317@SA@PROCESSOR_IDLESTATE_POLICY@Ua,
 PolicyCount: DWORD,
 Policy: new ArrayT(PROCESSOR_IDLESTATE_INFO, PROCESSOR_IDLESTATE_POLICY_COUNT)
});

var undefined = new StructT('undefined', {
 AllowScaling: WORD,
 Disabled: WORD,
 Reserved: WORD
});

var PROCESSOR_POWER_POLICY_INFO = new StructT('PROCESSOR_POWER_POLICY_INFO', {
 TimeCheck: DWORD,
 DemoteLimit: DWORD,
 PromoteLimit: DWORD,
 DemotePercent: BYTE,
 PromotePercent: BYTE,
 Spare: new ArrayT(BYTE, 2),
 AllowDemotion: DWORD,
 AllowPromotion: DWORD,
 Reserved: DWORD
});

var PROCESSOR_POWER_POLICY = new StructT('PROCESSOR_POWER_POLICY', {
 Revision: DWORD,
 DynamicThrottle: BYTE,
 Spare: new ArrayT(BYTE, 3),
 DisableCStates: DWORD,
 Reserved: DWORD,
 PolicyCount: DWORD,
 Policy: new ArrayT(PROCESSOR_POWER_POLICY_INFO, 3)
});

var PROCESSOR_PERFSTATE_POLICY = new StructT('PROCESSOR_PERFSTATE_POLICY', {
 Revision: DWORD,
 MaxThrottle: BYTE,
 MinThrottle: BYTE,
 BusyAdjThreshold: BYTE,
 TimeCheck: DWORD,
 IncreaseTime: DWORD,
 DecreaseTime: DWORD,
 IncreasePercent: DWORD,
 DecreasePercent: DWORD
});

var undefined = new StructT('undefined', {
 NoDomainAccounting: BYTE,
 IncreasePolicy: BYTE,
 DecreasePolicy: BYTE,
 Reserved: BYTE
});

var ADMINISTRATOR_POWER_POLICY = new StructT('ADMINISTRATOR_POWER_POLICY', {
 MinSleep: SYSTEM_POWER_STATE,
 MaxSleep: SYSTEM_POWER_STATE,
 MinVideoTimeout: DWORD,
 MaxVideoTimeout: DWORD,
 MinSpindownTimeout: DWORD,
 MaxSpindownTimeout: DWORD
});

var SYSTEM_POWER_CAPABILITIES = new StructT('SYSTEM_POWER_CAPABILITIES', {
 PowerButtonPresent: BOOLEAN,
 SleepButtonPresent: BOOLEAN,
 LidPresent: BOOLEAN,
 SystemS1: BOOLEAN,
 SystemS2: BOOLEAN,
 SystemS3: BOOLEAN,
 SystemS4: BOOLEAN,
 SystemS5: BOOLEAN,
 HiberFilePresent: BOOLEAN,
 FullWake: BOOLEAN,
 VideoDimPresent: BOOLEAN,
 ApmPresent: BOOLEAN,
 UpsPresent: BOOLEAN,
 ThermalControl: BOOLEAN,
 ProcessorThrottle: BOOLEAN,
 ProcessorMinThrottle: BYTE,
 ProcessorMaxThrottle: BYTE,
 FastSystemS4: BOOLEAN,
 spare2: new ArrayT(BYTE, 3),
 DiskSpinDown: BOOLEAN,
 spare3: new ArrayT(BYTE, 8),
 SystemBatteriesPresent: BOOLEAN,
 BatteriesAreShortTerm: BOOLEAN,
 BatteryScale: new ArrayT(BATTERY_REPORTING_SCALE, 3),
 AcOnLineWake: SYSTEM_POWER_STATE,
 SoftLidWake: SYSTEM_POWER_STATE,
 RtcWake: SYSTEM_POWER_STATE,
 MinDeviceWakeState: SYSTEM_POWER_STATE,
 DefaultLowLatencyWake: SYSTEM_POWER_STATE
});

var SYSTEM_BATTERY_STATE = new StructT('SYSTEM_BATTERY_STATE', {
 AcOnLine: BOOLEAN,
 BatteryPresent: BOOLEAN,
 Charging: BOOLEAN,
 Discharging: BOOLEAN,
 Spare1: new ArrayT(BOOLEAN, 4),
 MaxCapacity: DWORD,
 RemainingCapacity: DWORD,
 Rate: DWORD,
 EstimatedTime: DWORD,
 DefaultAlert1: DWORD,
 DefaultAlert2: DWORD
});

var IMAGE_DOS_HEADER = new StructT('IMAGE_DOS_HEADER', {
 e_magic: WORD,
 e_cblp: WORD,
 e_cp: WORD,
 e_crlc: WORD,
 e_cparhdr: WORD,
 e_minalloc: WORD,
 e_maxalloc: WORD,
 e_ss: WORD,
 e_sp: WORD,
 e_csum: WORD,
 e_ip: WORD,
 e_cs: WORD,
 e_lfarlc: WORD,
 e_ovno: WORD,
 e_res: new ArrayT(WORD, 4),
 e_oemid: WORD,
 e_oeminfo: WORD,
 e_res2: new ArrayT(WORD, 10),
 e_lfanew: LONG
});

var IMAGE_OS2_HEADER = new StructT('IMAGE_OS2_HEADER', {
 ne_magic: WORD,
 ne_ver: CHAR,
 ne_rev: CHAR,
 ne_enttab: WORD,
 ne_cbenttab: WORD,
 ne_crc: LONG,
 ne_flags: WORD,
 ne_autodata: WORD,
 ne_heap: WORD,
 ne_stack: WORD,
 ne_csip: LONG,
 ne_sssp: LONG,
 ne_cseg: WORD,
 ne_cmod: WORD,
 ne_cbnrestab: WORD,
 ne_segtab: WORD,
 ne_rsrctab: WORD,
 ne_restab: WORD,
 ne_modtab: WORD,
 ne_imptab: WORD,
 ne_nrestab: LONG,
 ne_cmovent: WORD,
 ne_align: WORD,
 ne_cres: WORD,
 ne_exetyp: BYTE,
 ne_flagsothers: BYTE,
 ne_pretthunks: WORD,
 ne_psegrefbytes: WORD,
 ne_swaparea: WORD,
 ne_expver: WORD
});

var IMAGE_VXD_HEADER = new StructT('IMAGE_VXD_HEADER', {
 e32_magic: WORD,
 e32_border: BYTE,
 e32_worder: BYTE,
 e32_level: DWORD,
 e32_cpu: WORD,
 e32_os: WORD,
 e32_ver: DWORD,
 e32_mflags: DWORD,
 e32_mpages: DWORD,
 e32_startobj: DWORD,
 e32_eip: DWORD,
 e32_stackobj: DWORD,
 e32_esp: DWORD,
 e32_pagesize: DWORD,
 e32_lastpagesize: DWORD,
 e32_fixupsize: DWORD,
 e32_fixupsum: DWORD,
 e32_ldrsize: DWORD,
 e32_ldrsum: DWORD,
 e32_objtab: DWORD,
 e32_objcnt: DWORD,
 e32_objmap: DWORD,
 e32_itermap: DWORD,
 e32_rsrctab: DWORD,
 e32_rsrccnt: DWORD,
 e32_restab: DWORD,
 e32_enttab: DWORD,
 e32_dirtab: DWORD,
 e32_dircnt: DWORD,
 e32_fpagetab: DWORD,
 e32_frectab: DWORD,
 e32_impmod: DWORD,
 e32_impmodcnt: DWORD,
 e32_impproc: DWORD,
 e32_pagesum: DWORD,
 e32_datapage: DWORD,
 e32_preload: DWORD,
 e32_nrestab: DWORD,
 e32_cbnrestab: DWORD,
 e32_nressum: DWORD,
 e32_autodata: DWORD,
 e32_debuginfo: DWORD,
 e32_debuglen: DWORD,
 e32_instpreload: DWORD,
 e32_instdemand: DWORD,
 e32_heapsize: DWORD,
 e32_res3: new ArrayT(BYTE, 12),
 e32_winresoff: DWORD,
 e32_winreslen: DWORD,
 e32_devid: WORD,
 e32_ddkver: WORD
});

var IMAGE_FILE_HEADER = new StructT('IMAGE_FILE_HEADER', {
 Machine: WORD,
 NumberOfSections: WORD,
 TimeDateStamp: DWORD,
 PointerToSymbolTable: DWORD,
 NumberOfSymbols: DWORD,
 SizeOfOptionalHeader: WORD,
 Characteristics: WORD
});

var IMAGE_DATA_DIRECTORY = new StructT('IMAGE_DATA_DIRECTORY', {
 VirtualAddress: DWORD,
 Size: DWORD
});

var IMAGE_OPTIONAL_HEADER = new StructT('IMAGE_OPTIONAL_HEADER', {
 Magic: WORD,
 MajorLinkerVersion: BYTE,
 MinorLinkerVersion: BYTE,
 SizeOfCode: DWORD,
 SizeOfInitializedData: DWORD,
 SizeOfUninitializedData: DWORD,
 AddressOfEntryPoint: DWORD,
 BaseOfCode: DWORD,
 BaseOfData: DWORD,
 ImageBase: DWORD,
 SectionAlignment: DWORD,
 FileAlignment: DWORD,
 MajorOperatingSystemVersion: WORD,
 MinorOperatingSystemVersion: WORD,
 MajorImageVersion: WORD,
 MinorImageVersion: WORD,
 MajorSubsystemVersion: WORD,
 MinorSubsystemVersion: WORD,
 Win32VersionValue: DWORD,
 SizeOfImage: DWORD,
 SizeOfHeaders: DWORD,
 CheckSum: DWORD,
 Subsystem: WORD,
 DllCharacteristics: WORD,
 SizeOfStackReserve: DWORD,
 SizeOfStackCommit: DWORD,
 SizeOfHeapReserve: DWORD,
 SizeOfHeapCommit: DWORD,
 LoaderFlags: DWORD,
 NumberOfRvaAndSizes: DWORD,
 DataDirectory: new ArrayT(IMAGE_DATA_DIRECTORY, IMAGE_NUMBEROF_DIRECTORY_ENTRIES)
});

var IMAGE_ROM_OPTIONAL_HEADER = new StructT('IMAGE_ROM_OPTIONAL_HEADER', {
 Magic: WORD,
 MajorLinkerVersion: BYTE,
 MinorLinkerVersion: BYTE,
 SizeOfCode: DWORD,
 SizeOfInitializedData: DWORD,
 SizeOfUninitializedData: DWORD,
 AddressOfEntryPoint: DWORD,
 BaseOfCode: DWORD,
 BaseOfData: DWORD,
 BaseOfBss: DWORD,
 GprMask: DWORD,
 CprMask: new ArrayT(DWORD, 4),
 GpValue: DWORD
});

var IMAGE_OPTIONAL_HEADER64 = new StructT('IMAGE_OPTIONAL_HEADER64', {
 Magic: WORD,
 MajorLinkerVersion: BYTE,
 MinorLinkerVersion: BYTE,
 SizeOfCode: DWORD,
 SizeOfInitializedData: DWORD,
 SizeOfUninitializedData: DWORD,
 AddressOfEntryPoint: DWORD,
 BaseOfCode: DWORD,
 ImageBase: ULONGLONG,
 SectionAlignment: DWORD,
 FileAlignment: DWORD,
 MajorOperatingSystemVersion: WORD,
 MinorOperatingSystemVersion: WORD,
 MajorImageVersion: WORD,
 MinorImageVersion: WORD,
 MajorSubsystemVersion: WORD,
 MinorSubsystemVersion: WORD,
 Win32VersionValue: DWORD,
 SizeOfImage: DWORD,
 SizeOfHeaders: DWORD,
 CheckSum: DWORD,
 Subsystem: WORD,
 DllCharacteristics: WORD,
 SizeOfStackReserve: ULONGLONG,
 SizeOfStackCommit: ULONGLONG,
 SizeOfHeapReserve: ULONGLONG,
 SizeOfHeapCommit: ULONGLONG,
 LoaderFlags: DWORD,
 NumberOfRvaAndSizes: DWORD,
 DataDirectory: new ArrayT(IMAGE_DATA_DIRECTORY, IMAGE_NUMBEROF_DIRECTORY_ENTRIES)
});

var IMAGE_NT_HEADERS64 = new StructT('IMAGE_NT_HEADERS64', {
 Signature: DWORD,
 FileHeader: IMAGE_FILE_HEADER,
 OptionalHeader: IMAGE_OPTIONAL_HEADER64
});

var IMAGE_NT_HEADERS = new StructT('IMAGE_NT_HEADERS', {
 Signature: DWORD,
 FileHeader: IMAGE_FILE_HEADER,
 OptionalHeader: IMAGE_OPTIONAL_HEADER32
});

var IMAGE_ROM_HEADERS = new StructT('IMAGE_ROM_HEADERS', {
 FileHeader: IMAGE_FILE_HEADER,
 OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER
});

var ANON_OBJECT_HEADER = new StructT('ANON_OBJECT_HEADER', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 ClassID: CLSID,
 SizeOfData: DWORD
});

var ANON_OBJECT_HEADER_V2 = new StructT('ANON_OBJECT_HEADER_V2', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 ClassID: CLSID,
 SizeOfData: DWORD,
 Flags: DWORD,
 MetaDataSize: DWORD,
 MetaDataOffset: DWORD
});

var ANON_OBJECT_HEADER_BIGOBJ = new StructT('ANON_OBJECT_HEADER_BIGOBJ', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 ClassID: CLSID,
 SizeOfData: DWORD,
 Flags: DWORD,
 MetaDataSize: DWORD,
 MetaDataOffset: DWORD,
 NumberOfSections: DWORD,
 PointerToSymbolTable: DWORD,
 NumberOfSymbols: DWORD
});

var IMAGE_SECTION_HEADER = new StructT('IMAGE_SECTION_HEADER', {
 Name: new ArrayT(BYTE, IMAGE_SIZEOF_SHORT_NAME),
 Misc: c:winnt.h@366160@S@_IMAGE_SECTION_HEADER@Ua,
 VirtualAddress: DWORD,
 SizeOfRawData: DWORD,
 PointerToRawData: DWORD,
 PointerToRelocations: DWORD,
 PointerToLinenumbers: DWORD,
 NumberOfRelocations: WORD,
 NumberOfLinenumbers: WORD,
 Characteristics: DWORD
});

var IMAGE_SYMBOL = new StructT('IMAGE_SYMBOL', {
 N: c:winnt.h@370553@S@_IMAGE_SYMBOL@Ua,
 Value: DWORD,
 SectionNumber: SHORT,
 Type: WORD,
 StorageClass: BYTE,
 NumberOfAuxSymbols: BYTE
});

var undefined = new StructT('undefined', {
 Short: DWORD,
 Long: DWORD
});

var IMAGE_SYMBOL_EX = new StructT('IMAGE_SYMBOL_EX', {
 N: c:winnt.h@371082@S@_IMAGE_SYMBOL_EX@Ua,
 Value: DWORD,
 SectionNumber: LONG,
 Type: WORD,
 StorageClass: BYTE,
 NumberOfAuxSymbols: BYTE
});

var undefined = new StructT('undefined', {
 Short: DWORD,
 Long: DWORD
});

var IMAGE_AUX_SYMBOL_TOKEN_DEF = new StructT('IMAGE_AUX_SYMBOL_TOKEN_DEF', {
 bAuxType: BYTE,
 bReserved: BYTE,
 SymbolTableIndex: DWORD,
 rgbReserved: new ArrayT(BYTE, 12)
});

var undefined = new StructT('undefined', {
 TagIndex: DWORD,
 Misc: c:winnt.h@376762@U@_IMAGE_AUX_SYMBOL@Sa@Ua,
 FcnAry: c:winnt.h@377030@U@_IMAGE_AUX_SYMBOL@Sa@Ua,
 TvIndex: WORD
});

var undefined = new StructT('undefined', {
 Linenumber: WORD,
 Size: WORD
});

var undefined = new StructT('undefined', {
 PointerToLinenumber: DWORD,
 PointerToNextFunction: DWORD
});

var undefined = new StructT('undefined', {
 Dimension: new ArrayT(WORD, 4)
});

var undefined = new StructT('undefined', {
 Name: new ArrayT(BYTE, IMAGE_SIZEOF_SYMBOL)
});

var undefined = new StructT('undefined', {
 Length: DWORD,
 NumberOfRelocations: WORD,
 NumberOfLinenumbers: WORD,
 CheckSum: DWORD,
 Number: SHORT,
 Selection: BYTE,
 bReserved: BYTE,
 HighNumber: SHORT
});

var undefined = new StructT('undefined', {
 crc: DWORD,
 rgbReserved: new ArrayT(BYTE, 14)
});

var undefined = new StructT('undefined', {
 WeakDefaultSymIndex: DWORD,
 WeakSearchType: DWORD,
 rgbReserved: new ArrayT(BYTE, 12)
});

var undefined = new StructT('undefined', {
 Name: new ArrayT(BYTE, undefined)
});

var undefined = new StructT('undefined', {
 Length: DWORD,
 NumberOfRelocations: WORD,
 NumberOfLinenumbers: WORD,
 CheckSum: DWORD,
 Number: SHORT,
 Selection: BYTE,
 bReserved: BYTE,
 HighNumber: SHORT,
 rgbReserved: new ArrayT(BYTE, 2)
});

var undefined = new StructT('undefined', {
 TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
 rgbReserved: new ArrayT(BYTE, 2)
});

var undefined = new StructT('undefined', {
 crc: DWORD,
 rgbReserved: new ArrayT(BYTE, 16)
});

var IMAGE_RELOCATION = new StructT('IMAGE_RELOCATION', {
 SymbolTableIndex: DWORD,
 Type: WORD
});

var IMAGE_LINENUMBER = new StructT('IMAGE_LINENUMBER', {
 Type: c:winnt.h@402328@S@_IMAGE_LINENUMBER@Ua,
 Linenumber: WORD
});

var IMAGE_BASE_RELOCATION = new StructT('IMAGE_BASE_RELOCATION', {
 VirtualAddress: DWORD,
 SizeOfBlock: DWORD
});

var IMAGE_ARCHIVE_MEMBER_HEADER = new StructT('IMAGE_ARCHIVE_MEMBER_HEADER', {
 Name: new ArrayT(BYTE, 16),
 Date: new ArrayT(BYTE, 12),
 UserID: new ArrayT(BYTE, 6),
 GroupID: new ArrayT(BYTE, 6),
 Mode: new ArrayT(BYTE, 8),
 Size: new ArrayT(BYTE, 10),
 EndHeader: new ArrayT(BYTE, 2)
});

var IMAGE_EXPORT_DIRECTORY = new StructT('IMAGE_EXPORT_DIRECTORY', {
 Characteristics: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 Name: DWORD,
 Base: DWORD,
 NumberOfFunctions: DWORD,
 NumberOfNames: DWORD,
 AddressOfFunctions: DWORD,
 AddressOfNames: DWORD,
 AddressOfNameOrdinals: DWORD
});

var IMAGE_IMPORT_BY_NAME = new StructT('IMAGE_IMPORT_BY_NAME', {
 Hint: WORD,
 Name: new ArrayT(BYTE, 1)
});

var IMAGE_THUNK_DATA64 = new StructT('IMAGE_THUNK_DATA64', {
 u1: c:winnt.h@405458@S@_IMAGE_THUNK_DATA64@Ua
});

var IMAGE_THUNK_DATA = new StructT('IMAGE_THUNK_DATA', {
 u1: c:winnt.h@405853@S@_IMAGE_THUNK_DATA32@Ua
});

var IMAGE_TLS_DIRECTORY64 = new StructT('IMAGE_TLS_DIRECTORY64', {
 StartAddressOfRawData: ULONGLONG,
 EndAddressOfRawData: ULONGLONG,
 AddressOfIndex: ULONGLONG,
 AddressOfCallBacks: ULONGLONG,
 SizeOfZeroFill: DWORD,
 Characteristics: DWORD
});

var IMAGE_TLS_DIRECTORY = new StructT('IMAGE_TLS_DIRECTORY', {
 StartAddressOfRawData: DWORD,
 EndAddressOfRawData: DWORD,
 AddressOfIndex: DWORD,
 AddressOfCallBacks: DWORD,
 SizeOfZeroFill: DWORD,
 Characteristics: DWORD
});

var IMAGE_IMPORT_DESCRIPTOR = new StructT('IMAGE_IMPORT_DESCRIPTOR', {
 TimeDateStamp: DWORD,
 ForwarderChain: DWORD,
 Name: DWORD,
 FirstThunk: DWORD
});

var IMAGE_BOUND_IMPORT_DESCRIPTOR = new StructT('IMAGE_BOUND_IMPORT_DESCRIPTOR', {
 TimeDateStamp: DWORD,
 OffsetModuleName: WORD,
 NumberOfModuleForwarderRefs: WORD
});

var IMAGE_BOUND_FORWARDER_REF = new StructT('IMAGE_BOUND_FORWARDER_REF', {
 TimeDateStamp: DWORD,
 OffsetModuleName: WORD,
 Reserved: WORD
});

var IMAGE_RESOURCE_DIRECTORY = new StructT('IMAGE_RESOURCE_DIRECTORY', {
 Characteristics: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 NumberOfNamedEntries: WORD,
 NumberOfIdEntries: WORD
});


var undefined = new StructT('undefined', {
 NameOffset: DWORD,
 NameIsString: DWORD
});

var undefined = new StructT('undefined', {
 OffsetToDirectory: DWORD,
 DataIsDirectory: DWORD
});

var IMAGE_RESOURCE_DIRECTORY_STRING = new StructT('IMAGE_RESOURCE_DIRECTORY_STRING', {
 Length: WORD,
 NameString: new ArrayT(CHAR,  1 )
});

var IMAGE_RESOURCE_DIR_STRING_U = new StructT('IMAGE_RESOURCE_DIR_STRING_U', {
 Length: WORD,
 NameString: new ArrayT(WCHAR,  1 )
});

var IMAGE_RESOURCE_DATA_ENTRY = new StructT('IMAGE_RESOURCE_DATA_ENTRY', {
 OffsetToData: DWORD,
 Size: DWORD,
 CodePage: DWORD,
 Reserved: DWORD
});

var IMAGE_LOAD_CONFIG_DIRECTORY = new StructT('IMAGE_LOAD_CONFIG_DIRECTORY', {
 Size: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 GlobalFlagsClear: DWORD,
 GlobalFlagsSet: DWORD,
 CriticalSectionDefaultTimeout: DWORD,
 DeCommitFreeBlockThreshold: DWORD,
 DeCommitTotalFreeThreshold: DWORD,
 LockPrefixTable: DWORD,
 MaximumAllocationSize: DWORD,
 VirtualMemoryThreshold: DWORD,
 ProcessHeapFlags: DWORD,
 ProcessAffinityMask: DWORD,
 CSDVersion: WORD,
 Reserved1: WORD,
 EditList: DWORD,
 SecurityCookie: DWORD,
 SEHandlerTable: DWORD,
 SEHandlerCount: DWORD
});

var IMAGE_LOAD_CONFIG_DIRECTORY64 = new StructT('IMAGE_LOAD_CONFIG_DIRECTORY64', {
 Size: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 GlobalFlagsClear: DWORD,
 GlobalFlagsSet: DWORD,
 CriticalSectionDefaultTimeout: DWORD,
 DeCommitFreeBlockThreshold: ULONGLONG,
 DeCommitTotalFreeThreshold: ULONGLONG,
 LockPrefixTable: ULONGLONG,
 MaximumAllocationSize: ULONGLONG,
 VirtualMemoryThreshold: ULONGLONG,
 ProcessAffinityMask: ULONGLONG,
 ProcessHeapFlags: DWORD,
 CSDVersion: WORD,
 Reserved1: WORD,
 EditList: ULONGLONG,
 SecurityCookie: ULONGLONG,
 SEHandlerTable: ULONGLONG,
 SEHandlerCount: ULONGLONG
});

var IMAGE_CE_RUNTIME_FUNCTION_ENTRY = new StructT('IMAGE_CE_RUNTIME_FUNCTION_ENTRY', {
 FuncStart: DWORD,
 PrologLen: DWORD,
 FuncLen: DWORD,
 ThirtyTwoBit: DWORD,
 ExceptionFlag: DWORD
});

var IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = new StructT('IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY', {
 BeginAddress: ULONGLONG,
 EndAddress: ULONGLONG,
 ExceptionHandler: ULONGLONG,
 HandlerData: ULONGLONG,
 PrologEndAddress: ULONGLONG
});

var IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = new StructT('IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY', {
 BeginAddress: DWORD,
 EndAddress: DWORD,
 ExceptionHandler: DWORD,
 HandlerData: DWORD,
 PrologEndAddress: DWORD
});

var IMAGE_RUNTIME_FUNCTION_ENTRY = new StructT('IMAGE_RUNTIME_FUNCTION_ENTRY', {
 BeginAddress: DWORD,
 EndAddress: DWORD,
 UnwindInfoAddress: DWORD
});

var IMAGE_DEBUG_DIRECTORY = new StructT('IMAGE_DEBUG_DIRECTORY', {
 Characteristics: DWORD,
 TimeDateStamp: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 Type: DWORD,
 SizeOfData: DWORD,
 AddressOfRawData: DWORD,
 PointerToRawData: DWORD
});

var IMAGE_COFF_SYMBOLS_HEADER = new StructT('IMAGE_COFF_SYMBOLS_HEADER', {
 NumberOfSymbols: DWORD,
 LvaToFirstSymbol: DWORD,
 NumberOfLinenumbers: DWORD,
 LvaToFirstLinenumber: DWORD,
 RvaToFirstByteOfCode: DWORD,
 RvaToLastByteOfCode: DWORD,
 RvaToFirstByteOfData: DWORD,
 RvaToLastByteOfData: DWORD
});

var FPO_DATA = new StructT('FPO_DATA', {
 ulOffStart: DWORD,
 cbProcSize: DWORD,
 cdwLocals: DWORD,
 cdwParams: WORD,
 cbProlog: WORD,
 cbRegs: WORD,
 fHasSEH: WORD,
 fUseBP: WORD,
 reserved: WORD,
 cbFrame: WORD
});

var IMAGE_DEBUG_MISC = new StructT('IMAGE_DEBUG_MISC', {
 DataType: DWORD,
 Length: DWORD,
 Unicode: BOOLEAN,
 Reserved: new ArrayT(BYTE,  3 ),
 Data: new ArrayT(BYTE,  1 )
});

var IMAGE_FUNCTION_ENTRY = new StructT('IMAGE_FUNCTION_ENTRY', {
 StartingAddress: DWORD,
 EndingAddress: DWORD,
 EndOfPrologue: DWORD
});

var IMAGE_FUNCTION_ENTRY64 = new StructT('IMAGE_FUNCTION_ENTRY64', {
 StartingAddress: ULONGLONG,
 EndingAddress: ULONGLONG
});

var IMAGE_SEPARATE_DEBUG_HEADER = new StructT('IMAGE_SEPARATE_DEBUG_HEADER', {
 Signature: WORD,
 Flags: WORD,
 Machine: WORD,
 Characteristics: WORD,
 TimeDateStamp: DWORD,
 CheckSum: DWORD,
 ImageBase: DWORD,
 SizeOfImage: DWORD,
 NumberOfSections: DWORD,
 ExportedNamesSize: DWORD,
 DebugDirectorySize: DWORD,
 SectionAlignment: DWORD,
 Reserved: new ArrayT(DWORD, 2)
});

var NON_PAGED_DEBUG_INFO = new StructT('NON_PAGED_DEBUG_INFO', {
 Signature: WORD,
 Flags: WORD,
 Size: DWORD,
 Machine: WORD,
 Characteristics: WORD,
 TimeDateStamp: DWORD,
 CheckSum: DWORD,
 SizeOfImage: DWORD,
 ImageBase: ULONGLONG
});

var IMAGE_ARCHITECTURE_HEADER = new StructT('IMAGE_ARCHITECTURE_HEADER', {
 AmaskValue: uint,
 '': int,
 AmaskShift: uint,
 FirstEntryRVA: DWORD
});

var IMAGE_ARCHITECTURE_ENTRY = new StructT('IMAGE_ARCHITECTURE_ENTRY', {
 FixupInstRVA: DWORD,
 NewInst: DWORD
});

var IMPORT_OBJECT_HEADER = new StructT('IMPORT_OBJECT_HEADER', {
 Sig1: WORD,
 Sig2: WORD,
 Version: WORD,
 Machine: WORD,
 TimeDateStamp: DWORD,
 SizeOfData: DWORD,
 Type: WORD,
 NameType: WORD,
 Reserved: WORD
});

var IMAGE_COR20_HEADER = new StructT('IMAGE_COR20_HEADER', {
 cb: DWORD,
 MajorRuntimeVersion: WORD,
 MinorRuntimeVersion: WORD,
 MetaData: IMAGE_DATA_DIRECTORY,
 Flags: DWORD,
 Resources: IMAGE_DATA_DIRECTORY,
 StrongNameSignature: IMAGE_DATA_DIRECTORY,
 CodeManagerTable: IMAGE_DATA_DIRECTORY,
 VTableFixups: IMAGE_DATA_DIRECTORY,
 ExportAddressTableJumps: IMAGE_DATA_DIRECTORY,
 ManagedNativeHeader: IMAGE_DATA_DIRECTORY
});

var undefined = new StructT('undefined', {
 Next: SINGLE_LIST_ENTRY,
 Depth: WORD,
 Sequence: WORD
});

var MESSAGE_RESOURCE_ENTRY = new StructT('MESSAGE_RESOURCE_ENTRY', {
 Length: WORD,
 Flags: WORD,
 Text: new ArrayT(BYTE,  1 )
});

var MESSAGE_RESOURCE_BLOCK = new StructT('MESSAGE_RESOURCE_BLOCK', {
 LowId: DWORD,
 HighId: DWORD,
 OffsetToEntries: DWORD
});

var MESSAGE_RESOURCE_DATA = new StructT('MESSAGE_RESOURCE_DATA', {
 NumberOfBlocks: DWORD,
 Blocks: new ArrayT(MESSAGE_RESOURCE_BLOCK,  1 )
});

var OSVERSIONINFO = new StructT('OSVERSIONINFO', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: new ArrayT(CHAR,  128 )
});

var RTL_OSVERSIONINFOW = new StructT('RTL_OSVERSIONINFOW', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: new ArrayT(WCHAR,  128 )
});

var OSVERSIONINFOEX = new StructT('OSVERSIONINFOEX', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: new ArrayT(CHAR,  128 ),
 wServicePackMajor: WORD,
 wServicePackMinor: WORD,
 wSuiteMask: WORD,
 wProductType: BYTE,
 wReserved: BYTE
});

var RTL_OSVERSIONINFOEXW = new StructT('RTL_OSVERSIONINFOEXW', {
 dwOSVersionInfoSize: DWORD,
 dwMajorVersion: DWORD,
 dwMinorVersion: DWORD,
 dwBuildNumber: DWORD,
 dwPlatformId: DWORD,
 szCSDVersion: new ArrayT(WCHAR,  128 ),
 wServicePackMajor: WORD,
 wServicePackMinor: WORD,
 wSuiteMask: WORD,
 wProductType: BYTE,
 wReserved: BYTE
});

var CRITICAL_SECTION_DEBUG = new StructT('CRITICAL_SECTION_DEBUG', {
 Type: WORD,
 CreatorBackTraceIndex: WORD,
 CriticalSection: _RTL_CRITICAL_SECTION.Δ,
 ProcessLocksList: LIST_ENTRY,
 EntryCount: DWORD,
 ContentionCount: DWORD,
 Flags: DWORD,
 CreatorBackTraceIndexHigh: WORD,
 SpareWORD: WORD
});

var CRITICAL_SECTION = new StructT('CRITICAL_SECTION', {
 DebugInfo: PRTL_CRITICAL_SECTION_DEBUG,
 LockCount: LONG,
 RecursionCount: LONG,
 OwningThread: HANDLE,
 LockSemaphore: HANDLE,
 SpinCount: ULONG_PTR
});

var SRWLOCK = new StructT('SRWLOCK', {
 Ptr: PVOID
});

var CONDITION_VARIABLE = new StructT('CONDITION_VARIABLE', {
 Ptr: PVOID
});

var ACTIVATION_CONTEXT_QUERY_INDEX = new StructT('ACTIVATION_CONTEXT_QUERY_INDEX', {
 ulAssemblyIndex: DWORD,
 ulFileIndexInAssembly: DWORD
});

var ASSEMBLY_FILE_DETAILED_INFORMATION = new StructT('ASSEMBLY_FILE_DETAILED_INFORMATION', {
 ulFlags: DWORD,
 ulFilenameLength: DWORD,
 ulPathLength: DWORD,
 lpFileName: PCWSTR,
 lpFilePath: PCWSTR
});

var ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = new StructT('ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION', {
 ulFlags: DWORD,
 ulEncodedAssemblyIdentityLength: DWORD,
 ulManifestPathType: DWORD,
 ulManifestPathLength: DWORD,
 liManifestLastWriteTime: LARGE_INTEGER,
 ulPolicyPathType: DWORD,
 ulPolicyPathLength: DWORD,
 liPolicyLastWriteTime: LARGE_INTEGER,
 ulMetadataSatelliteRosterIndex: DWORD,
 ulManifestVersionMajor: DWORD,
 ulManifestVersionMinor: DWORD,
 ulPolicyVersionMajor: DWORD,
 ulPolicyVersionMinor: DWORD,
 ulAssemblyDirectoryNameLength: DWORD,
 lpAssemblyEncodedAssemblyIdentity: PCWSTR,
 lpAssemblyManifestPath: PCWSTR,
 lpAssemblyPolicyPath: PCWSTR,
 lpAssemblyDirectoryName: PCWSTR,
 ulFileCount: DWORD
});

var ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = new StructT('ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION', {
 ulFlags: DWORD,
 RunLevel: ACTCTX_REQUESTED_RUN_LEVEL,
 UiAccess: DWORD
});

var COMPATIBILITY_CONTEXT_ELEMENT = new StructT('COMPATIBILITY_CONTEXT_ELEMENT', {
 Id: GUID,
 Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE
});

var ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = new StructT('ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION', {
 ElementCount: DWORD,
 Elements: UNEXPOSED
});

var SUPPORTED_OS_INFO = new StructT('SUPPORTED_OS_INFO', {
 OsCount: WORD,
 MitigationExist: WORD,
 OsList: new ArrayT(WORD, undefined)
});

var ACTIVATION_CONTEXT_DETAILED_INFORMATION = new StructT('ACTIVATION_CONTEXT_DETAILED_INFORMATION', {
 dwFlags: DWORD,
 ulFormatVersion: DWORD,
 ulAssemblyCount: DWORD,
 ulRootManifestPathType: DWORD,
 ulRootManifestPathChars: DWORD,
 ulRootConfigurationPathType: DWORD,
 ulRootConfigurationPathChars: DWORD,
 ulAppDirPathType: DWORD,
 ulAppDirPathChars: DWORD,
 lpRootManifestPath: PCWSTR,
 lpRootConfigurationPath: PCWSTR,
 lpAppDirPath: PCWSTR
});

var HARDWARE_COUNTER_DATA = new StructT('HARDWARE_COUNTER_DATA', {
 Type: HARDWARE_COUNTER_TYPE,
 Reserved: DWORD,
 Value: DWORD64
});

var PERFORMANCE_DATA = new StructT('PERFORMANCE_DATA', {
 Size: WORD,
 Version: BYTE,
 HwCountersCount: BYTE,
 ContextSwitchCount: DWORD,
 WaitReasonBitMap: DWORD64,
 CycleTime: DWORD64,
 RetryCount: DWORD,
 Reserved: DWORD,
 HwCounters: new ArrayT(HARDWARE_COUNTER_DATA, MAX_HW_COUNTERS)
});

var EVENTLOGRECORD = new StructT('EVENTLOGRECORD', {
 Length: DWORD,
 Reserved: DWORD,
 RecordNumber: DWORD,
 TimeGenerated: DWORD,
 TimeWritten: DWORD,
 EventID: DWORD,
 EventType: WORD,
 NumStrings: WORD,
 EventCategory: WORD,
 ReservedFlags: WORD,
 ClosingRecordNumber: DWORD,
 StringOffset: DWORD,
 UserSidLength: DWORD,
 UserSidOffset: DWORD,
 DataLength: DWORD,
 DataOffset: DWORD
});

var _EVENTSFORLOGFILE = new StructT('_EVENTSFORLOGFILE', {
 ulSize: DWORD,
 szLogicalLogFile: new ArrayT(WCHAR, MAXLOGICALLOGNAMESIZE),
 ulNumRecords: DWORD,
 pEventLogRecords: UNEXPOSED
});

var _PACKEDEVENTINFO = new StructT('_PACKEDEVENTINFO', {
 ulSize: DWORD,
 ulNumEventsForLogFile: DWORD,
 ulOffsets: UNEXPOSED
});

var TAPE_ERASE = new StructT('TAPE_ERASE', {
 Type: DWORD,
 Immediate: BOOLEAN
});

var TAPE_PREPARE = new StructT('TAPE_PREPARE', {
 Operation: DWORD,
 Immediate: BOOLEAN
});

var TAPE_WRITE_MARKS = new StructT('TAPE_WRITE_MARKS', {
 Type: DWORD,
 Count: DWORD,
 Immediate: BOOLEAN
});

var TAPE_GET_POSITION = new StructT('TAPE_GET_POSITION', {
 Type: DWORD,
 Partition: DWORD,
 Offset: LARGE_INTEGER
});

var TAPE_SET_POSITION = new StructT('TAPE_SET_POSITION', {
 Method: DWORD,
 Partition: DWORD,
 Offset: LARGE_INTEGER,
 Immediate: BOOLEAN
});

var TAPE_GET_DRIVE_PARAMETERS = new StructT('TAPE_GET_DRIVE_PARAMETERS', {
 ECC: BOOLEAN,
 Compression: BOOLEAN,
 DataPadding: BOOLEAN,
 ReportSetmarks: BOOLEAN,
 DefaultBlockSize: DWORD,
 MaximumBlockSize: DWORD,
 MinimumBlockSize: DWORD,
 MaximumPartitionCount: DWORD,
 FeaturesLow: DWORD,
 FeaturesHigh: DWORD,
 EOTWarningZoneSize: DWORD
});

var TAPE_SET_DRIVE_PARAMETERS = new StructT('TAPE_SET_DRIVE_PARAMETERS', {
 ECC: BOOLEAN,
 Compression: BOOLEAN,
 DataPadding: BOOLEAN,
 ReportSetmarks: BOOLEAN,
 EOTWarningZoneSize: DWORD
});

var TAPE_GET_MEDIA_PARAMETERS = new StructT('TAPE_GET_MEDIA_PARAMETERS', {
 Capacity: LARGE_INTEGER,
 Remaining: LARGE_INTEGER,
 BlockSize: DWORD,
 PartitionCount: DWORD,
 WriteProtected: BOOLEAN
});

var TAPE_SET_MEDIA_PARAMETERS = new StructT('TAPE_SET_MEDIA_PARAMETERS', {
 BlockSize: DWORD
});

var TAPE_CREATE_PARTITION = new StructT('TAPE_CREATE_PARTITION', {
 Method: DWORD,
 Count: DWORD,
 Size: DWORD
});

var TAPE_WMI_OPERATIONS = new StructT('TAPE_WMI_OPERATIONS', {
 Method: DWORD,
 DataBufferSize: DWORD,
 DataBuffer: PVOID
});

var TRANSACTION_NOTIFICATION = new StructT('TRANSACTION_NOTIFICATION', {
 TransactionKey: PVOID,
 TransactionNotification: ULONG,
 TmVirtualClock: LARGE_INTEGER,
 ArgumentLength: ULONG
});

var TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = new StructT('TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT', {
 EnlistmentId: GUID,
 UOW: UOW
});

var TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = new StructT('TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT', {
 TmIdentity: GUID,
 Flags: ULONG
});

var TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = new StructT('TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT', {
 SavepointId: SAVEPOINT_ID
});

var TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = new StructT('TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT', {
 PropagationCookie: ULONG,
 UOW: GUID,
 TmIdentity: GUID,
 BufferLength: ULONG
});

var TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = new StructT('TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT', {
 MarshalCookie: ULONG,
 UOW: GUID
});

var KCRM_MARSHAL_HEADER = new StructT('KCRM_MARSHAL_HEADER', {
 VersionMajor: ULONG,
 VersionMinor: ULONG,
 NumProtocols: ULONG,
 Unused: ULONG
});

var KCRM_TRANSACTION_BLOB = new StructT('KCRM_TRANSACTION_BLOB', {
 UOW: UOW,
 TmIdentity: GUID,
 IsolationLevel: ULONG,
 IsolationFlags: ULONG,
 Timeout: ULONG,
 Description: new ArrayT(WCHAR, MAX_TRANSACTION_DESCRIPTION_LENGTH)
});

var KCRM_PROTOCOL_BLOB = new StructT('KCRM_PROTOCOL_BLOB', {
 ProtocolId: CRM_PROTOCOL_ID,
 StaticInfoLength: ULONG,
 TransactionIdInfoLength: ULONG,
 Unused1: ULONG,
 Unused2: ULONG
});

var TRANSACTION_BASIC_INFORMATION = new StructT('TRANSACTION_BASIC_INFORMATION', {
 TransactionId: GUID,
 State: DWORD,
 Outcome: DWORD
});

var TRANSACTIONMANAGER_BASIC_INFORMATION = new StructT('TRANSACTIONMANAGER_BASIC_INFORMATION', {
 TmIdentity: GUID,
 VirtualClock: LARGE_INTEGER
});

var TRANSACTIONMANAGER_LOG_INFORMATION = new StructT('TRANSACTIONMANAGER_LOG_INFORMATION', {
 LogIdentity: GUID
});

var TRANSACTIONMANAGER_LOGPATH_INFORMATION = new StructT('TRANSACTIONMANAGER_LOGPATH_INFORMATION', {
 LogPathLength: DWORD,
 LogPath: new ArrayT(WCHAR, 1)
});

var TRANSACTIONMANAGER_RECOVERY_INFORMATION = new StructT('TRANSACTIONMANAGER_RECOVERY_INFORMATION', {
 LastRecoveredLsn: ULONGLONG
});

var TRANSACTIONMANAGER_OLDEST_INFORMATION = new StructT('TRANSACTIONMANAGER_OLDEST_INFORMATION', {
 OldestTransactionGuid: GUID
});

var TRANSACTION_PROPERTIES_INFORMATION = new StructT('TRANSACTION_PROPERTIES_INFORMATION', {
 IsolationLevel: DWORD,
 IsolationFlags: DWORD,
 Timeout: LARGE_INTEGER,
 Outcome: DWORD,
 DescriptionLength: DWORD,
 Description: new ArrayT(WCHAR, 1)
});

var TRANSACTION_BIND_INFORMATION = new StructT('TRANSACTION_BIND_INFORMATION', {
 TmHandle: HANDLE
});

var TRANSACTION_ENLISTMENT_PAIR = new StructT('TRANSACTION_ENLISTMENT_PAIR', {
 EnlistmentId: GUID,
 ResourceManagerId: GUID
});

var TRANSACTION_ENLISTMENTS_INFORMATION = new StructT('TRANSACTION_ENLISTMENTS_INFORMATION', {
 NumberOfEnlistments: DWORD,
 EnlistmentPair: new ArrayT(TRANSACTION_ENLISTMENT_PAIR, 1)
});

var TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = new StructT('TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION', {
 SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR
});

var RESOURCEMANAGER_BASIC_INFORMATION = new StructT('RESOURCEMANAGER_BASIC_INFORMATION', {
 ResourceManagerId: GUID,
 DescriptionLength: DWORD,
 Description: new ArrayT(WCHAR, 1)
});

var RESOURCEMANAGER_COMPLETION_INFORMATION = new StructT('RESOURCEMANAGER_COMPLETION_INFORMATION', {
 IoCompletionPortHandle: HANDLE,
 CompletionKey: ULONG_PTR
});

var ENLISTMENT_BASIC_INFORMATION = new StructT('ENLISTMENT_BASIC_INFORMATION', {
 EnlistmentId: GUID,
 TransactionId: GUID,
 ResourceManagerId: GUID
});

var ENLISTMENT_CRM_INFORMATION = new StructT('ENLISTMENT_CRM_INFORMATION', {
 CrmTransactionManagerId: GUID,
 CrmResourceManagerId: GUID,
 CrmEnlistmentId: GUID
});

var TRANSACTION_LIST_ENTRY = new StructT('TRANSACTION_LIST_ENTRY', {
 UOW: UOW
});

var TRANSACTION_LIST_INFORMATION = new StructT('TRANSACTION_LIST_INFORMATION', {
 NumberOfTransactions: DWORD,
 TransactionInformation: new ArrayT(TRANSACTION_LIST_ENTRY, 1)
});

var KTMOBJECT_CURSOR = new StructT('KTMOBJECT_CURSOR', {
 LastQuery: GUID,
 ObjectIdCount: DWORD,
 ObjectIds: new ArrayT(GUID, 1)
});



var TP_POOL_STACK_INFORMATION = new StructT('TP_POOL_STACK_INFORMATION', {
 StackReserve: SIZE_T,
 StackCommit: SIZE_T
});


var TP_CALLBACK_ENVIRON = new StructT('TP_CALLBACK_ENVIRON', {
 Version: TP_VERSION,
 Pool: PTP_POOL,
 CleanupGroup: PTP_CLEANUP_GROUP,
 CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
 RaceDll: PVOID,
 ActivationContext: _ACTIVATION_CONTEXT.Δ,
 FinalizationCallback: PTP_SIMPLE_CALLBACK,
 u: c:winnt.h@495534@S@_TP_CALLBACK_ENVIRON_V3@Ua,
 CallbackPriority: TP_CALLBACK_PRIORITY,
 Size: DWORD
});


var undefined = new StructT('undefined', {
 LongFunction: DWORD,
 Persistent: DWORD,
 Private: DWORD
});





var BORDERWIDTHS = new StructT('BORDERWIDTHS', {
 left: LONG,
 top: LONG,
 right: LONG,
 bottom: LONG
});

var RECTL = new StructT('RECTL', {
 left: LONG,
 top: LONG,
 right: LONG,
 bottom: LONG
});

var POINT = new StructT('POINT', {
 x: LONG,
 y: LONG
});

var POINTL = new StructT('POINTL', {
 x: LONG,
 y: LONG
});

var SIZEL = new StructT('SIZEL', {
 cx: LONG,
 cy: LONG
});

var POINTS = new StructT('POINTS', {
 x: SHORT,
 y: SHORT
});

var FILETIME = new StructT('FILETIME', {
 dwLowDateTime: DWORD,
 dwHighDateTime: DWORD
});

var OVERLAPPED = new StructT('OVERLAPPED', {
 Internal: ULONG_PTR,
 InternalHigh: ULONG_PTR,
 hEvent: HANDLE
});

var undefined = new StructT('undefined', {
 Offset: DWORD,
 OffsetHigh: DWORD
});

var OVERLAPPED_ENTRY = new StructT('OVERLAPPED_ENTRY', {
 lpCompletionKey: ULONG_PTR,
 lpOverlapped: LPOVERLAPPED,
 Internal: ULONG_PTR,
 dwNumberOfBytesTransferred: DWORD
});

var SECURITY_ATTRIBUTES = new StructT('SECURITY_ATTRIBUTES', {
 nLength: DWORD,
 lpSecurityDescriptor: LPVOID,
 bInheritHandle: BOOL
});

var PROCESS_INFORMATION = new StructT('PROCESS_INFORMATION', {
 hProcess: HANDLE,
 hThread: HANDLE,
 dwProcessId: DWORD,
 dwThreadId: DWORD
});

var SYSTEMTIME = new StructT('SYSTEMTIME', {
 wYear: WORD,
 wMonth: WORD,
 wDayOfWeek: WORD,
 wDay: WORD,
 wHour: WORD,
 wMinute: WORD,
 wSecond: WORD,
 wMilliseconds: WORD
});

var COMMPROP = new StructT('COMMPROP', {
 wPacketLength: WORD,
 wPacketVersion: WORD,
 dwServiceMask: DWORD,
 dwReserved1: DWORD,
 dwMaxTxQueue: DWORD,
 dwMaxRxQueue: DWORD,
 dwMaxBaud: DWORD,
 dwProvSubType: DWORD,
 dwProvCapabilities: DWORD,
 dwSettableParams: DWORD,
 dwSettableBaud: DWORD,
 wSettableData: WORD,
 wSettableStopParity: WORD,
 dwCurrentTxQueue: DWORD,
 dwCurrentRxQueue: DWORD,
 dwProvSpec1: DWORD,
 dwProvSpec2: DWORD,
 wcProvChar: new ArrayT(WCHAR, 1)
});

var COMSTAT = new StructT('COMSTAT', {
 fCtsHold: DWORD,
 fDsrHold: DWORD,
 fRlsdHold: DWORD,
 fXoffHold: DWORD,
 fXoffSent: DWORD,
 fEof: DWORD,
 fTxim: DWORD,
 fReserved: DWORD,
 cbInQue: DWORD,
 cbOutQue: DWORD
});

var DCB = new StructT('DCB', {
 DCBlength: DWORD,
 BaudRate: DWORD,
 fBinary: DWORD,
 fParity: DWORD,
 fOutxCtsFlow: DWORD,
 fOutxDsrFlow: DWORD,
 fDtrControl: DWORD,
 fDsrSensitivity: DWORD,
 fTXContinueOnXoff: DWORD,
 fOutX: DWORD,
 fInX: DWORD,
 fErrorChar: DWORD,
 fNull: DWORD,
 fRtsControl: DWORD,
 fAbortOnError: DWORD,
 fDummy2: DWORD,
 wReserved: WORD,
 XonLim: WORD,
 XoffLim: WORD,
 ByteSize: BYTE,
 Parity: BYTE,
 StopBits: BYTE,
 XonChar: char,
 XoffChar: char,
 ErrorChar: char,
 EofChar: char,
 EvtChar: char,
 wReserved1: WORD
});

var COMMTIMEOUTS = new StructT('COMMTIMEOUTS', {
 ReadIntervalTimeout: DWORD,
 ReadTotalTimeoutMultiplier: DWORD,
 ReadTotalTimeoutConstant: DWORD,
 WriteTotalTimeoutMultiplier: DWORD,
 WriteTotalTimeoutConstant: DWORD
});

var COMMCONFIG = new StructT('COMMCONFIG', {
 dwSize: DWORD,
 wVersion: WORD,
 wReserved: WORD,
 dcb: DCB,
 dwProviderSubType: DWORD,
 dwProviderOffset: DWORD,
 dwProviderSize: DWORD,
 wcProviderData: new ArrayT(WCHAR, 1)
});

var SYSTEM_INFO = new StructT('SYSTEM_INFO', {
 dwPageSize: DWORD,
 lpMinimumApplicationAddress: LPVOID,
 lpMaximumApplicationAddress: LPVOID,
 dwActiveProcessorMask: DWORD_PTR,
 dwNumberOfProcessors: DWORD,
 dwProcessorType: DWORD,
 dwAllocationGranularity: DWORD,
 wProcessorLevel: WORD,
 wProcessorRevision: WORD
});

var undefined = new StructT('undefined', {
 wProcessorArchitecture: WORD,
 wReserved: WORD
});

var MEMORYSTATUS = new StructT('MEMORYSTATUS', {
 dwLength: DWORD,
 dwMemoryLoad: DWORD,
 dwTotalPhys: SIZE_T,
 dwAvailPhys: SIZE_T,
 dwTotalPageFile: SIZE_T,
 dwAvailPageFile: SIZE_T,
 dwTotalVirtual: SIZE_T,
 dwAvailVirtual: SIZE_T
});

var EXCEPTION_DEBUG_INFO = new StructT('EXCEPTION_DEBUG_INFO', {
 ExceptionRecord: EXCEPTION_RECORD,
 dwFirstChance: DWORD
});

var CREATE_THREAD_DEBUG_INFO = new StructT('CREATE_THREAD_DEBUG_INFO', {
 hThread: HANDLE,
 lpThreadLocalBase: LPVOID,
 lpStartAddress: LPTHREAD_START_ROUTINE
});

var CREATE_PROCESS_DEBUG_INFO = new StructT('CREATE_PROCESS_DEBUG_INFO', {
 hFile: HANDLE,
 hProcess: HANDLE,
 hThread: HANDLE,
 lpBaseOfImage: LPVOID,
 dwDebugInfoFileOffset: DWORD,
 nDebugInfoSize: DWORD,
 lpThreadLocalBase: LPVOID,
 lpStartAddress: LPTHREAD_START_ROUTINE,
 lpImageName: LPVOID,
 fUnicode: WORD
});

var EXIT_THREAD_DEBUG_INFO = new StructT('EXIT_THREAD_DEBUG_INFO', {
 dwExitCode: DWORD
});

var EXIT_PROCESS_DEBUG_INFO = new StructT('EXIT_PROCESS_DEBUG_INFO', {
 dwExitCode: DWORD
});

var LOAD_DLL_DEBUG_INFO = new StructT('LOAD_DLL_DEBUG_INFO', {
 hFile: HANDLE,
 lpBaseOfDll: LPVOID,
 dwDebugInfoFileOffset: DWORD,
 nDebugInfoSize: DWORD,
 lpImageName: LPVOID,
 fUnicode: WORD
});

var UNLOAD_DLL_DEBUG_INFO = new StructT('UNLOAD_DLL_DEBUG_INFO', {
 lpBaseOfDll: LPVOID
});

var OUTPUT_DEBUG_STRING_INFO = new StructT('OUTPUT_DEBUG_STRING_INFO', {
 lpDebugStringData: LPSTR,
 fUnicode: WORD,
 nDebugStringLength: WORD
});

var RIP_INFO = new StructT('RIP_INFO', {
 dwError: DWORD,
 dwType: DWORD
});

var DEBUG_EVENT = new StructT('DEBUG_EVENT', {
 dwDebugEventCode: DWORD,
 dwProcessId: DWORD,
 dwThreadId: DWORD,
 u: c:winbase.h@29353@S@_DEBUG_EVENT@Ua
});

var JIT_DEBUG_INFO64 = new StructT('JIT_DEBUG_INFO64', {
 dwSize: DWORD,
 dwProcessorArchitecture: DWORD,
 dwThreadID: DWORD,
 dwReserved0: DWORD,
 lpExceptionAddress: ULONG64,
 lpExceptionRecord: ULONG64,
 lpContextRecord: ULONG64
});

var OFSTRUCT = new StructT('OFSTRUCT', {
 cBytes: BYTE,
 fFixedDisk: BYTE,
 nErrCode: WORD,
 Reserved1: WORD,
 Reserved2: WORD,
 szPathName: new ArrayT(CHAR, OFS_MAXPATHNAME)
});

var MEMORYSTATUSEX = new StructT('MEMORYSTATUSEX', {
 dwLength: DWORD,
 dwMemoryLoad: DWORD,
 ullTotalPhys: DWORDLONG,
 ullAvailPhys: DWORDLONG,
 ullTotalPageFile: DWORDLONG,
 ullAvailPageFile: DWORDLONG,
 ullTotalVirtual: DWORDLONG,
 ullAvailVirtual: DWORDLONG,
 ullAvailExtendedVirtual: DWORDLONG
});

var PROCESS_HEAP_ENTRY = new StructT('PROCESS_HEAP_ENTRY', {
 lpData: PVOID,
 cbData: DWORD,
 cbOverhead: BYTE,
 iRegionIndex: BYTE,
 wFlags: WORD
});

var undefined = new StructT('undefined', {
 hMem: HANDLE,
 dwReserved: new ArrayT(DWORD,  3 )
});

var undefined = new StructT('undefined', {
 dwCommittedSize: DWORD,
 dwUnCommittedSize: DWORD,
 lpFirstBlock: LPVOID,
 lpLastBlock: LPVOID
});

var UMS_SCHEDULER_STARTUP_INFO = new StructT('UMS_SCHEDULER_STARTUP_INFO', {
 UmsVersion: ULONG,
 CompletionList: PUMS_COMPLETION_LIST,
 SchedulerProc: PUMS_SCHEDULER_ENTRY_POINT,
 SchedulerParam: PVOID
});


var POWER_REQUEST_CONTEXT = new StructT('POWER_REQUEST_CONTEXT', {
 Version: ULONG,
 Flags: DWORD,
 Reason: c:winbase.h@97709@S@_REASON_CONTEXT@Ua
});

var undefined = new StructT('undefined', {
 LocalizedReasonModule: HMODULE,
 LocalizedReasonId: ULONG,
 ReasonStringCount: ULONG,
 ReasonStrings: LPWSTR.Δ
});

var BY_HANDLE_FILE_INFORMATION = new StructT('BY_HANDLE_FILE_INFORMATION', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 dwVolumeSerialNumber: DWORD,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 nNumberOfLinks: DWORD,
 nFileIndexHigh: DWORD,
 nFileIndexLow: DWORD
});

var TIME_ZONE_INFORMATION = new StructT('TIME_ZONE_INFORMATION', {
 Bias: LONG,
 StandardName: new ArrayT(WCHAR,  32 ),
 StandardDate: SYSTEMTIME,
 StandardBias: LONG,
 DaylightName: new ArrayT(WCHAR,  32 ),
 DaylightDate: SYSTEMTIME,
 DaylightBias: LONG
});

var DYNAMIC_TIME_ZONE_INFORMATION = new StructT('DYNAMIC_TIME_ZONE_INFORMATION', {
 Bias: LONG,
 StandardName: new ArrayT(WCHAR,  32 ),
 StandardDate: SYSTEMTIME,
 StandardBias: LONG,
 DaylightName: new ArrayT(WCHAR,  32 ),
 DaylightDate: SYSTEMTIME,
 DaylightBias: LONG,
 TimeZoneKeyName: new ArrayT(WCHAR,  128 ),
 DynamicDaylightTimeDisabled: BOOLEAN
});

var WIN32_STREAM_ID = new StructT('WIN32_STREAM_ID', {
 dwStreamId: DWORD,
 dwStreamAttributes: DWORD,
 Size: LARGE_INTEGER,
 dwStreamNameSize: DWORD,
 cStreamName: new ArrayT(WCHAR,  ANYSIZE_new ArrayT )
});

var STARTUPINFO = new StructT('STARTUPINFO', {
 cb: DWORD,
 lpReserved: LPSTR,
 lpDesktop: LPSTR,
 lpTitle: LPSTR,
 dwX: DWORD,
 dwY: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwXCountChars: DWORD,
 dwYCountChars: DWORD,
 dwFillAttribute: DWORD,
 dwFlags: DWORD,
 wShowWindow: WORD,
 cbReserved2: WORD,
 lpReserved2: LPBYTE,
 hStdInput: HANDLE,
 hStdOutput: HANDLE,
 hStdError: HANDLE
});

var STARTUPINFOW = new StructT('STARTUPINFOW', {
 cb: DWORD,
 lpReserved: LPWSTR,
 lpDesktop: LPWSTR,
 lpTitle: LPWSTR,
 dwX: DWORD,
 dwY: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwXCountChars: DWORD,
 dwYCountChars: DWORD,
 dwFillAttribute: DWORD,
 dwFlags: DWORD,
 wShowWindow: WORD,
 cbReserved2: WORD,
 lpReserved2: LPBYTE,
 hStdInput: HANDLE,
 hStdOutput: HANDLE,
 hStdError: HANDLE
});

var STARTUPINFOEX = new StructT('STARTUPINFOEX', {
 StartupInfo: STARTUPINFOA,
 lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
});

var STARTUPINFOEXW = new StructT('STARTUPINFOEXW', {
 StartupInfo: STARTUPINFOW,
 lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST
});

var WIN32_FIND_DATA = new StructT('WIN32_FIND_DATA', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 dwReserved0: DWORD,
 dwReserved1: DWORD,
 cFileName: new ArrayT(CHAR,  MAX_PATH ),
 cAlternateFileName: new ArrayT(CHAR,  14 )
});

var WIN32_FIND_DATAW = new StructT('WIN32_FIND_DATAW', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD,
 dwReserved0: DWORD,
 dwReserved1: DWORD,
 cFileName: new ArrayT(WCHAR,  MAX_PATH ),
 cAlternateFileName: new ArrayT(WCHAR,  14 )
});

var WIN32_FILE_ATTRIBUTE_DATA = new StructT('WIN32_FILE_ATTRIBUTE_DATA', {
 dwFileAttributes: DWORD,
 ftCreationTime: FILETIME,
 ftLastAccessTime: FILETIME,
 ftLastWriteTime: FILETIME,
 nFileSizeHigh: DWORD,
 nFileSizeLow: DWORD
});

var WIN32_FIND_STREAM_DATA = new StructT('WIN32_FIND_STREAM_DATA', {
 StreamSize: LARGE_INTEGER,
 cStreamName: new ArrayT(WCHAR, undefined)
});

var EVENTLOG_FULL_INFORMATION = new StructT('EVENTLOG_FULL_INFORMATION', {
 dwFull: DWORD
});

var HW_PROFILE_INFO = new StructT('HW_PROFILE_INFO', {
 dwDockInfo: DWORD,
 szHwProfileGuid: new ArrayT(CHAR, HW_PROFILE_GUIDLEN),
 szHwProfileName: new ArrayT(CHAR, MAX_PROFILE_LEN)
});

var HW_PROFILE_INFOW = new StructT('HW_PROFILE_INFOW', {
 dwDockInfo: DWORD,
 szHwProfileGuid: new ArrayT(WCHAR, HW_PROFILE_GUIDLEN),
 szHwProfileName: new ArrayT(WCHAR, MAX_PROFILE_LEN)
});

var SYSTEM_POWER_STATUS = new StructT('SYSTEM_POWER_STATUS', {
 ACLineStatus: BYTE,
 BatteryFlag: BYTE,
 BatteryLifePercent: BYTE,
 Reserved1: BYTE,
 BatteryLifeTime: DWORD,
 BatteryFullLifeTime: DWORD
});

var ACTCTX = new StructT('ACTCTX', {
 cbSize: ULONG,
 dwFlags: DWORD,
 lpSource: LPCSTR,
 wProcessorArchitecture: USHORT,
 wLangId: LANGID,
 lpAssemblyDirectory: LPCSTR,
 lpResourceName: LPCSTR,
 lpApplicationName: LPCSTR,
 hModule: HMODULE
});

var ACTCTXW = new StructT('ACTCTXW', {
 cbSize: ULONG,
 dwFlags: DWORD,
 lpSource: LPCWSTR,
 wProcessorArchitecture: USHORT,
 wLangId: LANGID,
 lpAssemblyDirectory: LPCWSTR,
 lpResourceName: LPCWSTR,
 lpApplicationName: LPCWSTR,
 hModule: HMODULE
});

var ACTCTX_SECTION_KEYED_DATA_2600 = new StructT('ACTCTX_SECTION_KEYED_DATA_2600', {
 cbSize: ULONG,
 ulDataFormatVersion: ULONG,
 lpData: PVOID,
 ulLength: ULONG,
 lpSectionGlobalData: PVOID,
 ulSectionGlobalDataLength: ULONG,
 lpSectionBase: PVOID,
 ulSectionTotalLength: ULONG,
 hActCtx: HANDLE,
 ulAssemblyRosterIndex: ULONG
});

var ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = new StructT('ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA', {
 lpInformation: PVOID,
 lpSectionBase: PVOID,
 ulSectionLength: ULONG,
 lpSectionGlobalDataBase: PVOID,
 ulSectionGlobalDataLength: ULONG
});

var ACTCTX_SECTION_KEYED_DATA = new StructT('ACTCTX_SECTION_KEYED_DATA', {
 cbSize: ULONG,
 ulDataFormatVersion: ULONG,
 lpData: PVOID,
 ulLength: ULONG,
 lpSectionGlobalData: PVOID,
 ulSectionGlobalDataLength: ULONG,
 lpSectionBase: PVOID,
 ulSectionTotalLength: ULONG,
 hActCtx: HANDLE,
 ulAssemblyRosterIndex: ULONG,
 ulFlags: ULONG,
 AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
});

var ACTIVATION_CONTEXT_BASIC_INFORMATION = new StructT('ACTIVATION_CONTEXT_BASIC_INFORMATION', {
 hActCtx: HANDLE,
 dwFlags: DWORD
});

var FILE_BASIC_INFO = new StructT('FILE_BASIC_INFO', {
 CreationTime: LARGE_INTEGER,
 LastAccessTime: LARGE_INTEGER,
 LastWriteTime: LARGE_INTEGER,
 ChangeTime: LARGE_INTEGER,
 FileAttributes: DWORD
});

var FILE_STANDARD_INFO = new StructT('FILE_STANDARD_INFO', {
 AllocationSize: LARGE_INTEGER,
 EndOfFile: LARGE_INTEGER,
 NumberOfLinks: DWORD,
 DeletePending: BOOLEAN,
 Directory: BOOLEAN
});

var FILE_NAME_INFO = new StructT('FILE_NAME_INFO', {
 FileNameLength: DWORD,
 FileName: new ArrayT(WCHAR, 1)
});

var FILE_RENAME_INFO = new StructT('FILE_RENAME_INFO', {
 ReplaceIfExists: BOOLEAN,
 RootDirectory: HANDLE,
 FileNameLength: DWORD,
 FileName: new ArrayT(WCHAR, 1)
});

var FILE_ALLOCATION_INFO = new StructT('FILE_ALLOCATION_INFO', {
 AllocationSize: LARGE_INTEGER
});

var FILE_END_OF_FILE_INFO = new StructT('FILE_END_OF_FILE_INFO', {
 EndOfFile: LARGE_INTEGER
});

var FILE_STREAM_INFO = new StructT('FILE_STREAM_INFO', {
 NextEntryOffset: DWORD,
 StreamNameLength: DWORD,
 StreamSize: LARGE_INTEGER,
 StreamAllocationSize: LARGE_INTEGER,
 StreamName: new ArrayT(WCHAR, 1)
});

var FILE_COMPRESSION_INFO = new StructT('FILE_COMPRESSION_INFO', {
 CompressedFileSize: LARGE_INTEGER,
 CompressionFormat: WORD,
 CompressionUnitShift: UCHAR,
 ChunkShift: UCHAR,
 ClusterShift: UCHAR,
 Reserved: new ArrayT(UCHAR, 3)
});

var FILE_ATTRIBUTE_TAG_INFO = new StructT('FILE_ATTRIBUTE_TAG_INFO', {
 FileAttributes: DWORD,
 ReparseTag: DWORD
});

var FILE_DISPOSITION_INFO = new StructT('FILE_DISPOSITION_INFO', {
 DeleteFileA: BOOLEAN
});

var FILE_ID_BOTH_DIR_INFO = new StructT('FILE_ID_BOTH_DIR_INFO', {
 NextEntryOffset: DWORD,
 FileIndex: DWORD,
 CreationTime: LARGE_INTEGER,
 LastAccessTime: LARGE_INTEGER,
 LastWriteTime: LARGE_INTEGER,
 ChangeTime: LARGE_INTEGER,
 EndOfFile: LARGE_INTEGER,
 AllocationSize: LARGE_INTEGER,
 FileAttributes: DWORD,
 FileNameLength: DWORD,
 EaSize: DWORD,
 ShortNameLength: CCHAR,
 ShortName: new ArrayT(WCHAR, 12),
 FileId: LARGE_INTEGER,
 FileName: new ArrayT(WCHAR, 1)
});

var FILE_IO_PRIORITY_HINT_INFO = new StructT('FILE_IO_PRIORITY_HINT_INFO', {
 PriorityHint: PRIORITY_HINT
});

var FILE_REMOTE_PROTOCOL_INFO = new StructT('FILE_REMOTE_PROTOCOL_INFO', {
 StructureVersion: USHORT,
 StructureSize: USHORT,
 Protocol: DWORD,
 ProtocolMajorVersion: USHORT,
 ProtocolMinorVersion: USHORT,
 ProtocolRevision: USHORT,
 Reserved: USHORT,
 Flags: DWORD,
 GenericReserved: ,
 ProtocolSpecificReserved:
});

var undefined = new StructT('undefined', {
 Reserved: new ArrayT(DWORD, 8)
});

var undefined = new StructT('undefined', {
 Reserved: new ArrayT(DWORD, 16)
});

var FILE_ID_DESCRIPTOR = new StructT('FILE_ID_DESCRIPTOR', {
 dwSize: DWORD,
 Type: FILE_ID_TYPE
});

var DRAWPATRECT = new StructT('DRAWPATRECT', {
 ptPosition: POINT,
 ptSize: POINT,
 wStyle: WORD,
 wPattern: WORD
});

var PSINJECTDATA = new StructT('PSINJECTDATA', {
 DataBytes: DWORD,
 InjectionPoint: WORD,
 PageNumber: WORD
});

var PSFEATURE_OUTPUT = new StructT('PSFEATURE_OUTPUT', {
 bPageIndependent: BOOL,
 bSetPageDevice: BOOL
});

var PSFEATURE_CUSTPAPER = new StructT('PSFEATURE_CUSTPAPER', {
 lOrientation: LONG,
 lWidth: LONG,
 lHeight: LONG,
 lWidthOffset: LONG,
 lHeightOffset: LONG
});

var XFORM = new StructT('XFORM', {
 eM11: FLOAT,
 eM12: FLOAT,
 eM21: FLOAT,
 eM22: FLOAT,
 eDx: FLOAT,
 eDy: FLOAT
});

var BITMAP = new StructT('BITMAP', {
 bmType: LONG,
 bmWidth: LONG,
 bmHeight: LONG,
 bmWidthBytes: LONG,
 bmPlanes: WORD,
 bmBitsPixel: WORD,
 bmBits: LPVOID
});

var RGBTRIPLE = new StructT('RGBTRIPLE', {
 rgbtBlue: BYTE,
 rgbtGreen: BYTE,
 rgbtRed: BYTE
});

var RGBQUAD = new StructT('RGBQUAD', {
 rgbBlue: BYTE,
 rgbGreen: BYTE,
 rgbRed: BYTE,
 rgbReserved: BYTE
});

var CIEXYZ = new StructT('CIEXYZ', {
 ciexyzX: FXPT2DOT30,
 ciexyzY: FXPT2DOT30,
 ciexyzZ: FXPT2DOT30
});

var CIEXYZTRIPLE = new StructT('CIEXYZTRIPLE', {
 ciexyzRed: CIEXYZ,
 ciexyzGreen: CIEXYZ,
 ciexyzBlue: CIEXYZ
});

var LOGCOLORSPACE = new StructT('LOGCOLORSPACE', {
 lcsSignature: DWORD,
 lcsVersion: DWORD,
 lcsSize: DWORD,
 lcsCSType: LCSCSTYPE,
 lcsIntent: LCSGAMUTMATCH,
 lcsEndpoints: CIEXYZTRIPLE,
 lcsGammaRed: DWORD,
 lcsGammaGreen: DWORD,
 lcsGammaBlue: DWORD,
 lcsFilename: new ArrayT(CHAR, MAX_PATH)
});

var LOGCOLORSPACEW = new StructT('LOGCOLORSPACEW', {
 lcsSignature: DWORD,
 lcsVersion: DWORD,
 lcsSize: DWORD,
 lcsCSType: LCSCSTYPE,
 lcsIntent: LCSGAMUTMATCH,
 lcsEndpoints: CIEXYZTRIPLE,
 lcsGammaRed: DWORD,
 lcsGammaGreen: DWORD,
 lcsGammaBlue: DWORD,
 lcsFilename: new ArrayT(WCHAR, MAX_PATH)
});

var BITMAPCOREHEADER = new StructT('BITMAPCOREHEADER', {
 bcSize: DWORD,
 bcWidth: WORD,
 bcHeight: WORD,
 bcPlanes: WORD,
 bcBitCount: WORD
});

var BITMAPINFOHEADER = new StructT('BITMAPINFOHEADER', {
 biSize: DWORD,
 biWidth: LONG,
 biHeight: LONG,
 biPlanes: WORD,
 biBitCount: WORD,
 biCompression: DWORD,
 biSizeImage: DWORD,
 biXPelsPerMeter: LONG,
 biYPelsPerMeter: LONG,
 biClrUsed: DWORD,
 biClrImportant: DWORD
});

var BITMAPV4HEADER = new StructT('BITMAPV4HEADER', {
 bV4Size: DWORD,
 bV4Width: LONG,
 bV4Height: LONG,
 bV4Planes: WORD,
 bV4BitCount: WORD,
 bV4V4Compression: DWORD,
 bV4SizeImage: DWORD,
 bV4XPelsPerMeter: LONG,
 bV4YPelsPerMeter: LONG,
 bV4ClrUsed: DWORD,
 bV4ClrImportant: DWORD,
 bV4RedMask: DWORD,
 bV4GreenMask: DWORD,
 bV4BlueMask: DWORD,
 bV4AlphaMask: DWORD,
 bV4CSType: DWORD,
 bV4Endpoints: CIEXYZTRIPLE,
 bV4GammaRed: DWORD,
 bV4GammaGreen: DWORD,
 bV4GammaBlue: DWORD
});

var BITMAPV5HEADER = new StructT('BITMAPV5HEADER', {
 bV5Size: DWORD,
 bV5Width: LONG,
 bV5Height: LONG,
 bV5Planes: WORD,
 bV5BitCount: WORD,
 bV5Compression: DWORD,
 bV5SizeImage: DWORD,
 bV5XPelsPerMeter: LONG,
 bV5YPelsPerMeter: LONG,
 bV5ClrUsed: DWORD,
 bV5ClrImportant: DWORD,
 bV5RedMask: DWORD,
 bV5GreenMask: DWORD,
 bV5BlueMask: DWORD,
 bV5AlphaMask: DWORD,
 bV5CSType: DWORD,
 bV5Endpoints: CIEXYZTRIPLE,
 bV5GammaRed: DWORD,
 bV5GammaGreen: DWORD,
 bV5GammaBlue: DWORD,
 bV5Intent: DWORD,
 bV5ProfileData: DWORD,
 bV5ProfileSize: DWORD,
 bV5Reserved: DWORD
});

var BITMAPINFO = new StructT('BITMAPINFO', {
 bmiHeader: BITMAPINFOHEADER,
 bmiColors: new ArrayT(RGBQUAD, 1)
});

var BITMAPCOREINFO = new StructT('BITMAPCOREINFO', {
 bmciHeader: BITMAPCOREHEADER,
 bmciColors: new ArrayT(RGBTRIPLE, 1)
});

var BITMAPFILEHEADER = new StructT('BITMAPFILEHEADER', {
 bfType: WORD,
 bfSize: DWORD,
 bfReserved1: WORD,
 bfReserved2: WORD,
 bfOffBits: DWORD
});

var FONTSIGNATURE = new StructT('FONTSIGNATURE', {
 fsUsb: new ArrayT(DWORD, 4),
 fsCsb: new ArrayT(DWORD, 2)
});

var CHARSETINFO = new StructT('CHARSETINFO', {
 ciCharset: UINT,
 ciACP: UINT,
 fs: FONTSIGNATURE
});

var LOCALESIGNATURE = new StructT('LOCALESIGNATURE', {
 lsUsb: new ArrayT(DWORD, 4),
 lsCsbDefault: new ArrayT(DWORD, 2),
 lsCsbSupported: new ArrayT(DWORD, 2)
});

var HANDLETABLE = new StructT('HANDLETABLE', {
 objectHandle: new ArrayT(HGDIOBJ, 1)
});

var METARECORD = new StructT('METARECORD', {
 rdSize: DWORD,
 rdFunction: WORD,
 rdParm: new ArrayT(WORD, 1)
});

var METAFILEPICT = new StructT('METAFILEPICT', {
 mm: LONG,
 xExt: LONG,
 yExt: LONG,
 hMF: HMETAFILE
});

var METAHEADER = new StructT('METAHEADER', {
 mtType: WORD,
 mtHeaderSize: WORD,
 mtVersion: WORD,
 mtSize: DWORD,
 mtNoObjects: WORD,
 mtMaxRecord: DWORD,
 mtNoParameters: WORD
});

var ENHMETARECORD = new StructT('ENHMETARECORD', {
 iType: DWORD,
 nSize: DWORD,
 dParm: new ArrayT(DWORD, 1)
});

var ENHMETAHEADER = new StructT('ENHMETAHEADER', {
 iType: DWORD,
 nSize: DWORD,
 rclBounds: RECTL,
 rclFrame: RECTL,
 dSignature: DWORD,
 nVersion: DWORD,
 nBytes: DWORD,
 nRecords: DWORD,
 nHandles: WORD,
 sReserved: WORD,
 nDescription: DWORD,
 offDescription: DWORD,
 nPalEntries: DWORD,
 szlDevice: SIZEL,
 szlMillimeters: SIZEL,
 cbPixelFormat: DWORD,
 offPixelFormat: DWORD,
 bOpenGL: DWORD,
 szlMicrometers: SIZEL
});

var TEXTMETRIC = new StructT('TEXTMETRIC', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: BYTE,
 tmLastChar: BYTE,
 tmDefaultChar: BYTE,
 tmBreakChar: BYTE,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE
});

var TEXTMETRICW = new StructT('TEXTMETRICW', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: WCHAR,
 tmLastChar: WCHAR,
 tmDefaultChar: WCHAR,
 tmBreakChar: WCHAR,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE
});

var NEWTEXTMETRIC = new StructT('NEWTEXTMETRIC', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: BYTE,
 tmLastChar: BYTE,
 tmDefaultChar: BYTE,
 tmBreakChar: BYTE,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE,
 ntmFlags: DWORD,
 ntmSizeEM: UINT,
 ntmCellHeight: UINT,
 ntmAvgWidth: UINT
});

var NEWTEXTMETRICW = new StructT('NEWTEXTMETRICW', {
 tmHeight: LONG,
 tmAscent: LONG,
 tmDescent: LONG,
 tmInternalLeading: LONG,
 tmExternalLeading: LONG,
 tmAveCharWidth: LONG,
 tmMaxCharWidth: LONG,
 tmWeight: LONG,
 tmOverhang: LONG,
 tmDigitizedAspectX: LONG,
 tmDigitizedAspectY: LONG,
 tmFirstChar: WCHAR,
 tmLastChar: WCHAR,
 tmDefaultChar: WCHAR,
 tmBreakChar: WCHAR,
 tmItalic: BYTE,
 tmUnderlined: BYTE,
 tmStruckOut: BYTE,
 tmPitchAndFamily: BYTE,
 tmCharSet: BYTE,
 ntmFlags: DWORD,
 ntmSizeEM: UINT,
 ntmCellHeight: UINT,
 ntmAvgWidth: UINT
});

var NEWTEXTMETRICEX = new StructT('NEWTEXTMETRICEX', {
 ntmTm: NEWTEXTMETRICA,
 ntmFontSig: FONTSIGNATURE
});

var NEWTEXTMETRICEXW = new StructT('NEWTEXTMETRICEXW', {
 ntmTm: NEWTEXTMETRICW,
 ntmFontSig: FONTSIGNATURE
});

var PELnew ArrayT = new StructT('PELnew ArrayT', {
 paXCount: LONG,
 paYCount: LONG,
 paXExt: LONG,
 paYExt: LONG,
 paRGBs: BYTE
});

var PATTERN = new StructT('PATTERN', {
 lbStyle: UINT,
 lbColor: COLORREF,
 lbHatch: ULONG_PTR
});

var LOGBRUSH32 = new StructT('LOGBRUSH32', {
 lbStyle: UINT,
 lbColor: COLORREF,
 lbHatch: ULONG
});

var LOGPEN = new StructT('LOGPEN', {
 lopnStyle: UINT,
 lopnWidth: POINT,
 lopnColor: COLORREF
});

var EXTLOGPEN = new StructT('EXTLOGPEN', {
 elpPenStyle: DWORD,
 elpWidth: DWORD,
 elpBrushStyle: UINT,
 elpColor: COLORREF,
 elpHatch: ULONG_PTR,
 elpNumEntries: DWORD,
 elpStyleEntry: new ArrayT(DWORD, 1)
});

var EXTLOGPEN32 = new StructT('EXTLOGPEN32', {
 elpPenStyle: DWORD,
 elpWidth: DWORD,
 elpBrushStyle: UINT,
 elpColor: COLORREF,
 elpHatch: ULONG,
 elpNumEntries: DWORD,
 elpStyleEntry: new ArrayT(DWORD, 1)
});

var PALETTEENTRY = new StructT('PALETTEENTRY', {
 peRed: BYTE,
 peGreen: BYTE,
 peBlue: BYTE,
 peFlags: BYTE
});

var LOGPALETTE = new StructT('LOGPALETTE', {
 palVersion: WORD,
 palNumEntries: WORD,
 palPalEntry: new ArrayT(PALETTEENTRY, 1)
});

var LOGFONT = new StructT('LOGFONT', {
 lfHeight: LONG,
 lfWidth: LONG,
 lfEscapement: LONG,
 lfOrientation: LONG,
 lfWeight: LONG,
 lfItalic: BYTE,
 lfUnderline: BYTE,
 lfStrikeOut: BYTE,
 lfCharSet: BYTE,
 lfOutPrecision: BYTE,
 lfClipPrecision: BYTE,
 lfQuality: BYTE,
 lfPitchAndFamily: BYTE,
 lfFaceName: new ArrayT(CHAR, LF_FACESIZE)
});

var LOGFONTW = new StructT('LOGFONTW', {
 lfHeight: LONG,
 lfWidth: LONG,
 lfEscapement: LONG,
 lfOrientation: LONG,
 lfWeight: LONG,
 lfItalic: BYTE,
 lfUnderline: BYTE,
 lfStrikeOut: BYTE,
 lfCharSet: BYTE,
 lfOutPrecision: BYTE,
 lfClipPrecision: BYTE,
 lfQuality: BYTE,
 lfPitchAndFamily: BYTE,
 lfFaceName: new ArrayT(WCHAR, LF_FACESIZE)
});

var ENUMLOGFONT = new StructT('ENUMLOGFONT', {
 elfLogFont: LOGFONTA,
 elfFullName: new ArrayT(BYTE, LF_FULLFACESIZE),
 elfStyle: new ArrayT(BYTE, LF_FACESIZE)
});

var ENUMLOGFONTW = new StructT('ENUMLOGFONTW', {
 elfLogFont: LOGFONTW,
 elfFullName: new ArrayT(WCHAR, LF_FULLFACESIZE),
 elfStyle: new ArrayT(WCHAR, LF_FACESIZE)
});

var ENUMLOGFONTEX = new StructT('ENUMLOGFONTEX', {
 elfLogFont: LOGFONTA,
 elfFullName: new ArrayT(BYTE, LF_FULLFACESIZE),
 elfStyle: new ArrayT(BYTE, LF_FACESIZE),
 elfScript: new ArrayT(BYTE, LF_FACESIZE)
});

var ENUMLOGFONTEXW = new StructT('ENUMLOGFONTEXW', {
 elfLogFont: LOGFONTW,
 elfFullName: new ArrayT(WCHAR, LF_FULLFACESIZE),
 elfStyle: new ArrayT(WCHAR, LF_FACESIZE),
 elfScript: new ArrayT(WCHAR, LF_FACESIZE)
});

var PANOSE = new StructT('PANOSE', {
 bFamilyType: BYTE,
 bSerifStyle: BYTE,
 bWeight: BYTE,
 bProportion: BYTE,
 bContrast: BYTE,
 bStrokeVariation: BYTE,
 bArmStyle: BYTE,
 bLetterform: BYTE,
 bMidline: BYTE,
 bXHeight: BYTE
});

var EXTLOGFONT = new StructT('EXTLOGFONT', {
 elfLogFont: LOGFONTA,
 elfFullName: new ArrayT(BYTE, LF_FULLFACESIZE),
 elfStyle: new ArrayT(BYTE, LF_FACESIZE),
 elfVersion: DWORD,
 elfStyleSize: DWORD,
 elfMatch: DWORD,
 elfReserved: DWORD,
 elfVendorId: new ArrayT(BYTE, ELF_VENDOR_SIZE),
 elfCulture: DWORD,
 elfPanose: PANOSE
});

var EXTLOGFONTW = new StructT('EXTLOGFONTW', {
 elfLogFont: LOGFONTW,
 elfFullName: new ArrayT(WCHAR, LF_FULLFACESIZE),
 elfStyle: new ArrayT(WCHAR, LF_FACESIZE),
 elfVersion: DWORD,
 elfStyleSize: DWORD,
 elfMatch: DWORD,
 elfReserved: DWORD,
 elfVendorId: new ArrayT(BYTE, ELF_VENDOR_SIZE),
 elfCulture: DWORD,
 elfPanose: PANOSE
});

var DEVMODE = new StructT('DEVMODE', {
 dmDeviceName: new ArrayT(BYTE, CCHDEVICENAME),
 dmSpecVersion: WORD,
 dmDriverVersion: WORD,
 dmSize: WORD,
 dmDriverExtra: WORD,
 dmFields: DWORD,
 dmColor: short,
 dmDuplex: short,
 dmYResolution: short,
 dmTTOption: short,
 dmCollate: short,
 dmFormName: new ArrayT(BYTE, CCHFORMNAME),
 dmLogPixels: WORD,
 dmBitsPerPel: DWORD,
 dmPelsWidth: DWORD,
 dmPelsHeight: DWORD,
 dmDisplayFrequency: DWORD,
 dmICMMethod: DWORD,
 dmICMIntent: DWORD,
 dmMediaType: DWORD,
 dmDitherType: DWORD,
 dmReserved1: DWORD,
 dmReserved2: DWORD,
 dmPanningWidth: DWORD,
 dmPanningHeight: DWORD
});

var undefined = new StructT('undefined', {
 dmOrientation: short,
 dmPaperSize: short,
 dmPaperLength: short,
 dmPaperWidth: short,
 dmScale: short,
 dmCopies: short,
 dmDefaultSource: short,
 dmPrintQuality: short
});

var undefined = new StructT('undefined', {
 dmPosition: POINTL,
 dmDisplayOrientation: DWORD,
 dmDisplayFixedOutput: DWORD
});

var DEVMODEW = new StructT('DEVMODEW', {
 dmDeviceName: new ArrayT(WCHAR, CCHDEVICENAME),
 dmSpecVersion: WORD,
 dmDriverVersion: WORD,
 dmSize: WORD,
 dmDriverExtra: WORD,
 dmFields: DWORD,
 dmColor: short,
 dmDuplex: short,
 dmYResolution: short,
 dmTTOption: short,
 dmCollate: short,
 dmFormName: new ArrayT(WCHAR, CCHFORMNAME),
 dmLogPixels: WORD,
 dmBitsPerPel: DWORD,
 dmPelsWidth: DWORD,
 dmPelsHeight: DWORD,
 dmDisplayFrequency: DWORD,
 dmICMMethod: DWORD,
 dmICMIntent: DWORD,
 dmMediaType: DWORD,
 dmDitherType: DWORD,
 dmReserved1: DWORD,
 dmReserved2: DWORD,
 dmPanningWidth: DWORD,
 dmPanningHeight: DWORD
});

var undefined = new StructT('undefined', {
 dmOrientation: short,
 dmPaperSize: short,
 dmPaperLength: short,
 dmPaperWidth: short,
 dmScale: short,
 dmCopies: short,
 dmDefaultSource: short,
 dmPrintQuality: short
});

var undefined = new StructT('undefined', {
 dmPosition: POINTL,
 dmDisplayOrientation: DWORD,
 dmDisplayFixedOutput: DWORD
});

var DISPLAY_DEVICE = new StructT('DISPLAY_DEVICE', {
 cb: DWORD,
 DeviceName: new ArrayT(CHAR, 32),
 DeviceString: new ArrayT(CHAR, 128),
 StateFlags: DWORD,
 DeviceID: new ArrayT(CHAR, 128),
 DeviceKey: new ArrayT(CHAR, 128)
});

var DISPLAY_DEVICEW = new StructT('DISPLAY_DEVICEW', {
 cb: DWORD,
 DeviceName: new ArrayT(WCHAR, 32),
 DeviceString: new ArrayT(WCHAR, 128),
 StateFlags: DWORD,
 DeviceID: new ArrayT(WCHAR, 128),
 DeviceKey: new ArrayT(WCHAR, 128)
});

var DISPLAYCONFIG_RATIONAL = new StructT('DISPLAYCONFIG_RATIONAL', {
 Numerator: UINT32,
 Denominator: UINT32
});

var DISPLAYCONFIG_2DREGION = new StructT('DISPLAYCONFIG_2DREGION', {
 cx: UINT32,
 cy: UINT32
});

var DISPLAYCONFIG_VIDEO_SIGNAL_INFO = new StructT('DISPLAYCONFIG_VIDEO_SIGNAL_INFO', {
 pixelRate: UINT64,
 hSyncFreq: DISPLAYCONFIG_RATIONAL,
 vSyncFreq: DISPLAYCONFIG_RATIONAL,
 activeSize: DISPLAYCONFIG_2DREGION,
 totalSize: DISPLAYCONFIG_2DREGION,
 videoStandard: UINT32,
 scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING
});

var DISPLAYCONFIG_SOURCE_MODE = new StructT('DISPLAYCONFIG_SOURCE_MODE', {
 width: UINT32,
 height: UINT32,
 pixelFormat: DISPLAYCONFIG_PIXELFORMAT,
 position: POINTL
});

var DISPLAYCONFIG_TARGET_MODE = new StructT('DISPLAYCONFIG_TARGET_MODE', {
 targetVideoSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO
});

var DISPLAYCONFIG_MODE_INFO = new StructT('DISPLAYCONFIG_MODE_INFO', {
 infoType: DISPLAYCONFIG_MODE_INFO_TYPE,
 id: UINT32,
 adapterId: LUID
});

var DISPLAYCONFIG_PATH_SOURCE_INFO = new StructT('DISPLAYCONFIG_PATH_SOURCE_INFO', {
 adapterId: LUID,
 id: UINT32,
 modeInfoIdx: UINT32,
 statusFlags: UINT32
});

var DISPLAYCONFIG_PATH_TARGET_INFO = new StructT('DISPLAYCONFIG_PATH_TARGET_INFO', {
 adapterId: LUID,
 id: UINT32,
 modeInfoIdx: UINT32,
 outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
 rotation: DISPLAYCONFIG_ROTATION,
 scaling: DISPLAYCONFIG_SCALING,
 refreshRate: DISPLAYCONFIG_RATIONAL,
 scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
 targetAvailable: BOOL,
 statusFlags: UINT32
});

var DISPLAYCONFIG_PATH_INFO = new StructT('DISPLAYCONFIG_PATH_INFO', {
 sourceInfo: DISPLAYCONFIG_PATH_SOURCE_INFO,
 targetInfo: DISPLAYCONFIG_PATH_TARGET_INFO,
 flags: UINT32
});

var DISPLAYCONFIG_DEVICE_INFO_HEADER = new StructT('DISPLAYCONFIG_DEVICE_INFO_HEADER', {
 type: DISPLAYCONFIG_DEVICE_INFO_TYPE,
 size: UINT32,
 adapterId: LUID,
 id: UINT32
});

var DISPLAYCONFIG_SOURCE_DEVICE_NAME = new StructT('DISPLAYCONFIG_SOURCE_DEVICE_NAME', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 viewGdiDeviceName: new ArrayT(WCHAR, CCHDEVICENAME)
});


var undefined = new StructT('undefined', {
 friendlyNameFromEdid: UINT32,
 friendlyNameForced: UINT32,
 edidIdsValid: UINT32,
 reserved: UINT32
});

var DISPLAYCONFIG_TARGET_DEVICE_NAME = new StructT('DISPLAYCONFIG_TARGET_DEVICE_NAME', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 flags: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS,
 outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
 edidManufactureId: UINT16,
 edidProductCodeId: UINT16,
 connectorInstance: UINT32,
 monitorFriendlyDeviceName: new ArrayT(WCHAR, 64),
 monitorDevicePath: new ArrayT(WCHAR, 128)
});

var DISPLAYCONFIG_TARGET_PREFERRED_MODE = new StructT('DISPLAYCONFIG_TARGET_PREFERRED_MODE', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 width: UINT32,
 height: UINT32,
 targetMode: DISPLAYCONFIG_TARGET_MODE
});

var DISPLAYCONFIG_ADAPTER_NAME = new StructT('DISPLAYCONFIG_ADAPTER_NAME', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
 adapterDevicePath: new ArrayT(WCHAR, 128)
});

var DISPLAYCONFIG_SET_TARGET_PERSISTENCE = new StructT('DISPLAYCONFIG_SET_TARGET_PERSISTENCE', {
 header: DISPLAYCONFIG_DEVICE_INFO_HEADER
});

var undefined = new StructT('undefined', {
 bootPersistenceOn: UINT32,
 reserved: UINT32
});

var RGNDATAHEADER = new StructT('RGNDATAHEADER', {
 dwSize: DWORD,
 iType: DWORD,
 nCount: DWORD,
 nRgnSize: DWORD,
 rcBound: RECT
});

var RGNDATA = new StructT('RGNDATA', {
 rdh: RGNDATAHEADER,
 Buffer: new ArrayT(undefined, 1)
});

var ABC = new StructT('ABC', {
 abcA: int,
 abcB: UINT,
 abcC: int
});

var ABCFLOAT = new StructT('ABCFLOAT', {
 abcfA: FLOAT,
 abcfB: FLOAT,
 abcfC: FLOAT
});

var OUTLINETEXTMETRIC = new StructT('OUTLINETEXTMETRIC', {
 otmSize: UINT,
 otmTextMetrics: TEXTMETRICA,
 otmFiller: BYTE,
 otmPanoseNumber: PANOSE,
 otmfsSelection: UINT,
 otmfsType: UINT,
 otmsCharSlopeRise: int,
 otmsCharSlopeRun: int,
 otmItalicAngle: int,
 otmEMSquare: UINT,
 otmAscent: int,
 otmDescent: int,
 otmLineGap: UINT,
 otmsCapEmHeight: UINT,
 otmsXHeight: UINT,
 otmrcFontBox: RECT,
 otmMacAscent: int,
 otmMacDescent: int,
 otmMacLineGap: UINT,
 otmusMinimumPPEM: UINT,
 otmptSubscriptSize: POINT,
 otmptSubscriptOffset: POINT,
 otmptSuperscriptSize: POINT,
 otmptSuperscriptOffset: POINT,
 otmsStrikeoutSize: UINT,
 otmsStrikeoutPosition: int,
 otmsUnderscoreSize: int,
 otmsUnderscorePosition: int,
 otmpFamilyName: PSTR,
 otmpFaceName: PSTR,
 otmpStyleName: PSTR,
 otmpFullName: PSTR
});

var OUTLINETEXTMETRICW = new StructT('OUTLINETEXTMETRICW', {
 otmSize: UINT,
 otmTextMetrics: TEXTMETRICW,
 otmFiller: BYTE,
 otmPanoseNumber: PANOSE,
 otmfsSelection: UINT,
 otmfsType: UINT,
 otmsCharSlopeRise: int,
 otmsCharSlopeRun: int,
 otmItalicAngle: int,
 otmEMSquare: UINT,
 otmAscent: int,
 otmDescent: int,
 otmLineGap: UINT,
 otmsCapEmHeight: UINT,
 otmsXHeight: UINT,
 otmrcFontBox: RECT,
 otmMacAscent: int,
 otmMacDescent: int,
 otmMacLineGap: UINT,
 otmusMinimumPPEM: UINT,
 otmptSubscriptSize: POINT,
 otmptSubscriptOffset: POINT,
 otmptSuperscriptSize: POINT,
 otmptSuperscriptOffset: POINT,
 otmsStrikeoutSize: UINT,
 otmsStrikeoutPosition: int,
 otmsUnderscoreSize: int,
 otmsUnderscorePosition: int,
 otmpFamilyName: PSTR,
 otmpFaceName: PSTR,
 otmpStyleName: PSTR,
 otmpFullName: PSTR
});

var POLYTEXT = new StructT('POLYTEXT', {
 x: int,
 y: int,
 n: UINT,
 lpstr: LPCSTR,
 uiFlags: UINT,
 rcl: RECT,
 pdx: int.Δ
});

var POLYTEXTW = new StructT('POLYTEXTW', {
 x: int,
 y: int,
 n: UINT,
 lpstr: LPCWSTR,
 uiFlags: UINT,
 rcl: RECT,
 pdx: int.Δ
});

var FIXED = new StructT('FIXED', {
 fract: WORD,
 value: short
});

var MAT2 = new StructT('MAT2', {
 eM11: FIXED,
 eM12: FIXED,
 eM21: FIXED,
 eM22: FIXED
});

var GLYPHMETRICS = new StructT('GLYPHMETRICS', {
 gmBlackBoxX: UINT,
 gmBlackBoxY: UINT,
 gmptGlyphOrigin: POINT,
 gmCellIncX: short,
 gmCellIncY: short
});

var POINTFX = new StructT('POINTFX', {
 x: FIXED,
 y: FIXED
});

var TTPOLYCURVE = new StructT('TTPOLYCURVE', {
 wType: WORD,
 cpfx: WORD,
 apfx: new ArrayT(POINTFX, 1)
});

var TTPOLYGONHEADER = new StructT('TTPOLYGONHEADER', {
 cb: DWORD,
 dwType: DWORD,
 pfxStart: POINTFX
});

var GCP_RESULTS = new StructT('GCP_RESULTS', {
 lStructSize: DWORD,
 lpOutString: LPSTR,
 lpOrder: UINT.Δ,
 lpDx: int.Δ,
 lpCaretPos: int.Δ,
 lpClass: LPSTR,
 lpGlyphs: LPWSTR,
 nGlyphs: UINT,
 nMaxFit: int
});

var GCP_RESULTSW = new StructT('GCP_RESULTSW', {
 lStructSize: DWORD,
 lpOutString: LPWSTR,
 lpOrder: UINT.Δ,
 lpDx: int.Δ,
 lpCaretPos: int.Δ,
 lpClass: LPSTR,
 lpGlyphs: LPWSTR,
 nGlyphs: UINT,
 nMaxFit: int
});

var RASTERIZER_STATUS = new StructT('RASTERIZER_STATUS', {
 nSize: short,
 wFlags: short,
 nLanguageID: short
});

var PIXELFORMATDESCRIPTOR = new StructT('PIXELFORMATDESCRIPTOR', {
 nSize: WORD,
 nVersion: WORD,
 dwFlags: DWORD,
 iPixelType: BYTE,
 cColorBits: BYTE,
 cRedBits: BYTE,
 cRedShift: BYTE,
 cGreenBits: BYTE,
 cGreenShift: BYTE,
 cBlueBits: BYTE,
 cBlueShift: BYTE,
 cAlphaBits: BYTE,
 cAlphaShift: BYTE,
 cAccumBits: BYTE,
 cAccumRedBits: BYTE,
 cAccumGreenBits: BYTE,
 cAccumBlueBits: BYTE,
 cAccumAlphaBits: BYTE,
 cDepthBits: BYTE,
 cStencilBits: BYTE,
 cAuxBuffers: BYTE,
 iLayerType: BYTE,
 bReserved: BYTE,
 dwLayerMask: DWORD,
 dwVisibleMask: DWORD,
 dwDamageMask: DWORD
});

var WCRANGE = new StructT('WCRANGE', {
 wcLow: WCHAR,
 cGlyphs: USHORT
});

var GLYPHSET = new StructT('GLYPHSET', {
 cbThis: DWORD,
 flAccel: DWORD,
 cGlyphsSupported: DWORD,
 cRanges: DWORD,
 ranges: new ArrayT(WCRANGE, 1)
});

var DESIGNVECTOR = new StructT('DESIGNVECTOR', {
 dvReserved: DWORD,
 dvNumAxes: DWORD,
 dvValues: new ArrayT(LONG, MM_MAX_NUMAXES)
});

var AXISINFO = new StructT('AXISINFO', {
 axMinValue: LONG,
 axMaxValue: LONG,
 axAxisName: new ArrayT(BYTE, MM_MAX_AXES_NAMELEN)
});

var AXISINFOW = new StructT('AXISINFOW', {
 axMinValue: LONG,
 axMaxValue: LONG,
 axAxisName: new ArrayT(WCHAR, MM_MAX_AXES_NAMELEN)
});

var AXESLIST = new StructT('AXESLIST', {
 axlReserved: DWORD,
 axlNumAxes: DWORD,
 axlAxisInfo: new ArrayT(AXISINFOA, MM_MAX_NUMAXES)
});

var AXESLISTW = new StructT('AXESLISTW', {
 axlReserved: DWORD,
 axlNumAxes: DWORD,
 axlAxisInfo: new ArrayT(AXISINFOW, MM_MAX_NUMAXES)
});

var ENUMLOGFONTEXDV = new StructT('ENUMLOGFONTEXDV', {
 elfEnumLogfontEx: ENUMLOGFONTEXA,
 elfDesignVector: DESIGNVECTOR
});

var ENUMLOGFONTEXDVW = new StructT('ENUMLOGFONTEXDVW', {
 elfEnumLogfontEx: ENUMLOGFONTEXW,
 elfDesignVector: DESIGNVECTOR
});

var ENUMTEXTMETRIC = new StructT('ENUMTEXTMETRIC', {
 etmNewTextMetricEx: NEWTEXTMETRICEXA,
 etmAxesList: AXESLISTA
});

var ENUMTEXTMETRICW = new StructT('ENUMTEXTMETRICW', {
 etmNewTextMetricEx: NEWTEXTMETRICEXW,
 etmAxesList: AXESLISTW
});

var TRIVERTEX = new StructT('TRIVERTEX', {
 x: LONG,
 y: LONG,
 Red: COLOR16,
 Green: COLOR16,
 Blue: COLOR16,
 Alpha: COLOR16
});

var GRADIENT_TRIANGLE = new StructT('GRADIENT_TRIANGLE', {
 Vertex1: ULONG,
 Vertex2: ULONG,
 Vertex3: ULONG
});

var GRADIENT_RECT = new StructT('GRADIENT_RECT', {
 UpperLeft: ULONG,
 LowerRight: ULONG
});

var BLENDFUNCTION = new StructT('BLENDFUNCTION', {
 BlendOp: BYTE,
 BlendFlags: BYTE,
 SourceConstantAlpha: BYTE,
 AlphaFormat: BYTE
});

var DIBSECTION = new StructT('DIBSECTION', {
 dsBm: BITMAP,
 dsBmih: BITMAPINFOHEADER,
 dsBitfields: new ArrayT(DWORD, 3),
 dshSection: HANDLE,
 dsOffset: DWORD
});

var COLORADJUSTMENT = new StructT('COLORADJUSTMENT', {
 caSize: WORD,
 caFlags: WORD,
 caIlluminantIndex: WORD,
 caRedGamma: WORD,
 caGreenGamma: WORD,
 caBlueGamma: WORD,
 caReferenceBlack: WORD,
 caReferenceWhite: WORD,
 caContrast: SHORT,
 caBrightness: SHORT,
 caColorfulness: SHORT,
 caRedGreenTint: SHORT
});

var DOCINFO = new StructT('DOCINFO', {
 cbSize: int,
 lpszDocName: LPCSTR,
 lpszOutput: LPCSTR,
 lpszDatatype: LPCSTR,
 fwType: DWORD
});

var DOCINFOW = new StructT('DOCINFOW', {
 cbSize: int,
 lpszDocName: LPCWSTR,
 lpszOutput: LPCWSTR,
 lpszDatatype: LPCWSTR,
 fwType: DWORD
});

var KERNINGPAIR = new StructT('KERNINGPAIR', {
 wFirst: WORD,
 wSecond: WORD,
 iKernAmount: int
});

var EMR = new StructT('EMR', {
 iType: DWORD,
 nSize: DWORD
});

var EMRTEXT = new StructT('EMRTEXT', {
 ptlReference: POINTL,
 nChars: DWORD,
 offString: DWORD,
 fOptions: DWORD,
 rcl: RECTL,
 offDx: DWORD
});

var EMRREALIZEPALETTE = new StructT('EMRREALIZEPALETTE', {
 emr: EMR
});

var EMRSETTEXTALIGN = new StructT('EMRSETTEXTALIGN', {
 emr: EMR,
 iMode: DWORD
});

var EMRSETMITERLIMIT = new StructT('EMRSETMITERLIMIT', {
 emr: EMR,
 eMiterLimit: FLOAT
});

var EMRRESTOREDC = new StructT('EMRRESTOREDC', {
 emr: EMR,
 iRelative: LONG
});

var EMRSETARCDIRECTION = new StructT('EMRSETARCDIRECTION', {
 emr: EMR,
 iArcDirection: DWORD
});

var EMRSETMAPPERFLAGS = new StructT('EMRSETMAPPERFLAGS', {
 emr: EMR,
 dwFlags: DWORD
});

var EMRSETTEXTCOLOR = new StructT('EMRSETTEXTCOLOR', {
 emr: EMR,
 crColor: COLORREF
});

var EMRDELETEOBJECT = new StructT('EMRDELETEOBJECT', {
 emr: EMR,
 ihObject: DWORD
});

var EMRSELECTPALETTE = new StructT('EMRSELECTPALETTE', {
 emr: EMR,
 ihPal: DWORD
});

var EMRRESIZEPALETTE = new StructT('EMRRESIZEPALETTE', {
 emr: EMR,
 ihPal: DWORD,
 cEntries: DWORD
});

var EMRSETPALETTEENTRIES = new StructT('EMRSETPALETTEENTRIES', {
 emr: EMR,
 ihPal: DWORD,
 iStart: DWORD,
 cEntries: DWORD,
 aPalEntries: new ArrayT(PALETTEENTRY, 1)
});

var EMRSETCOLORADJUSTMENT = new StructT('EMRSETCOLORADJUSTMENT', {
 emr: EMR,
 ColorAdjustment: COLORADJUSTMENT
});

var EMRGDICOMMENT = new StructT('EMRGDICOMMENT', {
 emr: EMR,
 cbData: DWORD,
 Data: new ArrayT(BYTE, 1)
});

var EMREOF = new StructT('EMREOF', {
 emr: EMR,
 nPalEntries: DWORD,
 offPalEntries: DWORD,
 nSizeLast: DWORD
});

var EMRMOVETOEX = new StructT('EMRMOVETOEX', {
 emr: EMR,
 ptl: POINTL
});

var EMROFFSETCLIPRGN = new StructT('EMROFFSETCLIPRGN', {
 emr: EMR,
 ptlOffset: POINTL
});

var EMRSTROKEPATH = new StructT('EMRSTROKEPATH', {
 emr: EMR,
 rclBounds: RECTL
});

var EMRINTERSECTCLIPRECT = new StructT('EMRINTERSECTCLIPRECT', {
 emr: EMR,
 rclClip: RECTL
});

var EMRSETBRUSHORGEX = new StructT('EMRSETBRUSHORGEX', {
 emr: EMR,
 ptlOrigin: POINTL
});

var EMRSETWINDOWEXTEX = new StructT('EMRSETWINDOWEXTEX', {
 emr: EMR,
 szlExtent: SIZEL
});

var EMRSCALEWINDOWEXTEX = new StructT('EMRSCALEWINDOWEXTEX', {
 emr: EMR,
 xNum: LONG,
 xDenom: LONG,
 yNum: LONG,
 yDenom: LONG
});

var EMRSETWORLDTRANSFORM = new StructT('EMRSETWORLDTRANSFORM', {
 emr: EMR,
 xform: XFORM
});

var EMRMODIFYWORLDTRANSFORM = new StructT('EMRMODIFYWORLDTRANSFORM', {
 emr: EMR,
 xform: XFORM,
 iMode: DWORD
});

var EMRSETPIXELV = new StructT('EMRSETPIXELV', {
 emr: EMR,
 ptlPixel: POINTL,
 crColor: COLORREF
});

var EMREXTFLOODFILL = new StructT('EMREXTFLOODFILL', {
 emr: EMR,
 ptlStart: POINTL,
 crColor: COLORREF,
 iMode: DWORD
});

var EMRRECTANGLE = new StructT('EMRRECTANGLE', {
 emr: EMR,
 rclBox: RECTL
});

var EMRROUNDRECT = new StructT('EMRROUNDRECT', {
 emr: EMR,
 rclBox: RECTL,
 szlCorner: SIZEL
});

var EMRPIE = new StructT('EMRPIE', {
 emr: EMR,
 rclBox: RECTL,
 ptlStart: POINTL,
 ptlEnd: POINTL
});

var EMRANGLEARC = new StructT('EMRANGLEARC', {
 emr: EMR,
 ptlCenter: POINTL,
 nRadius: DWORD,
 eStartAngle: FLOAT,
 eSweepAngle: FLOAT
});

var EMRPOLYLINETO = new StructT('EMRPOLYLINETO', {
 emr: EMR,
 rclBounds: RECTL,
 cptl: DWORD,
 aptl: new ArrayT(POINTL, 1)
});

var EMRPOLYLINETO16 = new StructT('EMRPOLYLINETO16', {
 emr: EMR,
 rclBounds: RECTL,
 cpts: DWORD,
 apts: new ArrayT(POINTS, 1)
});

var EMRPOLYDRAW = new StructT('EMRPOLYDRAW', {
 emr: EMR,
 rclBounds: RECTL,
 cptl: DWORD,
 aptl: new ArrayT(POINTL, 1),
 abTypes: new ArrayT(BYTE, 1)
});

var EMRPOLYDRAW16 = new StructT('EMRPOLYDRAW16', {
 emr: EMR,
 rclBounds: RECTL,
 cpts: DWORD,
 apts: new ArrayT(POINTS, 1),
 abTypes: new ArrayT(BYTE, 1)
});

var EMRPOLYPOLYGON = new StructT('EMRPOLYPOLYGON', {
 emr: EMR,
 rclBounds: RECTL,
 nPolys: DWORD,
 cptl: DWORD,
 aPolyCounts: new ArrayT(DWORD, 1),
 aptl: new ArrayT(POINTL, 1)
});

var EMRPOLYPOLYGON16 = new StructT('EMRPOLYPOLYGON16', {
 emr: EMR,
 rclBounds: RECTL,
 nPolys: DWORD,
 cpts: DWORD,
 aPolyCounts: new ArrayT(DWORD, 1),
 apts: new ArrayT(POINTS, 1)
});

var EMRPAINTRGN = new StructT('EMRPAINTRGN', {
 emr: EMR,
 rclBounds: RECTL,
 cbRgnData: DWORD,
 RgnData: new ArrayT(BYTE, 1)
});

var EMRFILLRGN = new StructT('EMRFILLRGN', {
 emr: EMR,
 rclBounds: RECTL,
 cbRgnData: DWORD,
 ihBrush: DWORD,
 RgnData: new ArrayT(BYTE, 1)
});

var EMRFRAMERGN = new StructT('EMRFRAMERGN', {
 emr: EMR,
 rclBounds: RECTL,
 cbRgnData: DWORD,
 ihBrush: DWORD,
 szlStroke: SIZEL,
 RgnData: new ArrayT(BYTE, 1)
});

var EMREXTSELECTCLIPRGN = new StructT('EMREXTSELECTCLIPRGN', {
 emr: EMR,
 cbRgnData: DWORD,
 iMode: DWORD,
 RgnData: new ArrayT(BYTE, 1)
});

var EMREXTTEXTOUTW = new StructT('EMREXTTEXTOUTW', {
 emr: EMR,
 rclBounds: RECTL,
 iGraphicsMode: DWORD,
 exScale: FLOAT,
 eyScale: FLOAT,
 emrtext: EMRTEXT
});

var EMRPOLYTEXTOUTW = new StructT('EMRPOLYTEXTOUTW', {
 emr: EMR,
 rclBounds: RECTL,
 iGraphicsMode: DWORD,
 exScale: FLOAT,
 eyScale: FLOAT,
 cStrings: LONG,
 aemrtext: new ArrayT(EMRTEXT, 1)
});

var EMRBITBLT = new StructT('EMRBITBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD
});

var EMRSTRETCHBLT = new StructT('EMRSTRETCHBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 cxSrc: LONG,
 cySrc: LONG
});

var EMRMASKBLT = new StructT('EMRMASKBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 xMask: LONG,
 yMask: LONG,
 iUsageMask: DWORD,
 offBmiMask: DWORD,
 cbBmiMask: DWORD,
 offBitsMask: DWORD,
 cbBitsMask: DWORD
});

var EMRPLGBLT = new StructT('EMRPLGBLT', {
 emr: EMR,
 rclBounds: RECTL,
 aptlDest: new ArrayT(POINTL, 3),
 xSrc: LONG,
 ySrc: LONG,
 cxSrc: LONG,
 cySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 xMask: LONG,
 yMask: LONG,
 iUsageMask: DWORD,
 offBmiMask: DWORD,
 cbBmiMask: DWORD,
 offBitsMask: DWORD,
 cbBitsMask: DWORD
});

var EMRSETDIBITSTODEVICE = new StructT('EMRSETDIBITSTODEVICE', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 xSrc: LONG,
 ySrc: LONG,
 cxSrc: LONG,
 cySrc: LONG,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 iUsageSrc: DWORD,
 iStartScan: DWORD,
 cScans: DWORD
});

var EMRSTRETCHDIBITS = new StructT('EMRSTRETCHDIBITS', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 xSrc: LONG,
 ySrc: LONG,
 cxSrc: LONG,
 cySrc: LONG,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 iUsageSrc: DWORD,
 dwRop: DWORD,
 cxDest: LONG,
 cyDest: LONG
});

var EMREXTCREATEFONTINDIRECTW = new StructT('EMREXTCREATEFONTINDIRECTW', {
 emr: EMR,
 ihFont: DWORD,
 elfw: EXTLOGFONTW
});

var EMRCREATEPALETTE = new StructT('EMRCREATEPALETTE', {
 emr: EMR,
 ihPal: DWORD,
 lgpl: LOGPALETTE
});

var EMRCREATEPEN = new StructT('EMRCREATEPEN', {
 emr: EMR,
 ihPen: DWORD,
 lopn: LOGPEN
});

var EMREXTCREATEPEN = new StructT('EMREXTCREATEPEN', {
 emr: EMR,
 ihPen: DWORD,
 offBmi: DWORD,
 cbBmi: DWORD,
 offBits: DWORD,
 cbBits: DWORD,
 elp: EXTLOGPEN32
});

var EMRCREATEBRUSHINDIRECT = new StructT('EMRCREATEBRUSHINDIRECT', {
 emr: EMR,
 ihBrush: DWORD,
 lb: LOGBRUSH32
});

var EMRCREATEMONOBRUSH = new StructT('EMRCREATEMONOBRUSH', {
 emr: EMR,
 ihBrush: DWORD,
 iUsage: DWORD,
 offBmi: DWORD,
 cbBmi: DWORD,
 offBits: DWORD,
 cbBits: DWORD
});

var EMRCREATEDIBPATTERNBRUSHPT = new StructT('EMRCREATEDIBPATTERNBRUSHPT', {
 emr: EMR,
 ihBrush: DWORD,
 iUsage: DWORD,
 offBmi: DWORD,
 cbBmi: DWORD,
 offBits: DWORD,
 cbBits: DWORD
});

var EMRFORMAT = new StructT('EMRFORMAT', {
 dSignature: DWORD,
 nVersion: DWORD,
 cbData: DWORD,
 offData: DWORD
});

var EMRGLSRECORD = new StructT('EMRGLSRECORD', {
 emr: EMR,
 cbData: DWORD,
 Data: new ArrayT(BYTE, 1)
});

var EMRGLSBOUNDEDRECORD = new StructT('EMRGLSBOUNDEDRECORD', {
 emr: EMR,
 rclBounds: RECTL,
 cbData: DWORD,
 Data: new ArrayT(BYTE, 1)
});

var EMRPIXELFORMAT = new StructT('EMRPIXELFORMAT', {
 emr: EMR,
 pfd: PIXELFORMATDESCRIPTOR
});

var EMRCREATECOLORSPACE = new StructT('EMRCREATECOLORSPACE', {
 emr: EMR,
 ihCS: DWORD,
 lcs: LOGCOLORSPACEA
});

var EMRDELETECOLORSPACE = new StructT('EMRDELETECOLORSPACE', {
 emr: EMR,
 ihCS: DWORD
});

var EMRDRAWESCAPE = new StructT('EMRDRAWESCAPE', {
 emr: EMR,
 iEscape: INT,
 cbEscData: INT,
 EscData: new ArrayT(BYTE, 1)
});

var EMRNAMEDESCAPE = new StructT('EMRNAMEDESCAPE', {
 emr: EMR,
 iEscape: INT,
 cbDriver: INT,
 cbEscData: INT,
 EscData: new ArrayT(BYTE, 1)
});

var EMRSETICMPROFILEW = new StructT('EMRSETICMPROFILEW', {
 emr: EMR,
 dwFlags: DWORD,
 cbName: DWORD,
 cbData: DWORD,
 Data: new ArrayT(BYTE, 1)
});

var EMRCREATECOLORSPACEW = new StructT('EMRCREATECOLORSPACEW', {
 emr: EMR,
 ihCS: DWORD,
 lcs: LOGCOLORSPACEW,
 dwFlags: DWORD,
 cbData: DWORD,
 Data: new ArrayT(BYTE, 1)
});

var EMRCOLORMATCHTOTARGET = new StructT('EMRCOLORMATCHTOTARGET', {
 emr: EMR,
 dwAction: DWORD,
 dwFlags: DWORD,
 cbName: DWORD,
 cbData: DWORD,
 Data: new ArrayT(BYTE, 1)
});

var EMRCOLORCORRECTPALETTE = new StructT('EMRCOLORCORRECTPALETTE', {
 emr: EMR,
 ihPalette: DWORD,
 nFirstEntry: DWORD,
 nPalEntries: DWORD,
 nReserved: DWORD
});

var EMRALPHABLEND = new StructT('EMRALPHABLEND', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 cxSrc: LONG,
 cySrc: LONG
});

var EMRGRADIENTFILL = new StructT('EMRGRADIENTFILL', {
 emr: EMR,
 rclBounds: RECTL,
 nVer: DWORD,
 nTri: DWORD,
 ulMode: ULONG,
 Ver: new ArrayT(TRIVERTEX, 1)
});

var EMRTRANSPARENTBLT = new StructT('EMRTRANSPARENTBLT', {
 emr: EMR,
 rclBounds: RECTL,
 xDest: LONG,
 yDest: LONG,
 cxDest: LONG,
 cyDest: LONG,
 dwRop: DWORD,
 xSrc: LONG,
 ySrc: LONG,
 xformSrc: XFORM,
 crBkColorSrc: COLORREF,
 iUsageSrc: DWORD,
 offBmiSrc: DWORD,
 cbBmiSrc: DWORD,
 offBitsSrc: DWORD,
 cbBitsSrc: DWORD,
 cxSrc: LONG,
 cySrc: LONG
});

var POINTFLOAT = new StructT('POINTFLOAT', {
 x: FLOAT,
 y: FLOAT
});

var GLYPHMETRICSFLOAT = new StructT('GLYPHMETRICSFLOAT', {
 gmfBlackBoxX: FLOAT,
 gmfBlackBoxY: FLOAT,
 gmfptGlyphOrigin: POINTFLOAT,
 gmfCellIncX: FLOAT,
 gmfCellIncY: FLOAT
});

var LAYERPLANEDESCRIPTOR = new StructT('LAYERPLANEDESCRIPTOR', {
 nSize: WORD,
 nVersion: WORD,
 dwFlags: DWORD,
 iPixelType: BYTE,
 cColorBits: BYTE,
 cRedBits: BYTE,
 cRedShift: BYTE,
 cGreenBits: BYTE,
 cGreenShift: BYTE,
 cBlueBits: BYTE,
 cBlueShift: BYTE,
 cAlphaBits: BYTE,
 cAlphaShift: BYTE,
 cAccumBits: BYTE,
 cAccumRedBits: BYTE,
 cAccumGreenBits: BYTE,
 cAccumBlueBits: BYTE,
 cAccumAlphaBits: BYTE,
 cDepthBits: BYTE,
 cStencilBits: BYTE,
 cAuxBuffers: BYTE,
 iLayerPlane: BYTE,
 bReserved: BYTE,
 crTransparent: COLORREF
});

var WGLSWAP = new StructT('WGLSWAP', {
 hdc: HDC,
 uiFlags: UINT
});

var CBT_CREATEWND = new StructT('CBT_CREATEWND', {
 lpcs: tagCREATESTRUCTA.Δ,
 hwndInsertAfter: HWND
});

var CREATESTRUCT = new StructT('CREATESTRUCT', {
 lpCreateParams: LPVOID,
 hInstance: HINSTANCE,
 hMenu: HMENU,
 hwndParent: HWND,
 cy: int,
 cx: int,
 y: int,
 x: int,
 style: LONG,
 lpszName: LPCSTR,
 lpszClass: LPCSTR,
 dwExStyle: DWORD
});

var CBT_CREATEWNDW = new StructT('CBT_CREATEWNDW', {
 lpcs: tagCREATESTRUCTW.Δ,
 hwndInsertAfter: HWND
});

var CREATESTRUCTW = new StructT('CREATESTRUCTW', {
 lpCreateParams: LPVOID,
 hInstance: HINSTANCE,
 hMenu: HMENU,
 hwndParent: HWND,
 cy: int,
 cx: int,
 y: int,
 x: int,
 style: LONG,
 lpszName: LPCWSTR,
 lpszClass: LPCWSTR,
 dwExStyle: DWORD
});

var CBTACTIVATESTRUCT = new StructT('CBTACTIVATESTRUCT', {
 fMouse: BOOL,
 hWndActive: HWND
});

var WTSSESSION_NOTIFICATION = new StructT('WTSSESSION_NOTIFICATION', {
 cbSize: DWORD,
 dwSessionId: DWORD
});

var SHELLHOOKINFO = new StructT('SHELLHOOKINFO', {
 hwnd: HWND,
 rc: RECT
});

var EVENTMSG = new StructT('EVENTMSG', {
 message: UINT,
 paramL: UINT,
 paramH: UINT,
 time: DWORD,
 hwnd: HWND
});

var CWPSTRUCT = new StructT('CWPSTRUCT', {
 lParam: LPARAM,
 wParam: WPARAM,
 message: UINT,
 hwnd: HWND
});

var CWPRETSTRUCT = new StructT('CWPRETSTRUCT', {
 lResult: LRESULT,
 lParam: LPARAM,
 wParam: WPARAM,
 message: UINT,
 hwnd: HWND
});

var KBDLLHOOKSTRUCT = new StructT('KBDLLHOOKSTRUCT', {
 vkCode: DWORD,
 scanCode: DWORD,
 flags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var MSLLHOOKSTRUCT = new StructT('MSLLHOOKSTRUCT', {
 pt: POINT,
 mouseData: DWORD,
 flags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var DEBUGHOOKINFO = new StructT('DEBUGHOOKINFO', {
 idThread: DWORD,
 idThreadInstaller: DWORD,
 lParam: LPARAM,
 wParam: WPARAM,
 code: int
});

var MOUSEHOOKSTRUCT = new StructT('MOUSEHOOKSTRUCT', {
 pt: POINT,
 hwnd: HWND,
 wHitTestCode: UINT,
 dwExtraInfo: ULONG_PTR
});

var MOUSEHOOKSTRUCTEX = new StructT('MOUSEHOOKSTRUCTEX', {
 mouseData: DWORD
});

var HARDWAREHOOKSTRUCT = new StructT('HARDWAREHOOKSTRUCT', {
 hwnd: HWND,
 message: UINT,
 wParam: WPARAM,
 lParam: LPARAM
});

var MOUSEMOVEPOINT = new StructT('MOUSEMOVEPOINT', {
 x: int,
 y: int,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var USEROBJECTFLAGS = new StructT('USEROBJECTFLAGS', {
 fInherit: BOOL,
 fReserved: BOOL,
 dwFlags: DWORD
});

var WNDCLASSEX = new StructT('WNDCLASSEX', {
 cbSize: UINT,
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCSTR,
 lpszClassName: LPCSTR,
 hIconSm: HICON
});

var WNDCLASSEXW = new StructT('WNDCLASSEXW', {
 cbSize: UINT,
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCWSTR,
 lpszClassName: LPCWSTR,
 hIconSm: HICON
});

var WNDCLASS = new StructT('WNDCLASS', {
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCSTR,
 lpszClassName: LPCSTR
});

var WNDCLASSW = new StructT('WNDCLASSW', {
 style: UINT,
 lpfnWndProc: WNDPROC,
 cbClsExtra: int,
 cbWndExtra: int,
 hInstance: HINSTANCE,
 hIcon: HICON,
 hCursor: HCURSOR,
 hbrBackground: HBRUSH,
 lpszMenuName: LPCWSTR,
 lpszClassName: LPCWSTR
});

var MSG = new StructT('MSG', {
 hwnd: HWND,
 message: UINT,
 wParam: WPARAM,
 lParam: LPARAM,
 time: DWORD,
 pt: POINT
});

var MINMAXINFO = new StructT('MINMAXINFO', {
 ptReserved: POINT,
 ptMaxSize: POINT,
 ptMaxPosition: POINT,
 ptMinTrackSize: POINT,
 ptMaxTrackSize: POINT
});

var COPYDATASTRUCT = new StructT('COPYDATASTRUCT', {
 dwData: ULONG_PTR,
 cbData: DWORD,
 lpData: PVOID
});

var MDINEXTMENU = new StructT('MDINEXTMENU', {
 hmenuIn: HMENU,
 hmenuNext: HMENU,
 hwndNext: HWND
});

var POWERBROADCAST_SETTING = new StructT('POWERBROADCAST_SETTING', {
 PowerSetting: GUID,
 DataLength: DWORD,
 Data: new ArrayT(UCHAR, 1)
});

var WINDOWPOS = new StructT('WINDOWPOS', {
 hwnd: HWND,
 hwndInsertAfter: HWND,
 x: int,
 y: int,
 cx: int,
 cy: int,
 flags: UINT
});

var NCCALCSIZE_PARAMS = new StructT('NCCALCSIZE_PARAMS', {
 rgrc: new ArrayT(RECT, 3),
 lppos: PWINDOWPOS
});

var TRACKMOUSEEVENT = new StructT('TRACKMOUSEEVENT', {
 cbSize: DWORD,
 dwFlags: DWORD,
 hwndTrack: HWND,
 dwHoverTime: DWORD
});

var ACCEL = new StructT('ACCEL', {
 fVirt: BYTE,
 key: WORD,
 cmd: WORD
});

var PAINTSTRUCT = new StructT('PAINTSTRUCT', {
 hdc: HDC,
 fErase: BOOL,
 rcPaint: RECT,
 fRestore: BOOL,
 fIncUpdate: BOOL,
 rgbReserved: new ArrayT(BYTE, 32)
});

var WINDOWPLACEMENT = new StructT('WINDOWPLACEMENT', {
 length: UINT,
 flags: UINT,
 showCmd: UINT,
 ptMinPosition: POINT,
 ptMaxPosition: POINT,
 rcNormalPosition: RECT
});

var NMHDR = new StructT('NMHDR', {
 hwndFrom: HWND,
 idFrom: UINT_PTR,
 code: UINT
});

var STYLESTRUCT = new StructT('STYLESTRUCT', {
 styleOld: DWORD,
 styleNew: DWORD
});

var MEASUREITEMSTRUCT = new StructT('MEASUREITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 itemID: UINT,
 itemWidth: UINT,
 itemHeight: UINT,
 itemData: ULONG_PTR
});

var DRAWITEMSTRUCT = new StructT('DRAWITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 itemID: UINT,
 itemAction: UINT,
 itemState: UINT,
 hwndItem: HWND,
 hDC: HDC,
 rcItem: RECT,
 itemData: ULONG_PTR
});

var DELETEITEMSTRUCT = new StructT('DELETEITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 itemID: UINT,
 hwndItem: HWND,
 itemData: ULONG_PTR
});

var COMPAREITEMSTRUCT = new StructT('COMPAREITEMSTRUCT', {
 CtlType: UINT,
 CtlID: UINT,
 hwndItem: HWND,
 itemID1: UINT,
 itemData1: ULONG_PTR,
 itemID2: UINT,
 itemData2: ULONG_PTR,
 dwLocaleId: DWORD
});

var BSMINFO = new StructT('BSMINFO', {
 cbSize: UINT,
 hdesk: HDESK,
 hwnd: HWND,
 luid: LUID
});

var UPDATELAYEREDWINDOWINFO = new StructT('UPDATELAYEREDWINDOWINFO', {
 cbSize: DWORD,
 hdcDst: HDC,
 pptDst: POINT.Δ,
 psize: SIZE.Δ,
 hdcSrc: HDC,
 pptSrc: POINT.Δ,
 crKey: COLORREF,
 pblend: BLENDFUNCTION.Δ,
 dwFlags: DWORD,
 prcDirty: RECT.Δ
});

var FLASHWINFO = new StructT('FLASHWINFO', {
 cbSize: UINT,
 hwnd: HWND,
 dwFlags: DWORD,
 uCount: UINT,
 dwTimeout: DWORD
});

var DLGTEMPLATE = new StructT('DLGTEMPLATE', {
 style: DWORD,
 dwExtendedStyle: DWORD,
 cdit: WORD,
 x: short,
 y: short,
 cx: short,
 cy: short
});

var DLGITEMTEMPLATE = new StructT('DLGITEMTEMPLATE', {
 style: DWORD,
 dwExtendedStyle: DWORD,
 x: short,
 y: short,
 cx: short,
 cy: short,
 id: WORD
});

var MOUSEINPUT = new StructT('MOUSEINPUT', {
 dx: LONG,
 dy: LONG,
 mouseData: DWORD,
 dwFlags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var KEYBDINPUT = new StructT('KEYBDINPUT', {
 wVk: WORD,
 wScan: WORD,
 dwFlags: DWORD,
 time: DWORD,
 dwExtraInfo: ULONG_PTR
});

var HARDWAREINPUT = new StructT('HARDWAREINPUT', {
 uMsg: DWORD,
 wParamL: WORD,
 wParamH: WORD
});

var INPUT = new StructT('INPUT', {
 type: DWORD
});

var HTOUCHINPUT__ = new StructT('HTOUCHINPUT__', {
 unused: int
});

var TOUCHINPUT = new StructT('TOUCHINPUT', {
 x: LONG,
 y: LONG,
 hSource: HANDLE,
 dwID: DWORD,
 dwFlags: DWORD,
 dwMask: DWORD,
 dwTime: DWORD,
 dwExtraInfo: ULONG_PTR,
 cxContact: DWORD,
 cyContact: DWORD
});

var LASTINPUTINFO = new StructT('LASTINPUTINFO', {
 cbSize: UINT,
 dwTime: DWORD
});

var TPMPARAMS = new StructT('TPMPARAMS', {
 cbSize: UINT,
 rcExclude: RECT
});

var MENUINFO = new StructT('MENUINFO', {
 cbSize: DWORD,
 fMask: DWORD,
 dwStyle: DWORD,
 cyMax: UINT,
 hbrBack: HBRUSH,
 dwContextHelpID: DWORD,
 dwMenuData: ULONG_PTR
});

var MENUGETOBJECTINFO = new StructT('MENUGETOBJECTINFO', {
 dwFlags: DWORD,
 uPos: UINT,
 hmenu: HMENU,
 riid: PVOID,
 pvObj: PVOID
});

var MENUITEMINFO = new StructT('MENUITEMINFO', {
 cbSize: UINT,
 fMask: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hSubMenu: HMENU,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: ULONG_PTR,
 dwTypeData: LPSTR,
 cch: UINT,
 hbmpItem: HBITMAP
});

var MENUITEMINFOW = new StructT('MENUITEMINFOW', {
 cbSize: UINT,
 fMask: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hSubMenu: HMENU,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: ULONG_PTR,
 dwTypeData: LPWSTR,
 cch: UINT,
 hbmpItem: HBITMAP
});

var DROPSTRUCT = new StructT('DROPSTRUCT', {
 hwndSource: HWND,
 hwndSink: HWND,
 wFmt: DWORD,
 dwData: ULONG_PTR,
 ptDrop: POINT,
 dwControlData: DWORD
});

var DRAWTEXTPARAMS = new StructT('DRAWTEXTPARAMS', {
 cbSize: UINT,
 iTabLength: int,
 iLeftMargin: int,
 iRightMargin: int,
 uiLengthDrawn: UINT
});

var HELPINFO = new StructT('HELPINFO', {
 cbSize: UINT,
 iContextType: int,
 iCtrlId: int,
 hItemHandle: HANDLE,
 dwContextId: DWORD_PTR,
 MousePos: POINT
});

var MSGBOXPARAMS = new StructT('MSGBOXPARAMS', {
 cbSize: UINT,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpszText: LPCSTR,
 lpszCaption: LPCSTR,
 dwStyle: DWORD,
 lpszIcon: LPCSTR,
 dwContextHelpId: DWORD_PTR,
 lpfnMsgBoxCallback: MSGBOXCALLBACK,
 dwLanguageId: DWORD
});

var MSGBOXPARAMSW = new StructT('MSGBOXPARAMSW', {
 cbSize: UINT,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpszText: LPCWSTR,
 lpszCaption: LPCWSTR,
 dwStyle: DWORD,
 lpszIcon: LPCWSTR,
 dwContextHelpId: DWORD_PTR,
 lpfnMsgBoxCallback: MSGBOXCALLBACK,
 dwLanguageId: DWORD
});

var MENUITEMTEMPLATEHEADER = new StructT('MENUITEMTEMPLATEHEADER', {
 versionNumber: WORD,
 offset: WORD
});

var MENUITEMTEMPLATE = new StructT('MENUITEMTEMPLATE', {
 mtOption: WORD,
 mtID: WORD,
 mtString: new ArrayT(WCHAR, 1)
});

var ICONINFO = new StructT('ICONINFO', {
 fIcon: BOOL,
 xHotspot: DWORD,
 yHotspot: DWORD,
 hbmMask: HBITMAP,
 hbmColor: HBITMAP
});

var CURSORSHAPE = new StructT('CURSORSHAPE', {
 xHotSpot: int,
 yHotSpot: int,
 cx: int,
 cy: int,
 cbWidth: int,
 Planes: BYTE,
 BitsPixel: BYTE
});

var ICONINFOEX = new StructT('ICONINFOEX', {
 cbSize: DWORD,
 fIcon: BOOL,
 xHotspot: DWORD,
 yHotspot: DWORD,
 hbmMask: HBITMAP,
 hbmColor: HBITMAP,
 wResID: WORD,
 szModName: new ArrayT(CHAR, MAX_PATH),
 szResName: new ArrayT(CHAR, MAX_PATH)
});

var ICONINFOEXW = new StructT('ICONINFOEXW', {
 cbSize: DWORD,
 fIcon: BOOL,
 xHotspot: DWORD,
 yHotspot: DWORD,
 hbmMask: HBITMAP,
 hbmColor: HBITMAP,
 wResID: WORD,
 szModName: new ArrayT(WCHAR, MAX_PATH),
 szResName: new ArrayT(WCHAR, MAX_PATH)
});

var SCROLLINFO = new StructT('SCROLLINFO', {
 cbSize: UINT,
 fMask: UINT,
 nMin: int,
 nMax: int,
 nPage: UINT,
 nPos: int,
 nTrackPos: int
});

var MDICREATESTRUCT = new StructT('MDICREATESTRUCT', {
 szClass: LPCSTR,
 szTitle: LPCSTR,
 hOwner: HANDLE,
 x: int,
 y: int,
 cx: int,
 cy: int,
 style: DWORD,
 lParam: LPARAM
});

var MDICREATESTRUCTW = new StructT('MDICREATESTRUCTW', {
 szClass: LPCWSTR,
 szTitle: LPCWSTR,
 hOwner: HANDLE,
 x: int,
 y: int,
 cx: int,
 cy: int,
 style: DWORD,
 lParam: LPARAM
});

var CLIENTCREATESTRUCT = new StructT('CLIENTCREATESTRUCT', {
 hWindowMenu: HANDLE,
 idFirstChild: UINT
});

var MULTIKEYHELP = new StructT('MULTIKEYHELP', {
 mkSize: DWORD,
 mkKeylist: CHAR,
 szKeyphrase: new ArrayT(CHAR, 1)
});

var MULTIKEYHELPW = new StructT('MULTIKEYHELPW', {
 mkSize: DWORD,
 mkKeylist: WCHAR,
 szKeyphrase: new ArrayT(WCHAR, 1)
});

var HELPWININFO = new StructT('HELPWININFO', {
 wStructSize: int,
 x: int,
 y: int,
 dx: int,
 dy: int,
 wMax: int,
 rgchMember: new ArrayT(CHAR, 2)
});

var HELPWININFOW = new StructT('HELPWININFOW', {
 wStructSize: int,
 x: int,
 y: int,
 dx: int,
 dy: int,
 wMax: int,
 rgchMember: new ArrayT(WCHAR, 2)
});

var NONCLIENTMETRICS = new StructT('NONCLIENTMETRICS', {
 cbSize: UINT,
 iBorderWidth: int,
 iScrollWidth: int,
 iScrollHeight: int,
 iCaptionWidth: int,
 iCaptionHeight: int,
 lfCaptionFont: LOGFONTA,
 iSmCaptionWidth: int,
 iSmCaptionHeight: int,
 lfSmCaptionFont: LOGFONTA,
 iMenuWidth: int,
 iMenuHeight: int,
 lfMenuFont: LOGFONTA,
 lfStatusFont: LOGFONTA,
 lfMessageFont: LOGFONTA,
 iPaddedBorderWidth: int
});

var NONCLIENTMETRICSW = new StructT('NONCLIENTMETRICSW', {
 cbSize: UINT,
 iBorderWidth: int,
 iScrollWidth: int,
 iScrollHeight: int,
 iCaptionWidth: int,
 iCaptionHeight: int,
 lfCaptionFont: LOGFONTW,
 iSmCaptionWidth: int,
 iSmCaptionHeight: int,
 lfSmCaptionFont: LOGFONTW,
 iMenuWidth: int,
 iMenuHeight: int,
 lfMenuFont: LOGFONTW,
 lfStatusFont: LOGFONTW,
 lfMessageFont: LOGFONTW,
 iPaddedBorderWidth: int
});

var MINIMIZEDMETRICS = new StructT('MINIMIZEDMETRICS', {
 cbSize: UINT,
 iWidth: int,
 iHorzGap: int,
 iVertGap: int,
 iArrange: int
});

var ICONMETRICS = new StructT('ICONMETRICS', {
 cbSize: UINT,
 iHorzSpacing: int,
 iVertSpacing: int,
 iTitleWrap: int,
 lfFont: LOGFONTA
});

var ICONMETRICSW = new StructT('ICONMETRICSW', {
 cbSize: UINT,
 iHorzSpacing: int,
 iVertSpacing: int,
 iTitleWrap: int,
 lfFont: LOGFONTW
});

var ANIMATIONINFO = new StructT('ANIMATIONINFO', {
 cbSize: UINT,
 iMinAnimate: int
});

var SERIALKEYS = new StructT('SERIALKEYS', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszActivePort: LPSTR,
 lpszPort: LPSTR,
 iBaudRate: UINT,
 iPortState: UINT,
 iActive: UINT
});

var SERIALKEYSW = new StructT('SERIALKEYSW', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszActivePort: LPWSTR,
 lpszPort: LPWSTR,
 iBaudRate: UINT,
 iPortState: UINT,
 iActive: UINT
});

var HIGHCONTRAST = new StructT('HIGHCONTRAST', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszDefaultScheme: LPSTR
});

var HIGHCONTRASTW = new StructT('HIGHCONTRASTW', {
 cbSize: UINT,
 dwFlags: DWORD,
 lpszDefaultScheme: LPWSTR
});

var VIDEOPARAMETERS = new StructT('VIDEOPARAMETERS', {
 Guid: GUID,
 dwOffset: ULONG,
 dwCommand: ULONG,
 dwFlags: ULONG,
 dwMode: ULONG,
 dwTVStandard: ULONG,
 dwAvailableModes: ULONG,
 dwAvailableTVStandard: ULONG,
 dwFlickerFilter: ULONG,
 dwOverScanX: ULONG,
 dwOverScanY: ULONG,
 dwMaxUnscaledX: ULONG,
 dwMaxUnscaledY: ULONG,
 dwPositionX: ULONG,
 dwPositionY: ULONG,
 dwBrightness: ULONG,
 dwContrast: ULONG,
 dwCPType: ULONG,
 dwCPCommand: ULONG,
 dwCPStandard: ULONG,
 dwCPKey: ULONG,
 bCP_APSTriggerBits: ULONG,
 bOEMCopyProtection: new ArrayT(UCHAR, 256)
});

var FILTERKEYS = new StructT('FILTERKEYS', {
 cbSize: UINT,
 dwFlags: DWORD,
 iWaitMSec: DWORD,
 iDelayMSec: DWORD,
 iRepeatMSec: DWORD,
 iBounceMSec: DWORD
});

var STICKYKEYS = new StructT('STICKYKEYS', {
 cbSize: UINT,
 dwFlags: DWORD
});

var MOUSEKEYS = new StructT('MOUSEKEYS', {
 cbSize: UINT,
 dwFlags: DWORD,
 iMaxSpeed: DWORD,
 iTimeToMaxSpeed: DWORD,
 iCtrlSpeed: DWORD,
 dwReserved1: DWORD,
 dwReserved2: DWORD
});

var ACCESSTIMEOUT = new StructT('ACCESSTIMEOUT', {
 cbSize: UINT,
 dwFlags: DWORD,
 iTimeOutMSec: DWORD
});

var SOUNDSENTRY = new StructT('SOUNDSENTRY', {
 cbSize: UINT,
 dwFlags: DWORD,
 iFSTextEffect: DWORD,
 iFSTextEffectMSec: DWORD,
 iFSTextEffectColorBits: DWORD,
 iFSGrafEffect: DWORD,
 iFSGrafEffectMSec: DWORD,
 iFSGrafEffectColor: DWORD,
 iWindowsEffect: DWORD,
 iWindowsEffectMSec: DWORD,
 lpszWindowsEffectDLL: LPSTR,
 iWindowsEffectOrdinal: DWORD
});

var SOUNDSENTRYW = new StructT('SOUNDSENTRYW', {
 cbSize: UINT,
 dwFlags: DWORD,
 iFSTextEffect: DWORD,
 iFSTextEffectMSec: DWORD,
 iFSTextEffectColorBits: DWORD,
 iFSGrafEffect: DWORD,
 iFSGrafEffectMSec: DWORD,
 iFSGrafEffectColor: DWORD,
 iWindowsEffect: DWORD,
 iWindowsEffectMSec: DWORD,
 lpszWindowsEffectDLL: LPWSTR,
 iWindowsEffectOrdinal: DWORD
});

var TOGGLEKEYS = new StructT('TOGGLEKEYS', {
 cbSize: UINT,
 dwFlags: DWORD
});

var AUDIODESCRIPTION = new StructT('AUDIODESCRIPTION', {
 cbSize: UINT,
 Enabled: BOOL,
 Locale: LCID
});

var MONITORINFO = new StructT('MONITORINFO', {
 cbSize: DWORD,
 rcMonitor: RECT,
 rcWork: RECT,
 dwFlags: DWORD
});

var MONITORINFOEX = new StructT('MONITORINFOEX', {
 szDevice: new ArrayT(CHAR, CCHDEVICENAME)
});

var MONITORINFOEXW = new StructT('MONITORINFOEXW', {
 szDevice: new ArrayT(WCHAR, CCHDEVICENAME)
});

var GUITHREADINFO = new StructT('GUITHREADINFO', {
 cbSize: DWORD,
 flags: DWORD,
 hwndActive: HWND,
 hwndFocus: HWND,
 hwndCapture: HWND,
 hwndMenuOwner: HWND,
 hwndMoveSize: HWND,
 hwndCaret: HWND,
 rcCaret: RECT
});

var CURSORINFO = new StructT('CURSORINFO', {
 cbSize: DWORD,
 flags: DWORD,
 hCursor: HCURSOR,
 ptScreenPos: POINT
});

var WINDOWINFO = new StructT('WINDOWINFO', {
 cbSize: DWORD,
 rcWindow: RECT,
 rcClient: RECT,
 dwStyle: DWORD,
 dwExStyle: DWORD,
 dwWindowStatus: DWORD,
 cxWindowBorders: UINT,
 cyWindowBorders: UINT,
 atomWindowType: ATOM,
 wCreatorVersion: WORD
});

var TITLEBARINFO = new StructT('TITLEBARINFO', {
 cbSize: DWORD,
 rcTitleBar: RECT,
 rgstate: new ArrayT(DWORD, undefined)
});

var TITLEBARINFOEX = new StructT('TITLEBARINFOEX', {
 cbSize: DWORD,
 rcTitleBar: RECT,
 rgstate: new ArrayT(DWORD, undefined),
 rgrect: new ArrayT(RECT, undefined)
});

var MENUBARINFO = new StructT('MENUBARINFO', {
 cbSize: DWORD,
 rcBar: RECT,
 hMenu: HMENU,
 hwndMenu: HWND,
 fBarFocused: BOOL,
 fFocused: BOOL
});

var SCROLLBARINFO = new StructT('SCROLLBARINFO', {
 cbSize: DWORD,
 rcScrollBar: RECT,
 dxyLineButton: int,
 xyThumbTop: int,
 xyThumbBottom: int,
 reserved: int,
 rgstate: new ArrayT(DWORD, undefined)
});

var COMBOBOXINFO = new StructT('COMBOBOXINFO', {
 cbSize: DWORD,
 rcItem: RECT,
 rcButton: RECT,
 stateButton: DWORD,
 hwndCombo: HWND,
 hwndItem: HWND,
 hwndList: HWND
});

var ALTTABINFO = new StructT('ALTTABINFO', {
 cbSize: DWORD,
 cItems: int,
 cColumns: int,
 cRows: int,
 iColFocus: int,
 iRowFocus: int,
 cxItem: int,
 cyItem: int,
 ptStart: POINT
});

var HRAWINPUT__ = new StructT('HRAWINPUT__', {
 unused: int
});

var RAWINPUTHEADER = new StructT('RAWINPUTHEADER', {
 dwType: DWORD,
 dwSize: DWORD,
 hDevice: HANDLE,
 wParam: WPARAM
});

var RAWMOUSE = new StructT('RAWMOUSE', {
 usFlags: USHORT,
 ulRawButtons: ULONG,
 lLastX: LONG,
 lLastY: LONG,
 ulExtraInformation: ULONG
});

var undefined = new StructT('undefined', {
 usButtonFlags: USHORT,
 usButtonData: USHORT
});

var RAWKEYBOARD = new StructT('RAWKEYBOARD', {
 MakeCode: USHORT,
 Flags: USHORT,
 Reserved: USHORT,
 VKey: USHORT,
 Message: UINT,
 ExtraInformation: ULONG
});

var RAWHID = new StructT('RAWHID', {
 dwSizeHid: DWORD,
 dwCount: DWORD,
 bRawData: new ArrayT(BYTE, 1)
});

var RAWINPUT = new StructT('RAWINPUT', {
 header: RAWINPUTHEADER,
 data: c:winuser.h@307660@S@tagRAWINPUT@Ua
});

var RID_DEVICE_INFO_MOUSE = new StructT('RID_DEVICE_INFO_MOUSE', {
 dwId: DWORD,
 dwNumberOfButtons: DWORD,
 dwSampleRate: DWORD,
 fHasHorizontalWheel: BOOL
});

var RID_DEVICE_INFO_KEYBOARD = new StructT('RID_DEVICE_INFO_KEYBOARD', {
 dwType: DWORD,
 dwSubType: DWORD,
 dwKeyboardMode: DWORD,
 dwNumberOfFunctionKeys: DWORD,
 dwNumberOfIndicators: DWORD,
 dwNumberOfKeysTotal: DWORD
});

var RID_DEVICE_INFO_HID = new StructT('RID_DEVICE_INFO_HID', {
 dwVendorId: DWORD,
 dwProductId: DWORD,
 dwVersionNumber: DWORD,
 usUsagePage: USHORT,
 usUsage: USHORT
});

var RID_DEVICE_INFO = new StructT('RID_DEVICE_INFO', {
 cbSize: DWORD,
 dwType: DWORD
});

var RAWINPUTDEVICE = new StructT('RAWINPUTDEVICE', {
 usUsagePage: USHORT,
 usUsage: USHORT,
 dwFlags: DWORD,
 hwndTarget: HWND
});

var RAWINPUTDEVICELIST = new StructT('RAWINPUTDEVICELIST', {
 hDevice: HANDLE,
 dwType: DWORD
});

var CHANGEFILTERSTRUCT = new StructT('CHANGEFILTERSTRUCT', {
 cbSize: DWORD,
 ExtStatus: DWORD
});

var HGESTUREINFO__ = new StructT('HGESTUREINFO__', {
 unused: int
});

var GESTUREINFO = new StructT('GESTUREINFO', {
 cbSize: UINT,
 dwFlags: DWORD,
 dwID: DWORD,
 hwndTarget: HWND,
 ptsLocation: POINTS,
 dwInstanceID: DWORD,
 dwSequenceID: DWORD,
 ullArguments: ULONGLONG,
 cbExtraArgs: UINT
});

var GESTURENOTIFYSTRUCT = new StructT('GESTURENOTIFYSTRUCT', {
 cbSize: UINT,
 dwFlags: DWORD,
 hwndTarget: HWND,
 ptsLocation: POINTS,
 dwInstanceID: DWORD
});

var GESTURECONFIG = new StructT('GESTURECONFIG', {
 dwID: DWORD,
 dwWant: DWORD,
 dwBlock: DWORD
});

var CPINFO = new StructT('CPINFO', {
 MaxCharSize: UINT,
 DefaultChar: new ArrayT(BYTE, MAX_DEFAULTCHAR),
 LeadByte: new ArrayT(BYTE, MAX_LEADBYTES)
});

var CPINFOEX = new StructT('CPINFOEX', {
 MaxCharSize: UINT,
 DefaultChar: new ArrayT(BYTE, MAX_DEFAULTCHAR),
 LeadByte: new ArrayT(BYTE, MAX_LEADBYTES),
 UnicodeDefaultChar: WCHAR,
 CodePage: UINT,
 CodePageName: new ArrayT(CHAR, MAX_PATH)
});

var CPINFOEXW = new StructT('CPINFOEXW', {
 MaxCharSize: UINT,
 DefaultChar: new ArrayT(BYTE, MAX_DEFAULTCHAR),
 LeadByte: new ArrayT(BYTE, MAX_LEADBYTES),
 UnicodeDefaultChar: WCHAR,
 CodePage: UINT,
 CodePageName: new ArrayT(WCHAR, MAX_PATH)
});

var NUMBERFMT = new StructT('NUMBERFMT', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPSTR,
 lpThousandSep: LPSTR,
 NegativeOrder: UINT
});

var NUMBERFMTW = new StructT('NUMBERFMTW', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPWSTR,
 lpThousandSep: LPWSTR,
 NegativeOrder: UINT
});

var CURRENCYFMT = new StructT('CURRENCYFMT', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPSTR,
 lpThousandSep: LPSTR,
 NegativeOrder: UINT,
 PositiveOrder: UINT,
 lpCurrencySymbol: LPSTR
});

var CURRENCYFMTW = new StructT('CURRENCYFMTW', {
 NumDigits: UINT,
 LeadingZero: UINT,
 Grouping: UINT,
 lpDecimalSep: LPWSTR,
 lpThousandSep: LPWSTR,
 NegativeOrder: UINT,
 PositiveOrder: UINT,
 lpCurrencySymbol: LPWSTR
});

var NLSVERSIONINFO = new StructT('NLSVERSIONINFO', {
 dwNLSVersionInfoSize: DWORD,
 dwNLSVersion: DWORD,
 dwDefinedVersion: DWORD
});

var NLSVERSIONINFOEX = new StructT('NLSVERSIONINFOEX', {
 dwNLSVersionInfoSize: DWORD,
 dwNLSVersion: DWORD,
 dwDefinedVersion: DWORD,
 dwEffectiveId: DWORD,
 guidCustomVersion: GUID
});

var FILEMUIINFO = new StructT('FILEMUIINFO', {
 dwSize: DWORD,
 dwVersion: DWORD,
 dwFileType: DWORD,
 pChecksum: new ArrayT(BYTE, 16),
 pServiceChecksum: new ArrayT(BYTE, 16),
 dwLanguageNameOffset: DWORD,
 dwTypeIDMainSize: DWORD,
 dwTypeIDMainOffset: DWORD,
 dwTypeNameMainOffset: DWORD,
 dwTypeIDMUISize: DWORD,
 dwTypeIDMUIOffset: DWORD,
 dwTypeNameMUIOffset: DWORD,
 abBuffer: new ArrayT(BYTE, 8)
});

var COORD = new StructT('COORD', {
 X: SHORT,
 Y: SHORT
});

var RECT = new StructT('RECT', {
 Left: LONG,
 Top: LONG,
 Right: LONG,
 Bottom: LONG
});

var SMALL_RECT = new StructT('SMALL_RECT', {
 Left: SHORT,
 Top: SHORT,
 Right: SHORT,
 Bottom: SHORT
});

var KEY_EVENT_RECORD = new StructT('KEY_EVENT_RECORD', {
 bKeyDown: BOOL,
 wRepeatCount: WORD,
 wVirtualKeyCode: WORD,
 wVirtualScanCode: WORD,
 uChar: c:wincon.h@860@S@_KEY_EVENT_RECORD@Ua,
 dwControlKeyState: DWORD
});

var MOUSE_EVENT_RECORD = new StructT('MOUSE_EVENT_RECORD', {
 dwMousePosition: COORD,
 dwButtonState: DWORD,
 dwControlKeyState: DWORD,
 dwEventFlags: DWORD
});

var WINDOW_BUFFER_SIZE_RECORD = new StructT('WINDOW_BUFFER_SIZE_RECORD', {
 dwSize: COORD
});

var MENU_EVENT_RECORD = new StructT('MENU_EVENT_RECORD', {
 dwCommandId: UINT
});

var FOCUS_EVENT_RECORD = new StructT('FOCUS_EVENT_RECORD', {
 bSetFocus: BOOL
});

var INPUT_RECORD = new StructT('INPUT_RECORD', {
 EventType: WORD,
 Event: c:wincon.h@3273@S@_INPUT_RECORD@Ua
});

var CHAR_INFO = new StructT('CHAR_INFO', {
 Char: c:wincon.h@3958@S@_CHAR_INFO@Ua,
 Attributes: WORD
});

var CONSOLE_SCREEN_BUFFER_INFO = new StructT('CONSOLE_SCREEN_BUFFER_INFO', {
 dwSize: COORD,
 dwCursorPosition: COORD,
 wAttributes: WORD,
 srWindow: SMALL_RECT,
 dwMaximumWindowSize: COORD
});

var CONSOLE_SCREEN_BUFFER_INFOEX = new StructT('CONSOLE_SCREEN_BUFFER_INFOEX', {
 cbSize: ULONG,
 dwSize: COORD,
 dwCursorPosition: COORD,
 wAttributes: WORD,
 srWindow: SMALL_RECT,
 dwMaximumWindowSize: COORD,
 wPopupAttributes: WORD,
 bFullscreenSupported: BOOL,
 ColorTable: new ArrayT(COLORREF, 16)
});

var CONSOLE_CURSOR_INFO = new StructT('CONSOLE_CURSOR_INFO', {
 dwSize: DWORD,
 bVisible: BOOL
});

var CONSOLE_FONT_INFO = new StructT('CONSOLE_FONT_INFO', {
 nFont: DWORD,
 dwFontSize: COORD
});

var CONSOLE_FONT_INFOEX = new StructT('CONSOLE_FONT_INFOEX', {
 cbSize: ULONG,
 nFont: DWORD,
 dwFontSize: COORD,
 FontFamily: UINT,
 FontWeight: UINT,
 FaceName: new ArrayT(WCHAR, LF_FACESIZE)
});

var CONSOLE_HISTORY_INFO = new StructT('CONSOLE_HISTORY_INFO', {
 cbSize: UINT,
 HistoryBufferSize: UINT,
 NumberOfHistoryBuffers: UINT,
 dwFlags: DWORD
});

var CONSOLE_SELECTION_INFO = new StructT('CONSOLE_SELECTION_INFO', {
 dwFlags: DWORD,
 dwSelectionAnchor: COORD,
 srSelection: SMALL_RECT
});

var CONSOLE_READCONSOLE_CONTROL = new StructT('CONSOLE_READCONSOLE_CONTROL', {
 nLength: ULONG,
 nInitialChars: ULONG,
 dwCtrlWakeupMask: ULONG,
 dwControlKeyState: ULONG
});

var VS_FIXEDFILEINFO = new StructT('VS_FIXEDFILEINFO', {
 dwSignature: DWORD,
 dwStrucVersion: DWORD,
 dwFileVersionMS: DWORD,
 dwFileVersionLS: DWORD,
 dwProductVersionMS: DWORD,
 dwProductVersionLS: DWORD,
 dwFileFlagsMask: DWORD,
 dwFileFlags: DWORD,
 dwFileOS: DWORD,
 dwFileType: DWORD,
 dwFileSubtype: DWORD,
 dwFileDateMS: DWORD,
 dwFileDateLS: DWORD
});

var val_context = new StructT('val_context', {
 valuelen: int,
 value_context: LPVOID,
 val_buff_ptr: LPVOID
});

var PVALUE = new StructT('PVALUE', {
 pv_valuename: LPSTR,
 pv_valuelen: int,
 pv_value_context: LPVOID,
 pv_type: DWORD
});

var PVALUEW = new StructT('PVALUEW', {
 pv_valuename: LPWSTR,
 pv_valuelen: int,
 pv_value_context: LPVOID,
 pv_type: DWORD
});

var REG_PROVIDER = new StructT('REG_PROVIDER', {
 pi_R0_1val: PQUERYHANDLER,
 pi_R0_allvals: PQUERYHANDLER,
 pi_R3_1val: PQUERYHANDLER,
 pi_R3_allvals: PQUERYHANDLER,
 pi_flags: DWORD,
 pi_key_context: LPVOID
});

var VALENT = new StructT('VALENT', {
 ve_valuename: LPSTR,
 ve_valuelen: DWORD,
 ve_valueptr: DWORD_PTR,
 ve_type: DWORD
});

var VALENTW = new StructT('VALENTW', {
 ve_valuename: LPWSTR,
 ve_valuelen: DWORD,
 ve_valueptr: DWORD_PTR,
 ve_type: DWORD
});

var NETRESOURCE = new StructT('NETRESOURCE', {
 dwScope: DWORD,
 dwType: DWORD,
 dwDisplayType: DWORD,
 dwUsage: DWORD,
 lpLocalName: LPSTR,
 lpRemoteName: LPSTR,
 lpComment: LPSTR,
 lpProvider: LPSTR
});

var NETRESOURCEW = new StructT('NETRESOURCEW', {
 dwScope: DWORD,
 dwType: DWORD,
 dwDisplayType: DWORD,
 dwUsage: DWORD,
 lpLocalName: LPWSTR,
 lpRemoteName: LPWSTR,
 lpComment: LPWSTR,
 lpProvider: LPWSTR
});

var CONNECTDLGSTRUCT = new StructT('CONNECTDLGSTRUCT', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpConnRes: LPNETRESOURCEA,
 dwFlags: DWORD,
 dwDevNum: DWORD
});

var CONNECTDLGSTRUCTW = new StructT('CONNECTDLGSTRUCTW', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpConnRes: LPNETRESOURCEW,
 dwFlags: DWORD,
 dwDevNum: DWORD
});

var DISCDLGSTRUCT = new StructT('DISCDLGSTRUCT', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpLocalName: LPSTR,
 lpRemoteName: LPSTR,
 dwFlags: DWORD
});

var DISCDLGSTRUCTW = new StructT('DISCDLGSTRUCTW', {
 cbStructure: DWORD,
 hwndOwner: HWND,
 lpLocalName: LPWSTR,
 lpRemoteName: LPWSTR,
 dwFlags: DWORD
});

var UNIVERSAL_NAME_INFO = new StructT('UNIVERSAL_NAME_INFO', {
 lpUniversalName: LPSTR
});

var UNIVERSAL_NAME_INFOW = new StructT('UNIVERSAL_NAME_INFOW', {
 lpUniversalName: LPWSTR
});

var REMOTE_NAME_INFO = new StructT('REMOTE_NAME_INFO', {
 lpUniversalName: LPSTR,
 lpConnectionName: LPSTR,
 lpRemainingPath: LPSTR
});

var REMOTE_NAME_INFOW = new StructT('REMOTE_NAME_INFOW', {
 lpUniversalName: LPWSTR,
 lpConnectionName: LPWSTR,
 lpRemainingPath: LPWSTR
});

var NETINFOSTRUCT = new StructT('NETINFOSTRUCT', {
 cbStructure: DWORD,
 dwProviderVersion: DWORD,
 dwStatus: DWORD,
 dwCharacteristics: DWORD,
 dwHandle: ULONG_PTR,
 wNetType: WORD,
 dwPrinters: DWORD,
 dwDrives: DWORD
});

var NETCONNECTINFOSTRUCT = new StructT('NETCONNECTINFOSTRUCT', {
 cbStructure: DWORD,
 dwFlags: DWORD,
 dwSpeed: DWORD,
 dwDelay: DWORD,
 dwOptDataSize: DWORD
});

var DDEACK = new StructT('DDEACK', {
 bAppReturnCode: ushort,
 reserved: ushort,
 fBusy: ushort,
 fAck: ushort
});

var DDEADVISE = new StructT('DDEADVISE', {
 reserved: ushort,
 fDeferUpd: ushort,
 fAckReq: ushort,
 cfFormat: short
});

var DDEDATA = new StructT('DDEDATA', {
 unused: ushort,
 fResponse: ushort,
 fRelease: ushort,
 reserved: ushort,
 fAckReq: ushort,
 cfFormat: short,
 Value: new ArrayT(BYTE, 1)
});

var DDEPOKE = new StructT('DDEPOKE', {
 unused: ushort,
 fRelease: ushort,
 fReserved: ushort,
 cfFormat: short,
 Value: new ArrayT(BYTE, 1)
});

var DDELN = new StructT('DDELN', {
 unused: ushort,
 fRelease: ushort,
 fDeferUpd: ushort,
 fAckReq: ushort,
 cfFormat: short
});

var DDEUP = new StructT('DDEUP', {
 unused: ushort,
 fAck: ushort,
 fRelease: ushort,
 fReserved: ushort,
 fAckReq: ushort,
 cfFormat: short,
 rgb: new ArrayT(BYTE, 1)
});

var HCONVLIST__ = new StructT('HCONVLIST__', {
 unused: int
});

var HCONV__ = new StructT('HCONV__', {
 unused: int
});

var HSZ__ = new StructT('HSZ__', {
 unused: int
});

var HDDEDATA__ = new StructT('HDDEDATA__', {
 unused: int
});

var HSZPAIR = new StructT('HSZPAIR', {
 hszSvc: HSZ,
 hszTopic: HSZ
});

var CONVCONTEXT = new StructT('CONVCONTEXT', {
 cb: UINT,
 wFlags: UINT,
 wCountryID: UINT,
 iCodePage: int,
 dwLangID: DWORD,
 dwSecurity: DWORD,
 qos: SECURITY_QUALITY_OF_SERVICE
});

var CONVINFO = new StructT('CONVINFO', {
 cb: DWORD,
 hUser: DWORD_PTR,
 hConvPartner: HCONV,
 hszSvcPartner: HSZ,
 hszServiceReq: HSZ,
 hszTopic: HSZ,
 hszItem: HSZ,
 wFmt: UINT,
 wType: UINT,
 wStatus: UINT,
 wConvst: UINT,
 wLastError: UINT,
 hConvList: HCONVLIST,
 ConvCtxt: CONVCONTEXT,
 hwnd: HWND,
 hwndPartner: HWND
});

var DDEML_MSG_HOOK_DATA = new StructT('DDEML_MSG_HOOK_DATA', {
 uiLo: UINT_PTR,
 uiHi: UINT_PTR,
 cbData: DWORD,
 Data: new ArrayT(DWORD, 8)
});

var MONMSGSTRUCT = new StructT('MONMSGSTRUCT', {
 cb: UINT,
 hwndTo: HWND,
 dwTime: DWORD,
 hTask: HANDLE,
 wMsg: UINT,
 wParam: WPARAM,
 lParam: LPARAM,
 dmhd: DDEML_MSG_HOOK_DATA
});

var MONCBSTRUCT = new StructT('MONCBSTRUCT', {
 cb: UINT,
 dwTime: DWORD,
 hTask: HANDLE,
 dwRet: DWORD,
 wType: UINT,
 wFmt: UINT,
 hConv: HCONV,
 hsz1: HSZ,
 hsz2: HSZ,
 hData: HDDEDATA,
 dwData1: ULONG_PTR,
 dwData2: ULONG_PTR,
 cc: CONVCONTEXT,
 cbData: DWORD,
 Data: new ArrayT(DWORD, 8)
});

var MONHSZSTRUCT = new StructT('MONHSZSTRUCT', {
 cb: UINT,
 fsAction: BOOL,
 dwTime: DWORD,
 hsz: HSZ,
 hTask: HANDLE,
 str: new ArrayT(CHAR, 1)
});

var MONHSZSTRUCTW = new StructT('MONHSZSTRUCTW', {
 cb: UINT,
 fsAction: BOOL,
 dwTime: DWORD,
 hsz: HSZ,
 hTask: HANDLE,
 str: new ArrayT(WCHAR, 1)
});

var MONERRSTRUCT = new StructT('MONERRSTRUCT', {
 cb: UINT,
 wLastError: UINT,
 dwTime: DWORD,
 hTask: HANDLE
});

var MONLINKSTRUCT = new StructT('MONLINKSTRUCT', {
 cb: UINT,
 dwTime: DWORD,
 hTask: HANDLE,
 fEstablished: BOOL,
 fNoData: BOOL,
 hszSvc: HSZ,
 hszTopic: HSZ,
 hszItem: HSZ,
 wFmt: UINT,
 fServer: BOOL,
 hConvServer: HCONV,
 hConvClient: HCONV
});

var MONCONVSTRUCT = new StructT('MONCONVSTRUCT', {
 cb: UINT,
 fConnect: BOOL,
 dwTime: DWORD,
 hTask: HANDLE,
 hszSvc: HSZ,
 hszTopic: HSZ,
 hConvClient: HCONV,
 hConvServer: HCONV
});

var CRGB = new StructT('CRGB', {
 bRed: BYTE,
 bGreen: BYTE,
 bBlue: BYTE,
 bExtra: BYTE
});

var MMTIME = new StructT('MMTIME', {
 wType: UINT,
 u: c:mmsystem.h@3695@S@mmtime_tag@Ua
});

var undefined = new StructT('undefined', {
 hour: BYTE,
 min: BYTE,
 sec: BYTE,
 frame: BYTE,
 fps: BYTE,
 dummy: BYTE,
 pad: new ArrayT(BYTE, 2)
});

var undefined = new StructT('undefined', {
 songptrpos: DWORD
});

var HDRVR__ = new StructT('HDRVR__', {
 unused: int
});

var DRVCONFIGINFOEX = new StructT('DRVCONFIGINFOEX', {
 dwDCISize: DWORD,
 lpszDCISectionName: LPCWSTR,
 lpszDCIAliasName: LPCWSTR,
 dnDevNode: DWORD
});

var DRVCONFIGINFO = new StructT('DRVCONFIGINFO', {
 dwDCISize: DWORD,
 lpszDCISectionName: LPCWSTR,
 lpszDCIAliasName: LPCWSTR
});

var HWAVE__ = new StructT('HWAVE__', {
 unused: int
});

var HWAVEIN__ = new StructT('HWAVEIN__', {
 unused: int
});

var HWAVEOUT__ = new StructT('HWAVEOUT__', {
 unused: int
});

var WAVEHDR = new StructT('WAVEHDR', {
 lpData: LPSTR,
 dwBufferLength: DWORD,
 dwBytesRecorded: DWORD,
 dwUser: DWORD_PTR,
 dwFlags: DWORD,
 dwLoops: DWORD,
 lpNext: wavehdr_tag.Δ,
 reserved: DWORD_PTR
});

var WAVEOUTCAPS = new StructT('WAVEOUTCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var WAVEOUTCAPSW = new StructT('WAVEOUTCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var WAVEOUTCAPS2 = new StructT('WAVEOUTCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var WAVEOUTCAPS2W = new StructT('WAVEOUTCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var WAVEINCAPS = new StructT('WAVEINCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD
});

var WAVEINCAPSW = new StructT('WAVEINCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD
});

var WAVEINCAPS2 = new StructT('WAVEINCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var WAVEINCAPS2W = new StructT('WAVEINCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 dwFormats: DWORD,
 wChannels: WORD,
 wReserved1: WORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var WAVEFORMAT = new StructT('WAVEFORMAT', {
 wFormatTag: WORD,
 nChannels: WORD,
 nSamplesPerSec: DWORD,
 nAvgBytesPerSec: DWORD,
 nBlockAlign: WORD
});

var PCMWAVEFORMAT = new StructT('PCMWAVEFORMAT', {
 wf: WAVEFORMAT,
 wBitsPerSample: WORD
});

var WAVEFORMATEX = new StructT('WAVEFORMATEX', {
 wFormatTag: WORD,
 nChannels: WORD,
 nSamplesPerSec: DWORD,
 nAvgBytesPerSec: DWORD,
 nBlockAlign: WORD,
 wBitsPerSample: WORD,
 cbSize: WORD
});

var HMIDI__ = new StructT('HMIDI__', {
 unused: int
});

var HMIDIIN__ = new StructT('HMIDIIN__', {
 unused: int
});

var HMIDIOUT__ = new StructT('HMIDIOUT__', {
 unused: int
});

var HMIDISTRM__ = new StructT('HMIDISTRM__', {
 unused: int
});

var MIDIOUTCAPS = new StructT('MIDIOUTCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD
});

var MIDIOUTCAPSW = new StructT('MIDIOUTCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD
});

var MIDIOUTCAPS2 = new StructT('MIDIOUTCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIDIOUTCAPS2W = new StructT('MIDIOUTCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wVoices: WORD,
 wNotes: WORD,
 wChannelMask: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIDIINCAPS = new StructT('MIDIINCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 dwSupport: DWORD
});

var MIDIINCAPSW = new StructT('MIDIINCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 dwSupport: DWORD
});

var MIDIINCAPS2 = new StructT('MIDIINCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIDIINCAPS2W = new StructT('MIDIINCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIDIHDR = new StructT('MIDIHDR', {
 lpData: LPSTR,
 dwBufferLength: DWORD,
 dwBytesRecorded: DWORD,
 dwUser: DWORD_PTR,
 dwFlags: DWORD,
 lpNext: midihdr_tag.Δ,
 reserved: DWORD_PTR,
 dwOffset: DWORD,
 dwReserved: new ArrayT(DWORD_PTR, 8)
});

var MIDIEVENT = new StructT('MIDIEVENT', {
 dwDeltaTime: DWORD,
 dwStreamID: DWORD,
 dwEvent: DWORD,
 dwParms: new ArrayT(DWORD, 1)
});

var MIDISTRMBUFFVER = new StructT('MIDISTRMBUFFVER', {
 dwVersion: DWORD,
 dwMid: DWORD,
 dwOEMVersion: DWORD
});

var MIDIPROPTIMEDIV = new StructT('MIDIPROPTIMEDIV', {
 cbStruct: DWORD,
 dwTimeDiv: DWORD
});

var MIDIPROPTEMPO = new StructT('MIDIPROPTEMPO', {
 cbStruct: DWORD,
 dwTempo: DWORD
});

var AUXCAPS = new StructT('AUXCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var AUXCAPSW = new StructT('AUXCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD
});

var AUXCAPS2 = new StructT('AUXCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var AUXCAPS2W = new StructT('AUXCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 wTechnology: WORD,
 wReserved1: WORD,
 dwSupport: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var HMIXEROBJ__ = new StructT('HMIXEROBJ__', {
 unused: int
});

var HMIXER__ = new StructT('HMIXER__', {
 unused: int
});

var MIXERCAPS = new StructT('MIXERCAPS', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD
});

var MIXERCAPSW = new StructT('MIXERCAPSW', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD
});

var MIXERCAPS2 = new StructT('MIXERCAPS2', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIXERCAPS2W = new StructT('MIXERCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 fdwSupport: DWORD,
 cDestinations: DWORD,
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var MIXERLINE = new StructT('MIXERLINE', {
 cbStruct: DWORD,
 dwDestination: DWORD,
 dwSource: DWORD,
 dwLineID: DWORD,
 fdwLine: DWORD,
 dwUser: DWORD_PTR,
 dwComponentType: DWORD,
 cChannels: DWORD,
 cConnections: DWORD,
 cControls: DWORD,
 szShortName: new ArrayT(CHAR, MIXER_SHORT_NAME_CHARS),
 szName: new ArrayT(CHAR, MIXER_LONG_NAME_CHARS),
 Target:
});

var undefined = new StructT('undefined', {
 dwType: DWORD,
 dwDeviceID: DWORD,
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(CHAR, MAXPNAMELEN)
});

var MIXERLINEW = new StructT('MIXERLINEW', {
 cbStruct: DWORD,
 dwDestination: DWORD,
 dwSource: DWORD,
 dwLineID: DWORD,
 fdwLine: DWORD,
 dwUser: DWORD_PTR,
 dwComponentType: DWORD,
 cChannels: DWORD,
 cConnections: DWORD,
 cControls: DWORD,
 szShortName: new ArrayT(WCHAR, MIXER_SHORT_NAME_CHARS),
 szName: new ArrayT(WCHAR, MIXER_LONG_NAME_CHARS),
 Target:
});

var undefined = new StructT('undefined', {
 dwType: DWORD,
 dwDeviceID: DWORD,
 wMid: WORD,
 wPid: WORD,
 vDriverVersion: MMVERSION,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN)
});

var MIXERCONTROL = new StructT('MIXERCONTROL', {
 cbStruct: DWORD,
 dwControlID: DWORD,
 dwControlType: DWORD,
 fdwControl: DWORD,
 cMultipleItems: DWORD,
 szShortName: new ArrayT(CHAR, MIXER_SHORT_NAME_CHARS),
 szName: new ArrayT(CHAR, MIXER_LONG_NAME_CHARS),
 Bounds: c:mmsystem.h@81017@S@tagMIXERCONTROLA@Ua,
 Metrics: c:mmsystem.h@81494@S@tagMIXERCONTROLA@Ua
});

var undefined = new StructT('undefined', {
 lMinimum: LONG,
 lMaximum: LONG
});

var undefined = new StructT('undefined', {
 dwMinimum: DWORD,
 dwMaximum: DWORD
});

var MIXERCONTROLW = new StructT('MIXERCONTROLW', {
 cbStruct: DWORD,
 dwControlID: DWORD,
 dwControlType: DWORD,
 fdwControl: DWORD,
 cMultipleItems: DWORD,
 szShortName: new ArrayT(WCHAR, MIXER_SHORT_NAME_CHARS),
 szName: new ArrayT(WCHAR, MIXER_LONG_NAME_CHARS),
 Bounds: c:mmsystem.h@82346@S@tagMIXERCONTROLW@Ua,
 Metrics: c:mmsystem.h@82823@S@tagMIXERCONTROLW@Ua
});

var undefined = new StructT('undefined', {
 lMinimum: LONG,
 lMaximum: LONG
});

var undefined = new StructT('undefined', {
 dwMinimum: DWORD,
 dwMaximum: DWORD
});

var MIXERLINECONTROLS = new StructT('MIXERLINECONTROLS', {
 cbStruct: DWORD,
 dwLineID: DWORD,
 cControls: DWORD,
 cbmxctrl: DWORD,
 pamxctrl: LPMIXERCONTROLA
});

var MIXERLINECONTROLSW = new StructT('MIXERLINECONTROLSW', {
 cbStruct: DWORD,
 dwLineID: DWORD,
 cControls: DWORD,
 cbmxctrl: DWORD,
 pamxctrl: LPMIXERCONTROLW
});

var MIXERCONTROLDETAILS = new StructT('MIXERCONTROLDETAILS', {
 cbStruct: DWORD,
 dwControlID: DWORD,
 cChannels: DWORD,
 cbDetails: DWORD,
 paDetails: LPVOID
});

var MIXERCONTROLDETAILS_LISTTEXT = new StructT('MIXERCONTROLDETAILS_LISTTEXT', {
 dwParam1: DWORD,
 dwParam2: DWORD,
 szName: new ArrayT(CHAR, MIXER_LONG_NAME_CHARS)
});

var MIXERCONTROLDETAILS_LISTTEXTW = new StructT('MIXERCONTROLDETAILS_LISTTEXTW', {
 dwParam1: DWORD,
 dwParam2: DWORD,
 szName: new ArrayT(WCHAR, MIXER_LONG_NAME_CHARS)
});

var MIXERCONTROLDETAILS_BOOLEAN = new StructT('MIXERCONTROLDETAILS_BOOLEAN', {
 fValue: LONG
});

var MIXERCONTROLDETAILS_SIGNED = new StructT('MIXERCONTROLDETAILS_SIGNED', {
 lValue: LONG
});

var MIXERCONTROLDETAILS_UNSIGNED = new StructT('MIXERCONTROLDETAILS_UNSIGNED', {
 dwValue: DWORD
});

var TIMECAPS = new StructT('TIMECAPS', {
 wPeriodMin: UINT,
 wPeriodMax: UINT
});

var JOYCAPS = new StructT('JOYCAPS', {
 wMid: WORD,
 wPid: WORD,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: new ArrayT(CHAR, MAXPNAMELEN),
 szOEMVxD: new ArrayT(CHAR, MAX_JOYSTICKOEMVXDNAME)
});

var JOYCAPSW = new StructT('JOYCAPSW', {
 wMid: WORD,
 wPid: WORD,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: new ArrayT(WCHAR, MAXPNAMELEN),
 szOEMVxD: new ArrayT(WCHAR, MAX_JOYSTICKOEMVXDNAME)
});

var JOYCAPS2 = new StructT('JOYCAPS2', {
 wMid: WORD,
 wPid: WORD,
 szPname: new ArrayT(CHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: new ArrayT(CHAR, MAXPNAMELEN),
 szOEMVxD: new ArrayT(CHAR, MAX_JOYSTICKOEMVXDNAME),
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var JOYCAPS2W = new StructT('JOYCAPS2W', {
 wMid: WORD,
 wPid: WORD,
 szPname: new ArrayT(WCHAR, MAXPNAMELEN),
 wXmin: UINT,
 wXmax: UINT,
 wYmin: UINT,
 wYmax: UINT,
 wZmin: UINT,
 wZmax: UINT,
 wNumButtons: UINT,
 wPeriodMin: UINT,
 wPeriodMax: UINT,
 wRmin: UINT,
 wRmax: UINT,
 wUmin: UINT,
 wUmax: UINT,
 wVmin: UINT,
 wVmax: UINT,
 wCaps: UINT,
 wMaxAxes: UINT,
 wNumAxes: UINT,
 wMaxButtons: UINT,
 szRegKey: new ArrayT(WCHAR, MAXPNAMELEN),
 szOEMVxD: new ArrayT(WCHAR, MAX_JOYSTICKOEMVXDNAME),
 ManufacturerGuid: GUID,
 ProductGuid: GUID,
 NameGuid: GUID
});

var JOYINFO = new StructT('JOYINFO', {
 wXpos: UINT,
 wYpos: UINT,
 wZpos: UINT,
 wButtons: UINT
});

var JOYINFOEX = new StructT('JOYINFOEX', {
 dwSize: DWORD,
 dwFlags: DWORD,
 dwXpos: DWORD,
 dwYpos: DWORD,
 dwZpos: DWORD,
 dwRpos: DWORD,
 dwUpos: DWORD,
 dwVpos: DWORD,
 dwButtons: DWORD,
 dwButtonNumber: DWORD,
 dwPOV: DWORD,
 dwReserved1: DWORD,
 dwReserved2: DWORD
});

var HMMIO__ = new StructT('HMMIO__', {
 unused: int
});

var MMIOINFO = new StructT('MMIOINFO', {
 dwFlags: DWORD,
 fccIOProc: FOURCC,
 pIOProc: LPMMIOPROC,
 wErrorRet: UINT,
 htask: HTASK,
 cchBuffer: LONG,
 pchBuffer: HPSTR,
 pchNext: HPSTR,
 pchEndRead: HPSTR,
 pchEndWrite: HPSTR,
 lBufOffset: LONG,
 lDiskOffset: LONG,
 adwInfo: new ArrayT(DWORD, 3),
 dwReserved1: DWORD,
 dwReserved2: DWORD,
 hmmio: HMMIO
});

var MMCKINFO = new StructT('MMCKINFO', {
 ckid: FOURCC,
 cksize: DWORD,
 fccType: FOURCC,
 dwDataOffset: DWORD,
 dwFlags: DWORD
});

var MCI_GENERIC_PARMS = new StructT('MCI_GENERIC_PARMS', {
 dwCallback: DWORD_PTR
});

var MCI_OPEN_PARMS = new StructT('MCI_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR
});

var MCI_OPEN_PARMSW = new StructT('MCI_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR
});

var MCI_PLAY_PARMS = new StructT('MCI_PLAY_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD
});

var MCI_SEEK_PARMS = new StructT('MCI_SEEK_PARMS', {
 dwCallback: DWORD_PTR,
 dwTo: DWORD
});

var MCI_STATUS_PARMS = new StructT('MCI_STATUS_PARMS', {
 dwCallback: DWORD_PTR,
 dwReturn: DWORD_PTR,
 dwItem: DWORD,
 dwTrack: DWORD
});

var MCI_INFO_PARMS = new StructT('MCI_INFO_PARMS', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPSTR,
 dwRetSize: DWORD
});

var MCI_INFO_PARMSW = new StructT('MCI_INFO_PARMSW', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPWSTR,
 dwRetSize: DWORD
});

var MCI_GETDEVCAPS_PARMS = new StructT('MCI_GETDEVCAPS_PARMS', {
 dwCallback: DWORD_PTR,
 dwReturn: DWORD,
 dwItem: DWORD
});

var MCI_SYSINFO_PARMS = new StructT('MCI_SYSINFO_PARMS', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPSTR,
 dwRetSize: DWORD,
 dwNumber: DWORD,
 wDeviceType: UINT
});

var MCI_SYSINFO_PARMSW = new StructT('MCI_SYSINFO_PARMSW', {
 dwCallback: DWORD_PTR,
 lpstrReturn: LPWSTR,
 dwRetSize: DWORD,
 dwNumber: DWORD,
 wDeviceType: UINT
});

var MCI_SET_PARMS = new StructT('MCI_SET_PARMS', {
 dwCallback: DWORD_PTR,
 dwTimeFormat: DWORD,
 dwAudio: DWORD
});

var MCI_BREAK_PARMS = new StructT('MCI_BREAK_PARMS', {
 dwCallback: DWORD_PTR,
 nVirtKey: int,
 hwndBreak: HWND
});

var MCI_SAVE_PARMS = new StructT('MCI_SAVE_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR
});

var MCI_SAVE_PARMSW = new StructT('MCI_SAVE_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR
});

var MCI_LOAD_PARMS = new StructT('MCI_LOAD_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR
});

var MCI_LOAD_PARMSW = new StructT('MCI_LOAD_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR
});

var MCI_RECORD_PARMS = new StructT('MCI_RECORD_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD
});

var MCI_VD_PLAY_PARMS = new StructT('MCI_VD_PLAY_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD,
 dwSpeed: DWORD
});

var MCI_VD_STEP_PARMS = new StructT('MCI_VD_STEP_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrames: DWORD
});

var MCI_VD_ESCAPE_PARMS = new StructT('MCI_VD_ESCAPE_PARMS', {
 dwCallback: DWORD_PTR,
 lpstrCommand: LPCSTR
});

var MCI_VD_ESCAPE_PARMSW = new StructT('MCI_VD_ESCAPE_PARMSW', {
 dwCallback: DWORD_PTR,
 lpstrCommand: LPCWSTR
});

var MCI_WAVE_OPEN_PARMS = new StructT('MCI_WAVE_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR,
 dwBufferSeconds: DWORD
});

var MCI_WAVE_OPEN_PARMSW = new StructT('MCI_WAVE_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR,
 dwBufferSeconds: DWORD
});

var MCI_WAVE_DELETE_PARMS = new StructT('MCI_WAVE_DELETE_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD
});

var MCI_WAVE_SET_PARMS = new StructT('MCI_WAVE_SET_PARMS', {
 dwCallback: DWORD_PTR,
 dwTimeFormat: DWORD,
 dwAudio: DWORD,
 wInput: UINT,
 wOutput: UINT,
 wFormatTag: WORD,
 wReserved2: WORD,
 nChannels: WORD,
 wReserved3: WORD,
 nSamplesPerSec: DWORD,
 nAvgBytesPerSec: DWORD,
 nBlockAlign: WORD,
 wReserved4: WORD,
 wBitsPerSample: WORD,
 wReserved5: WORD
});

var MCI_SEQ_SET_PARMS = new StructT('MCI_SEQ_SET_PARMS', {
 dwCallback: DWORD_PTR,
 dwTimeFormat: DWORD,
 dwAudio: DWORD,
 dwTempo: DWORD,
 dwPort: DWORD,
 dwSlave: DWORD,
 dwMaster: DWORD,
 dwOffset: DWORD
});

var MCI_ANIM_OPEN_PARMS = new StructT('MCI_ANIM_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var MCI_ANIM_OPEN_PARMSW = new StructT('MCI_ANIM_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var MCI_ANIM_PLAY_PARMS = new StructT('MCI_ANIM_PLAY_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrom: DWORD,
 dwTo: DWORD,
 dwSpeed: DWORD
});

var MCI_ANIM_STEP_PARMS = new StructT('MCI_ANIM_STEP_PARMS', {
 dwCallback: DWORD_PTR,
 dwFrames: DWORD
});

var MCI_ANIM_WINDOW_PARMS = new StructT('MCI_ANIM_WINDOW_PARMS', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCSTR
});

var MCI_ANIM_WINDOW_PARMSW = new StructT('MCI_ANIM_WINDOW_PARMSW', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCWSTR
});

var MCI_ANIM_RECT_PARMS = new StructT('MCI_ANIM_RECT_PARMS', {
 dwCallback: DWORD_PTR,
 rc: RECT
});

var MCI_ANIM_UPDATE_PARMS = new StructT('MCI_ANIM_UPDATE_PARMS', {
 dwCallback: DWORD_PTR,
 rc: RECT,
 hDC: HDC
});

var MCI_OVLY_OPEN_PARMS = new StructT('MCI_OVLY_OPEN_PARMS', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCSTR,
 lpstrElementName: LPCSTR,
 lpstrAlias: LPCSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var MCI_OVLY_OPEN_PARMSW = new StructT('MCI_OVLY_OPEN_PARMSW', {
 dwCallback: DWORD_PTR,
 wDeviceID: MCIDEVICEID,
 lpstrDeviceType: LPCWSTR,
 lpstrElementName: LPCWSTR,
 lpstrAlias: LPCWSTR,
 dwStyle: DWORD,
 hWndParent: HWND
});

var MCI_OVLY_WINDOW_PARMS = new StructT('MCI_OVLY_WINDOW_PARMS', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCSTR
});

var MCI_OVLY_WINDOW_PARMSW = new StructT('MCI_OVLY_WINDOW_PARMSW', {
 dwCallback: DWORD_PTR,
 hWnd: HWND,
 nCmdShow: UINT,
 lpstrText: LPCWSTR
});

var MCI_OVLY_RECT_PARMS = new StructT('MCI_OVLY_RECT_PARMS', {
 dwCallback: DWORD_PTR,
 rc: RECT
});

var MCI_OVLY_SAVE_PARMS = new StructT('MCI_OVLY_SAVE_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR,
 rc: RECT
});

var MCI_OVLY_SAVE_PARMSW = new StructT('MCI_OVLY_SAVE_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR,
 rc: RECT
});

var MCI_OVLY_LOAD_PARMS = new StructT('MCI_OVLY_LOAD_PARMS', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCSTR,
 rc: RECT
});

var MCI_OVLY_LOAD_PARMSW = new StructT('MCI_OVLY_LOAD_PARMSW', {
 dwCallback: DWORD_PTR,
 lpfilename: LPCWSTR,
 rc: RECT
});

var NCB = new StructT('NCB', {
 ncb_command: UCHAR,
 ncb_retcode: UCHAR,
 ncb_lsn: UCHAR,
 ncb_num: UCHAR,
 ncb_buffer: PUCHAR,
 ncb_length: WORD,
 ncb_callname: new ArrayT(UCHAR, NCBNAMSZ),
 ncb_name: new ArrayT(UCHAR, NCBNAMSZ),
 ncb_rto: UCHAR,
 ncb_sto: UCHAR,
 ncb_post: new CallbackT(_void, [_NCB.Δ]).Δ,
 ncb_lana_num: UCHAR,
 ncb_cmd_cplt: UCHAR,
 ncb_reserve: new ArrayT(UCHAR, 10),
 ncb_event: HANDLE
});

var ADAPTER_STATUS = new StructT('ADAPTER_STATUS', {
 adapter_address: new ArrayT(UCHAR, 6),
 rev_major: UCHAR,
 reserved0: UCHAR,
 adapter_type: UCHAR,
 rev_minor: UCHAR,
 duration: WORD,
 frmr_recv: WORD,
 frmr_xmit: WORD,
 iframe_recv_err: WORD,
 xmit_aborts: WORD,
 xmit_success: DWORD,
 recv_success: DWORD,
 iframe_xmit_err: WORD,
 recv_buff_unavail: WORD,
 t1_timeouts: WORD,
 ti_timeouts: WORD,
 reserved1: DWORD,
 free_ncbs: WORD,
 max_cfg_ncbs: WORD,
 max_ncbs: WORD,
 xmit_buf_unavail: WORD,
 max_dgram_size: WORD,
 pending_sess: WORD,
 max_cfg_sess: WORD,
 max_sess: WORD,
 max_sess_pkt_size: WORD,
 name_count: WORD
});

var NAME_BUFFER = new StructT('NAME_BUFFER', {
 name: new ArrayT(UCHAR, NCBNAMSZ),
 name_num: UCHAR,
 name_flags: UCHAR
});

var SESSION_HEADER = new StructT('SESSION_HEADER', {
 sess_name: UCHAR,
 num_sess: UCHAR,
 rcv_dg_outstanding: UCHAR,
 rcv_any_outstanding: UCHAR
});

var SESSION_BUFFER = new StructT('SESSION_BUFFER', {
 lsn: UCHAR,
 state: UCHAR,
 local_name: new ArrayT(UCHAR, NCBNAMSZ),
 remote_name: new ArrayT(UCHAR, NCBNAMSZ),
 rcvs_outstanding: UCHAR,
 sends_outstanding: UCHAR
});

var LANA_ENUM = new StructT('LANA_ENUM', {
 length: UCHAR,
 lana: new ArrayT(UCHAR, undefined)
});

var FIND_NAME_HEADER = new StructT('FIND_NAME_HEADER', {
 node_count: WORD,
 reserved: UCHAR,
 unique_group: UCHAR
});

var FIND_NAME_BUFFER = new StructT('FIND_NAME_BUFFER', {
 length: UCHAR,
 access_control: UCHAR,
 frame_control: UCHAR,
 destination_addr: new ArrayT(UCHAR, 6),
 source_addr: new ArrayT(UCHAR, 6),
 routing_info: new ArrayT(UCHAR, 18)
});

var ACTION_HEADER = new StructT('ACTION_HEADER', {
 transport_id: ULONG,
 action_code: USHORT,
 reserved: USHORT
});

var RPC_BINDING_VECTOR = new StructT('RPC_BINDING_VECTOR', {
 Count: ulong,
 BindingH: new ArrayT(RPC_BINDING_HANDLE, 1)
});

var UUID_VECTOR = new StructT('UUID_VECTOR', {
 Count: ulong,
 Uuid: new ArrayT(UUID, 1)
});

var RPC_IF_ID = new StructT('RPC_IF_ID', {
 Uuid: UUID,
 VersMajor: ushort,
 VersMinor: ushort
});

var RPC_PROTSEQ_VECTORA = new StructT('RPC_PROTSEQ_VECTORA', {
 Count: uint,
 Protseq: new ArrayT(undefined, 1)
});

var RPC_PROTSEQ_VECTORW = new StructT('RPC_PROTSEQ_VECTORW', {
 Count: uint,
 Protseq: new ArrayT(undefined, 1)
});

var RPC_POLICY = new StructT('RPC_POLICY', {
 Length: uint,
 EndpointFlags: ulong,
 NICFlags: ulong
});

var RPC_STATS_VECTOR = new StructT('RPC_STATS_VECTOR', {
 Count: uint,
 Stats: new ArrayT(undefined, 1)
});

var RPC_IF_ID_VECTOR = new StructT('RPC_IF_ID_VECTOR', {
 Count: ulong,
 IfId: new ArrayT(RPC_IF_ID, 1)
});

var RPC_SECURITY_QOS = new StructT('RPC_SECURITY_QOS', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong
});

var SEC_WINNT_AUTH_IDENTITY_W = new StructT('SEC_WINNT_AUTH_IDENTITY_W', {
 User: ushort.Δ,
 UserLength: ulong,
 Domain: ushort.Δ,
 DomainLength: ulong,
 Password: ushort.Δ,
 PasswordLength: ulong,
 Flags: ulong
});

var SEC_WINNT_AUTH_IDENTITY_A = new StructT('SEC_WINNT_AUTH_IDENTITY_A', {
 User: uchar.Δ,
 UserLength: ulong,
 Domain: uchar.Δ,
 DomainLength: ulong,
 Password: uchar.Δ,
 PasswordLength: ulong,
 Flags: ulong
});

var RPC_HTTP_TRANSPORT_CREDENTIALS_W = new StructT('RPC_HTTP_TRANSPORT_CREDENTIALS_W', {
 TransportCredentials: SEC_WINNT_AUTH_IDENTITY_W.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: ushort.Δ
});

var RPC_HTTP_TRANSPORT_CREDENTIALS_A = new StructT('RPC_HTTP_TRANSPORT_CREDENTIALS_A', {
 TransportCredentials: SEC_WINNT_AUTH_IDENTITY_A.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: uchar.Δ
});

var RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W = new StructT('RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W', {
 TransportCredentials: SEC_WINNT_AUTH_IDENTITY_W.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: ushort.Δ,
 ProxyCredentials: SEC_WINNT_AUTH_IDENTITY_W.Δ,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A = new StructT('RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A', {
 TransportCredentials: SEC_WINNT_AUTH_IDENTITY_A.Δ,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: uchar.Δ,
 ProxyCredentials: SEC_WINNT_AUTH_IDENTITY_A.Δ,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W = new StructT('RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W', {
 TransportCredentials: RPC_AUTH_IDENTITY_HANDLE,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: ushort.Δ,
 ProxyCredentials: RPC_AUTH_IDENTITY_HANDLE,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A = new StructT('RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A', {
 TransportCredentials: RPC_AUTH_IDENTITY_HANDLE,
 Flags: ulong,
 AuthenticationTarget: ulong,
 NumberOfAuthnSchemes: ulong,
 AuthnSchemes: ulong.Δ,
 ServerCertificateSubject: uchar.Δ,
 ProxyCredentials: RPC_AUTH_IDENTITY_HANDLE,
 NumberOfProxyAuthnSchemes: ulong,
 ProxyAuthnSchemes: ulong.Δ
});

var RPC_SECURITY_QOS_V2_W = new StructT('RPC_SECURITY_QOS_V2_W', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@37044@S@_RPC_SECURITY_QOS_V2_W@Ua
});

var RPC_SECURITY_QOS_V2_A = new StructT('RPC_SECURITY_QOS_V2_A', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@37400@S@_RPC_SECURITY_QOS_V2_A@Ua
});

var RPC_SECURITY_QOS_V3_W = new StructT('RPC_SECURITY_QOS_V3_W', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@37834@S@_RPC_SECURITY_QOS_V3_W@Ua,
 Sid: _void.Δ
});

var RPC_SECURITY_QOS_V3_A = new StructT('RPC_SECURITY_QOS_V3_A', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@38204@S@_RPC_SECURITY_QOS_V3_A@Ua,
 Sid: _void.Δ
});

var RPC_SECURITY_QOS_V4_W = new StructT('RPC_SECURITY_QOS_V4_W', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@38696@S@_RPC_SECURITY_QOS_V4_W@Ua,
 Sid: _void.Δ,
 EffectiveOnly: uint
});

var RPC_SECURITY_QOS_V4_A = new StructT('RPC_SECURITY_QOS_V4_A', {
 Version: ulong,
 Capabilities: ulong,
 IdentityTracking: ulong,
 ImpersonationType: ulong,
 AdditionalSecurityInfoType: ulong,
 u: c:rpcdce.h@39097@S@_RPC_SECURITY_QOS_V4_A@Ua,
 Sid: _void.Δ,
 EffectiveOnly: uint
});

var RPC_BINDING_HANDLE_TEMPLATE_V1_W = new StructT('RPC_BINDING_HANDLE_TEMPLATE_V1_W', {
 Version: ulong,
 Flags: ulong,
 ProtocolSequence: ulong,
 NetworkAddress: ushort.Δ,
 StringEndpoint: ushort.Δ,
 u1: c:rpcdce.h@43204@S@_RPC_BINDING_HANDLE_TEMPLATE_V1_W@Ua,
 ObjectUuid: UUID
});

var RPC_BINDING_HANDLE_TEMPLATE_V1_A = new StructT('RPC_BINDING_HANDLE_TEMPLATE_V1_A', {
 Version: ulong,
 Flags: ulong,
 ProtocolSequence: ulong,
 NetworkAddress: uchar.Δ,
 StringEndpoint: uchar.Δ,
 u1: c:rpcdce.h@43580@S@_RPC_BINDING_HANDLE_TEMPLATE_V1_A@Ua,
 ObjectUuid: UUID
});

var RPC_BINDING_HANDLE_SECURITY_V1_W = new StructT('RPC_BINDING_HANDLE_SECURITY_V1_W', {
 Version: ulong,
 ServerPrincName: ushort.Δ,
 AuthnLevel: ulong,
 AuthnSvc: ulong,
 AuthIdentity: SEC_WINNT_AUTH_IDENTITY_W.Δ,
 SecurityQos: RPC_SECURITY_QOS.Δ
});

var RPC_BINDING_HANDLE_SECURITY_V1_A = new StructT('RPC_BINDING_HANDLE_SECURITY_V1_A', {
 Version: ulong,
 ServerPrincName: uchar.Δ,
 AuthnLevel: ulong,
 AuthnSvc: ulong,
 AuthIdentity: SEC_WINNT_AUTH_IDENTITY_A.Δ,
 SecurityQos: RPC_SECURITY_QOS.Δ
});

var RPC_BINDING_HANDLE_OPTIONS_V1 = new StructT('RPC_BINDING_HANDLE_OPTIONS_V1', {
 Version: ulong,
 Flags: ulong,
 ComTimeout: ulong,
 CallTimeout: ulong
});

var RPC_CLIENT_INFORMATION1 = new StructT('RPC_CLIENT_INFORMATION1', {
 UserName: uchar.Δ,
 ComputerName: uchar.Δ,
 Privilege: ushort,
 AuthFlags: ulong
});

var RPC_VERSION = new StructT('RPC_VERSION', {
 MajorVersion: ushort,
 MinorVersion: ushort
});

var RPC_SYNTAX_IDENTIFIER = new StructT('RPC_SYNTAX_IDENTIFIER', {
 SyntaxGUID: GUID,
 SyntaxVersion: RPC_VERSION
});

var RPC_MESSAGE = new StructT('RPC_MESSAGE', {
 Handle: RPC_BINDING_HANDLE,
 DataRepresentation: ulong,
 Buffer: _void.Δ,
 BufferLength: uint,
 ProcNum: uint,
 TransferSyntax: PRPC_SYNTAX_IDENTIFIER,
 RpcInterfaceInformation: _void.Δ,
 ReservedForRuntime: _void.Δ,
 ManagerEpv: _void.Δ,
 ImportContext: _void.Δ,
 RpcFlags: ulong
});

var RPC_DISPATCH_TABLE = new StructT('RPC_DISPATCH_TABLE', {
 DispatchTableCount: uint,
 DispatchTable: RPC_DISPATCH_FUNCTION.Δ,
 Reserved: LONG_PTR
});

var RPC_PROTSEQ_ENDPOINT = new StructT('RPC_PROTSEQ_ENDPOINT', {
 RpcProtocolSequence: uchar.Δ,
 Endpoint: uchar.Δ
});

var RPC_SERVER_INTERFACE = new StructT('RPC_SERVER_INTERFACE', {
 Length: uint,
 InterfaceId: RPC_SYNTAX_IDENTIFIER,
 TransferSyntax: RPC_SYNTAX_IDENTIFIER,
 DispatchTable: PRPC_DISPATCH_TABLE,
 RpcProtseqEndpointCount: uint,
 RpcProtseqEndpoint: PRPC_PROTSEQ_ENDPOINT,
 DefaultManagerEpv: _void.Δ,
 InterpreterInfo: _void.Δ,
 Flags: uint
});

var RPC_CLIENT_INTERFACE = new StructT('RPC_CLIENT_INTERFACE', {
 Length: uint,
 InterfaceId: RPC_SYNTAX_IDENTIFIER,
 TransferSyntax: RPC_SYNTAX_IDENTIFIER,
 DispatchTable: PRPC_DISPATCH_TABLE,
 RpcProtseqEndpointCount: uint,
 RpcProtseqEndpoint: PRPC_PROTSEQ_ENDPOINT,
 Reserved: ULONG_PTR,
 InterpreterInfo: _void.Δ,
 Flags: uint
});

var RPC_TRANSFER_SYNTAX = new StructT('RPC_TRANSFER_SYNTAX', {
 Uuid: UUID,
 VersMajor: ushort,
 VersMinor: ushort
});

var RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR = new StructT('RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR', {
 BufferSize: ulong,
 Buffer: char.Δ
});

var RDR_CALLOUT_STATE = new StructT('RDR_CALLOUT_STATE', {
 LastError: RPC_STATUS,
 LastEEInfo: _void.Δ,
 LastCalledStage: RPC_HTTP_REDIRECTOR_STAGE,
 ServerName: ushort.Δ,
 ServerPort: ushort.Δ,
 RemoteUser: ushort.Δ,
 AuthType: ushort.Δ,
 ResourceTypePresent: uchar,
 SessionIdPresent: uchar,
 InterfacePresent: uchar,
 ResourceType: UUID,
 SessionId: UUID,
 Interface: RPC_SYNTAX_IDENTIFIER,
 CertContext: _void.Δ
});

var I_RpcProxyCallbackInterface = new StructT('I_RpcProxyCallbackInterface', {
 IsValidMachineFn: I_RpcProxyIsValidMachineFn,
 GetClientAddressFn: I_RpcProxyGetClientAddressFn,
 GetConnectionTimeoutFn: I_RpcProxyGetConnectionTimeoutFn,
 PerformCalloutFn: I_RpcPerformCalloutFn,
 FreeCalloutStateFn: I_RpcFreeCalloutStateFn,
 GetClientSessionAndResourceUUIDFn: I_RpcProxyGetClientSessionAndResourceUUID,
 ProxyFilterIfFn: I_RpcProxyFilterIfFn,
 RpcProxyUpdatePerfCounterFn: I_RpcProxyUpdatePerfCounterFn,
 RpcProxyUpdatePerfCounterBackendServerFn: I_RpcProxyUpdatePerfCounterBackendServerFn
});

var RPC_ASYNC_STATE = new StructT('RPC_ASYNC_STATE', {
 Size: uint,
 Signature: ulong,
 Lock: long,
 Flags: ulong,
 StubInfo: _void.Δ,
 UserInfo: _void.Δ,
 RuntimeInfo: _void.Δ,
 Event: RPC_ASYNC_EVENT,
 NotificationType: RPC_NOTIFICATION_TYPES,
 u: RPC_ASYNC_NOTIFICATION_INFO,
 Reserved: new ArrayT(LONG_PTR, 4)
});

var undefined = new StructT('undefined', {
 NotificationRoutine: PFN_RPCNOTIFICATION_ROUTINE,
 hThread: HANDLE
});

var undefined = new StructT('undefined', {
 hIOPort: HANDLE,
 dwNumberOfBytesTransferred: DWORD,
 dwCompletionKey: DWORD_PTR,
 lpOverlapped: LPOVERLAPPED
});

var undefined = new StructT('undefined', {
 hWnd: HWND,
 Msg: UINT
});

var BinaryParam = new StructT('BinaryParam', {
 Buffer: _void.Δ,
 Size: short
});

var RPC_EE_INFO_PARAM = new StructT('RPC_EE_INFO_PARAM', {
 ParameterType: ExtendedErrorParamTypes,
 u: c:rpcasync.h@5042@S@tagRPC_EE_INFO_PARAM@Ua
});

var RPC_EXTENDED_ERROR_INFO = new StructT('RPC_EXTENDED_ERROR_INFO', {
 Version: ULONG,
 ComputerName: LPWSTR,
 ProcessID: ULONG,
 u: c:rpcasync.h@5667@S@tagRPC_EXTENDED_ERROR_INFO@Ua,
 GeneratingComponent: ULONG,
 Status: ULONG,
 DetectionLocation: USHORT,
 Flags: USHORT,
 NumberOfParameters: int,
 Parameters: new ArrayT(RPC_EE_INFO_PARAM, MaxNumberOfEEInfoParams)
});

var RPC_ERROR_ENUM_HANDLE = new StructT('RPC_ERROR_ENUM_HANDLE', {
 Signature: ULONG,
 CurrentPos: _void.Δ,
 Head: _void.Δ
});

var RPC_CALL_LOCAL_ADDRESS_V1 = new StructT('RPC_CALL_LOCAL_ADDRESS_V1', {
 Version: uint,
 Buffer: _void.Δ,
 BufferSize: ulong,
 AddressFormat: RpcLocalAddressFormat
});

var RPC_CALL_ATTRIBUTES_V1_W = new StructT('RPC_CALL_ATTRIBUTES_V1_W', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: ushort.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: ushort.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL
});

var RPC_CALL_ATTRIBUTES_V1_A = new StructT('RPC_CALL_ATTRIBUTES_V1_A', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: uchar.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: uchar.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL
});

var RPC_CALL_ATTRIBUTES_V2_W = new StructT('RPC_CALL_ATTRIBUTES_V2_W', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: ushort.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: ushort.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL,
 KernelModeCaller: BOOL,
 ProtocolSequence: ulong,
 IsClientLocal: RpcCallClientLocality,
 ClientPID: HANDLE,
 CallStatus: ulong,
 CallType: RpcCallType,
 CallLocalAddress: RPC_CALL_LOCAL_ADDRESS_V1.Δ,
 OpNum: ushort,
 InterfaceUuid: UUID
});

var RPC_CALL_ATTRIBUTES = new StructT('RPC_CALL_ATTRIBUTES', {
 Version: uint,
 Flags: ulong,
 ServerPrincipalNameBufferLength: ulong,
 ServerPrincipalName: uchar.Δ,
 ClientPrincipalNameBufferLength: ulong,
 ClientPrincipalName: uchar.Δ,
 AuthenticationLevel: ulong,
 AuthenticationService: ulong,
 NullSession: BOOL,
 KernelModeCaller: BOOL,
 ProtocolSequence: ulong,
 IsClientLocal: ulong,
 ClientPID: HANDLE,
 CallStatus: ulong,
 CallType: RpcCallType,
 CallLocalAddress: RPC_CALL_LOCAL_ADDRESS_V1.Δ,
 OpNum: ushort,
 InterfaceUuid: UUID
});

var HDROP__ = new StructT('HDROP__', {
 unused: int
});

var DRAGINFO = new StructT('DRAGINFO', {
 uSize: UINT,
 pt: POINT,
 fNC: BOOL,
 lpFileList: LPSTR,
 grfKeyState: DWORD
});

var DRAGINFOW = new StructT('DRAGINFOW', {
 uSize: UINT,
 pt: POINT,
 fNC: BOOL,
 lpFileList: LPWSTR,
 grfKeyState: DWORD
});

var APPBARDATA = new StructT('APPBARDATA', {
 cbSize: DWORD,
 hWnd: HWND,
 uCallbackMessage: UINT,
 uEdge: UINT,
 rc: RECT,
 lParam: LPARAM
});

var SHFILEOPSTRUCT = new StructT('SHFILEOPSTRUCT', {
 hwnd: HWND,
 wFunc: UINT,
 pFrom: LPCSTR,
 pTo: LPCSTR,
 fFlags: FILEOP_FLAGS,
 fAnyOperationsAborted: BOOL,
 hNameMappings: LPVOID,
 lpszProgressTitle: LPCSTR
});

var SHFILEOPSTRUCTW = new StructT('SHFILEOPSTRUCTW', {
 hwnd: HWND,
 wFunc: UINT,
 pFrom: LPCWSTR,
 pTo: LPCWSTR,
 fFlags: FILEOP_FLAGS,
 fAnyOperationsAborted: BOOL,
 hNameMappings: LPVOID,
 lpszProgressTitle: LPCWSTR
});

var SHNAMEMAPPING = new StructT('SHNAMEMAPPING', {
 pszOldPath: LPSTR,
 pszNewPath: LPSTR,
 cchOldPath: int,
 cchNewPath: int
});

var SHNAMEMAPPINGW = new StructT('SHNAMEMAPPINGW', {
 pszOldPath: LPWSTR,
 pszNewPath: LPWSTR,
 cchOldPath: int,
 cchNewPath: int
});

var SHELLEXECUTEINFO = new StructT('SHELLEXECUTEINFO', {
 cbSize: DWORD,
 fMask: ULONG,
 hwnd: HWND,
 lpVerb: LPCSTR,
 lpFile: LPCSTR,
 lpParameters: LPCSTR,
 lpDirectory: LPCSTR,
 nShow: int,
 hInstApp: HINSTANCE,
 lpIDList: _void.Δ,
 lpClass: LPCSTR,
 hkeyClass: HKEY,
 dwHotKey: DWORD,
 hProcess: HANDLE
});

var SHELLEXECUTEINFOW = new StructT('SHELLEXECUTEINFOW', {
 cbSize: DWORD,
 fMask: ULONG,
 hwnd: HWND,
 lpVerb: LPCWSTR,
 lpFile: LPCWSTR,
 lpParameters: LPCWSTR,
 lpDirectory: LPCWSTR,
 nShow: int,
 hInstApp: HINSTANCE,
 lpIDList: _void.Δ,
 lpClass: LPCWSTR,
 hkeyClass: HKEY,
 dwHotKey: DWORD,
 hProcess: HANDLE
});

var SHCREATEPROCESSINFOW = new StructT('SHCREATEPROCESSINFOW', {
 cbSize: DWORD,
 fMask: ULONG,
 hwnd: HWND,
 pszFile: LPCWSTR,
 pszParameters: LPCWSTR,
 pszCurrentDirectory: LPCWSTR,
 hUserToken: HANDLE,
 lpProcessAttributes: LPSECURITY_ATTRIBUTES,
 lpThreadAttributes: LPSECURITY_ATTRIBUTES,
 bInheritHandles: BOOL,
 dwCreationFlags: DWORD,
 lpStartupInfo: LPSTARTUPINFOW,
 lpProcessInformation: LPPROCESS_INFORMATION
});

var ASSOCIATIONELEMENT = new StructT('ASSOCIATIONELEMENT', {
 ac: ASSOCCLASS,
 hkClass: HKEY,
 pszClass: PCWSTR
});

var SHQUERYRBINFO = new StructT('SHQUERYRBINFO', {
 cbSize: DWORD,
 i64Size: longlong,
 i64NumItems: longlong
});

var NOTIFYICONDATA = new StructT('NOTIFYICONDATA', {
 cbSize: DWORD,
 hWnd: HWND,
 uID: UINT,
 uFlags: UINT,
 uCallbackMessage: UINT,
 hIcon: HICON,
 szTip: new ArrayT(CHAR, 128),
 dwState: DWORD,
 dwStateMask: DWORD,
 szInfo: new ArrayT(CHAR, 256),
 szInfoTitle: new ArrayT(CHAR, 64),
 dwInfoFlags: DWORD,
 guidItem: GUID,
 hBalloonIcon: HICON
});

var NOTIFYICONDATAW = new StructT('NOTIFYICONDATAW', {
 cbSize: DWORD,
 hWnd: HWND,
 uID: UINT,
 uFlags: UINT,
 uCallbackMessage: UINT,
 hIcon: HICON,
 szTip: new ArrayT(WCHAR, 128),
 dwState: DWORD,
 dwStateMask: DWORD,
 szInfo: new ArrayT(WCHAR, 256),
 szInfoTitle: new ArrayT(WCHAR, 64),
 dwInfoFlags: DWORD,
 guidItem: GUID,
 hBalloonIcon: HICON
});

var NOTIFYICONIDENTIFIER = new StructT('NOTIFYICONIDENTIFIER', {
 cbSize: DWORD,
 hWnd: HWND,
 uID: UINT,
 guidItem: GUID
});

var SHFILEINFO = new StructT('SHFILEINFO', {
 hIcon: HICON,
 iIcon: int,
 dwAttributes: DWORD,
 szDisplayName: new ArrayT(CHAR, MAX_PATH),
 szTypeName: new ArrayT(CHAR, 80)
});

var SHFILEINFOW = new StructT('SHFILEINFOW', {
 hIcon: HICON,
 iIcon: int,
 dwAttributes: DWORD,
 szDisplayName: new ArrayT(WCHAR, MAX_PATH),
 szTypeName: new ArrayT(WCHAR, 80)
});

var SHSTOCKICONINFO = new StructT('SHSTOCKICONINFO', {
 cbSize: DWORD,
 hIcon: HICON,
 iSysImageIndex: int,
 iIcon: int,
 szPath: new ArrayT(WCHAR, MAX_PATH)
});

var OPEN_PRINTER_PROPS_INFO = new StructT('OPEN_PRINTER_PROPS_INFO', {
 dwSize: DWORD,
 pszSheetName: LPSTR,
 uSheetIndex: UINT,
 dwFlags: DWORD,
 bModal: BOOL
});

var OPEN_PRINTER_PROPS_INFOW = new StructT('OPEN_PRINTER_PROPS_INFOW', {
 dwSize: DWORD,
 pszSheetName: LPWSTR,
 uSheetIndex: UINT,
 dwFlags: DWORD,
 bModal: BOOL
});

var NC_ADDRESS = new StructT('NC_ADDRESS', {
 pAddrInfo: NET_ADDRESS_INFO_.Δ,
 PortNumber: USHORT,
 PrefixLength: BYTE
});


var PERF_DATA_BLOCK = new StructT('PERF_DATA_BLOCK', {
 Signature: new ArrayT(WCHAR, 4),
 LittleEndian: DWORD,
 Version: DWORD,
 Revision: DWORD,
 TotalByteLength: DWORD,
 HeaderLength: DWORD,
 NumObjectTypes: DWORD,
 DefaultObject: LONG,
 SystemTime: SYSTEMTIME,
 PerfTime: LARGE_INTEGER,
 PerfFreq: LARGE_INTEGER,
 PerfTime100nSec: LARGE_INTEGER,
 SystemNameLength: DWORD,
 SystemNameOffset: DWORD
});

var PERF_OBJECT_TYPE = new StructT('PERF_OBJECT_TYPE', {
 TotalByteLength: DWORD,
 DefinitionLength: DWORD,
 HeaderLength: DWORD,
 ObjectNameTitleIndex: DWORD,
 ObjectNameTitle: LPWSTR,
 ObjectHelpTitleIndex: DWORD,
 ObjectHelpTitle: LPWSTR,
 DetailLevel: DWORD,
 NumCounters: DWORD,
 DefaultCounter: LONG,
 NumInstances: LONG,
 CodePage: DWORD,
 PerfTime: LARGE_INTEGER,
 PerfFreq: LARGE_INTEGER
});

var PERF_COUNTER_DEFINITION = new StructT('PERF_COUNTER_DEFINITION', {
 ByteLength: DWORD,
 CounterNameTitleIndex: DWORD,
 CounterNameTitle: LPWSTR,
 CounterHelpTitleIndex: DWORD,
 CounterHelpTitle: LPWSTR,
 DefaultScale: LONG,
 DetailLevel: DWORD,
 CounterType: DWORD,
 CounterSize: DWORD,
 CounterOffset: DWORD
});

var PERF_INSTANCE_DEFINITION = new StructT('PERF_INSTANCE_DEFINITION', {
 ByteLength: DWORD,
 ParentObjectTitleIndex: DWORD,
 ParentObjectInstance: DWORD,
 UniqueID: LONG,
 NameOffset: DWORD,
 NameLength: DWORD
});

var PERF_COUNTER_BLOCK = new StructT('PERF_COUNTER_BLOCK', {
 ByteLength: DWORD
});

var FD_SET = new StructT('FD_SET', {
 fd_count: u_int,
 fd_array: new ArrayT(SOCKET, FD_SETSIZE)
});

var TIMEVAL = new StructT('TIMEVAL', {
 tv_sec: long,
 tv_usec: long
});

var HOSTENT = new StructT('HOSTENT', {
 h_name: char.Δ,
 h_aliases: char.Δ.Δ,
 h_addrtype: short,
 h_length: short,
 h_addr_list: char.Δ.Δ
});

var netent = new StructT('netent', {
 n_name: char.Δ,
 n_aliases: char.Δ.Δ,
 n_addrtype: short,
 n_net: u_long
});

var SERVENT = new StructT('SERVENT', {
 s_name: char.Δ,
 s_aliases: char.Δ.Δ,
 s_port: short,
 s_proto: char.Δ
});

var PROTOENT = new StructT('PROTOENT', {
 p_name: char.Δ,
 p_aliases: char.Δ.Δ,
 p_proto: short
});

var IN_ADDR = new StructT('IN_ADDR', {
 S_un: c:inaddr.h@278@S@in_addr@Ua
});

var undefined = new StructT('undefined', {
 s_b1: UCHAR,
 s_b2: UCHAR,
 s_b3: UCHAR,
 s_b4: UCHAR
});

var undefined = new StructT('undefined', {
 s_w1: USHORT,
 s_w2: USHORT
});

var SOCKADDR_IN = new StructT('SOCKADDR_IN', {
 sin_family: short,
 sin_port: u_short,
 sin_addr: IN_ADDR,
 sin_zero: new ArrayT(undefined, 8)
});

var WSADATA = new StructT('WSADATA', {
 wVersion: WORD,
 wHighVersion: WORD,
 szDescription: new ArrayT(undefined, undefined),
 szSystemStatus: new ArrayT(undefined, undefined),
 iMaxSockets: ushort,
 iMaxUdpDg: ushort,
 lpVendorInfo: char.Δ
});

var ip_mreq = new StructT('ip_mreq', {
 imr_multiaddr: IN_ADDR,
 imr_interface: IN_ADDR
});

var SOCKADDR = new StructT('SOCKADDR', {
 sa_family: u_short,
 sa_data: new ArrayT(undefined, 14)
});

var sockproto = new StructT('sockproto', {
 sp_family: u_short,
 sp_protocol: u_short
});

var LINGER = new StructT('LINGER', {
 l_onoff: u_short,
 l_linger: u_short
});

var TRANSMIT_FILE_BUFFERS = new StructT('TRANSMIT_FILE_BUFFERS', {
 Head: PVOID,
 HeadLength: DWORD,
 Tail: PVOID,
 TailLength: DWORD
});

var CMS_KEY_INFO = new StructT('CMS_KEY_INFO', {
 dwVersion: DWORD,
 Algid: ALG_ID,
 pbOID: BYTE.Δ,
 cbOID: DWORD
});

var HMAC_INFO = new StructT('HMAC_INFO', {
 HashAlgid: ALG_ID,
 pbInnerString: BYTE.Δ,
 cbInnerString: DWORD,
 pbOuterString: BYTE.Δ,
 cbOuterString: DWORD
});

var SCHANNEL_ALG = new StructT('SCHANNEL_ALG', {
 dwUse: DWORD,
 Algid: ALG_ID,
 cBits: DWORD,
 dwFlags: DWORD,
 dwReserved: DWORD
});

var PROV_ENUMALGS = new StructT('PROV_ENUMALGS', {
 aiAlgid: ALG_ID,
 dwBitLen: DWORD,
 dwNameLen: DWORD,
 szName: new ArrayT(CHAR, 20)
});

var PROV_ENUMALGS_EX = new StructT('PROV_ENUMALGS_EX', {
 aiAlgid: ALG_ID,
 dwDefaultLen: DWORD,
 dwMinLen: DWORD,
 dwMaxLen: DWORD,
 dwProtocols: DWORD,
 dwNameLen: DWORD,
 szName: new ArrayT(CHAR, 20),
 dwLongNameLen: DWORD,
 szLongName: new ArrayT(CHAR, 40)
});

var PUBLICKEYSTRUC = new StructT('PUBLICKEYSTRUC', {
 bType: BYTE,
 bVersion: BYTE,
 reserved: WORD,
 aiKeyAlg: ALG_ID
});

var RSAPUBKEY = new StructT('RSAPUBKEY', {
 magic: DWORD,
 bitlen: DWORD,
 pubexp: DWORD
});

var TEKPUBKEY = new StructT('TEKPUBKEY', {
 magic: DWORD,
 bitlen: DWORD
});

var DSSSEED = new StructT('DSSSEED', {
 counter: DWORD,
 seed: new ArrayT(BYTE, 20)
});

var DSSPUBKEY_VER3 = new StructT('DSSPUBKEY_VER3', {
 magic: DWORD,
 bitlenP: DWORD,
 bitlenQ: DWORD,
 bitlenJ: DWORD,
 DSSSeed: DSSSEED
});

var DSSPRIVKEY_VER3 = new StructT('DSSPRIVKEY_VER3', {
 magic: DWORD,
 bitlenP: DWORD,
 bitlenQ: DWORD,
 bitlenJ: DWORD,
 bitlenX: DWORD,
 DSSSeed: DSSSEED
});

var KEY_TYPE_SUBTYPE = new StructT('KEY_TYPE_SUBTYPE', {
 dwKeySpec: DWORD,
 Type: GUID,
 Subtype: GUID
});

var CERT_FORTEZZA_DATA_PROP = new StructT('CERT_FORTEZZA_DATA_PROP', {
 SerialNumber: new ArrayT(undefined, 8),
 CertIndex: int,
 CertLabel: new ArrayT(undefined, 36)
});

var CRYPT_RC4_KEY_STATE = new StructT('CRYPT_RC4_KEY_STATE', {
 Key: new ArrayT(undefined, 16),
 SBox: new ArrayT(undefined, 256),
 i: uchar,
 j: uchar
});

var CRYPT_DES_KEY_STATE = new StructT('CRYPT_DES_KEY_STATE', {
 Key: new ArrayT(undefined, 8),
 IV: new ArrayT(undefined, 8),
 Feedback: new ArrayT(undefined, 8)
});

var CRYPT_3DES_KEY_STATE = new StructT('CRYPT_3DES_KEY_STATE', {
 Key: new ArrayT(undefined, 24),
 IV: new ArrayT(undefined, 8),
 Feedback: new ArrayT(undefined, 8)
});

var CRYPT_AES_128_KEY_STATE = new StructT('CRYPT_AES_128_KEY_STATE', {
 Key: new ArrayT(undefined, 16),
 IV: new ArrayT(undefined, 16),
 EncryptionState: new ArrayT(undefined, 11),
 DecryptionState: new ArrayT(undefined, 11),
 Feedback: new ArrayT(undefined, 16)
});

var CRYPT_AES_256_KEY_STATE = new StructT('CRYPT_AES_256_KEY_STATE', {
 Key: new ArrayT(undefined, 32),
 IV: new ArrayT(undefined, 16),
 EncryptionState: new ArrayT(undefined, 15),
 DecryptionState: new ArrayT(undefined, 15),
 Feedback: new ArrayT(undefined, 16)
});

var CRYPT_ATTR_BLOB = new StructT('CRYPT_ATTR_BLOB', {
 cbData: DWORD,
 pbData: BYTE.Δ
});

var CMS_DH_KEY_INFO = new StructT('CMS_DH_KEY_INFO', {
 dwVersion: DWORD,
 Algid: ALG_ID,
 pszContentEncObjId: LPSTR,
 PubInfo: CRYPT_DATA_BLOB,
 pReserved: _void.Δ
});

var BCRYPT_AUTH_TAG_LENGTHS_STRUCT = new StructT('BCRYPT_AUTH_TAG_LENGTHS_STRUCT', {
 dwMinLength: ULONG,
 dwMaxLength: ULONG,
 dwIncrement: ULONG
});

var BCRYPT_OID = new StructT('BCRYPT_OID', {
 cbOID: ULONG,
 pbOID: PUCHAR
});

var BCRYPT_OID_LIST = new StructT('BCRYPT_OID_LIST', {
 dwOIDCount: ULONG,
 pOIDs: BCRYPT_OID.Δ
});

var BCRYPT_PKCS1_PADDING_INFO = new StructT('BCRYPT_PKCS1_PADDING_INFO', {
 pszAlgId: LPCWSTR
});

var BCRYPT_PSS_PADDING_INFO = new StructT('BCRYPT_PSS_PADDING_INFO', {
 pszAlgId: LPCWSTR,
 cbSalt: ULONG
});

var BCRYPT_OAEP_PADDING_INFO = new StructT('BCRYPT_OAEP_PADDING_INFO', {
 pszAlgId: LPCWSTR,
 pbLabel: PUCHAR,
 cbLabel: ULONG
});

var BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = new StructT('BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO', {
 cbSize: ULONG,
 dwInfoVersion: ULONG,
 pbNonce: PUCHAR,
 cbNonce: ULONG,
 pbAuthData: PUCHAR,
 cbAuthData: ULONG,
 pbTag: PUCHAR,
 cbTag: ULONG,
 pbMacContext: PUCHAR,
 cbMacContext: ULONG,
 cbAAD: ULONG,
 cbData: ULONGLONG,
 dwFlags: ULONG
});

var NCryptBuffer = new StructT('NCryptBuffer', {
 cbBuffer: ULONG,
 BufferType: ULONG,
 pvBuffer: PVOID
});

var NCryptBufferDesc = new StructT('NCryptBufferDesc', {
 ulVersion: ULONG,
 cBuffers: ULONG,
 pBuffers: PBCryptBuffer
});

var BCRYPT_KEY_BLOB = new StructT('BCRYPT_KEY_BLOB', {
 Magic: ULONG
});

var BCRYPT_RSAKEY_BLOB = new StructT('BCRYPT_RSAKEY_BLOB', {
 Magic: ULONG,
 BitLength: ULONG,
 cbPublicExp: ULONG,
 cbModulus: ULONG,
 cbPrime1: ULONG,
 cbPrime2: ULONG
});

var BCRYPT_ECCKEY_BLOB = new StructT('BCRYPT_ECCKEY_BLOB', {
 dwMagic: ULONG,
 cbKey: ULONG
});

var BCRYPT_DH_KEY_BLOB = new StructT('BCRYPT_DH_KEY_BLOB', {
 dwMagic: ULONG,
 cbKey: ULONG
});

var BCRYPT_DH_PARAMETER_HEADER = new StructT('BCRYPT_DH_PARAMETER_HEADER', {
 cbLength: ULONG,
 dwMagic: ULONG,
 cbKeyLength: ULONG
});

var BCRYPT_DSA_KEY_BLOB = new StructT('BCRYPT_DSA_KEY_BLOB', {
 dwMagic: ULONG,
 cbKey: ULONG,
 Count: new ArrayT(UCHAR, 4),
 Seed: new ArrayT(UCHAR, 20),
 q: new ArrayT(UCHAR, 20)
});

var BCRYPT_KEY_DATA_BLOB_HEADER = new StructT('BCRYPT_KEY_DATA_BLOB_HEADER', {
 dwMagic: ULONG,
 dwVersion: ULONG,
 cbKeyData: ULONG
});

var BCRYPT_DSA_PARAMETER_HEADER = new StructT('BCRYPT_DSA_PARAMETER_HEADER', {
 cbLength: ULONG,
 dwMagic: ULONG,
 cbKeyLength: ULONG,
 Count: new ArrayT(UCHAR, 4),
 Seed: new ArrayT(UCHAR, 20),
 q: new ArrayT(UCHAR, 20)
});

var BCRYPT_ALGORITHM_IDENTIFIER = new StructT('BCRYPT_ALGORITHM_IDENTIFIER', {
 pszName: LPWSTR,
 dwClass: ULONG,
 dwFlags: ULONG
});

var BCRYPT_PROVIDER_NAME = new StructT('BCRYPT_PROVIDER_NAME', {
 pszProviderName: LPWSTR
});

var BCRYPT_INTERFACE_VERSION = new StructT('BCRYPT_INTERFACE_VERSION', {
 MajorVersion: USHORT,
 MinorVersion: USHORT
});

var CRYPT_INTERFACE_REG = new StructT('CRYPT_INTERFACE_REG', {
 dwInterface: ULONG,
 dwFlags: ULONG,
 cFunctions: ULONG,
 rgpszFunctions: PWSTR.Δ
});

var CRYPT_IMAGE_REG = new StructT('CRYPT_IMAGE_REG', {
 pszImage: PWSTR,
 cInterfaces: ULONG,
 rgpInterfaces: PCRYPT_INTERFACE_REG.Δ
});

var CRYPT_PROVIDER_REG = new StructT('CRYPT_PROVIDER_REG', {
 cAliases: ULONG,
 rgpszAliases: PWSTR.Δ,
 pUM: PCRYPT_IMAGE_REG,
 pKM: PCRYPT_IMAGE_REG
});

var CRYPT_PROVIDERS = new StructT('CRYPT_PROVIDERS', {
 cProviders: ULONG,
 rgpszProviders: PWSTR.Δ
});

var CRYPT_CONTEXT_CONFIG = new StructT('CRYPT_CONTEXT_CONFIG', {
 dwFlags: ULONG,
 dwReserved: ULONG
});

var CRYPT_CONTEXT_FUNCTION_CONFIG = new StructT('CRYPT_CONTEXT_FUNCTION_CONFIG', {
 dwFlags: ULONG,
 dwReserved: ULONG
});

var CRYPT_CONTEXTS = new StructT('CRYPT_CONTEXTS', {
 cContexts: ULONG,
 rgpszContexts: PWSTR.Δ
});

var CRYPT_CONTEXT_FUNCTIONS = new StructT('CRYPT_CONTEXT_FUNCTIONS', {
 cFunctions: ULONG,
 rgpszFunctions: PWSTR.Δ
});

var CRYPT_CONTEXT_FUNCTION_PROVIDERS = new StructT('CRYPT_CONTEXT_FUNCTION_PROVIDERS', {
 cProviders: ULONG,
 rgpszProviders: PWSTR.Δ
});

var CRYPT_PROPERTY_REF = new StructT('CRYPT_PROPERTY_REF', {
 pszProperty: PWSTR,
 cbValue: ULONG,
 pbValue: PUCHAR
});

var CRYPT_IMAGE_REF = new StructT('CRYPT_IMAGE_REF', {
 pszImage: PWSTR,
 dwFlags: ULONG
});

var CRYPT_PROVIDER_REF = new StructT('CRYPT_PROVIDER_REF', {
 dwInterface: ULONG,
 pszFunction: PWSTR,
 pszProvider: PWSTR,
 cProperties: ULONG,
 rgpProperties: PCRYPT_PROPERTY_REF.Δ,
 pUM: PCRYPT_IMAGE_REF,
 pKM: PCRYPT_IMAGE_REF
});

var CRYPT_PROVIDER_REFS = new StructT('CRYPT_PROVIDER_REFS', {
 cProviders: ULONG,
 rgpProviders: PCRYPT_PROVIDER_REF.Δ
});

var NCryptAlgorithmName = new StructT('NCryptAlgorithmName', {
 pszName: LPWSTR,
 dwClass: DWORD,
 dwAlgOperations: DWORD,
 dwFlags: DWORD
});

var NCryptKeyName = new StructT('NCryptKeyName', {
 pszName: LPWSTR,
 pszAlgid: LPWSTR,
 dwLegacyKeySpec: DWORD,
 dwFlags: DWORD
});

var NCryptProviderName = new StructT('NCryptProviderName', {
 pszName: LPWSTR,
 pszComment: LPWSTR
});

var NCRYPT_UI_POLICY_BLOB = new StructT('NCRYPT_UI_POLICY_BLOB', {
 dwVersion: DWORD,
 dwFlags: DWORD,
 cbCreationTitle: DWORD,
 cbFriendlyName: DWORD,
 cbDescription: DWORD
});

var NCRYPT_UI_POLICY = new StructT('NCRYPT_UI_POLICY', {
 dwVersion: DWORD,
 dwFlags: DWORD,
 pszCreationTitle: LPCWSTR,
 pszFriendlyName: LPCWSTR,
 pszDescription: LPCWSTR
});

var NCRYPT_SUPPORTED_LENGTHS = new StructT('NCRYPT_SUPPORTED_LENGTHS', {
 dwMinLength: DWORD,
 dwMaxLength: DWORD,
 dwIncrement: DWORD,
 dwDefaultLength: DWORD
});

var CRYPT_BIT_BLOB = new StructT('CRYPT_BIT_BLOB', {
 cbData: DWORD,
 pbData: BYTE.Δ,
 cUnusedBits: DWORD
});

var CRYPT_ALGORITHM_IDENTIFIER = new StructT('CRYPT_ALGORITHM_IDENTIFIER', {
 pszObjId: LPSTR,
 Parameters: CRYPT_OBJID_BLOB
});

var CRYPT_OBJID_TABLE = new StructT('CRYPT_OBJID_TABLE', {
 dwAlgId: DWORD,
 pszObjId: LPCSTR
});

var CRYPT_HASH_INFO = new StructT('CRYPT_HASH_INFO', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Hash: CRYPT_HASH_BLOB
});

var CERT_EXTENSION = new StructT('CERT_EXTENSION', {
 pszObjId: LPSTR,
 fCritical: BOOL,
 Value: CRYPT_OBJID_BLOB
});

var CRYPT_ATTRIBUTE_TYPE_VALUE = new StructT('CRYPT_ATTRIBUTE_TYPE_VALUE', {
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var CRYPT_ATTRIBUTE = new StructT('CRYPT_ATTRIBUTE', {
 pszObjId: LPSTR,
 cValue: DWORD,
 rgValue: PCRYPT_ATTR_BLOB
});

var CMSG_ATTR = new StructT('CMSG_ATTR', {
 cAttr: DWORD,
 rgAttr: PCRYPT_ATTRIBUTE
});

var CERT_RDN_ATTR = new StructT('CERT_RDN_ATTR', {
 pszObjId: LPSTR,
 dwValueType: DWORD,
 Value: CERT_RDN_VALUE_BLOB
});

var CERT_RDN = new StructT('CERT_RDN', {
 cRDNAttr: DWORD,
 rgRDNAttr: PCERT_RDN_ATTR
});

var CERT_NAME_INFO = new StructT('CERT_NAME_INFO', {
 cRDN: DWORD,
 rgRDN: PCERT_RDN
});

var CERT_NAME_VALUE = new StructT('CERT_NAME_VALUE', {
 dwValueType: DWORD,
 Value: CERT_RDN_VALUE_BLOB
});

var CERT_PUBLIC_KEY_INFO = new StructT('CERT_PUBLIC_KEY_INFO', {
 Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
 PublicKey: CRYPT_BIT_BLOB
});

var CRYPT_PRIVATE_KEY_INFO = new StructT('CRYPT_PRIVATE_KEY_INFO', {
 Version: DWORD,
 Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
 PrivateKey: CRYPT_DER_BLOB,
 pAttributes: PCRYPT_ATTRIBUTES
});

var CRYPT_ENCRYPTED_PRIVATE_KEY_INFO = new StructT('CRYPT_ENCRYPTED_PRIVATE_KEY_INFO', {
 EncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedPrivateKey: CRYPT_DATA_BLOB
});

var CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS = new StructT('CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS', {
 PrivateKey: CRYPT_DIGEST_BLOB,
 pResolvehCryptProvFunc: PCRYPT_RESOLVE_HCRYPTPROV_FUNC,
 pVoidResolveFunc: LPVOID,
 pDecryptPrivateKeyFunc: PCRYPT_DECRYPT_PRIVATE_KEY_FUNC,
 pVoidDecryptFunc: LPVOID
});

var CRYPT_PKCS8_EXPORT_PARAMS = new StructT('CRYPT_PKCS8_EXPORT_PARAMS', {
 hCryptProv: HCRYPTPROV,
 dwKeySpec: DWORD,
 pszPrivateKeyObjId: LPSTR,
 pEncryptPrivateKeyFunc: PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC,
 pVoidEncryptFunc: LPVOID
});

var CERT_INFO = new StructT('CERT_INFO', {
 dwVersion: DWORD,
 SerialNumber: CRYPT_INTEGER_BLOB,
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Issuer: CERT_NAME_BLOB,
 NotBefore: FILETIME,
 NotAfter: FILETIME,
 Subject: CERT_NAME_BLOB,
 SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
 IssuerUniqueId: CRYPT_BIT_BLOB,
 SubjectUniqueId: CRYPT_BIT_BLOB,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CRL_ENTRY = new StructT('CRL_ENTRY', {
 SerialNumber: CRYPT_INTEGER_BLOB,
 RevocationDate: FILETIME,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CRL_INFO = new StructT('CRL_INFO', {
 dwVersion: DWORD,
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Issuer: CERT_NAME_BLOB,
 ThisUpdate: FILETIME,
 NextUpdate: FILETIME,
 cCRLEntry: DWORD,
 rgCRLEntry: PCRL_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CERT_OR_CRL_BLOB = new StructT('CERT_OR_CRL_BLOB', {
 dwChoice: DWORD,
 cbEncoded: DWORD,
 pbEncoded: BYTE.Δ
});

var CERT_OR_CRL_BUNDLE = new StructT('CERT_OR_CRL_BUNDLE', {
 cItem: DWORD,
 rgItem: PCERT_OR_CRL_BLOB
});

var CERT_REQUEST_INFO = new StructT('CERT_REQUEST_INFO', {
 dwVersion: DWORD,
 Subject: CERT_NAME_BLOB,
 SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var CERT_KEYGEN_REQUEST_INFO = new StructT('CERT_KEYGEN_REQUEST_INFO', {
 dwVersion: DWORD,
 SubjectPublicKeyInfo: CERT_PUBLIC_KEY_INFO,
 pwszChallengeString: LPWSTR
});

var CERT_SIGNED_CONTENT_INFO = new StructT('CERT_SIGNED_CONTENT_INFO', {
 ToBeSigned: CRYPT_DER_BLOB,
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Signature: CRYPT_BIT_BLOB
});

var CERT_ENHKEY_USAGE = new StructT('CERT_ENHKEY_USAGE', {
 cUsageIdentifier: DWORD,
 rgpszUsageIdentifier: LPSTR.Δ
});

var CTL_ENTRY = new StructT('CTL_ENTRY', {
 SubjectIdentifier: CRYPT_DATA_BLOB,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var CTL_INFO = new StructT('CTL_INFO', {
 dwVersion: DWORD,
 SubjectUsage: CTL_USAGE,
 ListIdentifier: CRYPT_DATA_BLOB,
 SequenceNumber: CRYPT_INTEGER_BLOB,
 ThisUpdate: FILETIME,
 NextUpdate: FILETIME,
 SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 cCTLEntry: DWORD,
 rgCTLEntry: PCTL_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CRYPT_TIME_STAMP_REQUEST_INFO = new StructT('CRYPT_TIME_STAMP_REQUEST_INFO', {
 pszTimeStampAlgorithm: LPSTR,
 pszContentType: LPSTR,
 Content: CRYPT_OBJID_BLOB,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var CRYPT_ENROLLMENT_NAME_VALUE_PAIR = new StructT('CRYPT_ENROLLMENT_NAME_VALUE_PAIR', {
 pwszName: LPWSTR,
 pwszValue: LPWSTR
});

var CRYPT_CSP_PROVIDER = new StructT('CRYPT_CSP_PROVIDER', {
 dwKeySpec: DWORD,
 pwszProviderName: LPWSTR,
 Signature: CRYPT_BIT_BLOB
});

var CRYPT_ENCODE_PARA = new StructT('CRYPT_ENCODE_PARA', {
 cbSize: DWORD,
 pfnAlloc: PFN_CRYPT_ALLOC,
 pfnFree: PFN_CRYPT_FREE
});

var CRYPT_DECODE_PARA = new StructT('CRYPT_DECODE_PARA', {
 cbSize: DWORD,
 pfnAlloc: PFN_CRYPT_ALLOC,
 pfnFree: PFN_CRYPT_FREE
});

var CERT_EXTENSIONS = new StructT('CERT_EXTENSIONS', {
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CERT_AUTHORITY_KEY_ID_INFO = new StructT('CERT_AUTHORITY_KEY_ID_INFO', {
 KeyId: CRYPT_DATA_BLOB,
 CertIssuer: CERT_NAME_BLOB,
 CertSerialNumber: CRYPT_INTEGER_BLOB
});

var CERT_PRIVATE_KEY_VALIDITY = new StructT('CERT_PRIVATE_KEY_VALIDITY', {
 NotBefore: FILETIME,
 NotAfter: FILETIME
});

var CERT_KEY_ATTRIBUTES_INFO = new StructT('CERT_KEY_ATTRIBUTES_INFO', {
 KeyId: CRYPT_DATA_BLOB,
 IntendedKeyUsage: CRYPT_BIT_BLOB,
 pPrivateKeyUsagePeriod: PCERT_PRIVATE_KEY_VALIDITY
});

var CERT_POLICY_ID = new StructT('CERT_POLICY_ID', {
 cCertPolicyElementId: DWORD,
 rgpszCertPolicyElementId: LPSTR.Δ
});

var CERT_KEY_USAGE_RESTRICTION_INFO = new StructT('CERT_KEY_USAGE_RESTRICTION_INFO', {
 cCertPolicyId: DWORD,
 rgCertPolicyId: PCERT_POLICY_ID,
 RestrictedKeyUsage: CRYPT_BIT_BLOB
});

var CERT_OTHER_NAME = new StructT('CERT_OTHER_NAME', {
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var CERT_ALT_NAME_ENTRY = new StructT('CERT_ALT_NAME_ENTRY', {
 dwAltNameChoice: DWORD
});

var CERT_ALT_NAME_INFO = new StructT('CERT_ALT_NAME_INFO', {
 cAltEntry: DWORD,
 rgAltEntry: PCERT_ALT_NAME_ENTRY
});

var CERT_BASIC_CONSTRAINTS_INFO = new StructT('CERT_BASIC_CONSTRAINTS_INFO', {
 SubjectType: CRYPT_BIT_BLOB,
 fPathLenConstraint: BOOL,
 dwPathLenConstraint: DWORD,
 cSubtreesConstraint: DWORD,
 rgSubtreesConstraint: CERT_NAME_BLOB.Δ
});

var CERT_BASIC_CONSTRAINTS2_INFO = new StructT('CERT_BASIC_CONSTRAINTS2_INFO', {
 fCA: BOOL,
 fPathLenConstraint: BOOL,
 dwPathLenConstraint: DWORD
});

var CERT_POLICY_QUALIFIER_INFO = new StructT('CERT_POLICY_QUALIFIER_INFO', {
 pszPolicyQualifierId: LPSTR,
 Qualifier: CRYPT_OBJID_BLOB
});

var CERT_POLICY_INFO = new StructT('CERT_POLICY_INFO', {
 pszPolicyIdentifier: LPSTR,
 cPolicyQualifier: DWORD,
 rgPolicyQualifier: CERT_POLICY_QUALIFIER_INFO.Δ
});

var CERT_POLICIES_INFO = new StructT('CERT_POLICIES_INFO', {
 cPolicyInfo: DWORD,
 rgPolicyInfo: CERT_POLICY_INFO.Δ
});

var CERT_POLICY_QUALIFIER_NOTICE_REFERENCE = new StructT('CERT_POLICY_QUALIFIER_NOTICE_REFERENCE', {
 pszOrganization: LPSTR,
 cNoticeNumbers: DWORD,
 rgNoticeNumbers: int.Δ
});

var CERT_POLICY_QUALIFIER_USER_NOTICE = new StructT('CERT_POLICY_QUALIFIER_USER_NOTICE', {
 pNoticeReference: CERT_POLICY_QUALIFIER_NOTICE_REFERENCE.Δ,
 pszDisplayText: LPWSTR
});

var CPS_URLS = new StructT('CPS_URLS', {
 pszURL: LPWSTR,
 pAlgorithm: CRYPT_ALGORITHM_IDENTIFIER.Δ,
 pDigest: CRYPT_DATA_BLOB.Δ
});

var CERT_POLICY95_QUALIFIER1 = new StructT('CERT_POLICY95_QUALIFIER1', {
 pszPracticesReference: LPWSTR,
 pszNoticeIdentifier: LPSTR,
 pszNSINoticeIdentifier: LPSTR,
 cCPSURLs: DWORD,
 rgCPSURLs: CPS_URLS.Δ
});

var CERT_POLICY_MAPPING = new StructT('CERT_POLICY_MAPPING', {
 pszIssuerDomainPolicy: LPSTR,
 pszSubjectDomainPolicy: LPSTR
});

var CERT_POLICY_MAPPINGS_INFO = new StructT('CERT_POLICY_MAPPINGS_INFO', {
 cPolicyMapping: DWORD,
 rgPolicyMapping: PCERT_POLICY_MAPPING
});

var CERT_POLICY_CONSTRAINTS_INFO = new StructT('CERT_POLICY_CONSTRAINTS_INFO', {
 fRequireExplicitPolicy: BOOL,
 dwRequireExplicitPolicySkipCerts: DWORD,
 fInhibitPolicyMapping: BOOL,
 dwInhibitPolicyMappingSkipCerts: DWORD
});

var CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY = new StructT('CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY', {
 pszObjId: LPSTR,
 cValue: DWORD,
 rgValue: PCRYPT_DER_BLOB
});

var CRYPT_CONTENT_INFO = new StructT('CRYPT_CONTENT_INFO', {
 pszObjId: LPSTR,
 Content: CRYPT_DER_BLOB
});

var CRYPT_SEQUENCE_OF_ANY = new StructT('CRYPT_SEQUENCE_OF_ANY', {
 cValue: DWORD,
 rgValue: PCRYPT_DER_BLOB
});

var CERT_AUTHORITY_KEY_ID2_INFO = new StructT('CERT_AUTHORITY_KEY_ID2_INFO', {
 KeyId: CRYPT_DATA_BLOB,
 AuthorityCertIssuer: CERT_ALT_NAME_INFO,
 AuthorityCertSerialNumber: CRYPT_INTEGER_BLOB
});

var CERT_ACCESS_DESCRIPTION = new StructT('CERT_ACCESS_DESCRIPTION', {
 pszAccessMethod: LPSTR,
 AccessLocation: CERT_ALT_NAME_ENTRY
});

var CERT_SUBJECT_INFO_ACCESS = new StructT('CERT_SUBJECT_INFO_ACCESS', {
 cAccDescr: DWORD,
 rgAccDescr: PCERT_ACCESS_DESCRIPTION
});

var CRL_DIST_POINT_NAME = new StructT('CRL_DIST_POINT_NAME', {
 dwDistPointNameChoice: DWORD
});

var CRL_DIST_POINT = new StructT('CRL_DIST_POINT', {
 DistPointName: CRL_DIST_POINT_NAME,
 ReasonFlags: CRYPT_BIT_BLOB,
 CRLIssuer: CERT_ALT_NAME_INFO
});

var CRL_DIST_POINTS_INFO = new StructT('CRL_DIST_POINTS_INFO', {
 cDistPoint: DWORD,
 rgDistPoint: PCRL_DIST_POINT
});

var CROSS_CERT_DIST_POINTS_INFO = new StructT('CROSS_CERT_DIST_POINTS_INFO', {
 dwSyncDeltaTime: DWORD,
 cDistPoint: DWORD,
 rgDistPoint: PCERT_ALT_NAME_INFO
});

var CERT_PAIR = new StructT('CERT_PAIR', {
 Forward: CERT_BLOB,
 Reverse: CERT_BLOB
});

var CRL_ISSUING_DIST_POINT = new StructT('CRL_ISSUING_DIST_POINT', {
 DistPointName: CRL_DIST_POINT_NAME,
 fOnlyContainsUserCerts: BOOL,
 fOnlyContainsCACerts: BOOL,
 OnlySomeReasonFlags: CRYPT_BIT_BLOB,
 fIndirectCRL: BOOL
});

var CERT_GENERAL_SUBTREE = new StructT('CERT_GENERAL_SUBTREE', {
 Base: CERT_ALT_NAME_ENTRY,
 dwMinimum: DWORD,
 fMaximum: BOOL,
 dwMaximum: DWORD
});

var CERT_NAME_CONSTRAINTS_INFO = new StructT('CERT_NAME_CONSTRAINTS_INFO', {
 cPermittedSubtree: DWORD,
 rgPermittedSubtree: PCERT_GENERAL_SUBTREE,
 cExcludedSubtree: DWORD,
 rgExcludedSubtree: PCERT_GENERAL_SUBTREE
});

var CERT_DSS_PARAMETERS = new StructT('CERT_DSS_PARAMETERS', {
 p: CRYPT_UINT_BLOB,
 q: CRYPT_UINT_BLOB,
 g: CRYPT_UINT_BLOB
});

var CERT_DH_PARAMETERS = new StructT('CERT_DH_PARAMETERS', {
 p: CRYPT_UINT_BLOB,
 g: CRYPT_UINT_BLOB
});

var CERT_ECC_SIGNATURE = new StructT('CERT_ECC_SIGNATURE', {
 r: CRYPT_UINT_BLOB,
 s: CRYPT_UINT_BLOB
});

var CERT_X942_DH_VALIDATION_PARAMS = new StructT('CERT_X942_DH_VALIDATION_PARAMS', {
 seed: CRYPT_BIT_BLOB,
 pgenCounter: DWORD
});

var CERT_X942_DH_PARAMETERS = new StructT('CERT_X942_DH_PARAMETERS', {
 p: CRYPT_UINT_BLOB,
 g: CRYPT_UINT_BLOB,
 q: CRYPT_UINT_BLOB,
 j: CRYPT_UINT_BLOB,
 pValidationParams: PCERT_X942_DH_VALIDATION_PARAMS
});

var CRYPT_X942_OTHER_INFO = new StructT('CRYPT_X942_OTHER_INFO', {
 pszContentEncryptionObjId: LPSTR,
 rgbCounter: new ArrayT(BYTE, CRYPT_X942_COUNTER_BYTE_LENGTH),
 rgbKeyLength: new ArrayT(BYTE, CRYPT_X942_KEY_LENGTH_BYTE_LENGTH),
 PubInfo: CRYPT_DATA_BLOB
});

var CRYPT_ECC_CMS_SHARED_INFO = new StructT('CRYPT_ECC_CMS_SHARED_INFO', {
 Algorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EntityUInfo: CRYPT_DATA_BLOB,
 rgbSuppPubInfo: new ArrayT(BYTE, CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH)
});

var CRYPT_RC2_CBC_PARAMETERS = new StructT('CRYPT_RC2_CBC_PARAMETERS', {
 dwVersion: DWORD,
 fIV: BOOL,
 rgbIV: new ArrayT(BYTE, 8)
});

var CRYPT_SMIME_CAPABILITY = new StructT('CRYPT_SMIME_CAPABILITY', {
 pszObjId: LPSTR,
 Parameters: CRYPT_OBJID_BLOB
});

var CRYPT_SMIME_CAPABILITIES = new StructT('CRYPT_SMIME_CAPABILITIES', {
 cCapability: DWORD,
 rgCapability: PCRYPT_SMIME_CAPABILITY
});

var CERT_QC_STATEMENT = new StructT('CERT_QC_STATEMENT', {
 pszStatementId: LPSTR,
 StatementInfo: CRYPT_OBJID_BLOB
});

var CERT_QC_STATEMENTS_EXT_INFO = new StructT('CERT_QC_STATEMENTS_EXT_INFO', {
 cStatement: DWORD,
 rgStatement: PCERT_QC_STATEMENT
});

var CRYPT_MASK_GEN_ALGORITHM = new StructT('CRYPT_MASK_GEN_ALGORITHM', {
 pszObjId: LPSTR,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
});

var CRYPT_RSA_SSA_PSS_PARAMETERS = new StructT('CRYPT_RSA_SSA_PSS_PARAMETERS', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
 dwSaltLength: DWORD,
 dwTrailerField: DWORD
});

var CRYPT_PSOURCE_ALGORITHM = new StructT('CRYPT_PSOURCE_ALGORITHM', {
 pszObjId: LPSTR,
 EncodingParameters: CRYPT_DATA_BLOB
});

var CRYPT_RSAES_OAEP_PARAMETERS = new StructT('CRYPT_RSAES_OAEP_PARAMETERS', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 MaskGenAlgorithm: CRYPT_MASK_GEN_ALGORITHM,
 PSourceAlgorithm: CRYPT_PSOURCE_ALGORITHM
});

var CMC_TAGGED_ATTRIBUTE = new StructT('CMC_TAGGED_ATTRIBUTE', {
 dwBodyPartID: DWORD,
 Attribute: CRYPT_ATTRIBUTE
});

var CMC_TAGGED_CERT_REQUEST = new StructT('CMC_TAGGED_CERT_REQUEST', {
 dwBodyPartID: DWORD,
 SignedCertRequest: CRYPT_DER_BLOB
});

var CMC_TAGGED_REQUEST = new StructT('CMC_TAGGED_REQUEST', {
 dwTaggedRequestChoice: DWORD
});

var CMC_TAGGED_CONTENT_INFO = new StructT('CMC_TAGGED_CONTENT_INFO', {
 dwBodyPartID: DWORD,
 EncodedContentInfo: CRYPT_DER_BLOB
});

var CMC_TAGGED_OTHER_MSG = new StructT('CMC_TAGGED_OTHER_MSG', {
 dwBodyPartID: DWORD,
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var CMC_DATA_INFO = new StructT('CMC_DATA_INFO', {
 cTaggedAttribute: DWORD,
 rgTaggedAttribute: PCMC_TAGGED_ATTRIBUTE,
 cTaggedRequest: DWORD,
 rgTaggedRequest: PCMC_TAGGED_REQUEST,
 cTaggedContentInfo: DWORD,
 rgTaggedContentInfo: PCMC_TAGGED_CONTENT_INFO,
 cTaggedOtherMsg: DWORD,
 rgTaggedOtherMsg: PCMC_TAGGED_OTHER_MSG
});

var CMC_RESPONSE_INFO = new StructT('CMC_RESPONSE_INFO', {
 cTaggedAttribute: DWORD,
 rgTaggedAttribute: PCMC_TAGGED_ATTRIBUTE,
 cTaggedContentInfo: DWORD,
 rgTaggedContentInfo: PCMC_TAGGED_CONTENT_INFO,
 cTaggedOtherMsg: DWORD,
 rgTaggedOtherMsg: PCMC_TAGGED_OTHER_MSG
});

var CMC_PEND_INFO = new StructT('CMC_PEND_INFO', {
 PendToken: CRYPT_DATA_BLOB,
 PendTime: FILETIME
});

var CMC_STATUS_INFO = new StructT('CMC_STATUS_INFO', {
 dwStatus: DWORD,
 cBodyList: DWORD,
 rgdwBodyList: DWORD.Δ,
 pwszStatusString: LPWSTR,
 dwOtherInfoChoice: DWORD
});

var CMC_ADD_EXTENSIONS_INFO = new StructT('CMC_ADD_EXTENSIONS_INFO', {
 dwCmcDataReference: DWORD,
 cCertReference: DWORD,
 rgdwCertReference: DWORD.Δ,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CMC_ADD_ATTRIBUTES_INFO = new StructT('CMC_ADD_ATTRIBUTES_INFO', {
 dwCmcDataReference: DWORD,
 cCertReference: DWORD,
 rgdwCertReference: DWORD.Δ,
 cAttribute: DWORD,
 rgAttribute: PCRYPT_ATTRIBUTE
});

var CERT_TEMPLATE_EXT = new StructT('CERT_TEMPLATE_EXT', {
 pszObjId: LPSTR,
 dwMajorVersion: DWORD,
 fMinorVersion: BOOL,
 dwMinorVersion: DWORD
});

var CERT_HASHED_URL = new StructT('CERT_HASHED_URL', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Hash: CRYPT_HASH_BLOB,
 pwszUrl: LPWSTR
});

var CERT_LOGOTYPE_DETAILS = new StructT('CERT_LOGOTYPE_DETAILS', {
 pwszMimeType: LPWSTR,
 cHashedUrl: DWORD,
 rgHashedUrl: PCERT_HASHED_URL
});

var CERT_LOGOTYPE_REFERENCE = new StructT('CERT_LOGOTYPE_REFERENCE', {
 cHashedUrl: DWORD,
 rgHashedUrl: PCERT_HASHED_URL
});

var CERT_LOGOTYPE_IMAGE_INFO = new StructT('CERT_LOGOTYPE_IMAGE_INFO', {
 dwLogotypeImageInfoChoice: DWORD,
 dwFileSize: DWORD,
 dwXSize: DWORD,
 dwYSize: DWORD,
 dwLogotypeImageResolutionChoice: DWORD,
 pwszLanguage: LPWSTR
});

var CERT_LOGOTYPE_IMAGE = new StructT('CERT_LOGOTYPE_IMAGE', {
 LogotypeDetails: CERT_LOGOTYPE_DETAILS,
 pLogotypeImageInfo: PCERT_LOGOTYPE_IMAGE_INFO
});

var CERT_LOGOTYPE_AUDIO_INFO = new StructT('CERT_LOGOTYPE_AUDIO_INFO', {
 dwFileSize: DWORD,
 dwPlayTime: DWORD,
 dwChannels: DWORD,
 dwSampleRate: DWORD,
 pwszLanguage: LPWSTR
});

var CERT_LOGOTYPE_AUDIO = new StructT('CERT_LOGOTYPE_AUDIO', {
 LogotypeDetails: CERT_LOGOTYPE_DETAILS,
 pLogotypeAudioInfo: PCERT_LOGOTYPE_AUDIO_INFO
});

var CERT_LOGOTYPE_DATA = new StructT('CERT_LOGOTYPE_DATA', {
 cLogotypeImage: DWORD,
 rgLogotypeImage: PCERT_LOGOTYPE_IMAGE,
 cLogotypeAudio: DWORD,
 rgLogotypeAudio: PCERT_LOGOTYPE_AUDIO
});

var CERT_LOGOTYPE_INFO = new StructT('CERT_LOGOTYPE_INFO', {
 dwLogotypeInfoChoice: DWORD
});

var CERT_OTHER_LOGOTYPE_INFO = new StructT('CERT_OTHER_LOGOTYPE_INFO', {
 pszObjId: LPSTR,
 LogotypeInfo: CERT_LOGOTYPE_INFO
});

var CERT_LOGOTYPE_EXT_INFO = new StructT('CERT_LOGOTYPE_EXT_INFO', {
 cCommunityLogo: DWORD,
 rgCommunityLogo: PCERT_LOGOTYPE_INFO,
 pIssuerLogo: PCERT_LOGOTYPE_INFO,
 pSubjectLogo: PCERT_LOGOTYPE_INFO,
 cOtherLogo: DWORD,
 rgOtherLogo: PCERT_OTHER_LOGOTYPE_INFO
});

var CERT_BIOMETRIC_DATA = new StructT('CERT_BIOMETRIC_DATA', {
 dwTypeOfBiometricDataChoice: DWORD,
 HashedUrl: CERT_HASHED_URL
});

var CERT_BIOMETRIC_EXT_INFO = new StructT('CERT_BIOMETRIC_EXT_INFO', {
 cBiometricData: DWORD,
 rgBiometricData: PCERT_BIOMETRIC_DATA
});

var OCSP_SIGNATURE_INFO = new StructT('OCSP_SIGNATURE_INFO', {
 SignatureAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 Signature: CRYPT_BIT_BLOB,
 cCertEncoded: DWORD,
 rgCertEncoded: PCERT_BLOB
});

var OCSP_SIGNED_REQUEST_INFO = new StructT('OCSP_SIGNED_REQUEST_INFO', {
 ToBeSigned: CRYPT_DER_BLOB,
 pOptionalSignatureInfo: POCSP_SIGNATURE_INFO
});

var OCSP_CERT_ID = new StructT('OCSP_CERT_ID', {
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 IssuerNameHash: CRYPT_HASH_BLOB,
 IssuerKeyHash: CRYPT_HASH_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB
});

var OCSP_REQUEST_ENTRY = new StructT('OCSP_REQUEST_ENTRY', {
 CertId: OCSP_CERT_ID,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var OCSP_REQUEST_INFO = new StructT('OCSP_REQUEST_INFO', {
 dwVersion: DWORD,
 pRequestorName: PCERT_ALT_NAME_ENTRY,
 cRequestEntry: DWORD,
 rgRequestEntry: POCSP_REQUEST_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var OCSP_RESPONSE_INFO = new StructT('OCSP_RESPONSE_INFO', {
 dwStatus: DWORD,
 pszObjId: LPSTR,
 Value: CRYPT_OBJID_BLOB
});

var OCSP_BASIC_SIGNED_RESPONSE_INFO = new StructT('OCSP_BASIC_SIGNED_RESPONSE_INFO', {
 ToBeSigned: CRYPT_DER_BLOB,
 SignatureInfo: OCSP_SIGNATURE_INFO
});

var OCSP_BASIC_REVOKED_INFO = new StructT('OCSP_BASIC_REVOKED_INFO', {
 RevocationDate: FILETIME,
 dwCrlReasonCode: DWORD
});

var OCSP_BASIC_RESPONSE_ENTRY = new StructT('OCSP_BASIC_RESPONSE_ENTRY', {
 CertId: OCSP_CERT_ID,
 dwCertStatus: DWORD,
 ThisUpdate: FILETIME,
 NextUpdate: FILETIME,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var OCSP_BASIC_RESPONSE_INFO = new StructT('OCSP_BASIC_RESPONSE_INFO', {
 dwVersion: DWORD,
 dwResponderIdChoice: DWORD,
 ProducedAt: FILETIME,
 cResponseEntry: DWORD,
 rgResponseEntry: POCSP_BASIC_RESPONSE_ENTRY,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CRYPT_OID_FUNC_ENTRY = new StructT('CRYPT_OID_FUNC_ENTRY', {
 pszOID: LPCSTR,
 pvFuncAddr: _void.Δ
});

var CCRYPT_OID_INFO = new StructT('CCRYPT_OID_INFO', {
 cbSize: DWORD,
 pszOID: LPCSTR,
 pwszName: LPCWSTR,
 dwGroupId: DWORD,
 ExtraInfo: CRYPT_DATA_BLOB
});

var CERT_ISSUER_SERIAL_NUMBER = new StructT('CERT_ISSUER_SERIAL_NUMBER', {
 Issuer: CERT_NAME_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB
});

var CERT_ID = new StructT('CERT_ID', {
 dwIdChoice: DWORD
});

var CMSG_SIGNER_ENCODE_INFO = new StructT('CMSG_SIGNER_ENCODE_INFO', {
 cbSize: DWORD,
 pCertInfo: PCERT_INFO,
 dwKeySpec: DWORD,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: _void.Δ,
 cAuthAttr: DWORD,
 rgAuthAttr: PCRYPT_ATTRIBUTE,
 cUnauthAttr: DWORD,
 rgUnauthAttr: PCRYPT_ATTRIBUTE
});

var CMSG_SIGNED_ENCODE_INFO = new StructT('CMSG_SIGNED_ENCODE_INFO', {
 cbSize: DWORD,
 cSigners: DWORD,
 rgSigners: PCMSG_SIGNER_ENCODE_INFO,
 cCertEncoded: DWORD,
 rgCertEncoded: PCERT_BLOB,
 cCrlEncoded: DWORD,
 rgCrlEncoded: PCRL_BLOB
});

var _CMSG_RECIPIENT_ENCODE_INFO = new StructT('_CMSG_RECIPIENT_ENCODE_INFO', {
 dwRecipientChoice: DWORD
});

var CMSG_ENVELOPED_ENCODE_INFO = new StructT('CMSG_ENVELOPED_ENCODE_INFO', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: _void.Δ,
 cRecipients: DWORD,
 rgpRecipients: PCERT_INFO.Δ
});

var CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO = new StructT('CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO', {
 cbSize: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyEncryptionAuxInfo: _void.Δ,
 hCryptProv: HCRYPTPROV_LEGACY,
 RecipientPublicKey: CRYPT_BIT_BLOB,
 RecipientId: CERT_ID
});

var CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO = new StructT('CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO', {
 cbSize: DWORD,
 RecipientPublicKey: CRYPT_BIT_BLOB,
 RecipientId: CERT_ID,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO = new StructT('CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO', {
 cbSize: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyEncryptionAuxInfo: _void.Δ,
 KeyWrapAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyWrapAuxInfo: _void.Δ,
 hCryptProv: HCRYPTPROV_LEGACY,
 dwKeySpec: DWORD,
 dwKeyChoice: DWORD,
 UserKeyingMaterial: CRYPT_DATA_BLOB,
 cRecipientEncryptedKeys: DWORD,
 rgpRecipientEncryptedKeys: PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO.Δ
});

var CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO = new StructT('CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO', {
 cbSize: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvKeyEncryptionAuxInfo: _void.Δ,
 hCryptProv: HCRYPTPROV,
 dwKeyChoice: DWORD,
 KeyId: CRYPT_DATA_BLOB,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var CMSG_RC2_AUX_INFO = new StructT('CMSG_RC2_AUX_INFO', {
 cbSize: DWORD,
 dwBitLen: DWORD
});

var CMSG_SP3_COMPATIBLE_AUX_INFO = new StructT('CMSG_SP3_COMPATIBLE_AUX_INFO', {
 cbSize: DWORD,
 dwFlags: DWORD
});

var CMSG_RC4_AUX_INFO = new StructT('CMSG_RC4_AUX_INFO', {
 cbSize: DWORD,
 dwBitLen: DWORD
});

var CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO = new StructT('CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO', {
 cbSize: DWORD,
 SignedInfo: CMSG_SIGNED_ENCODE_INFO,
 EnvelopedInfo: CMSG_ENVELOPED_ENCODE_INFO
});

var CMSG_HASHED_ENCODE_INFO = new StructT('CMSG_HASHED_ENCODE_INFO', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: _void.Δ
});

var CMSG_ENCRYPTED_ENCODE_INFO = new StructT('CMSG_ENCRYPTED_ENCODE_INFO', {
 cbSize: DWORD,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: _void.Δ
});

var CMSG_STREAM_INFO = new StructT('CMSG_STREAM_INFO', {
 cbContent: DWORD,
 pfnStreamOutput: PFN_CMSG_STREAM_OUTPUT,
 pvArg: _void.Δ
});

var CMSG_SIGNER_INFO = new StructT('CMSG_SIGNER_INFO', {
 dwVersion: DWORD,
 Issuer: CERT_NAME_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedHash: CRYPT_DATA_BLOB,
 AuthAttrs: CRYPT_ATTRIBUTES,
 UnauthAttrs: CRYPT_ATTRIBUTES
});

var CMSG_CMS_SIGNER_INFO = new StructT('CMSG_CMS_SIGNER_INFO', {
 dwVersion: DWORD,
 SignerId: CERT_ID,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedHash: CRYPT_DATA_BLOB,
 AuthAttrs: CRYPT_ATTRIBUTES,
 UnauthAttrs: CRYPT_ATTRIBUTES
});

var CMSG_KEY_TRANS_RECIPIENT_INFO = new StructT('CMSG_KEY_TRANS_RECIPIENT_INFO', {
 dwVersion: DWORD,
 RecipientId: CERT_ID,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB
});

var CMSG_RECIPIENT_ENCRYPTED_KEY_INFO = new StructT('CMSG_RECIPIENT_ENCRYPTED_KEY_INFO', {
 RecipientId: CERT_ID,
 EncryptedKey: CRYPT_DATA_BLOB,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var CMSG_KEY_AGREE_RECIPIENT_INFO = new StructT('CMSG_KEY_AGREE_RECIPIENT_INFO', {
 dwVersion: DWORD,
 dwOriginatorChoice: DWORD,
 UserKeyingMaterial: CRYPT_DATA_BLOB,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 cRecipientEncryptedKeys: DWORD,
 rgpRecipientEncryptedKeys: PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO.Δ
});

var CMSG_MAIL_LIST_RECIPIENT_INFO = new StructT('CMSG_MAIL_LIST_RECIPIENT_INFO', {
 dwVersion: DWORD,
 KeyId: CRYPT_DATA_BLOB,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB,
 Date: FILETIME,
 pOtherAttr: PCRYPT_ATTRIBUTE_TYPE_VALUE
});

var CMSG_CMS_RECIPIENT_INFO = new StructT('CMSG_CMS_RECIPIENT_INFO', {
 dwRecipientChoice: DWORD
});

var CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA = new StructT('CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 dwSignerIndex: DWORD,
 dwSignerType: DWORD,
 pvSigner: _void.Δ
});

var CMSG_CTRL_DECRYPT_PARA = new StructT('CMSG_CTRL_DECRYPT_PARA', {
 cbSize: DWORD,
 dwKeySpec: DWORD,
 dwRecipientIndex: DWORD
});

var CMSG_CTRL_KEY_TRANS_DECRYPT_PARA = new StructT('CMSG_CTRL_KEY_TRANS_DECRYPT_PARA', {
 cbSize: DWORD,
 dwKeySpec: DWORD,
 pKeyTrans: PCMSG_KEY_TRANS_RECIPIENT_INFO,
 dwRecipientIndex: DWORD
});

var CMSG_CTRL_KEY_AGREE_DECRYPT_PARA = new StructT('CMSG_CTRL_KEY_AGREE_DECRYPT_PARA', {
 cbSize: DWORD,
 dwKeySpec: DWORD,
 pKeyAgree: PCMSG_KEY_AGREE_RECIPIENT_INFO,
 dwRecipientIndex: DWORD,
 dwRecipientEncryptedKeyIndex: DWORD,
 OriginatorPublicKey: CRYPT_BIT_BLOB
});

var CMSG_CTRL_MAIL_LIST_DECRYPT_PARA = new StructT('CMSG_CTRL_MAIL_LIST_DECRYPT_PARA', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV,
 pMailList: PCMSG_MAIL_LIST_RECIPIENT_INFO,
 dwRecipientIndex: DWORD,
 dwKeyChoice: DWORD
});

var CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA = new StructT('CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA', {
 cbSize: DWORD,
 dwSignerIndex: DWORD,
 blob: CRYPT_DATA_BLOB
});

var CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA = new StructT('CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA', {
 cbSize: DWORD,
 dwSignerIndex: DWORD,
 dwUnauthAttrIndex: DWORD
});

var CMSG_CONTENT_ENCRYPT_INFO = new StructT('CMSG_CONTENT_ENCRYPT_INFO', {
 cbSize: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: _void.Δ,
 cRecipients: DWORD,
 rgCmsRecipients: PCMSG_RECIPIENT_ENCODE_INFO,
 pfnAlloc: PFN_CMSG_ALLOC,
 pfnFree: PFN_CMSG_FREE,
 dwEncryptFlags: DWORD,
 dwFlags: DWORD,
 fCNG: BOOL,
 pbCNGContentEncryptKeyObject: BYTE.Δ,
 pbContentEncryptKey: BYTE.Δ,
 cbContentEncryptKey: DWORD
});

var CMSG_KEY_TRANS_ENCRYPT_INFO = new StructT('CMSG_KEY_TRANS_ENCRYPT_INFO', {
 cbSize: DWORD,
 dwRecipientIndex: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB,
 dwFlags: DWORD
});

var CMSG_KEY_AGREE_KEY_ENCRYPT_INFO = new StructT('CMSG_KEY_AGREE_KEY_ENCRYPT_INFO', {
 cbSize: DWORD,
 EncryptedKey: CRYPT_DATA_BLOB
});

var CMSG_KEY_AGREE_ENCRYPT_INFO = new StructT('CMSG_KEY_AGREE_ENCRYPT_INFO', {
 cbSize: DWORD,
 dwRecipientIndex: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 UserKeyingMaterial: CRYPT_DATA_BLOB,
 dwOriginatorChoice: DWORD,
 cKeyAgreeKeyEncryptInfo: DWORD,
 rgpKeyAgreeKeyEncryptInfo: PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO.Δ,
 dwFlags: DWORD
});

var CMSG_MAIL_LIST_ENCRYPT_INFO = new StructT('CMSG_MAIL_LIST_ENCRYPT_INFO', {
 cbSize: DWORD,
 dwRecipientIndex: DWORD,
 KeyEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 EncryptedKey: CRYPT_DATA_BLOB,
 dwFlags: DWORD
});

var CMSG_CNG_CONTENT_DECRYPT_INFO = new StructT('CMSG_CNG_CONTENT_DECRYPT_INFO', {
 cbSize: DWORD,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pfnAlloc: PFN_CMSG_ALLOC,
 pfnFree: PFN_CMSG_FREE,
 hNCryptKey: NCRYPT_KEY_HANDLE,
 pbContentEncryptKey: BYTE.Δ,
 cbContentEncryptKey: DWORD,
 hCNGContentEncryptKey: BCRYPT_KEY_HANDLE,
 pbCNGContentEncryptKeyObject: BYTE.Δ
});

var CERT_CONTEXT = new StructT('CERT_CONTEXT', {
 dwCertEncodingType: DWORD,
 pbCertEncoded: BYTE.Δ,
 cbCertEncoded: DWORD,
 pCertInfo: PCERT_INFO,
 hCertStore: HCERTSTORE
});

var CRL_CONTEXT = new StructT('CRL_CONTEXT', {
 dwCertEncodingType: DWORD,
 pbCrlEncoded: BYTE.Δ,
 cbCrlEncoded: DWORD,
 pCrlInfo: PCRL_INFO,
 hCertStore: HCERTSTORE
});

var CTL_CONTEXT = new StructT('CTL_CONTEXT', {
 dwMsgAndCertEncodingType: DWORD,
 pbCtlEncoded: BYTE.Δ,
 cbCtlEncoded: DWORD,
 pCtlInfo: PCTL_INFO,
 hCertStore: HCERTSTORE,
 hCryptMsg: HCRYPTMSG,
 pbCtlContent: BYTE.Δ,
 cbCtlContent: DWORD
});

var CRYPT_KEY_PROV_PARAM = new StructT('CRYPT_KEY_PROV_PARAM', {
 dwParam: DWORD,
 pbData: BYTE.Δ,
 cbData: DWORD,
 dwFlags: DWORD
});

var CRYPT_KEY_PROV_INFO = new StructT('CRYPT_KEY_PROV_INFO', {
 pwszContainerName: LPWSTR,
 pwszProvName: LPWSTR,
 dwProvType: DWORD,
 dwFlags: DWORD,
 cProvParam: DWORD,
 rgProvParam: PCRYPT_KEY_PROV_PARAM,
 dwKeySpec: DWORD
});

var CERT_KEY_CONTEXT = new StructT('CERT_KEY_CONTEXT', {
 cbSize: DWORD,
 dwKeySpec: DWORD
});

var ROOT_INFO_LUID = new StructT('ROOT_INFO_LUID', {
 LowPart: DWORD,
 HighPart: LONG
});

var CRYPT_SMART_CARD_ROOT_INFO = new StructT('CRYPT_SMART_CARD_ROOT_INFO', {
 rgbCardID: new ArrayT(BYTE, 16),
 luid: ROOT_INFO_LUID
});


var CERT_REGISTRY_STORE_CLIENT_GPT_PARA = new StructT('CERT_REGISTRY_STORE_CLIENT_GPT_PARA', {
 hKeyBase: HKEY,
 pwszRegPath: LPWSTR
});

var CERT_REGISTRY_STORE_ROAMING_PARA = new StructT('CERT_REGISTRY_STORE_ROAMING_PARA', {
 hKey: HKEY,
 pwszStoreDirectory: LPWSTR
});

var CERT_LDAP_STORE_OPENED_PARA = new StructT('CERT_LDAP_STORE_OPENED_PARA', {
 pvLdapSessionHandle: _void.Δ,
 pwszLdapUrl: LPCWSTR
});

var CERT_STORE_PROV_INFO = new StructT('CERT_STORE_PROV_INFO', {
 cbSize: DWORD,
 cStoreProvFunc: DWORD,
 rgpvStoreProvFunc: _void.Δ.Δ,
 hStoreProv: HCERTSTOREPROV,
 dwStoreProvFlags: DWORD,
 hStoreProvFuncAddr2: HCRYPTOIDFUNCADDR
});

var CCERT_STORE_PROV_FIND_INFO = new StructT('CCERT_STORE_PROV_FIND_INFO', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 dwFindFlags: DWORD,
 dwFindType: DWORD,
 pvFindPara: _void.Δ
});

var CRL_FIND_ISSUED_FOR_PARA = new StructT('CRL_FIND_ISSUED_FOR_PARA', {
 pSubjectCert: PCCERT_CONTEXT,
 pIssuerCert: PCCERT_CONTEXT
});

var CTL_ANY_SUBJECT_INFO = new StructT('CTL_ANY_SUBJECT_INFO', {
 SubjectAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 SubjectIdentifier: CRYPT_DATA_BLOB
});

var CTL_FIND_USAGE_PARA = new StructT('CTL_FIND_USAGE_PARA', {
 cbSize: DWORD,
 SubjectUsage: CTL_USAGE,
 ListIdentifier: CRYPT_DATA_BLOB,
 pSigner: PCERT_INFO
});

var CTL_FIND_SUBJECT_PARA = new StructT('CTL_FIND_SUBJECT_PARA', {
 cbSize: DWORD,
 pUsagePara: PCTL_FIND_USAGE_PARA,
 dwSubjectType: DWORD,
 pvSubject: _void.Δ
});

var CERT_CREATE_CONTEXT_PARA = new StructT('CERT_CREATE_CONTEXT_PARA', {
 cbSize: DWORD,
 pfnFree: PFN_CRYPT_FREE,
 pvFree: _void.Δ,
 pfnSort: PFN_CERT_CREATE_CONTEXT_SORT_FUNC,
 pvSort: _void.Δ
});

var CERT_SYSTEM_STORE_INFO = new StructT('CERT_SYSTEM_STORE_INFO', {
 cbSize: DWORD
});

var CERT_PHYSICAL_STORE_INFO = new StructT('CERT_PHYSICAL_STORE_INFO', {
 cbSize: DWORD,
 pszOpenStoreProvider: LPSTR,
 dwOpenEncodingType: DWORD,
 dwOpenFlags: DWORD,
 OpenParameters: CRYPT_DATA_BLOB,
 dwFlags: DWORD,
 dwPriority: DWORD
});

var CTL_VERIFY_USAGE_PARA = new StructT('CTL_VERIFY_USAGE_PARA', {
 cbSize: DWORD,
 ListIdentifier: CRYPT_DATA_BLOB,
 cCtlStore: DWORD,
 rghCtlStore: HCERTSTORE.Δ,
 cSignerStore: DWORD,
 rghSignerStore: HCERTSTORE.Δ
});

var CTL_VERIFY_USAGE_STATUS = new StructT('CTL_VERIFY_USAGE_STATUS', {
 cbSize: DWORD,
 dwError: DWORD,
 dwFlags: DWORD,
 ppCtl: PCCTL_CONTEXT.Δ,
 dwCtlEntryIndex: DWORD,
 ppSigner: PCCERT_CONTEXT.Δ,
 dwSignerIndex: DWORD
});

var CERT_REVOCATION_CRL_INFO = new StructT('CERT_REVOCATION_CRL_INFO', {
 cbSize: DWORD,
 pBaseCrlContext: PCCRL_CONTEXT,
 pDeltaCrlContext: PCCRL_CONTEXT,
 pCrlEntry: PCRL_ENTRY,
 fDeltaCrlEntry: BOOL
});

var _CERT_REVOCATION_CHAIN_PARA = new StructT('_CERT_REVOCATION_CHAIN_PARA', {
 cbSize: DWORD,
 hChainEngine: HCERTCHAINENGINE,
 hAdditionalStore: HCERTSTORE,
 dwChainFlags: DWORD,
 dwUrlRetrievalTimeout: DWORD,
 pftCurrentTime: LPFILETIME,
 pftCacheResync: LPFILETIME,
 cbMaxUrlRetrievalByteCount: DWORD
});

var CERT_REVOCATION_PARA = new StructT('CERT_REVOCATION_PARA', {
 cbSize: DWORD,
 pIssuerCert: PCCERT_CONTEXT,
 cCertStore: DWORD,
 rgCertStore: HCERTSTORE.Δ,
 hCrlStore: HCERTSTORE,
 pftTimeToUse: LPFILETIME
});

var CERT_REVOCATION_STATUS = new StructT('CERT_REVOCATION_STATUS', {
 cbSize: DWORD,
 dwIndex: DWORD,
 dwError: DWORD,
 dwReason: DWORD,
 fHasFreshnessTime: BOOL,
 dwFreshnessTime: DWORD
});

var CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA = new StructT('CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA', {
 cOID: DWORD,
 rgpszOID: LPSTR.Δ
});

var CRYPT_SIGN_MESSAGE_PARA = new StructT('CRYPT_SIGN_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 pSigningCert: PCCERT_CONTEXT,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: _void.Δ,
 cMsgCert: DWORD,
 rgpMsgCert: PCCERT_CONTEXT.Δ,
 cMsgCrl: DWORD,
 rgpMsgCrl: PCCRL_CONTEXT.Δ,
 cAuthAttr: DWORD,
 rgAuthAttr: PCRYPT_ATTRIBUTE,
 cUnauthAttr: DWORD,
 rgUnauthAttr: PCRYPT_ATTRIBUTE,
 dwFlags: DWORD,
 dwInnerContentType: DWORD
});

var CRYPT_VERIFY_MESSAGE_PARA = new StructT('CRYPT_VERIFY_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 pfnGetSignerCertificate: PFN_CRYPT_GET_SIGNER_CERTIFICATE,
 pvGetArg: _void.Δ
});

var CRYPT_ENCRYPT_MESSAGE_PARA = new StructT('CRYPT_ENCRYPT_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 ContentEncryptionAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvEncryptionAuxInfo: _void.Δ,
 dwFlags: DWORD,
 dwInnerContentType: DWORD
});

var CRYPT_DECRYPT_MESSAGE_PARA = new StructT('CRYPT_DECRYPT_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 cCertStore: DWORD,
 rghCertStore: HCERTSTORE.Δ
});

var CRYPT_HASH_MESSAGE_PARA = new StructT('CRYPT_HASH_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: _void.Δ
});

var CRYPT_KEY_SIGN_MESSAGE_PARA = new StructT('CRYPT_KEY_SIGN_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgAndCertEncodingType: DWORD,
 dwKeySpec: DWORD,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 pvHashAuxInfo: _void.Δ,
 PubKeyAlgorithm: CRYPT_ALGORITHM_IDENTIFIER
});

var CRYPT_KEY_VERIFY_MESSAGE_PARA = new StructT('CRYPT_KEY_VERIFY_MESSAGE_PARA', {
 cbSize: DWORD,
 dwMsgEncodingType: DWORD,
 hCryptProv: HCRYPTPROV_LEGACY
});

var CERT_CHAIN = new StructT('CERT_CHAIN', {
 cCerts: DWORD,
 certs: PCERT_BLOB,
 keyLocatorInfo: CRYPT_KEY_PROV_INFO
});

var CRYPT_BLOB_new ArrayT = new StructT('CRYPT_BLOB_new ArrayT', {
 cBlob: DWORD,
 rgBlob: PCRYPT_DATA_BLOB
});

var CRYPT_CREDENTIALS = new StructT('CRYPT_CREDENTIALS', {
 cbSize: DWORD,
 pszCredentialsOid: LPCSTR,
 pvCredentials: LPVOID
});

var CRYPT_PASSWORD_CREDENTIALS = new StructT('CRYPT_PASSWORD_CREDENTIALS', {
 cbSize: DWORD,
 pszUsername: LPSTR,
 pszPassword: LPSTR
});

var CRYPT_PASSWORD_CREDENTIALSW = new StructT('CRYPT_PASSWORD_CREDENTIALSW', {
 cbSize: DWORD,
 pszUsername: LPWSTR,
 pszPassword: LPWSTR
});

var CRYPTNET_URL_CACHE_PRE_FETCH_INFO = new StructT('CRYPTNET_URL_CACHE_PRE_FETCH_INFO', {
 cbSize: DWORD,
 dwObjectType: DWORD,
 dwError: DWORD,
 dwReserved: DWORD,
 ThisUpdateTime: FILETIME,
 NextUpdateTime: FILETIME,
 PublishTime: FILETIME
});

var CRYPTNET_URL_CACHE_FLUSH_INFO = new StructT('CRYPTNET_URL_CACHE_FLUSH_INFO', {
 cbSize: DWORD,
 dwExemptSeconds: DWORD,
 ExpireTime: FILETIME
});

var CRYPTNET_URL_CACHE_RESPONSE_INFO = new StructT('CRYPTNET_URL_CACHE_RESPONSE_INFO', {
 cbSize: DWORD,
 wResponseType: WORD,
 wResponseFlags: WORD,
 LastModifiedTime: FILETIME,
 dwMaxAge: DWORD,
 pwszETag: LPCWSTR,
 dwProxyId: DWORD
});

var CRYPT_RETRIEVE_AUX_INFO = new StructT('CRYPT_RETRIEVE_AUX_INFO', {
 cbSize: DWORD,
 pLastSyncTime: FILETIME.Δ,
 dwMaxUrlRetrievalByteCount: DWORD,
 pPreFetchInfo: PCRYPTNET_URL_CACHE_PRE_FETCH_INFO,
 pFlushInfo: PCRYPTNET_URL_CACHE_FLUSH_INFO,
 ppResponseInfo: PCRYPTNET_URL_CACHE_RESPONSE_INFO.Δ,
 pwszCacheFileNamePrefix: LPWSTR,
 pftCacheResync: LPFILETIME,
 fProxyCacheRetrieval: BOOL,
 dwHttpStatusCode: DWORD
});

var CRYPT_ASYNC_RETRIEVAL_COMPLETION = new StructT('CRYPT_ASYNC_RETRIEVAL_COMPLETION', {
 pfnCompletion: PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC,
 pvCompletion: LPVOID
});

var CRYPT_URL_new ArrayT = new StructT('CRYPT_URL_new ArrayT', {
 cUrl: DWORD,
 rgwszUrl: LPWSTR.Δ
});

var CRYPT_URL_INFO = new StructT('CRYPT_URL_INFO', {
 cbSize: DWORD,
 dwSyncDeltaTime: DWORD,
 cGroup: DWORD,
 rgcGroupEntry: DWORD.Δ
});

var CERT_CRL_CONTEXT_PAIR = new StructT('CERT_CRL_CONTEXT_PAIR', {
 pCertContext: PCCERT_CONTEXT,
 pCrlContext: PCCRL_CONTEXT
});

var CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO = new StructT('CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO', {
 cbSize: DWORD,
 iDeltaCrlIndicator: int,
 pftCacheResync: LPFILETIME,
 pLastSyncTime: LPFILETIME,
 pMaxAgeTime: LPFILETIME,
 pChainPara: PCERT_REVOCATION_CHAIN_PARA,
 pDeltaCrlIndicator: PCRYPT_INTEGER_BLOB
});

var CRYPTPROTECT_PROMPTSTRUCT = new StructT('CRYPTPROTECT_PROMPTSTRUCT', {
 cbSize: DWORD,
 dwPromptFlags: DWORD,
 hwndApp: HWND,
 szPrompt: LPCWSTR
});

var CERT_CHAIN_ENGINE_CONFIG = new StructT('CERT_CHAIN_ENGINE_CONFIG', {
 cbSize: DWORD,
 hRestrictedRoot: HCERTSTORE,
 hRestrictedTrust: HCERTSTORE,
 hRestrictedOther: HCERTSTORE,
 cAdditionalStore: DWORD,
 rghAdditionalStore: HCERTSTORE.Δ,
 dwFlags: DWORD,
 dwUrlRetrievalTimeout: DWORD,
 MaximumCachedCertificates: DWORD,
 CycleDetectionModulus: DWORD,
 hExclusiveRoot: HCERTSTORE,
 hExclusiveTrustedPeople: HCERTSTORE
});

var CERT_TRUST_STATUS = new StructT('CERT_TRUST_STATUS', {
 dwErrorStatus: DWORD,
 dwInfoStatus: DWORD
});

var CERT_REVOCATION_INFO = new StructT('CERT_REVOCATION_INFO', {
 cbSize: DWORD,
 dwRevocationResult: DWORD,
 pszRevocationOid: LPCSTR,
 pvOidSpecificInfo: LPVOID,
 fHasFreshnessTime: BOOL,
 dwFreshnessTime: DWORD,
 pCrlInfo: PCERT_REVOCATION_CRL_INFO
});

var CERT_TRUST_LIST_INFO = new StructT('CERT_TRUST_LIST_INFO', {
 cbSize: DWORD,
 pCtlEntry: PCTL_ENTRY,
 pCtlContext: PCCTL_CONTEXT
});

var CERT_CHAIN_ELEMENT = new StructT('CERT_CHAIN_ELEMENT', {
 cbSize: DWORD,
 pCertContext: PCCERT_CONTEXT,
 TrustStatus: CERT_TRUST_STATUS,
 pRevocationInfo: PCERT_REVOCATION_INFO,
 pIssuanceUsage: PCERT_ENHKEY_USAGE,
 pApplicationUsage: PCERT_ENHKEY_USAGE,
 pwszExtendedErrorInfo: LPCWSTR
});

var CERT_SIMPLE_CHAIN = new StructT('CERT_SIMPLE_CHAIN', {
 cbSize: DWORD,
 TrustStatus: CERT_TRUST_STATUS,
 cElement: DWORD,
 rgpElement: PCERT_CHAIN_ELEMENT.Δ,
 pTrustListInfo: PCERT_TRUST_LIST_INFO,
 fHasRevocationFreshnessTime: BOOL,
 dwRevocationFreshnessTime: DWORD
});

var _CERT_CHAIN_CONTEXT = new StructT('_CERT_CHAIN_CONTEXT', {
 cbSize: DWORD,
 TrustStatus: CERT_TRUST_STATUS,
 cChain: DWORD,
 rgpChain: PCERT_SIMPLE_CHAIN.Δ,
 cLowerQualityChainContext: DWORD,
 rgpLowerQualityChainContext: PCCERT_CHAIN_CONTEXT.Δ,
 fHasRevocationFreshnessTime: BOOL,
 dwRevocationFreshnessTime: DWORD,
 dwCreateFlags: DWORD,
 ChainId: GUID
});

var CERT_USAGE_MATCH = new StructT('CERT_USAGE_MATCH', {
 dwType: DWORD,
 Usage: CERT_ENHKEY_USAGE
});

var CTL_USAGE_MATCH = new StructT('CTL_USAGE_MATCH', {
 dwType: DWORD,
 Usage: CTL_USAGE
});

var CERT_CHAIN_PARA = new StructT('CERT_CHAIN_PARA', {
 cbSize: DWORD,
 RequestedUsage: CERT_USAGE_MATCH
});

var CRL_REVOCATION_INFO = new StructT('CRL_REVOCATION_INFO', {
 pCrlEntry: PCRL_ENTRY,
 pCrlContext: PCCRL_CONTEXT,
 pCrlIssuerChain: PCCERT_CHAIN_CONTEXT
});

var CERT_CHAIN_FIND_BY_ISSUER_PARA = new StructT('CERT_CHAIN_FIND_BY_ISSUER_PARA', {
 cbSize: DWORD,
 pszUsageIdentifier: LPCSTR,
 dwKeySpec: DWORD,
 dwAcquirePrivateKeyFlags: DWORD,
 cIssuer: DWORD,
 rgIssuer: CERT_NAME_BLOB.Δ,
 pfnFindCallback: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK,
 pvFindArg: _void.Δ
});

var CERT_CHAIN_POLICY_PARA = new StructT('CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwFlags: DWORD,
 pvExtraPolicyPara: _void.Δ
});

var CERT_CHAIN_POLICY_STATUS = new StructT('CERT_CHAIN_POLICY_STATUS', {
 cbSize: DWORD,
 dwError: DWORD,
 lChainIndex: LONG,
 lElementIndex: LONG,
 pvExtraPolicyStatus: _void.Δ
});

var AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA = new StructT('AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwRegPolicySettings: DWORD,
 pSignerInfo: PCMSG_SIGNER_INFO
});

var AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS = new StructT('AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS', {
 cbSize: DWORD,
 fCommercial: BOOL
});

var AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA = new StructT('AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwRegPolicySettings: DWORD,
 fCommercial: BOOL
});

var SSL_EXTRA_CERT_CHAIN_POLICY_PARA = new StructT('SSL_EXTRA_CERT_CHAIN_POLICY_PARA', {
 dwAuthType: DWORD,
 fdwChecks: DWORD,
 pwszServerName: WCHAR.Δ
});

var EV_EXTRA_CERT_CHAIN_POLICY_PARA = new StructT('EV_EXTRA_CERT_CHAIN_POLICY_PARA', {
 cbSize: DWORD,
 dwRootProgramQualifierFlags: DWORD
});

var EV_EXTRA_CERT_CHAIN_POLICY_STATUS = new StructT('EV_EXTRA_CERT_CHAIN_POLICY_STATUS', {
 cbSize: DWORD,
 dwQualifiers: DWORD,
 dwIssuanceUsageIndex: DWORD
});

var CRYPT_PKCS12_PBE_PARAMS = new StructT('CRYPT_PKCS12_PBE_PARAMS', {
 iIterations: int,
 cbSalt: ULONG
});

var _CERT_SERVER_OCSP_RESPONSE_CONTEXT = new StructT('_CERT_SERVER_OCSP_RESPONSE_CONTEXT', {
 cbSize: DWORD,
 pbEncodedOcspResponse: BYTE.Δ,
 cbEncodedOcspResponse: DWORD
});

var CERT_SELECT_CHAIN_PARA = new StructT('CERT_SELECT_CHAIN_PARA', {
 hChainEngine: HCERTCHAINENGINE,
 pTime: PFILETIME,
 hAdditionalStore: HCERTSTORE,
 pChainPara: PCERT_CHAIN_PARA,
 dwFlags: DWORD
});

var CERT_SELECT_CRITERIA = new StructT('CERT_SELECT_CRITERIA', {
 dwType: DWORD,
 cPara: DWORD,
 ppPara: _void.Δ.Δ
});

var CRYPT_TIMESTAMP_REQUEST = new StructT('CRYPT_TIMESTAMP_REQUEST', {
 dwVersion: DWORD,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashedMessage: CRYPT_DER_BLOB,
 pszTSAPolicyId: LPSTR,
 Nonce: CRYPT_INTEGER_BLOB,
 fCertReq: BOOL,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CRYPT_TIMESTAMP_RESPONSE = new StructT('CRYPT_TIMESTAMP_RESPONSE', {
 dwStatus: DWORD,
 cFreeText: DWORD,
 rgFreeText: LPWSTR.Δ,
 FailureInfo: CRYPT_BIT_BLOB,
 ContentInfo: CRYPT_DER_BLOB
});

var CRYPT_TIMESTAMP_ACCURACY = new StructT('CRYPT_TIMESTAMP_ACCURACY', {
 dwSeconds: DWORD,
 dwMillis: DWORD,
 dwMicros: DWORD
});

var CRYPT_TIMESTAMP_INFO = new StructT('CRYPT_TIMESTAMP_INFO', {
 dwVersion: DWORD,
 pszTSAPolicyId: LPSTR,
 HashAlgorithm: CRYPT_ALGORITHM_IDENTIFIER,
 HashedMessage: CRYPT_DER_BLOB,
 SerialNumber: CRYPT_INTEGER_BLOB,
 ftTime: FILETIME,
 pvAccuracy: PCRYPT_TIMESTAMP_ACCURACY,
 fOrdering: BOOL,
 Nonce: CRYPT_DER_BLOB,
 Tsa: CRYPT_DER_BLOB,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var CRYPT_TIMESTAMP_CONTEXT = new StructT('CRYPT_TIMESTAMP_CONTEXT', {
 cbEncoded: DWORD,
 pbEncoded: BYTE.Δ,
 pTimeStamp: PCRYPT_TIMESTAMP_INFO
});

var CRYPT_TIMESTAMP_PARA = new StructT('CRYPT_TIMESTAMP_PARA', {
 pszTSAPolicyId: LPCSTR,
 fRequestCerts: BOOL,
 Nonce: CRYPT_INTEGER_BLOB,
 cExtension: DWORD,
 rgExtension: PCERT_EXTENSION
});

var EFS_CERTIFICATE_BLOB = new StructT('EFS_CERTIFICATE_BLOB', {
 dwCertEncodingType: DWORD,
 cbData: DWORD,
 pbData: PBYTE
});

var EFS_HASH_BLOB = new StructT('EFS_HASH_BLOB', {
 cbData: DWORD,
 pbData: PBYTE
});

var EFS_RPC_BLOB = new StructT('EFS_RPC_BLOB', {
 cbData: DWORD,
 pbData: PBYTE
});

var EFS_PIN_BLOB = new StructT('EFS_PIN_BLOB', {
 cbPadding: DWORD,
 cbData: DWORD,
 pbData: PBYTE
});

var EFS_KEY_INFO = new StructT('EFS_KEY_INFO', {
 dwVersion: DWORD,
 Entropy: ULONG,
 Algorithm: ALG_ID,
 KeyLength: ULONG
});

var EFS_COMPATIBILITY_INFO = new StructT('EFS_COMPATIBILITY_INFO', {
 EfsVersion: DWORD
});

var EFS_DECRYPTION_STATUS_INFO = new StructT('EFS_DECRYPTION_STATUS_INFO', {
 dwDecryptionError: DWORD,
 dwHashOffset: DWORD,
 cbHash: DWORD
});

var EFS_ENCRYPTION_STATUS_INFO = new StructT('EFS_ENCRYPTION_STATUS_INFO', {
 bHasCurrentKey: BOOL,
 dwEncryptionError: DWORD
});

var ENCRYPTION_CERTIFICATE = new StructT('ENCRYPTION_CERTIFICATE', {
 cbTotalLength: DWORD,
 pUserSid: SID.Δ,
 pCertBlob: PEFS_CERTIFICATE_BLOB
});

var ENCRYPTION_CERTIFICATE_HASH = new StructT('ENCRYPTION_CERTIFICATE_HASH', {
 cbTotalLength: DWORD,
 pUserSid: SID.Δ,
 pHash: PEFS_HASH_BLOB,
 lpDisplayInformation: LPWSTR
});

var ENCRYPTION_CERTIFICATE_HASH_LIST = new StructT('ENCRYPTION_CERTIFICATE_HASH_LIST', {
 nCert_Hash: DWORD,
 pUsers: PENCRYPTION_CERTIFICATE_HASH.Δ
});

var ENCRYPTION_CERTIFICATE_LIST = new StructT('ENCRYPTION_CERTIFICATE_LIST', {
 nUsers: DWORD,
 pUsers: PENCRYPTION_CERTIFICATE.Δ
});

var ENCRYPTED_FILE_METADATA_SIGNATURE = new StructT('ENCRYPTED_FILE_METADATA_SIGNATURE', {
 dwEfsAccessType: DWORD,
 pCertificatesAdded: PENCRYPTION_CERTIFICATE_HASH_LIST,
 pEncryptionCertificate: PENCRYPTION_CERTIFICATE,
 pEfsStreamSignature: PEFS_RPC_BLOB
});

var RPC_IMPORT_CONTEXT_P = new StructT('RPC_IMPORT_CONTEXT_P', {
 LookupContext: RPC_NS_HANDLE,
 ProposedHandle: RPC_BINDING_HANDLE,
 Bindings: RPC_BINDING_VECTOR.Δ
});

var undefined = new StructT('undefined', {
 pad: new ArrayT(undefined, 2),
 userContext: _void.Δ
});

var SCONTEXT_QUEUE = new StructT('SCONTEXT_QUEUE', {
 NumberOfObjects: ulong,
 ArrayOfObjects: NDR_SCONTEXT.Δ
});

var MIDL_STUB_MESSAGE = new StructT('MIDL_STUB_MESSAGE', {
 RpcMsg: PRPC_MESSAGE,
 Buffer: uchar.Δ,
 BufferStart: uchar.Δ,
 BufferEnd: uchar.Δ,
 BufferMark: uchar.Δ,
 BufferLength: ulong,
 MemorySize: ulong,
 Memory: uchar.Δ,
 IsClient: uchar,
 Pad: uchar,
 uFlags2: ushort,
 ReuseBuffer: int,
 pAllocAllNodesContext: NDR_ALLOC_ALL_NODES_CONTEXT.Δ,
 pPointerQueueState: NDR_POINTER_QUEUE_STATE.Δ,
 IgnoreEmbeddedPointers: int,
 PointerBufferMark: uchar.Δ,
 CorrDespIncrement: uchar,
 uFlags: uchar,
 UniquePtrCount: ushort,
 MaxCount: ULONG_PTR,
 Offset: ulong,
 ActualCount: ulong,
 pfnAllocate: new CallbackT(_void.Δ, [uint]).Δ,
 pfnFree: new CallbackT(_void, [_void.Δ]).Δ,
 StackTop: uchar.Δ,
 pPresentedType: uchar.Δ,
 pTransmitType: uchar.Δ,
 SavedHandle: handle_t,
 StubDesc: _MIDL_STUB_DESC.Δ,
 FullPtrXlatTables: _FULL_PTR_XLAT_TABLES.Δ,
 FullPtrRefId: ulong,
 PointerLength: ulong,
 fInDontFree: int,
 fDontCallFreeInst: int,
 fInOnlyParam: int,
 fHasReturn: int,
 fHasExtensions: int,
 fHasNewCorrDesc: int,
 fIsIn: int,
 fIsOut: int,
 fIsOicf: int,
 fBufferValid: int,
 fHasMemoryValidateCallback: int,
 fInFree: int,
 fNeedMCCP: int,
 fUnused: int,
 fUnused2: int,
 dwDestContext: ulong,
 pvDestContext: _void.Δ,
 SavedContextHandles: NDR_SCONTEXT.Δ,
 ParamNumber: long,
 pRpcChannelBuffer: IRpcChannelBuffer.Δ,
 pArrayInfo: Pnew ArrayT_INFO,
 SizePtrCountArray: ulong.Δ,
 SizePtrOffsetArray: ulong.Δ,
 SizePtrLengthArray: ulong.Δ,
 pArgQueue: _void.Δ,
 dwStubPhase: ulong,
 LowStackMark: _void.Δ,
 pAsyncMsg: PNDR_ASYNC_MESSAGE,
 pCorrInfo: PNDR_CORRELATION_INFO,
 pCorrMemory: uchar.Δ,
 pMemoryList: _void.Δ,
 pCSInfo: INT_PTR,
 ConformanceMark: uchar.Δ,
 VarianceMark: uchar.Δ,
 Unused: INT_PTR,
 pContext: _NDR_PROC_CONTEXT.Δ,
 ContextHandleHash: _void.Δ,
 pUserMarshalList: _void.Δ,
 Reserved51_3: INT_PTR,
 Reserved51_4: INT_PTR,
 Reserved51_5: INT_PTR
});

var MIDL_STUB_DESC = new StructT('MIDL_STUB_DESC', {
 RpcInterfaceInformation: _void.Δ,
 pfnAllocate: new CallbackT(_void.Δ, [uint]).Δ,
 pfnFree: new CallbackT(_void, [_void.Δ]).Δ,
 IMPLICIT_HANDLE_INFO: c:rpcndr.h@30309@S@_MIDL_STUB_DESC@Ua,
 apfnNdrRundownRoutines: NDR_RUNDOWN.Δ,
 aGenericBindingRoutinePairs: GENERIC_BINDING_ROUTINE_PAIR.Δ,
 apfnExprEval: EXPR_EVAL.Δ,
 aXmitQuintuple: XMIT_ROUTINE_QUINTUPLE.Δ,
 pFormatTypes: uchar.Δ,
 fCheckBounds: int,
 Version: ulong,
 pMallocFreeStruct: MALLOC_FREE_STRUCT.Δ,
 MIDLVersion: long,
 CommFaultOffsets: COMM_FAULT_OFFSETS.Δ,
 aUserMarshalQuadruple: USER_MARSHAL_ROUTINE_QUADRUPLE.Δ,
 NotifyRoutineTable: NDR_NOTIFY_ROUTINE.Δ,
 mFlags: ULONG_PTR,
 CsRoutineTables: NDR_CS_ROUTINES.Δ,
 ProxyServerInfo: _void.Δ,
 pExprInfo: NDR_EXPR_DESC.Δ
});

var FULL_PTR_XLAT_TABLES = new StructT('FULL_PTR_XLAT_TABLES', {
 RefIdToPointer: _void.Δ,
 PointerToRefId: _void.Δ,
 NextRefId: ulong,
 XlatSide: XLAT_SIDE
});

var new ArrayT_INFO = new StructT('new ArrayT_INFO', {
 Dimension: long,
 BufferConformanceMark: ulong.Δ,
 BufferVarianceMark: ulong.Δ,
 MaxCountArray: ulong.Δ,
 OffsetArray: ulong.Δ,
 ActualCountArray: ulong.Δ
});



var MIDL_SYNTAX_INFO = new StructT('MIDL_SYNTAX_INFO', {
 TransferSyntax: RPC_SYNTAX_IDENTIFIER,
 DispatchTable: RPC_DISPATCH_TABLE.Δ,
 ProcString: PFORMAT_STRING,
 FmtStringOffset: ushort.Δ,
 TypeString: PFORMAT_STRING,
 aUserMarshalQuadruple: _void.Δ,
 pReserved1: ULONG_PTR,
 pReserved2: ULONG_PTR
});




var IRpcChannelBuffer = new StructT('IRpcChannelBuffer', {
 lpVtbl: IRpcChannelBufferVtbl.Δ
});

var GENERIC_BINDING_ROUTINE_PAIR = new StructT('GENERIC_BINDING_ROUTINE_PAIR', {
 pfnBind: GENERIC_BINDING_ROUTINE,
 pfnUnbind: GENERIC_UNBIND_ROUTINE
});

var GENERIC_BINDING_INFO = new StructT('GENERIC_BINDING_INFO', {
 pObj: _void.Δ,
 Size: uint,
 pfnBind: GENERIC_BINDING_ROUTINE,
 pfnUnbind: GENERIC_UNBIND_ROUTINE
});

var XMIT_ROUTINE_QUINTUPLE = new StructT('XMIT_ROUTINE_QUINTUPLE', {
 pfnTranslateToXmit: XMIT_HELPER_ROUTINE,
 pfnTranslateFromXmit: XMIT_HELPER_ROUTINE,
 pfnFreeXmit: XMIT_HELPER_ROUTINE,
 pfnFreeInst: XMIT_HELPER_ROUTINE
});

var USER_MARSHAL_ROUTINE_QUADRUPLE = new StructT('USER_MARSHAL_ROUTINE_QUADRUPLE', {
 pfnBufferSize: USER_MARSHAL_SIZING_ROUTINE,
 pfnMarshall: USER_MARSHAL_MARSHALLING_ROUTINE,
 pfnUnmarshall: USER_MARSHAL_UNMARSHALLING_ROUTINE,
 pfnFree: USER_MARSHAL_FREEING_ROUTINE
});

var USER_MARSHAL_CB = new StructT('USER_MARSHAL_CB', {
 Flags: ulong,
 pStubMsg: PMIDL_STUB_MESSAGE,
 pReserve: PFORMAT_STRING,
 Signature: ulong,
 CBType: USER_MARSHAL_CB_TYPE,
 pFormat: PFORMAT_STRING,
 pTypeFormat: PFORMAT_STRING
});

var MALLOC_FREE_STRUCT = new StructT('MALLOC_FREE_STRUCT', {
 pfnAllocate: new CallbackT(_void.Δ, [uint]).Δ,
 pfnFree: new CallbackT(_void, [_void.Δ]).Δ
});

var COMM_FAULT_OFFSETS = new StructT('COMM_FAULT_OFFSETS', {
 CommOffset: short,
 FaultOffset: short
});

var NDR_CS_SIZE_CONVERT_ROUTINES = new StructT('NDR_CS_SIZE_CONVERT_ROUTINES', {
 pfnNetSize: CS_TYPE_NET_SIZE_ROUTINE,
 pfnToNetCs: CS_TYPE_TO_NETCS_ROUTINE,
 pfnLocalSize: CS_TYPE_LOCAL_SIZE_ROUTINE,
 pfnFromNetCs: CS_TYPE_FROM_NETCS_ROUTINE
});

var NDR_CS_ROUTINES = new StructT('NDR_CS_ROUTINES', {
 pSizeConvertRoutines: NDR_CS_SIZE_CONVERT_ROUTINES.Δ,
 pTagGettingRoutines: CS_TAG_GETTING_ROUTINE.Δ
});

var NDR_EXPR_DESC = new StructT('NDR_EXPR_DESC', {
 pOffset: ushort.Δ,
 pFormatExpr: PFORMAT_STRING
});

var MIDL_FORMAT_STRING = new StructT('MIDL_FORMAT_STRING', {
 Pad: short,
 Format: UNEXPOSED
});

var MIDL_SERVER_INFO = new StructT('MIDL_SERVER_INFO', {
 pStubDesc: PMIDL_STUB_DESC,
 DispatchTable: SERVER_ROUTINE.Δ,
 ProcString: PFORMAT_STRING,
 FmtStringOffset: ushort.Δ,
 ThunkTable: STUB_THUNK.Δ,
 pTransferSyntax: PRPC_SYNTAX_IDENTIFIER,
 nCount: ULONG_PTR,
 pSyntaxInfo: PMIDL_SYNTAX_INFO
});

var MIDL_STUBLESS_PROXY_INFO = new StructT('MIDL_STUBLESS_PROXY_INFO', {
 pStubDesc: PMIDL_STUB_DESC,
 ProcFormatString: PFORMAT_STRING,
 FormatStringOffset: ushort.Δ,
 pTransferSyntax: PRPC_SYNTAX_IDENTIFIER,
 nCount: ULONG_PTR,
 pSyntaxInfo: PMIDL_SYNTAX_INFO
});

var IRpcStubBuffer = new StructT('IRpcStubBuffer', {
 lpVtbl: IRpcStubBufferVtbl.Δ
});

var NDR_USER_MARSHAL_INFO_LEVEL1 = new StructT('NDR_USER_MARSHAL_INFO_LEVEL1', {
 Buffer: _void.Δ,
 BufferSize: ulong,
 pfnAllocate: new CallbackT(_void.Δ, [uint]).Δ,
 pfnFree: new CallbackT(_void, [_void.Δ]).Δ,
 pRpcChannelBuffer: IRpcChannelBuffer.Δ,
 Reserved: new ArrayT(ULONG_PTR, 5)
});

var NDR_USER_MARSHAL_INFO = new StructT('NDR_USER_MARSHAL_INFO', {
 InformationLevel: ulong
});

var RemHGLOBAL = new StructT('RemHGLOBAL', {
 fNullHGlobal: long,
 cbData: ulong,
 data: new ArrayT(byte,  1 )
});

var RemHMETAFILEPICT = new StructT('RemHMETAFILEPICT', {
 mm: long,
 xExt: long,
 yExt: long,
 cbData: ulong,
 data: new ArrayT(byte,  1 )
});

var RemHENHMETAFILE = new StructT('RemHENHMETAFILE', {
 cbData: ulong,
 data: new ArrayT(byte,  1 )
});

var RemHBITMAP = new StructT('RemHBITMAP', {
 cbData: ulong,
 data: new ArrayT(byte,  1 )
});

var RemHPALETTE = new StructT('RemHPALETTE', {
 cbData: ulong,
 data: new ArrayT(byte,  1 )
});

var RemHBRUSH = new StructT('RemHBRUSH', {
 cbData: ulong,
 data: new ArrayT(byte,  1 )
});

var COAUTHIDENTITY = new StructT('COAUTHIDENTITY', {
 User: USHORT.Δ,
 UserLength: ULONG,
 Domain: USHORT.Δ,
 DomainLength: ULONG,
 Password: USHORT.Δ,
 PasswordLength: ULONG,
 Flags: ULONG
});

var COAUTHINFO = new StructT('COAUTHINFO', {
 dwAuthnSvc: DWORD,
 dwAuthzSvc: DWORD,
 pwszServerPrincName: LPWSTR,
 dwAuthnLevel: DWORD,
 dwImpersonationLevel: DWORD,
 pAuthIdentityData: COAUTHIDENTITY.Δ,
 dwCapabilities: DWORD
});

var BYTE_BLOB = new StructT('BYTE_BLOB', {
 clSize: ulong,
 abData: new ArrayT(byte,  1 )
});

var WORD_BLOB = new StructT('WORD_BLOB', {
 clSize: ulong,
 asData: new ArrayT(undefined,  1 )
});

var DWORD_BLOB = new StructT('DWORD_BLOB', {
 clSize: ulong,
 alData: new ArrayT(undefined,  1 )
});

var FLAGGED_BYTE_BLOB = new StructT('FLAGGED_BYTE_BLOB', {
 fFlags: ulong,
 clSize: ulong,
 abData: new ArrayT(byte,  1 )
});

var FLAGGED_WORD_BLOB = new StructT('FLAGGED_WORD_BLOB', {
 fFlags: ulong,
 clSize: ulong,
 asData: new ArrayT(undefined,  1 )
});

var BYTE_SIZEDARR = new StructT('BYTE_SIZEDARR', {
 clSize: ulong,
 pData: byte.Δ
});

var WORD_SIZEDARR = new StructT('WORD_SIZEDARR', {
 clSize: ulong,
 pData: ushort.Δ
});

var DWORD_SIZEDARR = new StructT('DWORD_SIZEDARR', {
 clSize: ulong,
 pData: ulong.Δ
});

var HYPER_SIZEDARR = new StructT('HYPER_SIZEDARR', {
 clSize: ulong,
 pData: longlong.Δ
});

var userCLIPFORMAT = new StructT('userCLIPFORMAT', {
 fContext: long,
 u: __MIDL_IWinTypes_0001
});

var GDI_NONREMOTE = new StructT('GDI_NONREMOTE', {
 fContext: long,
 u: __MIDL_IWinTypes_0002
});

var userHGLOBAL = new StructT('userHGLOBAL', {
 fContext: long,
 u: __MIDL_IWinTypes_0003
});

var userHMETAFILE = new StructT('userHMETAFILE', {
 fContext: long,
 u: __MIDL_IWinTypes_0004
});

var remoteMETAFILEPICT = new StructT('remoteMETAFILEPICT', {
 mm: long,
 xExt: long,
 yExt: long,
 hMF: userHMETAFILE.Δ
});

var userHMETAFILEPICT = new StructT('userHMETAFILEPICT', {
 fContext: long,
 u: __MIDL_IWinTypes_0005
});

var userHENHMETAFILE = new StructT('userHENHMETAFILE', {
 fContext: long,
 u: __MIDL_IWinTypes_0006
});

var userBITMAP = new StructT('userBITMAP', {
 bmType: LONG,
 bmWidth: LONG,
 bmHeight: LONG,
 bmWidthBytes: LONG,
 bmPlanes: WORD,
 bmBitsPixel: WORD,
 cbSize: ULONG,
 pBuffer: new ArrayT(byte,  1 )
});

var userHBITMAP = new StructT('userHBITMAP', {
 fContext: long,
 u: __MIDL_IWinTypes_0007
});

var userHPALETTE = new StructT('userHPALETTE', {
 fContext: long,
 u: __MIDL_IWinTypes_0008
});

var RemotableHandle = new StructT('RemotableHandle', {
 fContext: long,
 u: __MIDL_IWinTypes_0009
});

var undefined = new StructT('undefined', {
 Lo: ulong,
 Hi: long
});

var DECIMAL = new StructT('DECIMAL', {
 wReserved: USHORT,
 Hi32: ULONG
});

var undefined = new StructT('undefined', {
 scale: BYTE,
 sign: BYTE
});

var undefined = new StructT('undefined', {
 Lo32: ULONG,
 Mid32: ULONG
});

var BSTRBLOB = new StructT('BSTRBLOB', {
 cbSize: ULONG,
 pData: BYTE.Δ
});

var BLOB = new StructT('BLOB', {
 cbSize: ULONG,
 pBlobData: BYTE.Δ
});

var CLIPDATA = new StructT('CLIPDATA', {
 cbSize: ULONG,
 ulClipFmt: long,
 pClipData: BYTE.Δ
});

var PROPERTYKEY = new StructT('PROPERTYKEY', {
 fmtid: GUID,
 pid: DWORD
});

var CSPLATFORM = new StructT('CSPLATFORM', {
 dwPlatformId: DWORD,
 dwVersionHi: DWORD,
 dwVersionLo: DWORD,
 dwProcessorArch: DWORD
});

var QUERYCONTEXT = new StructT('QUERYCONTEXT', {
 dwContext: DWORD,
 Platform: CSPLATFORM,
 Locale: LCID,
 dwVersionHi: DWORD,
 dwVersionLo: DWORD
});

var uCLSSPEC = new StructT('uCLSSPEC', {
 tyspec: DWORD,
 tagged_union: __MIDL___MIDL_itf_wtypes_0000_0001_0005
});

var undefined = new StructT('undefined', {
 pPackageName: LPOLESTR,
 PolicyId: GUID
});

var undefined = new StructT('undefined', {
 ObjectId: GUID,
 PolicyId: GUID
});

var STORAGE_HOTPLUG_INFO = new StructT('STORAGE_HOTPLUG_INFO', {
 Size: DWORD,
 MediaRemovable: BOOLEAN,
 MediaHotplug: BOOLEAN,
 DeviceHotplug: BOOLEAN,
 WriteCacheEnableOverride: BOOLEAN
});

var STORAGE_DEVICE_NUMBER = new StructT('STORAGE_DEVICE_NUMBER', {
 DeviceType: DWORD,
 DeviceNumber: DWORD,
 PartitionNumber: DWORD
});

var STORAGE_BUS_RESET_REQUEST = new StructT('STORAGE_BUS_RESET_REQUEST', {
 PathId: BYTE
});

var STORAGE_BREAK_RESERVATION_REQUEST = new StructT('STORAGE_BREAK_RESERVATION_REQUEST', {
 Length: DWORD,
 _unused: BYTE,
 PathId: BYTE,
 TargetId: BYTE,
 Lun: BYTE
});

var PREVENT_MEDIA_REMOVAL = new StructT('PREVENT_MEDIA_REMOVAL', {
 PreventMediaRemoval: BOOLEAN
});

var CLASS_MEDIA_CHANGE_CONTEXT = new StructT('CLASS_MEDIA_CHANGE_CONTEXT', {
 MediaChangeCount: DWORD,
 NewState: DWORD
});

var TAPE_STATISTICS = new StructT('TAPE_STATISTICS', {
 Version: DWORD,
 Flags: DWORD,
 RecoveredWrites: LARGE_INTEGER,
 UnrecoveredWrites: LARGE_INTEGER,
 RecoveredReads: LARGE_INTEGER,
 UnrecoveredReads: LARGE_INTEGER,
 CompressionRatioReads: BYTE,
 CompressionRatioWrites: BYTE
});

var TAPE_GET_STATISTICS = new StructT('TAPE_GET_STATISTICS', {
 Operation: DWORD
});

var DEVICE_MEDIA_INFO = new StructT('DEVICE_MEDIA_INFO', {
 DeviceSpecific: c:winioctl.h@24730@S@_DEVICE_MEDIA_INFO@Ua
});

var undefined = new StructT('undefined', {
 Cylinders: LARGE_INTEGER,
 MediaType: STORAGE_MEDIA_TYPE,
 TracksPerCylinder: DWORD,
 SectorsPerTrack: DWORD,
 BytesPerSector: DWORD,
 NumberMediaSides: DWORD,
 MediaCharacteristics: DWORD
});

var undefined = new StructT('undefined', {
 Cylinders: LARGE_INTEGER,
 MediaType: STORAGE_MEDIA_TYPE,
 TracksPerCylinder: DWORD,
 SectorsPerTrack: DWORD,
 BytesPerSector: DWORD,
 NumberMediaSides: DWORD,
 MediaCharacteristics: DWORD
});

var undefined = new StructT('undefined', {
 MediaType: STORAGE_MEDIA_TYPE,
 MediaCharacteristics: DWORD,
 CurrentBlockSize: DWORD,
 BusType: STORAGE_BUS_TYPE,
 BusSpecificData: c:winioctl.h@25766@S@_DEVICE_MEDIA_INFO@Ua@Sa@Ua
});

var undefined = new StructT('undefined', {
 MediumType: BYTE,
 DensityCode: BYTE
});

var GET_MEDIA_TYPES = new StructT('GET_MEDIA_TYPES', {
 DeviceType: DWORD,
 MediaInfoCount: DWORD,
 MediaInfo: new ArrayT(DEVICE_MEDIA_INFO, 1)
});

var STORAGE_PREDICT_FAILURE = new StructT('STORAGE_PREDICT_FAILURE', {
 PredictFailure: DWORD,
 VendorSpecific: new ArrayT(BYTE, 512)
});

var STORAGE_PROPERTY_QUERY = new StructT('STORAGE_PROPERTY_QUERY', {
 PropertyId: STORAGE_PROPERTY_ID,
 QueryType: STORAGE_QUERY_TYPE,
 AdditionalParameters: new ArrayT(BYTE, 1)
});

var STORAGE_DESCRIPTOR_HEADER = new StructT('STORAGE_DESCRIPTOR_HEADER', {
 Version: DWORD,
 Size: DWORD
});

var STORAGE_DEVICE_DESCRIPTOR = new StructT('STORAGE_DEVICE_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 DeviceType: BYTE,
 DeviceTypeModifier: BYTE,
 RemovableMedia: BOOLEAN,
 CommandQueueing: BOOLEAN,
 VendorIdOffset: DWORD,
 ProductIdOffset: DWORD,
 ProductRevisionOffset: DWORD,
 SerialNumberOffset: DWORD,
 BusType: STORAGE_BUS_TYPE,
 RawPropertiesLength: DWORD,
 RawDeviceProperties: new ArrayT(BYTE, 1)
});

var STORAGE_ADAPTER_DESCRIPTOR = new StructT('STORAGE_ADAPTER_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 MaximumTransferLength: DWORD,
 MaximumPhysicalPages: DWORD,
 AlignmentMask: DWORD,
 AdapterUsesPio: BOOLEAN,
 AdapterScansDown: BOOLEAN,
 CommandQueueing: BOOLEAN,
 AcceleratedTransfer: BOOLEAN,
 BusType: BYTE,
 BusMajorVersion: WORD,
 BusMinorVersion: WORD
});

var STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR = new StructT('STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 BytesPerCacheLine: DWORD,
 BytesOffsetForCacheAlignment: DWORD,
 BytesPerLogicalSector: DWORD,
 BytesPerPhysicalSector: DWORD,
 BytesOffsetForSectorAlignment: DWORD
});

var STORAGE_MINIPORT_DESCRIPTOR = new StructT('STORAGE_MINIPORT_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 Portdriver: STORAGE_PORT_CODE_SET,
 LUNResetSupported: BOOLEAN,
 TargetResetSupported: BOOLEAN
});

var STORAGE_IDENTIFIER = new StructT('STORAGE_IDENTIFIER', {
 CodeSet: STORAGE_IDENTIFIER_CODE_SET,
 Type: STORAGE_IDENTIFIER_TYPE,
 IdentifierSize: WORD,
 NextOffset: WORD,
 Association: STORAGE_ASSOCIATION_TYPE,
 Identifier: new ArrayT(BYTE, 1)
});

var STORAGE_DEVICE_ID_DESCRIPTOR = new StructT('STORAGE_DEVICE_ID_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 NumberOfIdentifiers: DWORD,
 Identifiers: new ArrayT(BYTE, 1)
});

var DEVICE_SEEK_PENALTY_DESCRIPTOR = new StructT('DEVICE_SEEK_PENALTY_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 IncursSeekPenalty: BOOLEAN
});

var DEVICE_WRITE_AGGREGATION_DESCRIPTOR = new StructT('DEVICE_WRITE_AGGREGATION_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 BenefitsFromWriteAggregation: BOOLEAN
});

var DEVICE_TRIM_DESCRIPTOR = new StructT('DEVICE_TRIM_DESCRIPTOR', {
 Version: DWORD,
 Size: DWORD,
 TrimEnabled: BOOLEAN
});

var DEVICE_DATA_SET_RANGE = new StructT('DEVICE_DATA_SET_RANGE', {
 StartingOffset: LONGLONG,
 LengthInBytes: DWORDLONG
});

var DEVICE_MANAGE_DATA_SET_ATTRIBUTES = new StructT('DEVICE_MANAGE_DATA_SET_ATTRIBUTES', {
 Size: DWORD,
 Action: DEVICE_DATA_MANAGEMENT_SET_ACTION,
 Flags: DWORD,
 ParameterBlockOffset: DWORD,
 ParameterBlockLength: DWORD,
 DataSetRangesOffset: DWORD,
 DataSetRangesLength: DWORD
});

var DEVICE_DSM_NOTIFICATION_PARAMETERS = new StructT('DEVICE_DSM_NOTIFICATION_PARAMETERS', {
 Size: DWORD,
 Flags: DWORD,
 NumFileTypeIDs: DWORD,
 FileTypeID: new ArrayT(GUID, 1)
});

var STORAGE_GET_BC_PROPERTIES_OUTPUT = new StructT('STORAGE_GET_BC_PROPERTIES_OUTPUT', {
 MaximumRequestsPerPeriod: DWORD,
 MinimumPeriod: DWORD,
 MaximumRequestSize: DWORDLONG,
 EstimatedTimePerRequest: DWORD,
 NumOutStandingRequests: DWORD,
 RequestSize: DWORDLONG
});

var STORAGE_ALLOCATE_BC_STREAM_INPUT = new StructT('STORAGE_ALLOCATE_BC_STREAM_INPUT', {
 Version: DWORD,
 RequestsPerPeriod: DWORD,
 Period: DWORD,
 RetryFailures: BOOLEAN,
 Discardable: BOOLEAN,
 Reserved1: new ArrayT(BOOLEAN, 2),
 AccessType: DWORD,
 AccessMode: DWORD
});

var STORAGE_ALLOCATE_BC_STREAM_OUTPUT = new StructT('STORAGE_ALLOCATE_BC_STREAM_OUTPUT', {
 RequestSize: DWORDLONG,
 NumOutStandingRequests: DWORD
});

var STORAGE_PRIORITY_HINT_SUPPORT = new StructT('STORAGE_PRIORITY_HINT_SUPPORT', {
 SupportFlags: DWORD
});

var STORAGE_MEDIA_SERIAL_NUMBER_DATA = new StructT('STORAGE_MEDIA_SERIAL_NUMBER_DATA', {
 Reserved: WORD,
 SerialNumberLength: WORD,
 SerialNumber: new ArrayT(BYTE, 0)
});

var STORAGE_READ_CAPACITY = new StructT('STORAGE_READ_CAPACITY', {
 Version: DWORD,
 Size: DWORD,
 BlockLength: DWORD,
 NumberOfBlocks: LARGE_INTEGER,
 DiskLength: LARGE_INTEGER
});

var STORAGE_WRITE_CACHE_PROPERTY = new StructT('STORAGE_WRITE_CACHE_PROPERTY', {
 Version: DWORD,
 Size: DWORD,
 WriteCacheType: WRITE_CACHE_TYPE,
 WriteCacheEnabled: WRITE_CACHE_ENABLE,
 WriteCacheChangeable: WRITE_CACHE_CHANGE,
 WriteThroughSupported: WRITE_THROUGH,
 FlushCacheSupported: BOOLEAN,
 UserDefinedPowerProtection: BOOLEAN,
 NVCacheEnabled: BOOLEAN
});

var PERSISTENT_RESERVE_COMMAND = new StructT('PERSISTENT_RESERVE_COMMAND', {
 Version: DWORD,
 Size: DWORD
});

var undefined = new StructT('undefined', {
 ServiceAction: BYTE,
 Reserved1: BYTE,
 AllocationLength: WORD
});

var undefined = new StructT('undefined', {
 ServiceAction: BYTE,
 Reserved1: BYTE,
 Type: BYTE,
 Scope: BYTE,
 ParameterList: new ArrayT(BYTE, 0)
});

var FORMAT_PARAMETERS = new StructT('FORMAT_PARAMETERS', {
 MediaType: MEDIA_TYPE,
 StartCylinderNumber: DWORD,
 EndCylinderNumber: DWORD,
 StartHeadNumber: DWORD,
 EndHeadNumber: DWORD
});

var FORMAT_EX_PARAMETERS = new StructT('FORMAT_EX_PARAMETERS', {
 MediaType: MEDIA_TYPE,
 StartCylinderNumber: DWORD,
 EndCylinderNumber: DWORD,
 StartHeadNumber: DWORD,
 EndHeadNumber: DWORD,
 FormatGapLength: WORD,
 SectorsPerTrack: WORD,
 SectorNumber: new ArrayT(WORD, 1)
});

var DISK_GEOMETRY = new StructT('DISK_GEOMETRY', {
 Cylinders: LARGE_INTEGER,
 MediaType: MEDIA_TYPE,
 TracksPerCylinder: DWORD,
 SectorsPerTrack: DWORD,
 BytesPerSector: DWORD
});

var PARTITION_INFORMATION = new StructT('PARTITION_INFORMATION', {
 StartingOffset: LARGE_INTEGER,
 PartitionLength: LARGE_INTEGER,
 HiddenSectors: DWORD,
 PartitionNumber: DWORD,
 PartitionType: BYTE,
 BootIndicator: BOOLEAN,
 RecognizedPartition: BOOLEAN,
 RewritePartition: BOOLEAN
});

var SET_PARTITION_INFORMATION_MBR = new StructT('SET_PARTITION_INFORMATION_MBR', {
 PartitionType: BYTE
});

var DRIVE_LAYOUT_INFORMATION = new StructT('DRIVE_LAYOUT_INFORMATION', {
 PartitionCount: DWORD,
 Signature: DWORD,
 PartitionEntry: new ArrayT(PARTITION_INFORMATION, 1)
});

var VERIFY_INFORMATION = new StructT('VERIFY_INFORMATION', {
 StartingOffset: LARGE_INTEGER,
 Length: DWORD
});

var REASSIGN_BLOCKS = new StructT('REASSIGN_BLOCKS', {
 Reserved: WORD,
 Count: WORD,
 BlockNumber: new ArrayT(DWORD, 1)
});

var REASSIGN_BLOCKS_EX = new StructT('REASSIGN_BLOCKS_EX', {
 Reserved: WORD,
 Count: WORD,
 BlockNumber: new ArrayT(LARGE_INTEGER, 1)
});

var SET_PARTITION_INFORMATION_GPT = new StructT('SET_PARTITION_INFORMATION_GPT', {
 PartitionType: GUID,
 PartitionId: GUID,
 Attributes: DWORD64,
 Name: new ArrayT(WCHAR, 36)
});

var PARTITION_INFORMATION_MBR = new StructT('PARTITION_INFORMATION_MBR', {
 PartitionType: BYTE,
 BootIndicator: BOOLEAN,
 RecognizedPartition: BOOLEAN,
 HiddenSectors: DWORD
});

var SET_PARTITION_INFORMATION_EX = new StructT('SET_PARTITION_INFORMATION_EX', {
 PartitionStyle: PARTITION_STYLE
});

var CREATE_DISK_GPT = new StructT('CREATE_DISK_GPT', {
 DiskId: GUID,
 MaxPartitionCount: DWORD
});

var CREATE_DISK_MBR = new StructT('CREATE_DISK_MBR', {
 Signature: DWORD
});

var CREATE_DISK = new StructT('CREATE_DISK', {
 PartitionStyle: PARTITION_STYLE
});

var GET_LENGTH_INFORMATION = new StructT('GET_LENGTH_INFORMATION', {
 Length: LARGE_INTEGER
});

var PARTITION_INFORMATION_EX = new StructT('PARTITION_INFORMATION_EX', {
 PartitionStyle: PARTITION_STYLE,
 StartingOffset: LARGE_INTEGER,
 PartitionLength: LARGE_INTEGER,
 PartitionNumber: DWORD,
 RewritePartition: BOOLEAN
});

var DRIVE_LAYOUT_INFORMATION_GPT = new StructT('DRIVE_LAYOUT_INFORMATION_GPT', {
 DiskId: GUID,
 StartingUsableOffset: LARGE_INTEGER,
 UsableLength: LARGE_INTEGER,
 MaxPartitionCount: DWORD
});

var DRIVE_LAYOUT_INFORMATION_MBR = new StructT('DRIVE_LAYOUT_INFORMATION_MBR', {
 Signature: DWORD
});

var DRIVE_LAYOUT_INFORMATION_EX = new StructT('DRIVE_LAYOUT_INFORMATION_EX', {
 PartitionStyle: DWORD,
 PartitionCount: DWORD,
 PartitionEntry: new ArrayT(PARTITION_INFORMATION_EX, 1)
});

var DISK_INT13_INFO = new StructT('DISK_INT13_INFO', {
 DriveSelect: WORD,
 MaxCylinders: DWORD,
 SectorsPerTrack: WORD,
 MaxHeads: WORD,
 NumberDrives: WORD
});

var DISK_EX_INT13_INFO = new StructT('DISK_EX_INT13_INFO', {
 ExBufferSize: WORD,
 ExFlags: WORD,
 ExCylinders: DWORD,
 ExHeads: DWORD,
 ExSectorsPerTrack: DWORD,
 ExSectorsPerDrive: DWORD64,
 ExSectorSize: WORD,
 ExReserved: WORD
});

var DISK_DETECTION_INFO = new StructT('DISK_DETECTION_INFO', {
 SizeOfDetectInfo: DWORD,
 DetectionType: DETECTION_TYPE
});

var undefined = new StructT('undefined', {
 Int13: DISK_INT13_INFO,
 ExInt13: DISK_EX_INT13_INFO
});

var DISK_PARTITION_INFO = new StructT('DISK_PARTITION_INFO', {
 SizeOfPartitionInfo: DWORD,
 PartitionStyle: PARTITION_STYLE
});

var undefined = new StructT('undefined', {
 Signature: DWORD,
 CheckSum: DWORD
});

var undefined = new StructT('undefined', {
 DiskId: GUID
});

var DISK_GEOMETRY_EX = new StructT('DISK_GEOMETRY_EX', {
 Geometry: DISK_GEOMETRY,
 DiskSize: LARGE_INTEGER,
 Data: new ArrayT(BYTE, 1)
});

var DISK_CONTROLLER_NUMBER = new StructT('DISK_CONTROLLER_NUMBER', {
 ControllerNumber: DWORD,
 DiskNumber: DWORD
});

var DISK_CACHE_INFORMATION = new StructT('DISK_CACHE_INFORMATION', {
 ParametersSavable: BOOLEAN,
 ReadCacheEnabled: BOOLEAN,
 WriteCacheEnabled: BOOLEAN,
 ReadRetentionPriority: DISK_CACHE_RETENTION_PRIORITY,
 WriteRetentionPriority: DISK_CACHE_RETENTION_PRIORITY,
 DisablePrefetchTransferLength: WORD,
 PrefetchScalar: BOOLEAN
});

var undefined = new StructT('undefined', {
 Minimum: WORD,
 Maximum: WORD,
 MaximumBlocks: WORD
});

var undefined = new StructT('undefined', {
 Minimum: WORD,
 Maximum: WORD
});

var DISK_GROW_PARTITION = new StructT('DISK_GROW_PARTITION', {
 PartitionNumber: DWORD,
 BytesToGrow: LARGE_INTEGER
});

var HISTOGRAM_BUCKET = new StructT('HISTOGRAM_BUCKET', {
 Reads: DWORD,
 Writes: DWORD
});

var DISK_HISTOGRAM = new StructT('DISK_HISTOGRAM', {
 DiskSize: LARGE_INTEGER,
 Start: LARGE_INTEGER,
 End: LARGE_INTEGER,
 Average: LARGE_INTEGER,
 AverageRead: LARGE_INTEGER,
 AverageWrite: LARGE_INTEGER,
 Granularity: DWORD,
 Size: DWORD,
 ReadCount: DWORD,
 WriteCount: DWORD,
 Histogram: PHISTOGRAM_BUCKET
});

var DISK_PERFORMANCE = new StructT('DISK_PERFORMANCE', {
 BytesRead: LARGE_INTEGER,
 BytesWritten: LARGE_INTEGER,
 ReadTime: LARGE_INTEGER,
 WriteTime: LARGE_INTEGER,
 IdleTime: LARGE_INTEGER,
 ReadCount: DWORD,
 WriteCount: DWORD,
 QueueDepth: DWORD,
 SplitCount: DWORD,
 QueryTime: LARGE_INTEGER,
 StorageDeviceNumber: DWORD,
 StorageManagerName: new ArrayT(WCHAR, 8)
});

var DISK_RECORD = new StructT('DISK_RECORD', {
 ByteOffset: LARGE_INTEGER,
 StartTime: LARGE_INTEGER,
 EndTime: LARGE_INTEGER,
 VirtualAddress: PVOID,
 NumberOfBytes: DWORD,
 DeviceNumber: BYTE,
 ReadRequest: BOOLEAN
});

var DISK_LOGGING = new StructT('DISK_LOGGING', {
 Function: BYTE,
 BufferAddress: PVOID,
 BufferSize: DWORD
});

var BIN_RANGE = new StructT('BIN_RANGE', {
 StartValue: LARGE_INTEGER,
 Length: LARGE_INTEGER
});

var PERF_BIN = new StructT('PERF_BIN', {
 NumberOfBins: DWORD,
 TypeOfBin: DWORD,
 BinsRanges: new ArrayT(BIN_RANGE, 1)
});

var BIN_COUNT = new StructT('BIN_COUNT', {
 BinRange: BIN_RANGE,
 BinCount: DWORD
});

var BIN_RESULTS = new StructT('BIN_RESULTS', {
 NumberOfBins: DWORD,
 BinCounts: new ArrayT(BIN_COUNT, 1)
});

var GETVERSIONINPARAMS = new StructT('GETVERSIONINPARAMS', {
 bVersion: BYTE,
 bRevision: BYTE,
 bReserved: BYTE,
 bIDEDeviceMap: BYTE,
 fCapabilities: DWORD,
 dwReserved: new ArrayT(DWORD, 4)
});

var IDEREGS = new StructT('IDEREGS', {
 bFeaturesReg: BYTE,
 bSectorCountReg: BYTE,
 bSectorNumberReg: BYTE,
 bCylLowReg: BYTE,
 bCylHighReg: BYTE,
 bDriveHeadReg: BYTE,
 bCommandReg: BYTE,
 bReserved: BYTE
});

var SENDCMDINPARAMS = new StructT('SENDCMDINPARAMS', {
 cBufferSize: DWORD,
 irDriveRegs: IDEREGS,
 bDriveNumber: BYTE,
 bReserved: new ArrayT(BYTE, 3),
 dwReserved: new ArrayT(DWORD, 4),
 bBuffer: new ArrayT(BYTE, 1)
});

var DRIVERSTATUS = new StructT('DRIVERSTATUS', {
 bDriverError: BYTE,
 bIDEError: BYTE,
 bReserved: new ArrayT(BYTE, 2),
 dwReserved: new ArrayT(DWORD, 2)
});

var SENDCMDOUTPARAMS = new StructT('SENDCMDOUTPARAMS', {
 cBufferSize: DWORD,
 DriverStatus: DRIVERSTATUS,
 bBuffer: new ArrayT(BYTE, 1)
});

var CHANGER_ELEMENT = new StructT('CHANGER_ELEMENT', {
 ElementType: ELEMENT_TYPE,
 ElementAddress: DWORD
});

var CHANGER_ELEMENT_LIST = new StructT('CHANGER_ELEMENT_LIST', {
 Element: CHANGER_ELEMENT,
 NumberOfElements: DWORD
});

var GET_CHANGER_PARAMETERS = new StructT('GET_CHANGER_PARAMETERS', {
 Size: DWORD,
 NumberTransportElements: WORD,
 NumberStorageElements: WORD,
 NumberCleanerSlots: WORD,
 NumberIEElements: WORD,
 NumberDataTransferElements: WORD,
 NumberOfDoors: WORD,
 FirstSlotNumber: WORD,
 FirstDriveNumber: WORD,
 FirstTransportNumber: WORD,
 FirstIEPortNumber: WORD,
 FirstCleanerSlotAddress: WORD,
 MagazineSize: WORD,
 DriveCleanTimeout: DWORD,
 Features0: DWORD,
 Features1: DWORD,
 MoveFromTransport: BYTE,
 MoveFromSlot: BYTE,
 MoveFromIePort: BYTE,
 MoveFromDrive: BYTE,
 ExchangeFromTransport: BYTE,
 ExchangeFromSlot: BYTE,
 ExchangeFromIePort: BYTE,
 ExchangeFromDrive: BYTE,
 LockUnlockCapabilities: BYTE,
 PositionCapabilities: BYTE,
 Reserved1: new ArrayT(BYTE, 2),
 Reserved2: new ArrayT(DWORD, 2)
});

var CHANGER_PRODUCT_DATA = new StructT('CHANGER_PRODUCT_DATA', {
 VendorId: new ArrayT(BYTE, VENDOR_ID_LENGTH),
 ProductId: new ArrayT(BYTE, PRODUCT_ID_LENGTH),
 Revision: new ArrayT(BYTE, REVISION_LENGTH),
 SerialNumber: new ArrayT(BYTE, SERIAL_NUMBER_LENGTH),
 DeviceType: BYTE
});

var CHANGER_SET_ACCESS = new StructT('CHANGER_SET_ACCESS', {
 Element: CHANGER_ELEMENT,
 Control: DWORD
});

var CHANGER_READ_ELEMENT_STATUS = new StructT('CHANGER_READ_ELEMENT_STATUS', {
 ElementList: CHANGER_ELEMENT_LIST,
 VolumeTagInfo: BOOLEAN
});

var CHANGER_ELEMENT_STATUS = new StructT('CHANGER_ELEMENT_STATUS', {
 Element: CHANGER_ELEMENT,
 SrcElementAddress: CHANGER_ELEMENT,
 Flags: DWORD,
 ExceptionCode: DWORD,
 TargetId: BYTE,
 Lun: BYTE,
 Reserved: WORD,
 PrimaryVolumeID: new ArrayT(BYTE, MAX_VOLUME_ID_SIZE),
 AlternateVolumeID: new ArrayT(BYTE, MAX_VOLUME_ID_SIZE)
});

var CHANGER_ELEMENT_STATUS_EX = new StructT('CHANGER_ELEMENT_STATUS_EX', {
 Element: CHANGER_ELEMENT,
 SrcElementAddress: CHANGER_ELEMENT,
 Flags: DWORD,
 ExceptionCode: DWORD,
 TargetId: BYTE,
 Lun: BYTE,
 Reserved: WORD,
 PrimaryVolumeID: new ArrayT(BYTE, MAX_VOLUME_ID_SIZE),
 AlternateVolumeID: new ArrayT(BYTE, MAX_VOLUME_ID_SIZE),
 VendorIdentification: new ArrayT(BYTE, VENDOR_ID_LENGTH),
 ProductIdentification: new ArrayT(BYTE, PRODUCT_ID_LENGTH),
 SerialNumber: new ArrayT(BYTE, SERIAL_NUMBER_LENGTH)
});

var CHANGER_INITIALIZE_ELEMENT_STATUS = new StructT('CHANGER_INITIALIZE_ELEMENT_STATUS', {
 ElementList: CHANGER_ELEMENT_LIST,
 BarCodeScan: BOOLEAN
});

var CHANGER_SET_POSITION = new StructT('CHANGER_SET_POSITION', {
 Transport: CHANGER_ELEMENT,
 Destination: CHANGER_ELEMENT,
 Flip: BOOLEAN
});

var CHANGER_EXCHANGE_MEDIUM = new StructT('CHANGER_EXCHANGE_MEDIUM', {
 Transport: CHANGER_ELEMENT,
 Source: CHANGER_ELEMENT,
 Destination1: CHANGER_ELEMENT,
 Destination2: CHANGER_ELEMENT,
 Flip1: BOOLEAN,
 Flip2: BOOLEAN
});

var CHANGER_MOVE_MEDIUM = new StructT('CHANGER_MOVE_MEDIUM', {
 Transport: CHANGER_ELEMENT,
 Source: CHANGER_ELEMENT,
 Destination: CHANGER_ELEMENT,
 Flip: BOOLEAN
});

var CHANGER_SEND_VOLUME_TAG_INFORMATION = new StructT('CHANGER_SEND_VOLUME_TAG_INFORMATION', {
 StartingElement: CHANGER_ELEMENT,
 ActionCode: DWORD,
 VolumeIDTemplate: new ArrayT(BYTE, MAX_VOLUME_TEMPLATE_SIZE)
});

var READ_ELEMENT_ADDRESS_INFO = new StructT('READ_ELEMENT_ADDRESS_INFO', {
 NumberOfElements: DWORD,
 ElementStatus: new ArrayT(CHANGER_ELEMENT_STATUS, 1)
});

var CSV_NAMESPACE_INFO = new StructT('CSV_NAMESPACE_INFO', {
 Version: DWORD,
 DeviceNumber: DWORD,
 StartingOffset: LARGE_INTEGER,
 SectorSize: DWORD
});

var PATHNAME_BUFFER = new StructT('PATHNAME_BUFFER', {
 PathNameLength: DWORD,
 Name: new ArrayT(WCHAR, 1)
});

var FSCTL_QUERY_FAT_BPB_BUFFER = new StructT('FSCTL_QUERY_FAT_BPB_BUFFER', {
 First0x24BytesOfBootSector: new ArrayT(BYTE, 0x24)
});

var NTFS_VOLUME_DATA_BUFFER = new StructT('NTFS_VOLUME_DATA_BUFFER', {
 VolumeSerialNumber: LARGE_INTEGER,
 NumberSectors: LARGE_INTEGER,
 TotalClusters: LARGE_INTEGER,
 FreeClusters: LARGE_INTEGER,
 TotalReserved: LARGE_INTEGER,
 BytesPerSector: DWORD,
 BytesPerCluster: DWORD,
 BytesPerFileRecordSegment: DWORD,
 ClustersPerFileRecordSegment: DWORD,
 MftValidDataLength: LARGE_INTEGER,
 MftStartLcn: LARGE_INTEGER,
 Mft2StartLcn: LARGE_INTEGER,
 MftZoneStart: LARGE_INTEGER,
 MftZoneEnd: LARGE_INTEGER
});

var NTFS_EXTENDED_VOLUME_DATA = new StructT('NTFS_EXTENDED_VOLUME_DATA', {
 ByteCount: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD
});

var STARTING_LCN_INPUT_BUFFER = new StructT('STARTING_LCN_INPUT_BUFFER', {
 StartingLcn: LARGE_INTEGER
});

var VOLUME_BITMAP_BUFFER = new StructT('VOLUME_BITMAP_BUFFER', {
 StartingLcn: LARGE_INTEGER,
 BitmapSize: LARGE_INTEGER,
 Buffer: new ArrayT(BYTE, 1)
});

var STARTING_VCN_INPUT_BUFFER = new StructT('STARTING_VCN_INPUT_BUFFER', {
 StartingVcn: LARGE_INTEGER
});

var RETRIEVAL_POINTERS_BUFFER = new StructT('RETRIEVAL_POINTERS_BUFFER', {
 ExtentCount: DWORD,
 StartingVcn: LARGE_INTEGER,
 Extents: new ArrayT(undefined, 1)
});

var undefined = new StructT('undefined', {
 NextVcn: LARGE_INTEGER,
 Lcn: LARGE_INTEGER
});

var NTFS_FILE_RECORD_INPUT_BUFFER = new StructT('NTFS_FILE_RECORD_INPUT_BUFFER', {
 FileReferenceNumber: LARGE_INTEGER
});

var NTFS_FILE_RECORD_OUTPUT_BUFFER = new StructT('NTFS_FILE_RECORD_OUTPUT_BUFFER', {
 FileReferenceNumber: LARGE_INTEGER,
 FileRecordLength: DWORD,
 FileRecordBuffer: new ArrayT(BYTE, 1)
});

var MOVE_FILE_DATA = new StructT('MOVE_FILE_DATA', {
 FileHandle: HANDLE,
 StartingVcn: LARGE_INTEGER,
 StartingLcn: LARGE_INTEGER,
 ClusterCount: DWORD
});

var MOVE_FILE_RECORD_DATA = new StructT('MOVE_FILE_RECORD_DATA', {
 FileHandle: HANDLE,
 SourceFileRecord: LARGE_INTEGER,
 TargetFileRecord: LARGE_INTEGER
});

var FIND_BY_SID_DATA = new StructT('FIND_BY_SID_DATA', {
 Restart: DWORD,
 Sid: SID
});

var FIND_BY_SID_OUTPUT = new StructT('FIND_BY_SID_OUTPUT', {
 NextEntryOffset: DWORD,
 FileIndex: DWORD,
 FileNameLength: DWORD,
 FileName: new ArrayT(WCHAR, 1)
});

var MFT_ENUM_DATA = new StructT('MFT_ENUM_DATA', {
 StartFileReferenceNumber: DWORDLONG,
 LowUsn: USN,
 HighUsn: USN
});

var CREATE_USN_JOURNAL_DATA = new StructT('CREATE_USN_JOURNAL_DATA', {
 MaximumSize: DWORDLONG,
 AllocationDelta: DWORDLONG
});

var READ_USN_JOURNAL_DATA = new StructT('READ_USN_JOURNAL_DATA', {
 StartUsn: USN,
 ReasonMask: DWORD,
 ReturnOnlyOnClose: DWORD,
 Timeout: DWORDLONG,
 BytesToWaitFor: DWORDLONG,
 UsnJournalID: DWORDLONG
});

var USN_RECORD = new StructT('USN_RECORD', {
 RecordLength: DWORD,
 MajorVersion: WORD,
 MinorVersion: WORD,
 FileReferenceNumber: DWORDLONG,
 ParentFileReferenceNumber: DWORDLONG,
 Usn: USN,
 TimeStamp: LARGE_INTEGER,
 Reason: DWORD,
 SourceInfo: DWORD,
 SecurityId: DWORD,
 FileAttributes: DWORD,
 FileNameLength: WORD,
 FileNameOffset: WORD,
 FileName: new ArrayT(WCHAR, 1)
});

var USN_JOURNAL_DATA = new StructT('USN_JOURNAL_DATA', {
 UsnJournalID: DWORDLONG,
 FirstUsn: USN,
 NextUsn: USN,
 LowestValidUsn: USN,
 MaxUsn: USN,
 MaximumSize: DWORDLONG,
 AllocationDelta: DWORDLONG
});

var DELETE_USN_JOURNAL_DATA = new StructT('DELETE_USN_JOURNAL_DATA', {
 UsnJournalID: DWORDLONG,
 DeleteFlags: DWORD
});

var MARK_HANDLE_INFO = new StructT('MARK_HANDLE_INFO', {
 UsnSourceInfo: DWORD,
 VolumeHandle: HANDLE,
 HandleInfo: DWORD
});

var BULK_SECURITY_TEST_DATA = new StructT('BULK_SECURITY_TEST_DATA', {
 DesiredAccess: ACCESS_MASK,
 SecurityIds: new ArrayT(DWORD, 1)
});

var FILE_PREFETCH = new StructT('FILE_PREFETCH', {
 Type: DWORD,
 Count: DWORD,
 Prefetch: new ArrayT(DWORDLONG, 1)
});

var FILE_PREFETCH_EX = new StructT('FILE_PREFETCH_EX', {
 Type: DWORD,
 Count: DWORD,
 Context: PVOID,
 Prefetch: new ArrayT(DWORDLONG, 1)
});

var FILESYSTEM_STATISTICS = new StructT('FILESYSTEM_STATISTICS', {
 FileSystemType: WORD,
 Version: WORD,
 SizeOfCompleteStructure: DWORD,
 UserFileReads: DWORD,
 UserFileReadBytes: DWORD,
 UserDiskReads: DWORD,
 UserFileWrites: DWORD,
 UserFileWriteBytes: DWORD,
 UserDiskWrites: DWORD,
 MetaDataReads: DWORD,
 MetaDataReadBytes: DWORD,
 MetaDataDiskReads: DWORD,
 MetaDataWrites: DWORD,
 MetaDataWriteBytes: DWORD,
 MetaDataDiskWrites: DWORD
});

var FAT_STATISTICS = new StructT('FAT_STATISTICS', {
 CreateHits: DWORD,
 SuccessfulCreates: DWORD,
 FailedCreates: DWORD,
 NonCachedReads: DWORD,
 NonCachedReadBytes: DWORD,
 NonCachedWrites: DWORD,
 NonCachedWriteBytes: DWORD,
 NonCachedDiskReads: DWORD,
 NonCachedDiskWrites: DWORD
});

var EXFAT_STATISTICS = new StructT('EXFAT_STATISTICS', {
 CreateHits: DWORD,
 SuccessfulCreates: DWORD,
 FailedCreates: DWORD,
 NonCachedReads: DWORD,
 NonCachedReadBytes: DWORD,
 NonCachedWrites: DWORD,
 NonCachedWriteBytes: DWORD,
 NonCachedDiskReads: DWORD,
 NonCachedDiskWrites: DWORD
});

var NTFS_STATISTICS = new StructT('NTFS_STATISTICS', {
 LogFileFullExceptions: DWORD,
 OtherExceptions: DWORD,
 MftReads: DWORD,
 MftReadBytes: DWORD,
 MftWrites: DWORD,
 MftWriteBytes: DWORD,
 MftWritesUserLevel: ,
 MftWritesFlushForLogFileFull: WORD,
 MftWritesLazyWriter: WORD,
 MftWritesUserRequest: WORD,
 Mft2Writes: DWORD,
 Mft2WriteBytes: DWORD,
 Mft2WritesUserLevel: ,
 Mft2WritesFlushForLogFileFull: WORD,
 Mft2WritesLazyWriter: WORD,
 Mft2WritesUserRequest: WORD,
 RootIndexReads: DWORD,
 RootIndexReadBytes: DWORD,
 RootIndexWrites: DWORD,
 RootIndexWriteBytes: DWORD,
 BitmapReads: DWORD,
 BitmapReadBytes: DWORD,
 BitmapWrites: DWORD,
 BitmapWriteBytes: DWORD,
 BitmapWritesFlushForLogFileFull: WORD,
 BitmapWritesLazyWriter: WORD,
 BitmapWritesUserRequest: WORD,
 BitmapWritesUserLevel: ,
 MftBitmapReads: DWORD,
 MftBitmapReadBytes: DWORD,
 MftBitmapWrites: DWORD,
 MftBitmapWriteBytes: DWORD,
 MftBitmapWritesFlushForLogFileFull: WORD,
 MftBitmapWritesLazyWriter: WORD,
 MftBitmapWritesUserRequest: WORD,
 MftBitmapWritesUserLevel: ,
 UserIndexReads: DWORD,
 UserIndexReadBytes: DWORD,
 UserIndexWrites: DWORD,
 UserIndexWriteBytes: DWORD,
 LogFileReads: DWORD,
 LogFileReadBytes: DWORD,
 LogFileWrites: DWORD,
 LogFileWriteBytes: DWORD,
 Allocate:
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD,
 Flush: WORD
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD,
 Flush: WORD
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD
});

var undefined = new StructT('undefined', {
 Write: WORD,
 Create: WORD,
 SetInfo: WORD,
 Flush: WORD
});

var undefined = new StructT('undefined', {
 Calls: DWORD,
 Clusters: DWORD,
 Hints: DWORD,
 RunsReturned: DWORD,
 HintsHonored: DWORD,
 HintsClusters: DWORD,
 Cache: DWORD,
 CacheClusters: DWORD,
 CacheMiss: DWORD,
 CacheMissClusters: DWORD
});

var FILE_OBJECTID_BUFFER = new StructT('FILE_OBJECTID_BUFFER', {
 ObjectId: new ArrayT(BYTE, 16)
});

var undefined = new StructT('undefined', {
 BirthVolumeId: new ArrayT(BYTE, 16),
 BirthObjectId: new ArrayT(BYTE, 16),
 DomainId: new ArrayT(BYTE, 16)
});

var FILE_SET_SPARSE_BUFFER = new StructT('FILE_SET_SPARSE_BUFFER', {
 SetSparse: BOOLEAN
});

var FILE_ZERO_DATA_INFORMATION = new StructT('FILE_ZERO_DATA_INFORMATION', {
 FileOffset: LARGE_INTEGER,
 BeyondFinalZero: LARGE_INTEGER
});

var FILE_ALLOCATED_RANGE_BUFFER = new StructT('FILE_ALLOCATED_RANGE_BUFFER', {
 FileOffset: LARGE_INTEGER,
 Length: LARGE_INTEGER
});

var ENCRYPTION_BUFFER = new StructT('ENCRYPTION_BUFFER', {
 EncryptionOperation: DWORD,
 Private: new ArrayT(BYTE, 1)
});

var DECRYPTION_STATUS_BUFFER = new StructT('DECRYPTION_STATUS_BUFFER', {
 NoEncryptedStreams: BOOLEAN
});

var REQUEST_RAW_ENCRYPTED_DATA = new StructT('REQUEST_RAW_ENCRYPTED_DATA', {
 FileOffset: LONGLONG,
 Length: DWORD
});

var ENCRYPTED_DATA_INFO = new StructT('ENCRYPTED_DATA_INFO', {
 StartingFileOffset: DWORDLONG,
 OutputBufferOffset: DWORD,
 BytesWithinFileSize: DWORD,
 BytesWithinValidDataLength: DWORD,
 CompressionFormat: WORD,
 DataUnitShift: BYTE,
 ChunkShift: BYTE,
 ClusterShift: BYTE,
 EncryptionFormat: BYTE,
 NumberOfDataBlocks: WORD,
 DataBlockSize: new ArrayT(DWORD, ANYSIZE_new ArrayT)
});

var PLEX_READ_DATA_REQUEST = new StructT('PLEX_READ_DATA_REQUEST', {
 ByteOffset: LARGE_INTEGER,
 ByteLength: DWORD,
 PlexNumber: DWORD
});

var SI_COPYFILE = new StructT('SI_COPYFILE', {
 SourceFileNameLength: DWORD,
 DestinationFileNameLength: DWORD,
 Flags: DWORD,
 FileNameBuffer: new ArrayT(WCHAR, 1)
});

var FILE_MAKE_COMPATIBLE_BUFFER = new StructT('FILE_MAKE_COMPATIBLE_BUFFER', {
 CloseDisc: BOOLEAN
});

var FILE_SET_DEFECT_MGMT_BUFFER = new StructT('FILE_SET_DEFECT_MGMT_BUFFER', {
 Disable: BOOLEAN
});

var FILE_QUERY_SPARING_BUFFER = new StructT('FILE_QUERY_SPARING_BUFFER', {
 SparingUnitBytes: DWORD,
 SoftwareSparing: BOOLEAN,
 TotalSpareBlocks: DWORD,
 FreeSpareBlocks: DWORD
});

var FILE_QUERY_ON_DISK_VOL_INFO_BUFFER = new StructT('FILE_QUERY_ON_DISK_VOL_INFO_BUFFER', {
 DirectoryCount: LARGE_INTEGER,
 FileCount: LARGE_INTEGER,
 FsFormatMajVersion: WORD,
 FsFormatMinVersion: WORD,
 FsFormatName: new ArrayT(WCHAR,  12),
 FormatTime: LARGE_INTEGER,
 LastUpdateTime: LARGE_INTEGER,
 CopyrightInfo: new ArrayT(WCHAR,  34),
 AbstractInfo: new ArrayT(WCHAR,  34),
 FormattingImplementationInfo: new ArrayT(WCHAR,  34),
 LastModifyingImplementationInfo: new ArrayT(WCHAR,  34)
});

var SHRINK_VOLUME_INFORMATION = new StructT('SHRINK_VOLUME_INFORMATION', {
 ShrinkRequestType: SHRINK_VOLUME_REQUEST_TYPES,
 Flags: DWORDLONG,
 NewNumberOfSectors: LONGLONG
});

var TXFS_MODIFY_RM = new StructT('TXFS_MODIFY_RM', {
 Flags: DWORD,
 LogContainerCountMax: DWORD,
 LogContainerCountMin: DWORD,
 LogContainerCount: DWORD,
 LogGrowthIncrement: DWORD,
 LogAutoShrinkPercentage: DWORD,
 Reserved: DWORDLONG,
 LoggingMode: WORD
});

var TXFS_QUERY_RM_INFORMATION = new StructT('TXFS_QUERY_RM_INFORMATION', {
 BytesRequired: DWORD,
 TailLsn: DWORDLONG,
 CurrentLsn: DWORDLONG,
 ArchiveTailLsn: DWORDLONG,
 LogContainerSize: DWORDLONG,
 HighestVirtualClock: LARGE_INTEGER,
 LogContainerCount: DWORD,
 LogContainerCountMax: DWORD,
 LogContainerCountMin: DWORD,
 LogGrowthIncrement: DWORD,
 LogAutoShrinkPercentage: DWORD,
 Flags: DWORD,
 LoggingMode: WORD,
 Reserved: WORD,
 RmState: DWORD,
 LogCapacity: DWORDLONG,
 LogFree: DWORDLONG,
 TopsSize: DWORDLONG,
 TopsUsed: DWORDLONG,
 TransactionCount: DWORDLONG,
 OnePCCount: DWORDLONG,
 TwoPCCount: DWORDLONG,
 NumberLogFileFull: DWORDLONG,
 OldestTransactionAge: DWORDLONG,
 RMName: GUID,
 TmLogPathOffset: DWORD
});

var TXFS_ROLLFORWARD_REDO_INFORMATION = new StructT('TXFS_ROLLFORWARD_REDO_INFORMATION', {
 LastVirtualClock: LARGE_INTEGER,
 LastRedoLsn: DWORDLONG,
 HighestRecoveryLsn: DWORDLONG,
 Flags: DWORD
});

var TXFS_START_RM_INFORMATION = new StructT('TXFS_START_RM_INFORMATION', {
 Flags: DWORD,
 LogContainerSize: DWORDLONG,
 LogContainerCountMin: DWORD,
 LogContainerCountMax: DWORD,
 LogGrowthIncrement: DWORD,
 LogAutoShrinkPercentage: DWORD,
 TmLogPathOffset: DWORD,
 TmLogPathLength: WORD,
 LoggingMode: WORD,
 LogPathLength: WORD,
 Reserved: WORD,
 LogPath: new ArrayT(WCHAR, 1)
});

var TXFS_GET_METADATA_INFO_OUT = new StructT('TXFS_GET_METADATA_INFO_OUT', {
 TxfFileId: ,
 LockingTransaction: GUID,
 LastLsn: DWORDLONG,
 TransactionState: DWORD
});

var undefined = new StructT('undefined', {
 LowPart: LONGLONG,
 HighPart: LONGLONG
});

var TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY = new StructT('TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY', {
 Offset: DWORDLONG,
 NameFlags: DWORD,
 FileId: LONGLONG,
 Reserved1: DWORD,
 Reserved2: DWORD,
 Reserved3: LONGLONG,
 FileName: new ArrayT(WCHAR, 1)
});

var TXFS_LIST_TRANSACTION_LOCKED_FILES = new StructT('TXFS_LIST_TRANSACTION_LOCKED_FILES', {
 KtmTransaction: GUID,
 NumberOfFiles: DWORDLONG,
 BufferSizeRequired: DWORDLONG,
 Offset: DWORDLONG
});

var TXFS_LIST_TRANSACTIONS_ENTRY = new StructT('TXFS_LIST_TRANSACTIONS_ENTRY', {
 TransactionId: GUID,
 TransactionState: DWORD,
 Reserved1: DWORD,
 Reserved2: DWORD,
 Reserved3: LONGLONG
});

var TXFS_LIST_TRANSACTIONS = new StructT('TXFS_LIST_TRANSACTIONS', {
 NumberOfTransactions: DWORDLONG,
 BufferSizeRequired: DWORDLONG
});


var TXFS_WRITE_BACKUP_INFORMATION = new StructT('TXFS_WRITE_BACKUP_INFORMATION', {
 Buffer: new ArrayT(BYTE, 1)
});

var TXFS_GET_TRANSACTED_VERSION = new StructT('TXFS_GET_TRANSACTED_VERSION', {
 ThisBaseVersion: DWORD,
 LatestVersion: DWORD,
 ThisMiniVersion: WORD,
 FirstMiniVersion: WORD,
 LatestMiniVersion: WORD
});

var TXFS_SAVEPOINT_INFORMATION = new StructT('TXFS_SAVEPOINT_INFORMATION', {
 KtmTransaction: HANDLE,
 ActionCode: DWORD,
 SavepointId: DWORD
});

var TXFS_CREATE_MINIVERSION_INFO = new StructT('TXFS_CREATE_MINIVERSION_INFO', {
 StructureVersion: WORD,
 StructureLength: WORD,
 BaseVersion: DWORD,
 MiniVersion: WORD
});

var TXFS_TRANSACTION_ACTIVE_INFO = new StructT('TXFS_TRANSACTION_ACTIVE_INFO', {
 TransactionsActiveAtSnapshot: BOOLEAN
});

var BOOT_AREA_INFO = new StructT('BOOT_AREA_INFO', {
 BootSectorCount: DWORD,
 BootSectors: new ArrayT(undefined, 2)
});

var undefined = new StructT('undefined', {
 Offset: LARGE_INTEGER
});

var RETRIEVAL_POINTER_BASE = new StructT('RETRIEVAL_POINTER_BASE', {
 FileAreaOffset: LARGE_INTEGER
});

var FILE_FS_PERSISTENT_VOLUME_INFORMATION = new StructT('FILE_FS_PERSISTENT_VOLUME_INFORMATION', {
 VolumeFlags: DWORD,
 FlagMask: DWORD,
 Version: DWORD,
 Reserved: DWORD
});

var FILE_SYSTEM_RECOGNITION_INFORMATION = new StructT('FILE_SYSTEM_RECOGNITION_INFORMATION', {
 FileSystem: new ArrayT(CHAR, 9)
});

var REQUEST_OPLOCK_INPUT_BUFFER = new StructT('REQUEST_OPLOCK_INPUT_BUFFER', {
 StructureVersion: WORD,
 StructureLength: WORD,
 RequestedOplockLevel: DWORD,
 Flags: DWORD
});

var REQUEST_OPLOCK_OUTPUT_BUFFER = new StructT('REQUEST_OPLOCK_OUTPUT_BUFFER', {
 StructureVersion: WORD,
 StructureLength: WORD,
 OriginalOplockLevel: DWORD,
 NewOplockLevel: DWORD,
 Flags: DWORD,
 AccessMode: ACCESS_MASK,
 ShareMode: WORD
});

var SD_CHANGE_MACHINE_SID_INPUT = new StructT('SD_CHANGE_MACHINE_SID_INPUT', {
 CurrentMachineSIDOffset: WORD,
 CurrentMachineSIDLength: WORD,
 NewMachineSIDOffset: WORD,
 NewMachineSIDLength: WORD
});

var SD_CHANGE_MACHINE_SID_OUTPUT = new StructT('SD_CHANGE_MACHINE_SID_OUTPUT', {
 NumSDChangedSuccess: DWORDLONG,
 NumSDChangedFail: DWORDLONG,
 NumSDUnused: DWORDLONG,
 NumSDTotal: DWORDLONG,
 NumMftSDChangedSuccess: DWORDLONG,
 NumMftSDChangedFail: DWORDLONG,
 NumMftSDTotal: DWORDLONG
});

var SD_GLOBAL_CHANGE_INPUT = new StructT('SD_GLOBAL_CHANGE_INPUT', {
 Flags: DWORD,
 ChangeType: DWORD
});

var SD_GLOBAL_CHANGE_OUTPUT = new StructT('SD_GLOBAL_CHANGE_OUTPUT', {
 Flags: DWORD,
 ChangeType: DWORD
});

var EXTENDED_ENCRYPTED_DATA_INFO = new StructT('EXTENDED_ENCRYPTED_DATA_INFO', {
 ExtendedCode: DWORD,
 Length: DWORD,
 Flags: DWORD,
 Reserved: DWORD
});

var LOOKUP_STREAM_FROM_CLUSTER_INPUT = new StructT('LOOKUP_STREAM_FROM_CLUSTER_INPUT', {
 Flags: DWORD,
 NumberOfClusters: DWORD,
 Cluster: new ArrayT(LARGE_INTEGER, 1)
});

var LOOKUP_STREAM_FROM_CLUSTER_OUTPUT = new StructT('LOOKUP_STREAM_FROM_CLUSTER_OUTPUT', {
 Offset: DWORD,
 NumberOfMatches: DWORD,
 BufferSizeRequired: DWORD
});

var LOOKUP_STREAM_FROM_CLUSTER_ENTRY = new StructT('LOOKUP_STREAM_FROM_CLUSTER_ENTRY', {
 OffsetToNext: DWORD,
 Flags: DWORD,
 Reserved: LARGE_INTEGER,
 Cluster: LARGE_INTEGER,
 FileName: new ArrayT(WCHAR, 1)
});

var FILE_TYPE_NOTIFICATION_INPUT = new StructT('FILE_TYPE_NOTIFICATION_INPUT', {
 Flags: DWORD,
 NumFileTypeIDs: DWORD,
 FileTypeID: new ArrayT(GUID, 1)
});

var DISK_EXTENT = new StructT('DISK_EXTENT', {
 DiskNumber: DWORD,
 StartingOffset: LARGE_INTEGER,
 ExtentLength: LARGE_INTEGER
});

var VOLUME_DISK_EXTENTS = new StructT('VOLUME_DISK_EXTENTS', {
 NumberOfDiskExtents: DWORD,
 Extents: new ArrayT(DISK_EXTENT, ANYSIZE_new ArrayT)
});

var VOLUME_GET_GPT_ATTRIBUTES_INFORMATION = new StructT('VOLUME_GET_GPT_ATTRIBUTES_INFORMATION', {
 GptAttributes: DWORDLONG
});

var SCARD_IO_REQUEST = new StructT('SCARD_IO_REQUEST', {
 dwProtocol: DWORD,
 cbPciLength: DWORD
});

var SCARD_T0_COMMAND = new StructT('SCARD_T0_COMMAND', {
 bCla: BYTE,
 bIns: BYTE,
 bP1: BYTE,
 bP2: BYTE,
 bP3: BYTE
});

var SCARD_T0_REQUEST = new StructT('SCARD_T0_REQUEST', {
 ioRequest: SCARD_IO_REQUEST,
 bSw1: BYTE,
 bSw2: BYTE
});

var SCARD_T1_REQUEST = new StructT('SCARD_T1_REQUEST', {
 ioRequest: SCARD_IO_REQUEST
});

var SCARD_READERSTATE = new StructT('SCARD_READERSTATE', {
 szReader: LPCSTR,
 pvUserData: LPVOID,
 dwCurrentState: DWORD,
 dwEventState: DWORD,
 cbAtr: DWORD,
 rgbAtr: new ArrayT(BYTE, 36)
});

var SCARD_READERSTATEW = new StructT('SCARD_READERSTATEW', {
 szReader: LPCWSTR,
 pvUserData: LPVOID,
 dwCurrentState: DWORD,
 dwEventState: DWORD,
 cbAtr: DWORD,
 rgbAtr: new ArrayT(BYTE, 36)
});

var SCARD_ATRMASK = new StructT('SCARD_ATRMASK', {
 cbAtr: DWORD,
 rgbAtr: new ArrayT(BYTE, 36),
 rgbMask: new ArrayT(BYTE, 36)
});

var OPENCARD_SEARCH_CRITERIA = new StructT('OPENCARD_SEARCH_CRITERIA', {
 dwStructSize: DWORD,
 lpstrGroupNames: LPSTR,
 nMaxGroupNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrCardNames: LPSTR,
 nMaxCardNames: DWORD,
 lpfnCheck: LPOCNCHKPROC,
 lpfnConnect: LPOCNCONNPROCA,
 lpfnDisconnect: LPOCNDSCPROC,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD
});

var OPENCARD_SEARCH_CRITERIAW = new StructT('OPENCARD_SEARCH_CRITERIAW', {
 dwStructSize: DWORD,
 lpstrGroupNames: LPWSTR,
 nMaxGroupNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrCardNames: LPWSTR,
 nMaxCardNames: DWORD,
 lpfnCheck: LPOCNCHKPROC,
 lpfnConnect: LPOCNCONNPROCW,
 lpfnDisconnect: LPOCNDSCPROC,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD
});

var OPENCARDNAME_EX = new StructT('OPENCARDNAME_EX', {
 dwStructSize: DWORD,
 hSCardContext: SCARDCONTEXT,
 hwndOwner: HWND,
 dwFlags: DWORD,
 lpstrTitle: LPCSTR,
 lpstrSearchDesc: LPCSTR,
 hIcon: HICON,
 pOpenCardSearchCriteria: POPENCARD_SEARCH_CRITERIAA,
 lpfnConnect: LPOCNCONNPROCA,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 lpstrRdr: LPSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPSTR,
 nMaxCard: DWORD,
 dwActiveProtocol: DWORD,
 hCardHandle: SCARDHANDLE
});

var OPENCARDNAME_EXW = new StructT('OPENCARDNAME_EXW', {
 dwStructSize: DWORD,
 hSCardContext: SCARDCONTEXT,
 hwndOwner: HWND,
 dwFlags: DWORD,
 lpstrTitle: LPCWSTR,
 lpstrSearchDesc: LPCWSTR,
 hIcon: HICON,
 pOpenCardSearchCriteria: POPENCARD_SEARCH_CRITERIAW,
 lpfnConnect: LPOCNCONNPROCW,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 lpstrRdr: LPWSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPWSTR,
 nMaxCard: DWORD,
 dwActiveProtocol: DWORD,
 hCardHandle: SCARDHANDLE
});

var OPENCARDNAME = new StructT('OPENCARDNAME', {
 dwStructSize: DWORD,
 hwndOwner: HWND,
 hSCardContext: SCARDCONTEXT,
 lpstrGroupNames: LPSTR,
 nMaxGroupNames: DWORD,
 lpstrCardNames: LPSTR,
 nMaxCardNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrRdr: LPSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPSTR,
 nMaxCard: DWORD,
 lpstrTitle: LPCSTR,
 dwFlags: DWORD,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 dwActiveProtocol: DWORD,
 lpfnConnect: LPOCNCONNPROCA,
 lpfnCheck: LPOCNCHKPROC,
 lpfnDisconnect: LPOCNDSCPROC,
 hCardHandle: SCARDHANDLE
});

var OPENCARDNAMEW = new StructT('OPENCARDNAMEW', {
 dwStructSize: DWORD,
 hwndOwner: HWND,
 hSCardContext: SCARDCONTEXT,
 lpstrGroupNames: LPWSTR,
 nMaxGroupNames: DWORD,
 lpstrCardNames: LPWSTR,
 nMaxCardNames: DWORD,
 rgguidInterfaces: LPCGUID,
 cguidInterfaces: DWORD,
 lpstrRdr: LPWSTR,
 nMaxRdr: DWORD,
 lpstrCard: LPWSTR,
 nMaxCard: DWORD,
 lpstrTitle: LPCWSTR,
 dwFlags: DWORD,
 pvUserData: LPVOID,
 dwShareMode: DWORD,
 dwPreferredProtocols: DWORD,
 dwActiveProtocol: DWORD,
 lpfnConnect: LPOCNCONNPROCW,
 lpfnCheck: LPOCNCHKPROC,
 lpfnDisconnect: LPOCNDSCPROC,
 hCardHandle: SCARDHANDLE
});


var PROPSHEETPAGEA = new StructT('PROPSHEETPAGEA', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: UINT.Δ,
 pszHeaderTitle: LPCSTR,
 pszHeaderSubTitle: LPCSTR,
 hActCtx: HANDLE
});

var PROPSHEETPAGEW = new StructT('PROPSHEETPAGEW', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: UINT.Δ,
 pszHeaderTitle: LPCWSTR,
 pszHeaderSubTitle: LPCWSTR,
 hActCtx: HANDLE
});

var PROPSHEETPAGEA_V1 = new StructT('PROPSHEETPAGEA_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: UINT.Δ
});

var PROPSHEETPAGEA_V2 = new StructT('PROPSHEETPAGEA_V2', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: UINT.Δ,
 pszHeaderTitle: LPCSTR,
 pszHeaderSubTitle: LPCSTR
});

var PROPSHEETPAGEA_V3 = new StructT('PROPSHEETPAGEA_V3', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKA,
 pcRefParent: UINT.Δ,
 pszHeaderTitle: LPCSTR,
 pszHeaderSubTitle: LPCSTR,
 hActCtx: HANDLE
});

var PROPSHEETPAGEW_V1 = new StructT('PROPSHEETPAGEW_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: UINT.Δ
});

var PROPSHEETPAGEW_V2 = new StructT('PROPSHEETPAGEW_V2', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: UINT.Δ,
 pszHeaderTitle: LPCWSTR,
 pszHeaderSubTitle: LPCWSTR
});

var PROPSHEETPAGEW_V3 = new StructT('PROPSHEETPAGEW_V3', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hInstance: HINSTANCE,
 pszTitle: LPCWSTR,
 pfnDlgProc: DLGPROC,
 lParam: LPARAM,
 pfnCallback: LPFNPSPCALLBACKW,
 pcRefParent: UINT.Δ,
 pszHeaderTitle: LPCWSTR,
 pszHeaderSubTitle: LPCWSTR,
 hActCtx: HANDLE
});

var PROPSHEETHEADERA_V1 = new StructT('PROPSHEETHEADERA_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK
});

var PROPSHEETHEADERA = new StructT('PROPSHEETHEADERA', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK,
 hplWatermark: HPALETTE
});

var PROPSHEETHEADERW_V1 = new StructT('PROPSHEETHEADERW_V1', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCWSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK
});

var PROPSHEETHEADERW = new StructT('PROPSHEETHEADERW', {
 dwSize: DWORD,
 dwFlags: DWORD,
 hwndParent: HWND,
 hInstance: HINSTANCE,
 pszCaption: LPCWSTR,
 nPages: UINT,
 pfnCallback: PFNPROPSHEETCALLBACK,
 hplWatermark: HPALETTE
});

var PSHNOTIFY = new StructT('PSHNOTIFY', {
 hdr: NMHDR,
 lParam: LPARAM
});

var PRINTER_INFO_1 = new StructT('PRINTER_INFO_1', {
 Flags: DWORD,
 pDescription: LPSTR,
 pName: LPSTR,
 pComment: LPSTR
});

var PRINTER_INFO_1W = new StructT('PRINTER_INFO_1W', {
 Flags: DWORD,
 pDescription: LPWSTR,
 pName: LPWSTR,
 pComment: LPWSTR
});

var PRINTER_INFO_2 = new StructT('PRINTER_INFO_2', {
 pServerName: LPSTR,
 pPrinterName: LPSTR,
 pShareName: LPSTR,
 pPortName: LPSTR,
 pDriverName: LPSTR,
 pComment: LPSTR,
 pLocation: LPSTR,
 pDevMode: LPDEVMODEA,
 pSepFile: LPSTR,
 pPrintProcessor: LPSTR,
 pDatatype: LPSTR,
 pParameters: LPSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Attributes: DWORD,
 Priority: DWORD,
 DefaultPriority: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 Status: DWORD,
 cJobs: DWORD,
 AveragePPM: DWORD
});

var PRINTER_INFO_2W = new StructT('PRINTER_INFO_2W', {
 pServerName: LPWSTR,
 pPrinterName: LPWSTR,
 pShareName: LPWSTR,
 pPortName: LPWSTR,
 pDriverName: LPWSTR,
 pComment: LPWSTR,
 pLocation: LPWSTR,
 pDevMode: LPDEVMODEW,
 pSepFile: LPWSTR,
 pPrintProcessor: LPWSTR,
 pDatatype: LPWSTR,
 pParameters: LPWSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Attributes: DWORD,
 Priority: DWORD,
 DefaultPriority: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 Status: DWORD,
 cJobs: DWORD,
 AveragePPM: DWORD
});

var PRINTER_INFO_3 = new StructT('PRINTER_INFO_3', {
 pSecurityDescriptor: PSECURITY_DESCRIPTOR
});

var PRINTER_INFO_4 = new StructT('PRINTER_INFO_4', {
 pPrinterName: LPSTR,
 pServerName: LPSTR,
 Attributes: DWORD
});

var PRINTER_INFO_4W = new StructT('PRINTER_INFO_4W', {
 pPrinterName: LPWSTR,
 pServerName: LPWSTR,
 Attributes: DWORD
});

var PRINTER_INFO_5 = new StructT('PRINTER_INFO_5', {
 pPrinterName: LPSTR,
 pPortName: LPSTR,
 Attributes: DWORD,
 DeviceNotSelectedTimeout: DWORD,
 TransmissionRetryTimeout: DWORD
});

var PRINTER_INFO_5W = new StructT('PRINTER_INFO_5W', {
 pPrinterName: LPWSTR,
 pPortName: LPWSTR,
 Attributes: DWORD,
 DeviceNotSelectedTimeout: DWORD,
 TransmissionRetryTimeout: DWORD
});

var PRINTER_INFO_6 = new StructT('PRINTER_INFO_6', {
 dwStatus: DWORD
});

var PRINTER_INFO_7 = new StructT('PRINTER_INFO_7', {
 pszObjectGUID: LPSTR,
 dwAction: DWORD
});

var PRINTER_INFO_7W = new StructT('PRINTER_INFO_7W', {
 pszObjectGUID: LPWSTR,
 dwAction: DWORD
});

var PRINTER_INFO_8 = new StructT('PRINTER_INFO_8', {
 pDevMode: LPDEVMODEA
});

var PRINTER_INFO_8W = new StructT('PRINTER_INFO_8W', {
 pDevMode: LPDEVMODEW
});

var PRINTER_INFO_9 = new StructT('PRINTER_INFO_9', {
 pDevMode: LPDEVMODEA
});

var PRINTER_INFO_9W = new StructT('PRINTER_INFO_9W', {
 pDevMode: LPDEVMODEW
});

var JOB_INFO_1 = new StructT('JOB_INFO_1', {
 JobId: DWORD,
 pPrinterName: LPSTR,
 pMachineName: LPSTR,
 pUserName: LPSTR,
 pDocument: LPSTR,
 pDatatype: LPSTR,
 pStatus: LPSTR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 TotalPages: DWORD,
 PagesPrinted: DWORD,
 Submitted: SYSTEMTIME
});

var JOB_INFO_1W = new StructT('JOB_INFO_1W', {
 JobId: DWORD,
 pPrinterName: LPWSTR,
 pMachineName: LPWSTR,
 pUserName: LPWSTR,
 pDocument: LPWSTR,
 pDatatype: LPWSTR,
 pStatus: LPWSTR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 TotalPages: DWORD,
 PagesPrinted: DWORD,
 Submitted: SYSTEMTIME
});

var JOB_INFO_2 = new StructT('JOB_INFO_2', {
 JobId: DWORD,
 pPrinterName: LPSTR,
 pMachineName: LPSTR,
 pUserName: LPSTR,
 pDocument: LPSTR,
 pNotifyName: LPSTR,
 pDatatype: LPSTR,
 pPrintProcessor: LPSTR,
 pParameters: LPSTR,
 pDriverName: LPSTR,
 pDevMode: LPDEVMODEA,
 pStatus: LPSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD
});

var JOB_INFO_2W = new StructT('JOB_INFO_2W', {
 JobId: DWORD,
 pPrinterName: LPWSTR,
 pMachineName: LPWSTR,
 pUserName: LPWSTR,
 pDocument: LPWSTR,
 pNotifyName: LPWSTR,
 pDatatype: LPWSTR,
 pPrintProcessor: LPWSTR,
 pParameters: LPWSTR,
 pDriverName: LPWSTR,
 pDevMode: LPDEVMODEW,
 pStatus: LPWSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD
});

var JOB_INFO_3 = new StructT('JOB_INFO_3', {
 JobId: DWORD,
 NextJobId: DWORD,
 Reserved: DWORD
});

var JOB_INFO_4 = new StructT('JOB_INFO_4', {
 JobId: DWORD,
 pPrinterName: LPSTR,
 pMachineName: LPSTR,
 pUserName: LPSTR,
 pDocument: LPSTR,
 pNotifyName: LPSTR,
 pDatatype: LPSTR,
 pPrintProcessor: LPSTR,
 pParameters: LPSTR,
 pDriverName: LPSTR,
 pDevMode: LPDEVMODEA,
 pStatus: LPSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD,
 SizeHigh: LONG
});

var JOB_INFO_4W = new StructT('JOB_INFO_4W', {
 JobId: DWORD,
 pPrinterName: LPWSTR,
 pMachineName: LPWSTR,
 pUserName: LPWSTR,
 pDocument: LPWSTR,
 pNotifyName: LPWSTR,
 pDatatype: LPWSTR,
 pPrintProcessor: LPWSTR,
 pParameters: LPWSTR,
 pDriverName: LPWSTR,
 pDevMode: LPDEVMODEW,
 pStatus: LPWSTR,
 pSecurityDescriptor: PSECURITY_DESCRIPTOR,
 Status: DWORD,
 Priority: DWORD,
 Position: DWORD,
 StartTime: DWORD,
 UntilTime: DWORD,
 TotalPages: DWORD,
 Size: DWORD,
 Submitted: SYSTEMTIME,
 Time: DWORD,
 PagesPrinted: DWORD,
 SizeHigh: LONG
});

var ADDJOB_INFO_1 = new StructT('ADDJOB_INFO_1', {
 Path: LPSTR,
 JobId: DWORD
});

var ADDJOB_INFO_1W = new StructT('ADDJOB_INFO_1W', {
 Path: LPWSTR,
 JobId: DWORD
});

var DRIVER_INFO_1 = new StructT('DRIVER_INFO_1', {
 pName: LPSTR
});

var DRIVER_INFO_1W = new StructT('DRIVER_INFO_1W', {
 pName: LPWSTR
});

var DRIVER_INFO_2 = new StructT('DRIVER_INFO_2', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR
});

var DRIVER_INFO_2W = new StructT('DRIVER_INFO_2W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR
});

var DRIVER_INFO_3 = new StructT('DRIVER_INFO_3', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR
});

var DRIVER_INFO_3W = new StructT('DRIVER_INFO_3W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR
});

var DRIVER_INFO_4 = new StructT('DRIVER_INFO_4', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR,
 pszzPreviousNames: LPSTR
});

var DRIVER_INFO_4W = new StructT('DRIVER_INFO_4W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR,
 pszzPreviousNames: LPWSTR
});

var DRIVER_INFO_5 = new StructT('DRIVER_INFO_5', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 dwDriverAttributes: DWORD,
 dwConfigVersion: DWORD,
 dwDriverVersion: DWORD
});

var DRIVER_INFO_5W = new StructT('DRIVER_INFO_5W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 dwDriverAttributes: DWORD,
 dwConfigVersion: DWORD,
 dwDriverVersion: DWORD
});

var DRIVER_INFO_6 = new StructT('DRIVER_INFO_6', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR,
 pszzPreviousNames: LPSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPSTR,
 pszOEMUrl: LPSTR,
 pszHardwareID: LPSTR,
 pszProvider: LPSTR
});

var DRIVER_INFO_6W = new StructT('DRIVER_INFO_6W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR,
 pszzPreviousNames: LPWSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPWSTR,
 pszOEMUrl: LPWSTR,
 pszHardwareID: LPWSTR,
 pszProvider: LPWSTR
});

var DRIVER_INFO_8 = new StructT('DRIVER_INFO_8', {
 cVersion: DWORD,
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDriverPath: LPSTR,
 pDataFile: LPSTR,
 pConfigFile: LPSTR,
 pHelpFile: LPSTR,
 pDependentFiles: LPSTR,
 pMonitorName: LPSTR,
 pDefaultDataType: LPSTR,
 pszzPreviousNames: LPSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPSTR,
 pszOEMUrl: LPSTR,
 pszHardwareID: LPSTR,
 pszProvider: LPSTR,
 pszPrintProcessor: LPSTR,
 pszVendorSetup: LPSTR,
 pszzColorProfiles: LPSTR,
 pszInfPath: LPSTR,
 dwPrinterDriverAttributes: DWORD,
 pszzCoreDriverDependencies: LPSTR,
 ftMinInboxDriverVerDate: FILETIME,
 dwlMinInboxDriverVerVersion: DWORDLONG
});

var DRIVER_INFO_8W = new StructT('DRIVER_INFO_8W', {
 cVersion: DWORD,
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDriverPath: LPWSTR,
 pDataFile: LPWSTR,
 pConfigFile: LPWSTR,
 pHelpFile: LPWSTR,
 pDependentFiles: LPWSTR,
 pMonitorName: LPWSTR,
 pDefaultDataType: LPWSTR,
 pszzPreviousNames: LPWSTR,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 pszMfgName: LPWSTR,
 pszOEMUrl: LPWSTR,
 pszHardwareID: LPWSTR,
 pszProvider: LPWSTR,
 pszPrintProcessor: LPWSTR,
 pszVendorSetup: LPWSTR,
 pszzColorProfiles: LPWSTR,
 pszInfPath: LPWSTR,
 dwPrinterDriverAttributes: DWORD,
 pszzCoreDriverDependencies: LPWSTR,
 ftMinInboxDriverVerDate: FILETIME,
 dwlMinInboxDriverVerVersion: DWORDLONG
});

var DOC_INFO_1 = new StructT('DOC_INFO_1', {
 pDocName: LPSTR,
 pOutputFile: LPSTR,
 pDatatype: LPSTR
});

var DOC_INFO_1W = new StructT('DOC_INFO_1W', {
 pDocName: LPWSTR,
 pOutputFile: LPWSTR,
 pDatatype: LPWSTR
});

var FORM_INFO_1 = new StructT('FORM_INFO_1', {
 Flags: DWORD,
 pName: LPSTR,
 Size: SIZEL,
 ImageableArea: RECTL
});

var FORM_INFO_1W = new StructT('FORM_INFO_1W', {
 Flags: DWORD,
 pName: LPWSTR,
 Size: SIZEL,
 ImageableArea: RECTL
});

var FORM_INFO_2 = new StructT('FORM_INFO_2', {
 Flags: DWORD,
 pName: LPCSTR,
 Size: SIZEL,
 ImageableArea: RECTL,
 pKeyword: LPCSTR,
 StringType: DWORD,
 pMuiDll: LPCSTR,
 dwResourceId: DWORD,
 pDisplayName: LPCSTR,
 wLangId: LANGID
});

var FORM_INFO_2W = new StructT('FORM_INFO_2W', {
 Flags: DWORD,
 pName: LPCWSTR,
 Size: SIZEL,
 ImageableArea: RECTL,
 pKeyword: LPCSTR,
 StringType: DWORD,
 pMuiDll: LPCWSTR,
 dwResourceId: DWORD,
 pDisplayName: LPCWSTR,
 wLangId: LANGID
});

var DOC_INFO_2 = new StructT('DOC_INFO_2', {
 pDocName: LPSTR,
 pOutputFile: LPSTR,
 pDatatype: LPSTR,
 dwMode: DWORD,
 JobId: DWORD
});

var DOC_INFO_2W = new StructT('DOC_INFO_2W', {
 pDocName: LPWSTR,
 pOutputFile: LPWSTR,
 pDatatype: LPWSTR,
 dwMode: DWORD,
 JobId: DWORD
});

var DOC_INFO_3 = new StructT('DOC_INFO_3', {
 pDocName: LPSTR,
 pOutputFile: LPSTR,
 pDatatype: LPSTR,
 dwFlags: DWORD
});

var DOC_INFO_3W = new StructT('DOC_INFO_3W', {
 pDocName: LPWSTR,
 pOutputFile: LPWSTR,
 pDatatype: LPWSTR,
 dwFlags: DWORD
});

var PRINTPROCESSOR_INFO_1 = new StructT('PRINTPROCESSOR_INFO_1', {
 pName: LPSTR
});

var PRINTPROCESSOR_INFO_1W = new StructT('PRINTPROCESSOR_INFO_1W', {
 pName: LPWSTR
});

var PRINTPROCESSOR_CAPS_1 = new StructT('PRINTPROCESSOR_CAPS_1', {
 dwLevel: DWORD,
 dwNupOptions: DWORD,
 dwPageOrderFlags: DWORD,
 dwNumberOfCopies: DWORD
});

var PRINTPROCESSOR_CAPS_2 = new StructT('PRINTPROCESSOR_CAPS_2', {
 dwLevel: DWORD,
 dwNupOptions: DWORD,
 dwPageOrderFlags: DWORD,
 dwNumberOfCopies: DWORD,
 dwDuplexHandlingCaps: DWORD,
 dwNupDirectionCaps: DWORD,
 dwNupBorderCaps: DWORD,
 dwBookletHandlingCaps: DWORD,
 dwScalingCaps: DWORD
});

var PORT_INFO_1 = new StructT('PORT_INFO_1', {
 pName: LPSTR
});

var PORT_INFO_1W = new StructT('PORT_INFO_1W', {
 pName: LPWSTR
});

var PORT_INFO_2 = new StructT('PORT_INFO_2', {
 pPortName: LPSTR,
 pMonitorName: LPSTR,
 pDescription: LPSTR,
 fPortType: DWORD,
 Reserved: DWORD
});

var PORT_INFO_2W = new StructT('PORT_INFO_2W', {
 pPortName: LPWSTR,
 pMonitorName: LPWSTR,
 pDescription: LPWSTR,
 fPortType: DWORD,
 Reserved: DWORD
});

var PORT_INFO_3 = new StructT('PORT_INFO_3', {
 dwStatus: DWORD,
 pszStatus: LPSTR,
 dwSeverity: DWORD
});

var PORT_INFO_3W = new StructT('PORT_INFO_3W', {
 dwStatus: DWORD,
 pszStatus: LPWSTR,
 dwSeverity: DWORD
});

var MONITOR_INFO_1 = new StructT('MONITOR_INFO_1', {
 pName: LPSTR
});

var MONITOR_INFO_1W = new StructT('MONITOR_INFO_1W', {
 pName: LPWSTR
});

var MONITOR_INFO_2 = new StructT('MONITOR_INFO_2', {
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDLLName: LPSTR
});

var MONITOR_INFO_2W = new StructT('MONITOR_INFO_2W', {
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDLLName: LPWSTR
});

var DATATYPES_INFO_1 = new StructT('DATATYPES_INFO_1', {
 pName: LPSTR
});

var DATATYPES_INFO_1W = new StructT('DATATYPES_INFO_1W', {
 pName: LPWSTR
});

var PRINTER_DEFAULTS = new StructT('PRINTER_DEFAULTS', {
 pDatatype: LPSTR,
 pDevMode: LPDEVMODEA,
 DesiredAccess: ACCESS_MASK
});

var PRINTER_DEFAULTSW = new StructT('PRINTER_DEFAULTSW', {
 pDatatype: LPWSTR,
 pDevMode: LPDEVMODEW,
 DesiredAccess: ACCESS_MASK
});

var PRINTER_ENUM_VALUES = new StructT('PRINTER_ENUM_VALUES', {
 pValueName: LPSTR,
 cbValueName: DWORD,
 dwType: DWORD,
 pData: LPBYTE,
 cbData: DWORD
});

var PRINTER_ENUM_VALUESW = new StructT('PRINTER_ENUM_VALUESW', {
 pValueName: LPWSTR,
 cbValueName: DWORD,
 dwType: DWORD,
 pData: LPBYTE,
 cbData: DWORD
});

var PRINTER_NOTIFY_OPTIONS_TYPE = new StructT('PRINTER_NOTIFY_OPTIONS_TYPE', {
 Type: WORD,
 Reserved0: WORD,
 Reserved1: DWORD,
 Reserved2: DWORD,
 Count: DWORD,
 pFields: PWORD
});

var PRINTER_NOTIFY_OPTIONS = new StructT('PRINTER_NOTIFY_OPTIONS', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 pTypes: PPRINTER_NOTIFY_OPTIONS_TYPE
});

var PRINTER_NOTIFY_INFO_DATA = new StructT('PRINTER_NOTIFY_INFO_DATA', {
 Type: WORD,
 Field: WORD,
 Reserved: DWORD,
 Id: DWORD,
 NotifyData: c:winspool.h@68995@S@_PRINTER_NOTIFY_INFO_DATA@Ua
});

var undefined = new StructT('undefined', {
 cbBuf: DWORD,
 pBuf: LPVOID
});

var PRINTER_NOTIFY_INFO = new StructT('PRINTER_NOTIFY_INFO', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 aData: new ArrayT(PRINTER_NOTIFY_INFO_DATA, 1)
});

var BINARY_CONTAINER = new StructT('BINARY_CONTAINER', {
 cbBuf: DWORD,
 pData: LPBYTE
});

var BIDI_DATA = new StructT('BIDI_DATA', {
 dwBidiType: DWORD,
 u: c:winspool.h@69670@S@_BIDI_DATA@Ua
});

var BIDI_REQUEST_DATA = new StructT('BIDI_REQUEST_DATA', {
 dwReqNumber: DWORD,
 pSchema: LPWSTR,
 data: BIDI_DATA
});

var BIDI_REQUEST_CONTAINER = new StructT('BIDI_REQUEST_CONTAINER', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 aData: new ArrayT(BIDI_REQUEST_DATA,  1 )
});

var BIDI_RESPONSE_DATA = new StructT('BIDI_RESPONSE_DATA', {
 dwResult: DWORD,
 dwReqNumber: DWORD,
 pSchema: LPWSTR,
 data: BIDI_DATA
});

var BIDI_RESPONSE_CONTAINER = new StructT('BIDI_RESPONSE_CONTAINER', {
 Version: DWORD,
 Flags: DWORD,
 Count: DWORD,
 aData: new ArrayT(BIDI_RESPONSE_DATA,  1 )
});

var PROVIDOR_INFO_1 = new StructT('PROVIDOR_INFO_1', {
 pName: LPSTR,
 pEnvironment: LPSTR,
 pDLLName: LPSTR
});

var PROVIDOR_INFO_1W = new StructT('PROVIDOR_INFO_1W', {
 pName: LPWSTR,
 pEnvironment: LPWSTR,
 pDLLName: LPWSTR
});

var PROVIDOR_INFO_2 = new StructT('PROVIDOR_INFO_2', {
 pOrder: LPSTR
});

var PROVIDOR_INFO_2W = new StructT('PROVIDOR_INFO_2W', {
 pOrder: LPWSTR
});

var PRINTER_OPTIONS = new StructT('PRINTER_OPTIONS', {
 cbSize: UINT,
 dwFlags: DWORD
});

var PRINTER_OPTIONSW = new StructT('PRINTER_OPTIONSW', {
 cbSize: UINT,
 dwFlags: DWORD
});

var PRINTER_CONNECTION_INFO_1 = new StructT('PRINTER_CONNECTION_INFO_1', {
 dwFlags: DWORD,
 pszDriverName: LPSTR
});

var PRINTER_CONNECTION_INFO_1W = new StructT('PRINTER_CONNECTION_INFO_1W', {
 dwFlags: DWORD,
 pszDriverName: LPWSTR
});

var CORE_PRINTER_DRIVER = new StructT('CORE_PRINTER_DRIVER', {
 CoreDriverGUID: GUID,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 szPackageID: new ArrayT(CHAR, MAX_PATH)
});

var CORE_PRINTER_DRIVERW = new StructT('CORE_PRINTER_DRIVERW', {
 CoreDriverGUID: GUID,
 ftDriverDate: FILETIME,
 dwlDriverVersion: DWORDLONG,
 szPackageID: new ArrayT(WCHAR, MAX_PATH)
});

var PrintPropertyValue = new StructT('PrintPropertyValue', {
 ePropertyType: EPrintPropertyType,
 value: c:winspool.h@106621@SA@PrintPropertyValue@Ua
});

var undefined = new StructT('undefined', {
 cbBuf: DWORD,
 pBuf: LPVOID
});

var PrintNamedProperty = new StructT('PrintNamedProperty', {
 propertyName: WCHAR.Δ,
 propertyValue: PrintPropertyValue
});

var PrintPropertiesCollection = new StructT('PrintPropertiesCollection', {
 numberOfProperties: ULONG,
 propertiesCollection: PrintNamedProperty.Δ
});

var PRINT_EXECUTION_DATA = new StructT('PRINT_EXECUTION_DATA', {
 context: PRINT_EXECUTION_CONTEXT,
 clientAppPID: DWORD
});

var div_t = new StructT('div_t', {
 quot: int,
 rem: int
});

var ldiv_t = new StructT('ldiv_t', {
 quot: long,
 rem: long
});

var lldiv_t = new StructT('lldiv_t', {
 quot: longlong,
 rem: longlong
});

var _LDOUBLE = new StructT('_LDOUBLE', {
 ld: new ArrayT(undefined, 10)
});

var _CRT_DOUBLE = new StructT('_CRT_DOUBLE', {
 x: double
});

var _CRT_FLOAT = new StructT('_CRT_FLOAT', {
 f: float
});

var _LONGDOUBLE = new StructT('_LONGDOUBLE', {
 x: longdouble
});

var _LDBL12 = new StructT('_LDBL12', {
 ld12: new ArrayT(undefined, 12)
});

var IUnknown = new StructT('IUnknown', {
 lpVtbl: IUnknownVtbl.Δ
});

var AsyncIUnknown = new StructT('AsyncIUnknown', {
 lpVtbl: AsyncIUnknownVtbl.Δ
});

var IClassFactory = new StructT('IClassFactory', {
 lpVtbl: IClassFactoryVtbl.Δ
});

var IUnknownVtbl = new StructT('IUnknownVtbl', {
 QueryInterface: new CallbackT(long, [IUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IUnknown.Δ]).Δ,
 Release: new CallbackT(ulong, [IUnknown.Δ]).Δ
});

var AsyncIUnknownVtbl = new StructT('AsyncIUnknownVtbl', {
 QueryInterface: new CallbackT(long, [AsyncIUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [AsyncIUnknown.Δ]).Δ,
 Release: new CallbackT(ulong, [AsyncIUnknown.Δ]).Δ,
 Begin_QueryInterface: new CallbackT(long, [AsyncIUnknown.Δ, _GUID.Δ]).Δ,
 Finish_QueryInterface: new CallbackT(long, [AsyncIUnknown.Δ, _void.Δ.Δ]).Δ,
 Begin_AddRef: new CallbackT(long, [AsyncIUnknown.Δ]).Δ,
 Finish_AddRef: new CallbackT(ulong, [AsyncIUnknown.Δ]).Δ,
 Begin_Release: new CallbackT(long, [AsyncIUnknown.Δ]).Δ,
 Finish_Release: new CallbackT(ulong, [AsyncIUnknown.Δ]).Δ
});

var IClassFactoryVtbl = new StructT('IClassFactoryVtbl', {
 QueryInterface: new CallbackT(long, [IClassFactory.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IClassFactory.Δ]).Δ,
 Release: new CallbackT(ulong, [IClassFactory.Δ]).Δ,
 CreateInstance: new CallbackT(long, [IClassFactory.Δ, IUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 LockServer: new CallbackT(long, [IClassFactory.Δ, int]).Δ
});

var IMarshal = new StructT('IMarshal', {
 lpVtbl: IMarshalVtbl.Δ
});

var IMarshal2 = new StructT('IMarshal2', {
 lpVtbl: IMarshal2Vtbl.Δ
});

var IMalloc = new StructT('IMalloc', {
 lpVtbl: IMallocVtbl.Δ
});

var IMallocSpy = new StructT('IMallocSpy', {
 lpVtbl: IMallocSpyVtbl.Δ
});

var IStdMarshalInfo = new StructT('IStdMarshalInfo', {
 lpVtbl: IStdMarshalInfoVtbl.Δ
});

var IExternalConnection = new StructT('IExternalConnection', {
 lpVtbl: IExternalConnectionVtbl.Δ
});

var IMultiQI = new StructT('IMultiQI', {
 lpVtbl: IMultiQIVtbl.Δ
});

var AsyncIMultiQI = new StructT('AsyncIMultiQI', {
 lpVtbl: AsyncIMultiQIVtbl.Δ
});

var IInternalUnknown = new StructT('IInternalUnknown', {
 lpVtbl: IInternalUnknownVtbl.Δ
});

var IEnumUnknown = new StructT('IEnumUnknown', {
 lpVtbl: IEnumUnknownVtbl.Δ
});

var IBindCtx = new StructT('IBindCtx', {
 lpVtbl: IBindCtxVtbl.Δ
});

var IEnumMoniker = new StructT('IEnumMoniker', {
 lpVtbl: IEnumMonikerVtbl.Δ
});

var IRunnableObject = new StructT('IRunnableObject', {
 lpVtbl: IRunnableObjectVtbl.Δ
});

var IRunningObjectTable = new StructT('IRunningObjectTable', {
 lpVtbl: IRunningObjectTableVtbl.Δ
});

var IPersist = new StructT('IPersist', {
 lpVtbl: IPersistVtbl.Δ
});

var IPersistStream = new StructT('IPersistStream', {
 lpVtbl: IPersistStreamVtbl.Δ
});

var IMoniker = new StructT('IMoniker', {
 lpVtbl: IMonikerVtbl.Δ
});

var IROTData = new StructT('IROTData', {
 lpVtbl: IROTDataVtbl.Δ
});

var IEnumString = new StructT('IEnumString', {
 lpVtbl: IEnumStringVtbl.Δ
});

var ISequentialStream = new StructT('ISequentialStream', {
 lpVtbl: ISequentialStreamVtbl.Δ
});

var IStream = new StructT('IStream', {
 lpVtbl: IStreamVtbl.Δ
});

var IEnumSTATSTG = new StructT('IEnumSTATSTG', {
 lpVtbl: IEnumSTATSTGVtbl.Δ
});

var IStorage = new StructT('IStorage', {
 lpVtbl: IStorageVtbl.Δ
});

var IPersistFile = new StructT('IPersistFile', {
 lpVtbl: IPersistFileVtbl.Δ
});

var IPersistStorage = new StructT('IPersistStorage', {
 lpVtbl: IPersistStorageVtbl.Δ
});

var ILockBytes = new StructT('ILockBytes', {
 lpVtbl: ILockBytesVtbl.Δ
});

var IEnumFORMATETC = new StructT('IEnumFORMATETC', {
 lpVtbl: IEnumFORMATETCVtbl.Δ
});

var IEnumSTATDATA = new StructT('IEnumSTATDATA', {
 lpVtbl: IEnumSTATDATAVtbl.Δ
});

var IRootStorage = new StructT('IRootStorage', {
 lpVtbl: IRootStorageVtbl.Δ
});

var IAdviseSink = new StructT('IAdviseSink', {
 lpVtbl: IAdviseSinkVtbl.Δ
});

var AsyncIAdviseSink = new StructT('AsyncIAdviseSink', {
 lpVtbl: AsyncIAdviseSinkVtbl.Δ
});

var IAdviseSink2 = new StructT('IAdviseSink2', {
 lpVtbl: IAdviseSink2Vtbl.Δ
});

var AsyncIAdviseSink2 = new StructT('AsyncIAdviseSink2', {
 lpVtbl: AsyncIAdviseSink2Vtbl.Δ
});

var IDataObject = new StructT('IDataObject', {
 lpVtbl: IDataObjectVtbl.Δ
});

var IDataAdviseHolder = new StructT('IDataAdviseHolder', {
 lpVtbl: IDataAdviseHolderVtbl.Δ
});

var IMessageFilter = new StructT('IMessageFilter', {
 lpVtbl: IMessageFilterVtbl.Δ
});

var IRpcChannelBuffer2 = new StructT('IRpcChannelBuffer2', {
 lpVtbl: IRpcChannelBuffer2Vtbl.Δ
});

var IAsyncRpcChannelBuffer = new StructT('IAsyncRpcChannelBuffer', {
 lpVtbl: IAsyncRpcChannelBufferVtbl.Δ
});

var IRpcChannelBuffer3 = new StructT('IRpcChannelBuffer3', {
 lpVtbl: IRpcChannelBuffer3Vtbl.Δ
});

var IRpcSyntaxNegotiate = new StructT('IRpcSyntaxNegotiate', {
 lpVtbl: IRpcSyntaxNegotiateVtbl.Δ
});

var IRpcProxyBuffer = new StructT('IRpcProxyBuffer', {
 lpVtbl: IRpcProxyBufferVtbl.Δ
});

var IPSFactoryBuffer = new StructT('IPSFactoryBuffer', {
 lpVtbl: IPSFactoryBufferVtbl.Δ
});

var IChannelHook = new StructT('IChannelHook', {
 lpVtbl: IChannelHookVtbl.Δ
});

var IClientSecurity = new StructT('IClientSecurity', {
 lpVtbl: IClientSecurityVtbl.Δ
});

var IServerSecurity = new StructT('IServerSecurity', {
 lpVtbl: IServerSecurityVtbl.Δ
});

var IClassActivator = new StructT('IClassActivator', {
 lpVtbl: IClassActivatorVtbl.Δ
});

var IRpcOptions = new StructT('IRpcOptions', {
 lpVtbl: IRpcOptionsVtbl.Δ
});

var IGlobalOptions = new StructT('IGlobalOptions', {
 lpVtbl: IGlobalOptionsVtbl.Δ
});

var IFillLockBytes = new StructT('IFillLockBytes', {
 lpVtbl: IFillLockBytesVtbl.Δ
});

var IProgressNotify = new StructT('IProgressNotify', {
 lpVtbl: IProgressNotifyVtbl.Δ
});

var ILayoutStorage = new StructT('ILayoutStorage', {
 lpVtbl: ILayoutStorageVtbl.Δ
});

var IBlockingLock = new StructT('IBlockingLock', {
 lpVtbl: IBlockingLockVtbl.Δ
});

var ITimeAndNoticeControl = new StructT('ITimeAndNoticeControl', {
 lpVtbl: ITimeAndNoticeControlVtbl.Δ
});

var IOplockStorage = new StructT('IOplockStorage', {
 lpVtbl: IOplockStorageVtbl.Δ
});

var ISurrogate = new StructT('ISurrogate', {
 lpVtbl: ISurrogateVtbl.Δ
});

var IGlobalInterfaceTable = new StructT('IGlobalInterfaceTable', {
 lpVtbl: IGlobalInterfaceTableVtbl.Δ
});

var IDirectWriterLock = new StructT('IDirectWriterLock', {
 lpVtbl: IDirectWriterLockVtbl.Δ
});

var ISynchronize = new StructT('ISynchronize', {
 lpVtbl: ISynchronizeVtbl.Δ
});

var ISynchronizeHandle = new StructT('ISynchronizeHandle', {
 lpVtbl: ISynchronizeHandleVtbl.Δ
});

var ISynchronizeEvent = new StructT('ISynchronizeEvent', {
 lpVtbl: ISynchronizeEventVtbl.Δ
});

var ISynchronizeContainer = new StructT('ISynchronizeContainer', {
 lpVtbl: ISynchronizeContainerVtbl.Δ
});

var ISynchronizeMutex = new StructT('ISynchronizeMutex', {
 lpVtbl: ISynchronizeMutexVtbl.Δ
});

var ICancelMethodCalls = new StructT('ICancelMethodCalls', {
 lpVtbl: ICancelMethodCallsVtbl.Δ
});

var IAsyncManager = new StructT('IAsyncManager', {
 lpVtbl: IAsyncManagerVtbl.Δ
});

var ICallFactory = new StructT('ICallFactory', {
 lpVtbl: ICallFactoryVtbl.Δ
});

var IRpcHelper = new StructT('IRpcHelper', {
 lpVtbl: IRpcHelperVtbl.Δ
});

var IReleaseMarshalBuffers = new StructT('IReleaseMarshalBuffers', {
 lpVtbl: IReleaseMarshalBuffersVtbl.Δ
});

var IWaitMultiple = new StructT('IWaitMultiple', {
 lpVtbl: IWaitMultipleVtbl.Δ
});

var IUrlMon = new StructT('IUrlMon', {
 lpVtbl: IUrlMonVtbl.Δ
});

var IForegroundTransfer = new StructT('IForegroundTransfer', {
 lpVtbl: IForegroundTransferVtbl.Δ
});

var IAddrTrackingControl = new StructT('IAddrTrackingControl', {
 lpVtbl: IAddrTrackingControlVtbl.Δ
});

var IAddrExclusionControl = new StructT('IAddrExclusionControl', {
 lpVtbl: IAddrExclusionControlVtbl.Δ
});

var IPipeByte = new StructT('IPipeByte', {
 lpVtbl: IPipeByteVtbl.Δ
});

var AsyncIPipeByte = new StructT('AsyncIPipeByte', {
 lpVtbl: AsyncIPipeByteVtbl.Δ
});

var IPipeLong = new StructT('IPipeLong', {
 lpVtbl: IPipeLongVtbl.Δ
});

var AsyncIPipeLong = new StructT('AsyncIPipeLong', {
 lpVtbl: AsyncIPipeLongVtbl.Δ
});

var IPipeDouble = new StructT('IPipeDouble', {
 lpVtbl: IPipeDoubleVtbl.Δ
});

var AsyncIPipeDouble = new StructT('AsyncIPipeDouble', {
 lpVtbl: AsyncIPipeDoubleVtbl.Δ
});

var IThumbnailExtractor = new StructT('IThumbnailExtractor', {
 lpVtbl: IThumbnailExtractorVtbl.Δ
});

var IDummyHICONIncluder = new StructT('IDummyHICONIncluder', {
 lpVtbl: IDummyHICONIncluderVtbl.Δ
});




var IProcessLock = new StructT('IProcessLock', {
 lpVtbl: IProcessLockVtbl.Δ
});

var ISurrogateService = new StructT('ISurrogateService', {
 lpVtbl: ISurrogateServiceVtbl.Δ
});

var IComThreadingInfo = new StructT('IComThreadingInfo', {
 lpVtbl: IComThreadingInfoVtbl.Δ
});

var IProcessInitControl = new StructT('IProcessInitControl', {
 lpVtbl: IProcessInitControlVtbl.Δ
});

var IInitializeSpy = new StructT('IInitializeSpy', {
 lpVtbl: IInitializeSpyVtbl.Δ
});

var COSERVERINFO = new StructT('COSERVERINFO', {
 dwReserved1: DWORD,
 pwszName: LPWSTR,
 pAuthInfo: COAUTHINFO.Δ,
 dwReserved2: DWORD
});

var IMarshalVtbl = new StructT('IMarshalVtbl', {
 QueryInterface: new CallbackT(long, [IMarshal.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMarshal.Δ]).Δ,
 Release: new CallbackT(ulong, [IMarshal.Δ]).Δ,
 GetUnmarshalClass: new CallbackT(long, [IMarshal.Δ, _GUID.Δ, _void.Δ, ulong, _void.Δ, ulong, _GUID.Δ]).Δ,
 GetMarshalSizeMax: new CallbackT(long, [IMarshal.Δ, _GUID.Δ, _void.Δ, ulong, _void.Δ, ulong, ulong.Δ]).Δ,
 MarshalInterface: new CallbackT(long, [IMarshal.Δ, IStream.Δ, _GUID.Δ, _void.Δ, ulong, _void.Δ, ulong]).Δ,
 UnmarshalInterface: new CallbackT(long, [IMarshal.Δ, IStream.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 ReleaseMarshalData: new CallbackT(long, [IMarshal.Δ, IStream.Δ]).Δ,
 DisconnectObject: new CallbackT(long, [IMarshal.Δ, ulong]).Δ
});

var IMarshal2Vtbl = new StructT('IMarshal2Vtbl', {
 QueryInterface: new CallbackT(long, [IMarshal2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMarshal2.Δ]).Δ,
 Release: new CallbackT(ulong, [IMarshal2.Δ]).Δ,
 GetUnmarshalClass: new CallbackT(long, [IMarshal2.Δ, _GUID.Δ, _void.Δ, ulong, _void.Δ, ulong, _GUID.Δ]).Δ,
 GetMarshalSizeMax: new CallbackT(long, [IMarshal2.Δ, _GUID.Δ, _void.Δ, ulong, _void.Δ, ulong, ulong.Δ]).Δ,
 MarshalInterface: new CallbackT(long, [IMarshal2.Δ, IStream.Δ, _GUID.Δ, _void.Δ, ulong, _void.Δ, ulong]).Δ,
 UnmarshalInterface: new CallbackT(long, [IMarshal2.Δ, IStream.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 ReleaseMarshalData: new CallbackT(long, [IMarshal2.Δ, IStream.Δ]).Δ,
 DisconnectObject: new CallbackT(long, [IMarshal2.Δ, ulong]).Δ
});

var IMallocVtbl = new StructT('IMallocVtbl', {
 QueryInterface: new CallbackT(long, [IMalloc.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMalloc.Δ]).Δ,
 Release: new CallbackT(ulong, [IMalloc.Δ]).Δ,
 Alloc: new CallbackT(_void.Δ, [IMalloc.Δ, ulong]).Δ,
 Realloc: new CallbackT(_void.Δ, [IMalloc.Δ, _void.Δ, ulong]).Δ,
 Free: new CallbackT(_void, [IMalloc.Δ, _void.Δ]).Δ,
 GetSize: new CallbackT(ulong, [IMalloc.Δ, _void.Δ]).Δ,
 DidAlloc: new CallbackT(int, [IMalloc.Δ, _void.Δ]).Δ,
 HeapMinimize: new CallbackT(_void, [IMalloc.Δ]).Δ
});

var IMallocSpyVtbl = new StructT('IMallocSpyVtbl', {
 QueryInterface: new CallbackT(long, [IMallocSpy.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMallocSpy.Δ]).Δ,
 Release: new CallbackT(ulong, [IMallocSpy.Δ]).Δ,
 PreAlloc: new CallbackT(ulong, [IMallocSpy.Δ, ulong]).Δ,
 PostAlloc: new CallbackT(_void.Δ, [IMallocSpy.Δ, _void.Δ]).Δ,
 PreFree: new CallbackT(_void.Δ, [IMallocSpy.Δ, _void.Δ, int]).Δ,
 PostFree: new CallbackT(_void, [IMallocSpy.Δ, int]).Δ,
 PreRealloc: new CallbackT(ulong, [IMallocSpy.Δ, _void.Δ, ulong, _void.Δ.Δ, int]).Δ,
 PostRealloc: new CallbackT(_void.Δ, [IMallocSpy.Δ, _void.Δ, int]).Δ,
 PreGetSize: new CallbackT(_void.Δ, [IMallocSpy.Δ, _void.Δ, int]).Δ,
 PostGetSize: new CallbackT(ulong, [IMallocSpy.Δ, ulong, int]).Δ,
 PreDidAlloc: new CallbackT(_void.Δ, [IMallocSpy.Δ, _void.Δ, int]).Δ,
 PostDidAlloc: new CallbackT(int, [IMallocSpy.Δ, _void.Δ, int, int]).Δ,
 PreHeapMinimize: new CallbackT(_void, [IMallocSpy.Δ]).Δ,
 PostHeapMinimize: new CallbackT(_void, [IMallocSpy.Δ]).Δ
});

var IStdMarshalInfoVtbl = new StructT('IStdMarshalInfoVtbl', {
 QueryInterface: new CallbackT(long, [IStdMarshalInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IStdMarshalInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IStdMarshalInfo.Δ]).Δ,
 GetClassForHandler: new CallbackT(long, [IStdMarshalInfo.Δ, ulong, _void.Δ, _GUID.Δ]).Δ
});

var IExternalConnectionVtbl = new StructT('IExternalConnectionVtbl', {
 QueryInterface: new CallbackT(long, [IExternalConnection.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IExternalConnection.Δ]).Δ,
 Release: new CallbackT(ulong, [IExternalConnection.Δ]).Δ,
 AddConnection: new CallbackT(ulong, [IExternalConnection.Δ, ulong, ulong]).Δ,
 ReleaseConnection: new CallbackT(ulong, [IExternalConnection.Δ, ulong, ulong, int]).Δ
});

var MULTI_QI = new StructT('MULTI_QI', {
 pIID: IID.Δ,
 pItf: IUnknown.Δ,
 hr: HRESULT
});

var IMultiQIVtbl = new StructT('IMultiQIVtbl', {
 QueryInterface: new CallbackT(long, [IMultiQI.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMultiQI.Δ]).Δ,
 Release: new CallbackT(ulong, [IMultiQI.Δ]).Δ,
 QueryMultipleInterfaces: new CallbackT(long, [IMultiQI.Δ, ulong, tagMULTI_QI.Δ]).Δ
});

var AsyncIMultiQIVtbl = new StructT('AsyncIMultiQIVtbl', {
 QueryInterface: new CallbackT(long, [AsyncIMultiQI.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [AsyncIMultiQI.Δ]).Δ,
 Release: new CallbackT(ulong, [AsyncIMultiQI.Δ]).Δ,
 Begin_QueryMultipleInterfaces: new CallbackT(long, [AsyncIMultiQI.Δ, ulong, tagMULTI_QI.Δ]).Δ,
 Finish_QueryMultipleInterfaces: new CallbackT(long, [AsyncIMultiQI.Δ, tagMULTI_QI.Δ]).Δ
});

var IInternalUnknownVtbl = new StructT('IInternalUnknownVtbl', {
 QueryInterface: new CallbackT(long, [IInternalUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternalUnknown.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternalUnknown.Δ]).Δ,
 QueryInternalInterface: new CallbackT(long, [IInternalUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ
});

var IEnumUnknownVtbl = new StructT('IEnumUnknownVtbl', {
 QueryInterface: new CallbackT(long, [IEnumUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumUnknown.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumUnknown.Δ]).Δ,
 Next: new CallbackT(long, [IEnumUnknown.Δ, ulong, IUnknown.Δ.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumUnknown.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumUnknown.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumUnknown.Δ, IEnumUnknown.Δ.Δ]).Δ
});

var BIND_OPTS = new StructT('BIND_OPTS', {
 cbStruct: DWORD,
 grfFlags: DWORD,
 grfMode: DWORD,
 dwTickCountDeadline: DWORD
});

var BIND_OPTS2 = new StructT('BIND_OPTS2', {
 cbStruct: DWORD,
 grfFlags: DWORD,
 grfMode: DWORD,
 dwTickCountDeadline: DWORD,
 dwTrackFlags: DWORD,
 dwClassContext: DWORD,
 locale: LCID,
 pServerInfo: COSERVERINFO.Δ
});

var BIND_OPTS3 = new StructT('BIND_OPTS3', {
 cbStruct: DWORD,
 grfFlags: DWORD,
 grfMode: DWORD,
 dwTickCountDeadline: DWORD,
 dwTrackFlags: DWORD,
 dwClassContext: DWORD,
 locale: LCID,
 pServerInfo: COSERVERINFO.Δ,
 hwnd: HWND
});

var IBindCtxVtbl = new StructT('IBindCtxVtbl', {
 QueryInterface: new CallbackT(long, [IBindCtx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IBindCtx.Δ]).Δ,
 Release: new CallbackT(ulong, [IBindCtx.Δ]).Δ,
 RegisterObjectBound: new CallbackT(long, [IBindCtx.Δ, IUnknown.Δ]).Δ,
 RevokeObjectBound: new CallbackT(long, [IBindCtx.Δ, IUnknown.Δ]).Δ,
 ReleaseBoundObjects: new CallbackT(long, [IBindCtx.Δ]).Δ,
 SetBindOptions: new CallbackT(long, [IBindCtx.Δ, tagBIND_OPTS.Δ]).Δ,
 GetBindOptions: new CallbackT(long, [IBindCtx.Δ, tagBIND_OPTS.Δ]).Δ,
 GetRunningObjectTable: new CallbackT(long, [IBindCtx.Δ, IRunningObjectTable.Δ.Δ]).Δ,
 RegisterObjectParam: new CallbackT(long, [IBindCtx.Δ, ushort.Δ, IUnknown.Δ]).Δ,
 GetObjectParam: new CallbackT(long, [IBindCtx.Δ, ushort.Δ, IUnknown.Δ.Δ]).Δ,
 EnumObjectParam: new CallbackT(long, [IBindCtx.Δ, IEnumString.Δ.Δ]).Δ,
 RevokeObjectParam: new CallbackT(long, [IBindCtx.Δ, ushort.Δ]).Δ
});

var IEnumMonikerVtbl = new StructT('IEnumMonikerVtbl', {
 QueryInterface: new CallbackT(long, [IEnumMoniker.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumMoniker.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumMoniker.Δ]).Δ,
 Next: new CallbackT(long, [IEnumMoniker.Δ, ulong, IMoniker.Δ.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumMoniker.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumMoniker.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumMoniker.Δ, IEnumMoniker.Δ.Δ]).Δ
});

var IRunnableObjectVtbl = new StructT('IRunnableObjectVtbl', {
 QueryInterface: new CallbackT(long, [IRunnableObject.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRunnableObject.Δ]).Δ,
 Release: new CallbackT(ulong, [IRunnableObject.Δ]).Δ,
 GetRunningClass: new CallbackT(long, [IRunnableObject.Δ, _GUID.Δ]).Δ,
 Run: new CallbackT(long, [IRunnableObject.Δ, IBindCtx.Δ]).Δ,
 IsRunning: new CallbackT(int, [IRunnableObject.Δ]).Δ,
 LockRunning: new CallbackT(long, [IRunnableObject.Δ, int, int]).Δ,
 SetContainedObject: new CallbackT(long, [IRunnableObject.Δ, int]).Δ
});

var IRunningObjectTableVtbl = new StructT('IRunningObjectTableVtbl', {
 QueryInterface: new CallbackT(long, [IRunningObjectTable.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRunningObjectTable.Δ]).Δ,
 Release: new CallbackT(ulong, [IRunningObjectTable.Δ]).Δ,
 Register: new CallbackT(long, [IRunningObjectTable.Δ, ulong, IUnknown.Δ, IMoniker.Δ, ulong.Δ]).Δ,
 Revoke: new CallbackT(long, [IRunningObjectTable.Δ, ulong]).Δ,
 IsRunning: new CallbackT(long, [IRunningObjectTable.Δ, IMoniker.Δ]).Δ,
 GetObjectA: new CallbackT(long, [IRunningObjectTable.Δ, IMoniker.Δ, IUnknown.Δ.Δ]).Δ,
 NoteChangeTime: new CallbackT(long, [IRunningObjectTable.Δ, ulong, _FILETIME.Δ]).Δ,
 GetTimeOfLastChange: new CallbackT(long, [IRunningObjectTable.Δ, IMoniker.Δ, _FILETIME.Δ]).Δ,
 EnumRunning: new CallbackT(long, [IRunningObjectTable.Δ, IEnumMoniker.Δ.Δ]).Δ
});

var IPersistVtbl = new StructT('IPersistVtbl', {
 QueryInterface: new CallbackT(long, [IPersist.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPersist.Δ]).Δ,
 Release: new CallbackT(ulong, [IPersist.Δ]).Δ,
 GetClassID: new CallbackT(long, [IPersist.Δ, _GUID.Δ]).Δ
});

var IPersistStreamVtbl = new StructT('IPersistStreamVtbl', {
 QueryInterface: new CallbackT(long, [IPersistStream.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPersistStream.Δ]).Δ,
 Release: new CallbackT(ulong, [IPersistStream.Δ]).Δ,
 GetClassID: new CallbackT(long, [IPersistStream.Δ, _GUID.Δ]).Δ,
 IsDirty: new CallbackT(long, [IPersistStream.Δ]).Δ,
 Load: new CallbackT(long, [IPersistStream.Δ, IStream.Δ]).Δ,
 Save: new CallbackT(long, [IPersistStream.Δ, IStream.Δ, int]).Δ,
 GetSizeMax: new CallbackT(long, [IPersistStream.Δ, _ULARGE_INTEGER.Δ]).Δ
});

var IMonikerVtbl = new StructT('IMonikerVtbl', {
 QueryInterface: new CallbackT(long, [IMoniker.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMoniker.Δ]).Δ,
 Release: new CallbackT(ulong, [IMoniker.Δ]).Δ,
 GetClassID: new CallbackT(long, [IMoniker.Δ, _GUID.Δ]).Δ,
 IsDirty: new CallbackT(long, [IMoniker.Δ]).Δ,
 Load: new CallbackT(long, [IMoniker.Δ, IStream.Δ]).Δ,
 Save: new CallbackT(long, [IMoniker.Δ, IStream.Δ, int]).Δ,
 GetSizeMax: new CallbackT(long, [IMoniker.Δ, _ULARGE_INTEGER.Δ]).Δ,
 BindToObject: new CallbackT(long, [IMoniker.Δ, IBindCtx.Δ, IMoniker.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 BindToStorage: new CallbackT(long, [IMoniker.Δ, IBindCtx.Δ, IMoniker.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 Reduce: new CallbackT(long, [IMoniker.Δ, IBindCtx.Δ, ulong, IMoniker.Δ.Δ, IMoniker.Δ.Δ]).Δ,
 ComposeWith: new CallbackT(long, [IMoniker.Δ, IMoniker.Δ, int, IMoniker.Δ.Δ]).Δ,
 Enum: new CallbackT(long, [IMoniker.Δ, int, IEnumMoniker.Δ.Δ]).Δ,
 IsEqual: new CallbackT(long, [IMoniker.Δ, IMoniker.Δ]).Δ,
 Hash: new CallbackT(long, [IMoniker.Δ, ulong.Δ]).Δ,
 IsRunning: new CallbackT(long, [IMoniker.Δ, IBindCtx.Δ, IMoniker.Δ, IMoniker.Δ]).Δ,
 GetTimeOfLastChange: new CallbackT(long, [IMoniker.Δ, IBindCtx.Δ, IMoniker.Δ, _FILETIME.Δ]).Δ,
 Inverse: new CallbackT(long, [IMoniker.Δ, IMoniker.Δ.Δ]).Δ,
 CommonPrefixWith: new CallbackT(long, [IMoniker.Δ, IMoniker.Δ, IMoniker.Δ.Δ]).Δ,
 RelativePathTo: new CallbackT(long, [IMoniker.Δ, IMoniker.Δ, IMoniker.Δ.Δ]).Δ,
 GetDisplayName: new CallbackT(long, [IMoniker.Δ, IBindCtx.Δ, IMoniker.Δ, ushort.Δ.Δ]).Δ,
 ParseDisplayName: new CallbackT(long, [IMoniker.Δ, IBindCtx.Δ, IMoniker.Δ, ushort.Δ, ulong.Δ, IMoniker.Δ.Δ]).Δ,
 IsSystemMoniker: new CallbackT(long, [IMoniker.Δ, ulong.Δ]).Δ
});

var IROTDataVtbl = new StructT('IROTDataVtbl', {
 QueryInterface: new CallbackT(long, [IROTData.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IROTData.Δ]).Δ,
 Release: new CallbackT(ulong, [IROTData.Δ]).Δ,
 GetComparisonData: new CallbackT(long, [IROTData.Δ, uchar.Δ, ulong, ulong.Δ]).Δ
});

var IEnumStringVtbl = new StructT('IEnumStringVtbl', {
 QueryInterface: new CallbackT(long, [IEnumString.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumString.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumString.Δ]).Δ,
 Next: new CallbackT(long, [IEnumString.Δ, ulong, ushort.Δ.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumString.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumString.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumString.Δ, IEnumString.Δ.Δ]).Δ
});

var ISequentialStreamVtbl = new StructT('ISequentialStreamVtbl', {
 QueryInterface: new CallbackT(long, [ISequentialStream.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISequentialStream.Δ]).Δ,
 Release: new CallbackT(ulong, [ISequentialStream.Δ]).Δ,
 Read: new CallbackT(long, [ISequentialStream.Δ, _void.Δ, ulong, ulong.Δ]).Δ,
 Write: new CallbackT(long, [ISequentialStream.Δ, _void.Δ, ulong, ulong.Δ]).Δ
});

var STATSTG = new StructT('STATSTG', {
 pwcsName: LPOLESTR,
 type: DWORD,
 cbSize: ULARGE_INTEGER,
 mtime: FILETIME,
 ctime: FILETIME,
 atime: FILETIME,
 grfMode: DWORD,
 grfLocksSupported: DWORD,
 clsid: CLSID,
 grfStateBits: DWORD,
 reserved: DWORD
});

var IStreamVtbl = new StructT('IStreamVtbl', {
 QueryInterface: new CallbackT(long, [IStream.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IStream.Δ]).Δ,
 Release: new CallbackT(ulong, [IStream.Δ]).Δ,
 Read: new CallbackT(long, [IStream.Δ, _void.Δ, ulong, ulong.Δ]).Δ,
 Write: new CallbackT(long, [IStream.Δ, _void.Δ, ulong, ulong.Δ]).Δ,
 Seek: new CallbackT(long, [IStream.Δ, _LARGE_INTEGER, ulong, _ULARGE_INTEGER.Δ]).Δ,
 SetSize: new CallbackT(long, [IStream.Δ, _ULARGE_INTEGER]).Δ,
 CopyTo: new CallbackT(long, [IStream.Δ, IStream.Δ, _ULARGE_INTEGER, _ULARGE_INTEGER.Δ, _ULARGE_INTEGER.Δ]).Δ,
 Commit: new CallbackT(long, [IStream.Δ, ulong]).Δ,
 Revert: new CallbackT(long, [IStream.Δ]).Δ,
 LockRegion: new CallbackT(long, [IStream.Δ, _ULARGE_INTEGER, _ULARGE_INTEGER, ulong]).Δ,
 UnlockRegion: new CallbackT(long, [IStream.Δ, _ULARGE_INTEGER, _ULARGE_INTEGER, ulong]).Δ,
 Stat: new CallbackT(long, [IStream.Δ, tagSTATSTG.Δ, ulong]).Δ,
 Clone: new CallbackT(long, [IStream.Δ, IStream.Δ.Δ]).Δ
});

var IEnumSTATSTGVtbl = new StructT('IEnumSTATSTGVtbl', {
 QueryInterface: new CallbackT(long, [IEnumSTATSTG.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumSTATSTG.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumSTATSTG.Δ]).Δ,
 Next: new CallbackT(long, [IEnumSTATSTG.Δ, ulong, tagSTATSTG.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumSTATSTG.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumSTATSTG.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumSTATSTG.Δ, IEnumSTATSTG.Δ.Δ]).Δ
});

var RemSNB = new StructT('RemSNB', {
 ulCntStr: ulong,
 ulCntChar: ulong,
 rgString: new ArrayT(OLECHAR,  1 )
});

var IStorageVtbl = new StructT('IStorageVtbl', {
 QueryInterface: new CallbackT(long, [IStorage.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IStorage.Δ]).Δ,
 Release: new CallbackT(ulong, [IStorage.Δ]).Δ,
 CreateStream: new CallbackT(long, [IStorage.Δ, ushort.Δ, ulong, ulong, ulong, IStream.Δ.Δ]).Δ,
 OpenStream: new CallbackT(long, [IStorage.Δ, ushort.Δ, _void.Δ, ulong, ulong, IStream.Δ.Δ]).Δ,
 CreateStorage: new CallbackT(long, [IStorage.Δ, ushort.Δ, ulong, ulong, ulong, IStorage.Δ.Δ]).Δ,
 OpenStorage: new CallbackT(long, [IStorage.Δ, ushort.Δ, IStorage.Δ, ulong, ushort.Δ.Δ, ulong, IStorage.Δ.Δ]).Δ,
 CopyTo: new CallbackT(long, [IStorage.Δ, ulong, _GUID.Δ, ushort.Δ.Δ, IStorage.Δ]).Δ,
 MoveElementTo: new CallbackT(long, [IStorage.Δ, ushort.Δ, IStorage.Δ, ushort.Δ, ulong]).Δ,
 Commit: new CallbackT(long, [IStorage.Δ, ulong]).Δ,
 Revert: new CallbackT(long, [IStorage.Δ]).Δ,
 EnumElements: new CallbackT(long, [IStorage.Δ, ulong, _void.Δ, ulong, IEnumSTATSTG.Δ.Δ]).Δ,
 DestroyElement: new CallbackT(long, [IStorage.Δ, ushort.Δ]).Δ,
 RenameElement: new CallbackT(long, [IStorage.Δ, ushort.Δ, ushort.Δ]).Δ,
 SetElementTimes: new CallbackT(long, [IStorage.Δ, ushort.Δ, _FILETIME.Δ, _FILETIME.Δ, _FILETIME.Δ]).Δ,
 SetClass: new CallbackT(long, [IStorage.Δ, _GUID.Δ]).Δ,
 SetStateBits: new CallbackT(long, [IStorage.Δ, ulong, ulong]).Δ,
 Stat: new CallbackT(long, [IStorage.Δ, tagSTATSTG.Δ, ulong]).Δ
});

var IPersistFileVtbl = new StructT('IPersistFileVtbl', {
 QueryInterface: new CallbackT(long, [IPersistFile.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPersistFile.Δ]).Δ,
 Release: new CallbackT(ulong, [IPersistFile.Δ]).Δ,
 GetClassID: new CallbackT(long, [IPersistFile.Δ, _GUID.Δ]).Δ,
 IsDirty: new CallbackT(long, [IPersistFile.Δ]).Δ,
 Load: new CallbackT(long, [IPersistFile.Δ, ushort.Δ, ulong]).Δ,
 Save: new CallbackT(long, [IPersistFile.Δ, ushort.Δ, int]).Δ,
 SaveCompleted: new CallbackT(long, [IPersistFile.Δ, ushort.Δ]).Δ,
 GetCurFile: new CallbackT(long, [IPersistFile.Δ, ushort.Δ.Δ]).Δ
});

var IPersistStorageVtbl = new StructT('IPersistStorageVtbl', {
 QueryInterface: new CallbackT(long, [IPersistStorage.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPersistStorage.Δ]).Δ,
 Release: new CallbackT(ulong, [IPersistStorage.Δ]).Δ,
 GetClassID: new CallbackT(long, [IPersistStorage.Δ, _GUID.Δ]).Δ,
 IsDirty: new CallbackT(long, [IPersistStorage.Δ]).Δ,
 InitNew: new CallbackT(long, [IPersistStorage.Δ, IStorage.Δ]).Δ,
 Load: new CallbackT(long, [IPersistStorage.Δ, IStorage.Δ]).Δ,
 Save: new CallbackT(long, [IPersistStorage.Δ, IStorage.Δ, int]).Δ,
 SaveCompleted: new CallbackT(long, [IPersistStorage.Δ, IStorage.Δ]).Δ,
 HandsOffStorage: new CallbackT(long, [IPersistStorage.Δ]).Δ
});

var ILockBytesVtbl = new StructT('ILockBytesVtbl', {
 QueryInterface: new CallbackT(long, [ILockBytes.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ILockBytes.Δ]).Δ,
 Release: new CallbackT(ulong, [ILockBytes.Δ]).Δ,
 ReadAt: new CallbackT(long, [ILockBytes.Δ, _ULARGE_INTEGER, _void.Δ, ulong, ulong.Δ]).Δ,
 WriteAt: new CallbackT(long, [ILockBytes.Δ, _ULARGE_INTEGER, _void.Δ, ulong, ulong.Δ]).Δ,
 Flush: new CallbackT(long, [ILockBytes.Δ]).Δ,
 SetSize: new CallbackT(long, [ILockBytes.Δ, _ULARGE_INTEGER]).Δ,
 LockRegion: new CallbackT(long, [ILockBytes.Δ, _ULARGE_INTEGER, _ULARGE_INTEGER, ulong]).Δ,
 UnlockRegion: new CallbackT(long, [ILockBytes.Δ, _ULARGE_INTEGER, _ULARGE_INTEGER, ulong]).Δ,
 Stat: new CallbackT(long, [ILockBytes.Δ, tagSTATSTG.Δ, ulong]).Δ
});

var DVTARGETDEVICE = new StructT('DVTARGETDEVICE', {
 tdSize: DWORD,
 tdDriverNameOffset: WORD,
 tdDeviceNameOffset: WORD,
 tdPortNameOffset: WORD,
 tdExtDevmodeOffset: WORD,
 tdData: new ArrayT(BYTE,  1 )
});

var FORMATETC = new StructT('FORMATETC', {
 cfFormat: CLIPFORMAT,
 ptd: DVTARGETDEVICE.Δ,
 dwAspect: DWORD,
 lindex: LONG,
 tymed: DWORD
});

var IEnumFORMATETCVtbl = new StructT('IEnumFORMATETCVtbl', {
 QueryInterface: new CallbackT(long, [IEnumFORMATETC.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumFORMATETC.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumFORMATETC.Δ]).Δ,
 Next: new CallbackT(long, [IEnumFORMATETC.Δ, ulong, tagFORMATETC.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumFORMATETC.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumFORMATETC.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumFORMATETC.Δ, IEnumFORMATETC.Δ.Δ]).Δ
});

var STATDATA = new StructT('STATDATA', {
 formatetc: FORMATETC,
 advf: DWORD,
 pAdvSink: IAdviseSink.Δ,
 dwConnection: DWORD
});

var IEnumSTATDATAVtbl = new StructT('IEnumSTATDATAVtbl', {
 QueryInterface: new CallbackT(long, [IEnumSTATDATA.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumSTATDATA.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumSTATDATA.Δ]).Δ,
 Next: new CallbackT(long, [IEnumSTATDATA.Δ, ulong, tagSTATDATA.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumSTATDATA.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumSTATDATA.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumSTATDATA.Δ, IEnumSTATDATA.Δ.Δ]).Δ
});

var IRootStorageVtbl = new StructT('IRootStorageVtbl', {
 QueryInterface: new CallbackT(long, [IRootStorage.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRootStorage.Δ]).Δ,
 Release: new CallbackT(ulong, [IRootStorage.Δ]).Δ,
 SwitchToFile: new CallbackT(long, [IRootStorage.Δ, ushort.Δ]).Δ
});

var RemSTGMEDIUM = new StructT('RemSTGMEDIUM', {
 tymed: DWORD,
 dwHandleType: DWORD,
 pData: ulong,
 pUnkForRelease: ulong,
 cbData: ulong,
 data: new ArrayT(byte,  1 )
});

var ASYNC_STGMEDIUM = new StructT('ASYNC_STGMEDIUM', {
 tymed: DWORD,
 pUnkForRelease: IUnknown.Δ
});

var GDI_OBJECT = new StructT('GDI_OBJECT', {
 ObjectType: DWORD,
 u: __MIDL_IAdviseSink_0002
});

var userSTGMEDIUM = new StructT('userSTGMEDIUM', {
 pUnkForRelease: IUnknown.Δ
});

var _STGMEDIUM_UNION = new StructT('_STGMEDIUM_UNION', {
 tymed: DWORD,
 u: __MIDL_IAdviseSink_0003
});

var userFLAG_STGMEDIUM = new StructT('userFLAG_STGMEDIUM', {
 ContextFlags: long,
 fPassOwnership: long,
 Stgmed: userSTGMEDIUM
});

var FLAG_STGMEDIUM = new StructT('FLAG_STGMEDIUM', {
 ContextFlags: long,
 fPassOwnership: long,
 Stgmed: STGMEDIUM
});

var IAdviseSinkVtbl = new StructT('IAdviseSinkVtbl', {
 QueryInterface: new CallbackT(long, [IAdviseSink.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAdviseSink.Δ]).Δ,
 Release: new CallbackT(ulong, [IAdviseSink.Δ]).Δ,
 OnDataChange: new CallbackT(_void, [IAdviseSink.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 OnViewChange: new CallbackT(_void, [IAdviseSink.Δ, ulong, long]).Δ,
 OnRename: new CallbackT(_void, [IAdviseSink.Δ, IMoniker.Δ]).Δ,
 OnSave: new CallbackT(_void, [IAdviseSink.Δ]).Δ,
 OnClose: new CallbackT(_void, [IAdviseSink.Δ]).Δ
});

var AsyncIAdviseSinkVtbl = new StructT('AsyncIAdviseSinkVtbl', {
 QueryInterface: new CallbackT(long, [AsyncIAdviseSink.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [AsyncIAdviseSink.Δ]).Δ,
 Release: new CallbackT(ulong, [AsyncIAdviseSink.Δ]).Δ,
 Begin_OnDataChange: new CallbackT(_void, [AsyncIAdviseSink.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 Finish_OnDataChange: new CallbackT(_void, [AsyncIAdviseSink.Δ]).Δ,
 Begin_OnViewChange: new CallbackT(_void, [AsyncIAdviseSink.Δ, ulong, long]).Δ,
 Finish_OnViewChange: new CallbackT(_void, [AsyncIAdviseSink.Δ]).Δ,
 Begin_OnRename: new CallbackT(_void, [AsyncIAdviseSink.Δ, IMoniker.Δ]).Δ,
 Finish_OnRename: new CallbackT(_void, [AsyncIAdviseSink.Δ]).Δ,
 Begin_OnSave: new CallbackT(_void, [AsyncIAdviseSink.Δ]).Δ,
 Finish_OnSave: new CallbackT(_void, [AsyncIAdviseSink.Δ]).Δ,
 Begin_OnClose: new CallbackT(_void, [AsyncIAdviseSink.Δ]).Δ,
 Finish_OnClose: new CallbackT(_void, [AsyncIAdviseSink.Δ]).Δ
});

var IAdviseSink2Vtbl = new StructT('IAdviseSink2Vtbl', {
 QueryInterface: new CallbackT(long, [IAdviseSink2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAdviseSink2.Δ]).Δ,
 Release: new CallbackT(ulong, [IAdviseSink2.Δ]).Δ,
 OnDataChange: new CallbackT(_void, [IAdviseSink2.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 OnViewChange: new CallbackT(_void, [IAdviseSink2.Δ, ulong, long]).Δ,
 OnRename: new CallbackT(_void, [IAdviseSink2.Δ, IMoniker.Δ]).Δ,
 OnSave: new CallbackT(_void, [IAdviseSink2.Δ]).Δ,
 OnClose: new CallbackT(_void, [IAdviseSink2.Δ]).Δ,
 OnLinkSrcChange: new CallbackT(_void, [IAdviseSink2.Δ, IMoniker.Δ]).Δ
});

var AsyncIAdviseSink2Vtbl = new StructT('AsyncIAdviseSink2Vtbl', {
 QueryInterface: new CallbackT(long, [AsyncIAdviseSink2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [AsyncIAdviseSink2.Δ]).Δ,
 Release: new CallbackT(ulong, [AsyncIAdviseSink2.Δ]).Δ,
 Begin_OnDataChange: new CallbackT(_void, [AsyncIAdviseSink2.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 Finish_OnDataChange: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ,
 Begin_OnViewChange: new CallbackT(_void, [AsyncIAdviseSink2.Δ, ulong, long]).Δ,
 Finish_OnViewChange: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ,
 Begin_OnRename: new CallbackT(_void, [AsyncIAdviseSink2.Δ, IMoniker.Δ]).Δ,
 Finish_OnRename: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ,
 Begin_OnSave: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ,
 Finish_OnSave: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ,
 Begin_OnClose: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ,
 Finish_OnClose: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ,
 Begin_OnLinkSrcChange: new CallbackT(_void, [AsyncIAdviseSink2.Δ, IMoniker.Δ]).Δ,
 Finish_OnLinkSrcChange: new CallbackT(_void, [AsyncIAdviseSink2.Δ]).Δ
});

var IDataObjectVtbl = new StructT('IDataObjectVtbl', {
 QueryInterface: new CallbackT(long, [IDataObject.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDataObject.Δ]).Δ,
 Release: new CallbackT(ulong, [IDataObject.Δ]).Δ,
 GetData: new CallbackT(long, [IDataObject.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 GetDataHere: new CallbackT(long, [IDataObject.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 QueryGetData: new CallbackT(long, [IDataObject.Δ, tagFORMATETC.Δ]).Δ,
 GetCanonicalFormatEtc: new CallbackT(long, [IDataObject.Δ, tagFORMATETC.Δ, tagFORMATETC.Δ]).Δ,
 SetData: new CallbackT(long, [IDataObject.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ, int]).Δ,
 EnumFormatEtc: new CallbackT(long, [IDataObject.Δ, ulong, IEnumFORMATETC.Δ.Δ]).Δ,
 DAdvise: new CallbackT(long, [IDataObject.Δ, tagFORMATETC.Δ, ulong, IAdviseSink.Δ, ulong.Δ]).Δ,
 DUnadvise: new CallbackT(long, [IDataObject.Δ, ulong]).Δ,
 EnumDAdvise: new CallbackT(long, [IDataObject.Δ, IEnumSTATDATA.Δ.Δ]).Δ
});

var IDataAdviseHolderVtbl = new StructT('IDataAdviseHolderVtbl', {
 QueryInterface: new CallbackT(long, [IDataAdviseHolder.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDataAdviseHolder.Δ]).Δ,
 Release: new CallbackT(ulong, [IDataAdviseHolder.Δ]).Δ,
 Advise: new CallbackT(long, [IDataAdviseHolder.Δ, IDataObject.Δ, tagFORMATETC.Δ, ulong, IAdviseSink.Δ, ulong.Δ]).Δ,
 Unadvise: new CallbackT(long, [IDataAdviseHolder.Δ, ulong]).Δ,
 EnumAdvise: new CallbackT(long, [IDataAdviseHolder.Δ, IEnumSTATDATA.Δ.Δ]).Δ,
 SendOnDataChange: new CallbackT(long, [IDataAdviseHolder.Δ, IDataObject.Δ, ulong, ulong]).Δ
});

var INTERFACEINFO = new StructT('INTERFACEINFO', {
 pUnk: IUnknown.Δ,
 iid: IID,
 wMethod: WORD
});

var IMessageFilterVtbl = new StructT('IMessageFilterVtbl', {
 QueryInterface: new CallbackT(long, [IMessageFilter.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMessageFilter.Δ]).Δ,
 Release: new CallbackT(ulong, [IMessageFilter.Δ]).Δ,
 HandleInComingCall: new CallbackT(ulong, [IMessageFilter.Δ, ulong, HTASK__.Δ, ulong, tagINTERFACEINFO.Δ]).Δ,
 RetryRejectedCall: new CallbackT(ulong, [IMessageFilter.Δ, HTASK__.Δ, ulong, ulong]).Δ,
 MessagePending: new CallbackT(ulong, [IMessageFilter.Δ, HTASK__.Δ, ulong, ulong]).Δ
});

var RPCOLEMESSAGE = new StructT('RPCOLEMESSAGE', {
 reserved1: _void.Δ,
 dataRepresentation: RPCOLEDATAREP,
 Buffer: _void.Δ,
 cbBuffer: ULONG,
 iMethod: ULONG,
 reserved2: new ArrayT(undefined,  5 ),
 rpcFlags: ULONG
});

var IRpcChannelBufferVtbl = new StructT('IRpcChannelBufferVtbl', {
 QueryInterface: new CallbackT(long, [IRpcChannelBuffer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcChannelBuffer.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcChannelBuffer.Δ]).Δ,
 GetBuffer: new CallbackT(long, [IRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ, _GUID.Δ]).Δ,
 SendReceive: new CallbackT(long, [IRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ]).Δ,
 FreeBuffer: new CallbackT(long, [IRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ]).Δ,
 GetDestCtx: new CallbackT(long, [IRpcChannelBuffer.Δ, ulong.Δ, _void.Δ.Δ]).Δ,
 IsConnected: new CallbackT(long, [IRpcChannelBuffer.Δ]).Δ
});

var IRpcChannelBuffer2Vtbl = new StructT('IRpcChannelBuffer2Vtbl', {
 QueryInterface: new CallbackT(long, [IRpcChannelBuffer2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcChannelBuffer2.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcChannelBuffer2.Δ]).Δ,
 GetBuffer: new CallbackT(long, [IRpcChannelBuffer2.Δ, tagRPCOLEMESSAGE.Δ, _GUID.Δ]).Δ,
 SendReceive: new CallbackT(long, [IRpcChannelBuffer2.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ]).Δ,
 FreeBuffer: new CallbackT(long, [IRpcChannelBuffer2.Δ, tagRPCOLEMESSAGE.Δ]).Δ,
 GetDestCtx: new CallbackT(long, [IRpcChannelBuffer2.Δ, ulong.Δ, _void.Δ.Δ]).Δ,
 IsConnected: new CallbackT(long, [IRpcChannelBuffer2.Δ]).Δ,
 GetProtocolVersion: new CallbackT(long, [IRpcChannelBuffer2.Δ, ulong.Δ]).Δ
});

var IAsyncRpcChannelBufferVtbl = new StructT('IAsyncRpcChannelBufferVtbl', {
 QueryInterface: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAsyncRpcChannelBuffer.Δ]).Δ,
 Release: new CallbackT(ulong, [IAsyncRpcChannelBuffer.Δ]).Δ,
 GetBuffer: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ, _GUID.Δ]).Δ,
 SendReceive: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ]).Δ,
 FreeBuffer: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ]).Δ,
 GetDestCtx: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, ulong.Δ, _void.Δ.Δ]).Δ,
 IsConnected: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ]).Δ,
 GetProtocolVersion: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, ulong.Δ]).Δ,
 Send: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ, ISynchronize.Δ, ulong.Δ]).Δ,
 Receive: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ]).Δ,
 GetDestCtxEx: new CallbackT(long, [IAsyncRpcChannelBuffer.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ, _void.Δ.Δ]).Δ
});

var IRpcChannelBuffer3Vtbl = new StructT('IRpcChannelBuffer3Vtbl', {
 QueryInterface: new CallbackT(long, [IRpcChannelBuffer3.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcChannelBuffer3.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcChannelBuffer3.Δ]).Δ,
 GetBuffer: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, _GUID.Δ]).Δ,
 SendReceive: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ]).Δ,
 FreeBuffer: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ]).Δ,
 GetDestCtx: new CallbackT(long, [IRpcChannelBuffer3.Δ, ulong.Δ, _void.Δ.Δ]).Δ,
 IsConnected: new CallbackT(long, [IRpcChannelBuffer3.Δ]).Δ,
 GetProtocolVersion: new CallbackT(long, [IRpcChannelBuffer3.Δ, ulong.Δ]).Δ,
 Send: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ]).Δ,
 Receive: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, ulong, ulong.Δ]).Δ,
 Cancel: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ]).Δ,
 GetCallContext: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 GetDestCtxEx: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ, _void.Δ.Δ]).Δ,
 GetState: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, ulong.Δ]).Δ,
 RegisterAsync: new CallbackT(long, [IRpcChannelBuffer3.Δ, tagRPCOLEMESSAGE.Δ, IAsyncManager.Δ]).Δ
});

var IRpcSyntaxNegotiateVtbl = new StructT('IRpcSyntaxNegotiateVtbl', {
 QueryInterface: new CallbackT(long, [IRpcSyntaxNegotiate.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcSyntaxNegotiate.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcSyntaxNegotiate.Δ]).Δ,
 NegotiateSyntax: new CallbackT(long, [IRpcSyntaxNegotiate.Δ, tagRPCOLEMESSAGE.Δ]).Δ
});

var IRpcProxyBufferVtbl = new StructT('IRpcProxyBufferVtbl', {
 QueryInterface: new CallbackT(long, [IRpcProxyBuffer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcProxyBuffer.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcProxyBuffer.Δ]).Δ,
 Connect: new CallbackT(long, [IRpcProxyBuffer.Δ, IRpcChannelBuffer.Δ]).Δ,
 Disconnect: new CallbackT(_void, [IRpcProxyBuffer.Δ]).Δ
});

var IRpcStubBufferVtbl = new StructT('IRpcStubBufferVtbl', {
 QueryInterface: new CallbackT(long, [IRpcStubBuffer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcStubBuffer.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcStubBuffer.Δ]).Δ,
 Connect: new CallbackT(long, [IRpcStubBuffer.Δ, IUnknown.Δ]).Δ,
 Disconnect: new CallbackT(_void, [IRpcStubBuffer.Δ]).Δ,
 Invoke: new CallbackT(long, [IRpcStubBuffer.Δ, tagRPCOLEMESSAGE.Δ, IRpcChannelBuffer.Δ]).Δ,
 IsIIDSupported: new CallbackT(IRpcStubBuffer.Δ, [IRpcStubBuffer.Δ, _GUID.Δ]).Δ,
 CountRefs: new CallbackT(ulong, [IRpcStubBuffer.Δ]).Δ,
 DebugServerQueryInterface: new CallbackT(long, [IRpcStubBuffer.Δ, _void.Δ.Δ]).Δ,
 DebugServerRelease: new CallbackT(_void, [IRpcStubBuffer.Δ, _void.Δ]).Δ
});

var IPSFactoryBufferVtbl = new StructT('IPSFactoryBufferVtbl', {
 QueryInterface: new CallbackT(long, [IPSFactoryBuffer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPSFactoryBuffer.Δ]).Δ,
 Release: new CallbackT(ulong, [IPSFactoryBuffer.Δ]).Δ,
 CreateProxy: new CallbackT(long, [IPSFactoryBuffer.Δ, IUnknown.Δ, _GUID.Δ, IRpcProxyBuffer.Δ.Δ, _void.Δ.Δ]).Δ,
 CreateStub: new CallbackT(long, [IPSFactoryBuffer.Δ, _GUID.Δ, IUnknown.Δ, IRpcStubBuffer.Δ.Δ]).Δ
});

var SChannelHookCallInfo = new StructT('SChannelHookCallInfo', {
 iid: IID,
 cbSize: DWORD,
 uCausality: GUID,
 dwServerPid: DWORD,
 iMethod: DWORD,
 pObject: _void.Δ
});

var IChannelHookVtbl = new StructT('IChannelHookVtbl', {
 QueryInterface: new CallbackT(long, [IChannelHook.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IChannelHook.Δ]).Δ,
 Release: new CallbackT(ulong, [IChannelHook.Δ]).Δ,
 ClientGetSize: new CallbackT(_void, [IChannelHook.Δ, _GUID.Δ, _GUID.Δ, ulong.Δ]).Δ,
 ClientFillBuffer: new CallbackT(_void, [IChannelHook.Δ, _GUID.Δ, _GUID.Δ, ulong.Δ, _void.Δ]).Δ,
 ClientNotify: new CallbackT(_void, [IChannelHook.Δ, _GUID.Δ, _GUID.Δ, ulong, _void.Δ, ulong, long]).Δ,
 ServerNotify: new CallbackT(_void, [IChannelHook.Δ, _GUID.Δ, _GUID.Δ, ulong, _void.Δ, ulong]).Δ,
 ServerGetSize: new CallbackT(_void, [IChannelHook.Δ, _GUID.Δ, _GUID.Δ, long, ulong.Δ]).Δ,
 ServerFillBuffer: new CallbackT(_void, [IChannelHook.Δ, _GUID.Δ, _GUID.Δ, ulong.Δ, _void.Δ, long]).Δ
});

var SOLE_AUTHENTICATION_SERVICE = new StructT('SOLE_AUTHENTICATION_SERVICE', {
 dwAuthnSvc: DWORD,
 dwAuthzSvc: DWORD,
 pPrincipalName: OLECHAR.Δ,
 hr: HRESULT
});

var SOLE_AUTHENTICATION_INFO = new StructT('SOLE_AUTHENTICATION_INFO', {
 dwAuthnSvc: DWORD,
 dwAuthzSvc: DWORD,
 pAuthInfo: _void.Δ
});

var SOLE_AUTHENTICATION_LIST = new StructT('SOLE_AUTHENTICATION_LIST', {
 cAuthInfo: DWORD,
 aAuthInfo: SOLE_AUTHENTICATION_INFO.Δ
});

var IClientSecurityVtbl = new StructT('IClientSecurityVtbl', {
 QueryInterface: new CallbackT(long, [IClientSecurity.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IClientSecurity.Δ]).Δ,
 Release: new CallbackT(ulong, [IClientSecurity.Δ]).Δ,
 QueryBlanket: new CallbackT(long, [IClientSecurity.Δ, IUnknown.Δ, ulong.Δ, ulong.Δ, ushort.Δ.Δ, ulong.Δ, ulong.Δ, _void.Δ.Δ, ulong.Δ]).Δ,
 SetBlanket: new CallbackT(long, [IClientSecurity.Δ, IUnknown.Δ, ulong, ulong, ushort.Δ, ulong, ulong, _void.Δ, ulong]).Δ,
 CopyProxy: new CallbackT(long, [IClientSecurity.Δ, IUnknown.Δ, IUnknown.Δ.Δ]).Δ
});

var IServerSecurityVtbl = new StructT('IServerSecurityVtbl', {
 QueryInterface: new CallbackT(long, [IServerSecurity.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IServerSecurity.Δ]).Δ,
 Release: new CallbackT(ulong, [IServerSecurity.Δ]).Δ,
 QueryBlanket: new CallbackT(long, [IServerSecurity.Δ, ulong.Δ, ulong.Δ, ushort.Δ.Δ, ulong.Δ, ulong.Δ, _void.Δ.Δ, ulong.Δ]).Δ,
 ImpersonateClient: new CallbackT(long, [IServerSecurity.Δ]).Δ,
 RevertToSelf: new CallbackT(long, [IServerSecurity.Δ]).Δ,
 IsImpersonating: new CallbackT(int, [IServerSecurity.Δ]).Δ
});

var IClassActivatorVtbl = new StructT('IClassActivatorVtbl', {
 QueryInterface: new CallbackT(long, [IClassActivator.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IClassActivator.Δ]).Δ,
 Release: new CallbackT(ulong, [IClassActivator.Δ]).Δ,
 GetClassObject: new CallbackT(long, [IClassActivator.Δ, _GUID.Δ, ulong, ulong, _GUID.Δ, _void.Δ.Δ]).Δ
});

var IRpcOptionsVtbl = new StructT('IRpcOptionsVtbl', {
 QueryInterface: new CallbackT(long, [IRpcOptions.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcOptions.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcOptions.Δ]).Δ,
 Set: new CallbackT(long, [IRpcOptions.Δ, IUnknown.Δ, RPCOPT_PROPERTIES, ulong]).Δ,
 Query: new CallbackT(long, [IRpcOptions.Δ, IUnknown.Δ, RPCOPT_PROPERTIES, ulong.Δ]).Δ
});

var IGlobalOptionsVtbl = new StructT('IGlobalOptionsVtbl', {
 QueryInterface: new CallbackT(long, [IGlobalOptions.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IGlobalOptions.Δ]).Δ,
 Release: new CallbackT(ulong, [IGlobalOptions.Δ]).Δ,
 Set: new CallbackT(long, [IGlobalOptions.Δ, GLOBALOPT_PROPERTIES, ulong]).Δ,
 Query: new CallbackT(long, [IGlobalOptions.Δ, GLOBALOPT_PROPERTIES, ulong.Δ]).Δ
});

var IFillLockBytesVtbl = new StructT('IFillLockBytesVtbl', {
 QueryInterface: new CallbackT(long, [IFillLockBytes.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IFillLockBytes.Δ]).Δ,
 Release: new CallbackT(ulong, [IFillLockBytes.Δ]).Δ,
 FillAppend: new CallbackT(long, [IFillLockBytes.Δ, _void.Δ, ulong, ulong.Δ]).Δ,
 FillAt: new CallbackT(long, [IFillLockBytes.Δ, _ULARGE_INTEGER, _void.Δ, ulong, ulong.Δ]).Δ,
 SetFillSize: new CallbackT(long, [IFillLockBytes.Δ, _ULARGE_INTEGER]).Δ,
 Terminate: new CallbackT(long, [IFillLockBytes.Δ, int]).Δ
});

var IProgressNotifyVtbl = new StructT('IProgressNotifyVtbl', {
 QueryInterface: new CallbackT(long, [IProgressNotify.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IProgressNotify.Δ]).Δ,
 Release: new CallbackT(ulong, [IProgressNotify.Δ]).Δ,
 OnProgress: new CallbackT(long, [IProgressNotify.Δ, ulong, ulong, int, int]).Δ
});

var StorageLayout = new StructT('StorageLayout', {
 LayoutType: DWORD,
 pwcsElementName: OLECHAR.Δ,
 cOffset: LARGE_INTEGER,
 cBytes: LARGE_INTEGER
});

var ILayoutStorageVtbl = new StructT('ILayoutStorageVtbl', {
 QueryInterface: new CallbackT(long, [ILayoutStorage.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ILayoutStorage.Δ]).Δ,
 Release: new CallbackT(ulong, [ILayoutStorage.Δ]).Δ,
 LayoutScript: new CallbackT(long, [ILayoutStorage.Δ, tagStorageLayout.Δ, ulong, ulong]).Δ,
 BeginMonitor: new CallbackT(long, [ILayoutStorage.Δ]).Δ,
 EndMonitor: new CallbackT(long, [ILayoutStorage.Δ]).Δ,
 ReLayoutDocfile: new CallbackT(long, [ILayoutStorage.Δ, ushort.Δ]).Δ,
 ReLayoutDocfileOnILockBytes: new CallbackT(long, [ILayoutStorage.Δ, ILockBytes.Δ]).Δ
});

var IBlockingLockVtbl = new StructT('IBlockingLockVtbl', {
 QueryInterface: new CallbackT(long, [IBlockingLock.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IBlockingLock.Δ]).Δ,
 Release: new CallbackT(ulong, [IBlockingLock.Δ]).Δ,
 Lock: new CallbackT(long, [IBlockingLock.Δ, ulong]).Δ,
 Unlock: new CallbackT(long, [IBlockingLock.Δ]).Δ
});

var ITimeAndNoticeControlVtbl = new StructT('ITimeAndNoticeControlVtbl', {
 QueryInterface: new CallbackT(long, [ITimeAndNoticeControl.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITimeAndNoticeControl.Δ]).Δ,
 Release: new CallbackT(ulong, [ITimeAndNoticeControl.Δ]).Δ,
 SuppressChanges: new CallbackT(long, [ITimeAndNoticeControl.Δ, ulong, ulong]).Δ
});

var IOplockStorageVtbl = new StructT('IOplockStorageVtbl', {
 QueryInterface: new CallbackT(long, [IOplockStorage.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOplockStorage.Δ]).Δ,
 Release: new CallbackT(ulong, [IOplockStorage.Δ]).Δ,
 CreateStorageEx: new CallbackT(long, [IOplockStorage.Δ, ushort.Δ, ulong, ulong, ulong, _GUID.Δ, _void.Δ.Δ]).Δ,
 OpenStorageEx: new CallbackT(long, [IOplockStorage.Δ, ushort.Δ, ulong, ulong, ulong, _GUID.Δ, _void.Δ.Δ]).Δ
});

var ISurrogateVtbl = new StructT('ISurrogateVtbl', {
 QueryInterface: new CallbackT(long, [ISurrogate.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISurrogate.Δ]).Δ,
 Release: new CallbackT(ulong, [ISurrogate.Δ]).Δ,
 LoadDllServer: new CallbackT(long, [ISurrogate.Δ, _GUID.Δ]).Δ,
 FreeSurrogate: new CallbackT(long, [ISurrogate.Δ]).Δ
});

var IGlobalInterfaceTableVtbl = new StructT('IGlobalInterfaceTableVtbl', {
 QueryInterface: new CallbackT(long, [IGlobalInterfaceTable.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IGlobalInterfaceTable.Δ]).Δ,
 Release: new CallbackT(ulong, [IGlobalInterfaceTable.Δ]).Δ,
 RegisterInterfaceInGlobal: new CallbackT(long, [IGlobalInterfaceTable.Δ, IUnknown.Δ, _GUID.Δ, ulong.Δ]).Δ,
 RevokeInterfaceFromGlobal: new CallbackT(long, [IGlobalInterfaceTable.Δ, ulong]).Δ,
 GetInterfaceFromGlobal: new CallbackT(long, [IGlobalInterfaceTable.Δ, ulong, _GUID.Δ, _void.Δ.Δ]).Δ
});

var IDirectWriterLockVtbl = new StructT('IDirectWriterLockVtbl', {
 QueryInterface: new CallbackT(long, [IDirectWriterLock.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDirectWriterLock.Δ]).Δ,
 Release: new CallbackT(ulong, [IDirectWriterLock.Δ]).Δ,
 WaitForWriteAccess: new CallbackT(long, [IDirectWriterLock.Δ, ulong]).Δ,
 ReleaseWriteAccess: new CallbackT(long, [IDirectWriterLock.Δ]).Δ,
 HaveWriteAccess: new CallbackT(long, [IDirectWriterLock.Δ]).Δ
});

var ISynchronizeVtbl = new StructT('ISynchronizeVtbl', {
 QueryInterface: new CallbackT(long, [ISynchronize.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISynchronize.Δ]).Δ,
 Release: new CallbackT(ulong, [ISynchronize.Δ]).Δ,
 Wait: new CallbackT(long, [ISynchronize.Δ, ulong, ulong]).Δ,
 Signal: new CallbackT(long, [ISynchronize.Δ]).Δ,
 Reset: new CallbackT(long, [ISynchronize.Δ]).Δ
});

var ISynchronizeHandleVtbl = new StructT('ISynchronizeHandleVtbl', {
 QueryInterface: new CallbackT(long, [ISynchronizeHandle.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISynchronizeHandle.Δ]).Δ,
 Release: new CallbackT(ulong, [ISynchronizeHandle.Δ]).Δ,
 GetHandle: new CallbackT(long, [ISynchronizeHandle.Δ, _void.Δ.Δ]).Δ
});

var ISynchronizeEventVtbl = new StructT('ISynchronizeEventVtbl', {
 QueryInterface: new CallbackT(long, [ISynchronizeEvent.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISynchronizeEvent.Δ]).Δ,
 Release: new CallbackT(ulong, [ISynchronizeEvent.Δ]).Δ,
 GetHandle: new CallbackT(long, [ISynchronizeEvent.Δ, _void.Δ.Δ]).Δ,
 SetEventHandle: new CallbackT(long, [ISynchronizeEvent.Δ, _void.Δ.Δ]).Δ
});

var ISynchronizeContainerVtbl = new StructT('ISynchronizeContainerVtbl', {
 QueryInterface: new CallbackT(long, [ISynchronizeContainer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISynchronizeContainer.Δ]).Δ,
 Release: new CallbackT(ulong, [ISynchronizeContainer.Δ]).Δ,
 AddSynchronize: new CallbackT(long, [ISynchronizeContainer.Δ, ISynchronize.Δ]).Δ,
 WaitMultiple: new CallbackT(long, [ISynchronizeContainer.Δ, ulong, ulong, ISynchronize.Δ.Δ]).Δ
});

var ISynchronizeMutexVtbl = new StructT('ISynchronizeMutexVtbl', {
 QueryInterface: new CallbackT(long, [ISynchronizeMutex.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISynchronizeMutex.Δ]).Δ,
 Release: new CallbackT(ulong, [ISynchronizeMutex.Δ]).Δ,
 Wait: new CallbackT(long, [ISynchronizeMutex.Δ, ulong, ulong]).Δ,
 Signal: new CallbackT(long, [ISynchronizeMutex.Δ]).Δ,
 Reset: new CallbackT(long, [ISynchronizeMutex.Δ]).Δ,
 ReleaseMutex: new CallbackT(long, [ISynchronizeMutex.Δ]).Δ
});

var ICancelMethodCallsVtbl = new StructT('ICancelMethodCallsVtbl', {
 QueryInterface: new CallbackT(long, [ICancelMethodCalls.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICancelMethodCalls.Δ]).Δ,
 Release: new CallbackT(ulong, [ICancelMethodCalls.Δ]).Δ,
 Cancel: new CallbackT(long, [ICancelMethodCalls.Δ, ulong]).Δ,
 TestCancel: new CallbackT(long, [ICancelMethodCalls.Δ]).Δ
});

var IAsyncManagerVtbl = new StructT('IAsyncManagerVtbl', {
 QueryInterface: new CallbackT(long, [IAsyncManager.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAsyncManager.Δ]).Δ,
 Release: new CallbackT(ulong, [IAsyncManager.Δ]).Δ,
 CompleteCall: new CallbackT(long, [IAsyncManager.Δ, long]).Δ,
 GetCallContext: new CallbackT(long, [IAsyncManager.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 GetState: new CallbackT(long, [IAsyncManager.Δ, ulong.Δ]).Δ
});

var ICallFactoryVtbl = new StructT('ICallFactoryVtbl', {
 QueryInterface: new CallbackT(long, [ICallFactory.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICallFactory.Δ]).Δ,
 Release: new CallbackT(ulong, [ICallFactory.Δ]).Δ,
 CreateCall: new CallbackT(long, [ICallFactory.Δ, _GUID.Δ, IUnknown.Δ, _GUID.Δ, IUnknown.Δ.Δ]).Δ
});

var IRpcHelperVtbl = new StructT('IRpcHelperVtbl', {
 QueryInterface: new CallbackT(long, [IRpcHelper.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRpcHelper.Δ]).Δ,
 Release: new CallbackT(ulong, [IRpcHelper.Δ]).Δ,
 GetDCOMProtocolVersion: new CallbackT(long, [IRpcHelper.Δ, ulong.Δ]).Δ,
 GetIIDFromOBJREF: new CallbackT(long, [IRpcHelper.Δ, _void.Δ, _GUID.Δ.Δ]).Δ
});

var IReleaseMarshalBuffersVtbl = new StructT('IReleaseMarshalBuffersVtbl', {
 QueryInterface: new CallbackT(long, [IReleaseMarshalBuffers.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IReleaseMarshalBuffers.Δ]).Δ,
 Release: new CallbackT(ulong, [IReleaseMarshalBuffers.Δ]).Δ,
 ReleaseMarshalBuffer: new CallbackT(long, [IReleaseMarshalBuffers.Δ, tagRPCOLEMESSAGE.Δ, ulong, IUnknown.Δ]).Δ
});

var IWaitMultipleVtbl = new StructT('IWaitMultipleVtbl', {
 QueryInterface: new CallbackT(long, [IWaitMultiple.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWaitMultiple.Δ]).Δ,
 Release: new CallbackT(ulong, [IWaitMultiple.Δ]).Δ,
 WaitMultiple: new CallbackT(long, [IWaitMultiple.Δ, ulong, ISynchronize.Δ.Δ]).Δ,
 AddSynchronize: new CallbackT(long, [IWaitMultiple.Δ, ISynchronize.Δ]).Δ
});

var IUrlMonVtbl = new StructT('IUrlMonVtbl', {
 QueryInterface: new CallbackT(long, [IUrlMon.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IUrlMon.Δ]).Δ,
 Release: new CallbackT(ulong, [IUrlMon.Δ]).Δ,
 AsyncGetClassBits: new CallbackT(long, [IUrlMon.Δ, _GUID.Δ, ushort.Δ, ushort.Δ, ulong, ulong, ushort.Δ, IBindCtx.Δ, ulong, _GUID.Δ, ulong]).Δ
});

var IForegroundTransferVtbl = new StructT('IForegroundTransferVtbl', {
 QueryInterface: new CallbackT(long, [IForegroundTransfer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IForegroundTransfer.Δ]).Δ,
 Release: new CallbackT(ulong, [IForegroundTransfer.Δ]).Δ,
 AllowForegroundTransfer: new CallbackT(long, [IForegroundTransfer.Δ, _void.Δ]).Δ
});

var IAddrTrackingControlVtbl = new StructT('IAddrTrackingControlVtbl', {
 QueryInterface: new CallbackT(long, [IAddrTrackingControl.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAddrTrackingControl.Δ]).Δ,
 Release: new CallbackT(ulong, [IAddrTrackingControl.Δ]).Δ,
 EnableCOMDynamicAddrTracking: new CallbackT(long, [IAddrTrackingControl.Δ]).Δ,
 DisableCOMDynamicAddrTracking: new CallbackT(long, [IAddrTrackingControl.Δ]).Δ
});

var IAddrExclusionControlVtbl = new StructT('IAddrExclusionControlVtbl', {
 QueryInterface: new CallbackT(long, [IAddrExclusionControl.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAddrExclusionControl.Δ]).Δ,
 Release: new CallbackT(ulong, [IAddrExclusionControl.Δ]).Δ,
 GetCurrentAddrExclusionList: new CallbackT(long, [IAddrExclusionControl.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 UpdateAddrExclusionList: new CallbackT(long, [IAddrExclusionControl.Δ, IUnknown.Δ]).Δ
});

var IPipeByteVtbl = new StructT('IPipeByteVtbl', {
 QueryInterface: new CallbackT(long, [IPipeByte.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPipeByte.Δ]).Δ,
 Release: new CallbackT(ulong, [IPipeByte.Δ]).Δ,
 Pull: new CallbackT(long, [IPipeByte.Δ, uchar.Δ, ulong, ulong.Δ]).Δ,
 Push: new CallbackT(long, [IPipeByte.Δ, uchar.Δ, ulong]).Δ
});

var AsyncIPipeByteVtbl = new StructT('AsyncIPipeByteVtbl', {
 QueryInterface: new CallbackT(long, [AsyncIPipeByte.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [AsyncIPipeByte.Δ]).Δ,
 Release: new CallbackT(ulong, [AsyncIPipeByte.Δ]).Δ,
 Begin_Pull: new CallbackT(long, [AsyncIPipeByte.Δ, ulong]).Δ,
 Finish_Pull: new CallbackT(long, [AsyncIPipeByte.Δ, uchar.Δ, ulong.Δ]).Δ,
 Begin_Push: new CallbackT(long, [AsyncIPipeByte.Δ, uchar.Δ, ulong]).Δ,
 Finish_Push: new CallbackT(long, [AsyncIPipeByte.Δ]).Δ
});

var IPipeLongVtbl = new StructT('IPipeLongVtbl', {
 QueryInterface: new CallbackT(long, [IPipeLong.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPipeLong.Δ]).Δ,
 Release: new CallbackT(ulong, [IPipeLong.Δ]).Δ,
 Pull: new CallbackT(long, [IPipeLong.Δ, long.Δ, ulong, ulong.Δ]).Δ,
 Push: new CallbackT(long, [IPipeLong.Δ, long.Δ, ulong]).Δ
});

var AsyncIPipeLongVtbl = new StructT('AsyncIPipeLongVtbl', {
 QueryInterface: new CallbackT(long, [AsyncIPipeLong.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [AsyncIPipeLong.Δ]).Δ,
 Release: new CallbackT(ulong, [AsyncIPipeLong.Δ]).Δ,
 Begin_Pull: new CallbackT(long, [AsyncIPipeLong.Δ, ulong]).Δ,
 Finish_Pull: new CallbackT(long, [AsyncIPipeLong.Δ, long.Δ, ulong.Δ]).Δ,
 Begin_Push: new CallbackT(long, [AsyncIPipeLong.Δ, long.Δ, ulong]).Δ,
 Finish_Push: new CallbackT(long, [AsyncIPipeLong.Δ]).Δ
});

var IPipeDoubleVtbl = new StructT('IPipeDoubleVtbl', {
 QueryInterface: new CallbackT(long, [IPipeDouble.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPipeDouble.Δ]).Δ,
 Release: new CallbackT(ulong, [IPipeDouble.Δ]).Δ,
 Pull: new CallbackT(long, [IPipeDouble.Δ, double.Δ, ulong, ulong.Δ]).Δ,
 Push: new CallbackT(long, [IPipeDouble.Δ, double.Δ, ulong]).Δ
});

var AsyncIPipeDoubleVtbl = new StructT('AsyncIPipeDoubleVtbl', {
 QueryInterface: new CallbackT(long, [AsyncIPipeDouble.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [AsyncIPipeDouble.Δ]).Δ,
 Release: new CallbackT(ulong, [AsyncIPipeDouble.Δ]).Δ,
 Begin_Pull: new CallbackT(long, [AsyncIPipeDouble.Δ, ulong]).Δ,
 Finish_Pull: new CallbackT(long, [AsyncIPipeDouble.Δ, double.Δ, ulong.Δ]).Δ,
 Begin_Push: new CallbackT(long, [AsyncIPipeDouble.Δ, double.Δ, ulong]).Δ,
 Finish_Push: new CallbackT(long, [AsyncIPipeDouble.Δ]).Δ
});

var IThumbnailExtractorVtbl = new StructT('IThumbnailExtractorVtbl', {
 QueryInterface: new CallbackT(long, [IThumbnailExtractor.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IThumbnailExtractor.Δ]).Δ,
 Release: new CallbackT(ulong, [IThumbnailExtractor.Δ]).Δ,
 ExtractThumbnail: new CallbackT(long, [IThumbnailExtractor.Δ, IStorage.Δ, ulong, ulong, ulong.Δ, ulong.Δ, HBITMAP__.Δ.Δ]).Δ,
 OnFileUpdated: new CallbackT(long, [IThumbnailExtractor.Δ, IStorage.Δ]).Δ
});

var IDummyHICONIncluderVtbl = new StructT('IDummyHICONIncluderVtbl', {
 QueryInterface: new CallbackT(long, [IDummyHICONIncluder.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDummyHICONIncluder.Δ]).Δ,
 Release: new CallbackT(ulong, [IDummyHICONIncluder.Δ]).Δ,
 Dummy: new CallbackT(long, [IDummyHICONIncluder.Δ, HICON__.Δ, HDC__.Δ]).Δ
});

var IProcessLockVtbl = new StructT('IProcessLockVtbl', {
 QueryInterface: new CallbackT(long, [IProcessLock.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IProcessLock.Δ]).Δ,
 Release: new CallbackT(ulong, [IProcessLock.Δ]).Δ,
 AddRefOnProcess: new CallbackT(ulong, [IProcessLock.Δ]).Δ,
 ReleaseRefOnProcess: new CallbackT(ulong, [IProcessLock.Δ]).Δ
});

var ISurrogateServiceVtbl = new StructT('ISurrogateServiceVtbl', {
 QueryInterface: new CallbackT(long, [ISurrogateService.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISurrogateService.Δ]).Δ,
 Release: new CallbackT(ulong, [ISurrogateService.Δ]).Δ,
 Init: new CallbackT(long, [ISurrogateService.Δ, _GUID.Δ, IProcessLock.Δ, int.Δ]).Δ,
 ApplicationLaunch: new CallbackT(long, [ISurrogateService.Δ, _GUID.Δ, ApplicationType]).Δ,
 ApplicationFree: new CallbackT(long, [ISurrogateService.Δ, _GUID.Δ]).Δ,
 CatalogRefresh: new CallbackT(long, [ISurrogateService.Δ, ulong]).Δ,
 ProcessShutdown: new CallbackT(long, [ISurrogateService.Δ, ShutdownType]).Δ
});

var IComThreadingInfoVtbl = new StructT('IComThreadingInfoVtbl', {
 QueryInterface: new CallbackT(long, [IComThreadingInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IComThreadingInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IComThreadingInfo.Δ]).Δ,
 GetCurrentApartmentType: new CallbackT(long, [IComThreadingInfo.Δ, _APTTYPE.Δ]).Δ,
 GetCurrentThreadType: new CallbackT(long, [IComThreadingInfo.Δ, _THDTYPE.Δ]).Δ,
 GetCurrentLogicalThreadId: new CallbackT(long, [IComThreadingInfo.Δ, _GUID.Δ]).Δ,
 SetCurrentLogicalThreadId: new CallbackT(long, [IComThreadingInfo.Δ, _GUID.Δ]).Δ
});

var IProcessInitControlVtbl = new StructT('IProcessInitControlVtbl', {
 QueryInterface: new CallbackT(long, [IProcessInitControl.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IProcessInitControl.Δ]).Δ,
 Release: new CallbackT(ulong, [IProcessInitControl.Δ]).Δ,
 ResetInitializerTimeout: new CallbackT(long, [IProcessInitControl.Δ, ulong]).Δ
});

var IInitializeSpyVtbl = new StructT('IInitializeSpyVtbl', {
 QueryInterface: new CallbackT(long, [IInitializeSpy.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInitializeSpy.Δ]).Δ,
 Release: new CallbackT(ulong, [IInitializeSpy.Δ]).Δ,
 PreInitialize: new CallbackT(long, [IInitializeSpy.Δ, ulong, ulong]).Δ,
 PostInitialize: new CallbackT(long, [IInitializeSpy.Δ, long, ulong, ulong]).Δ,
 PreUninitialize: new CallbackT(long, [IInitializeSpy.Δ, ulong]).Δ,
 PostUninitialize: new CallbackT(long, [IInitializeSpy.Δ, ulong]).Δ
});

var SOleTlsDataPublic = new StructT('SOleTlsDataPublic', {
 pvReserved0: new ArrayT(undefined, 2),
 dwReserved0: new ArrayT(DWORD, 3),
 pvReserved1: new ArrayT(undefined, 1),
 dwReserved1: new ArrayT(DWORD, 3),
 pvReserved2: new ArrayT(undefined, 4),
 dwReserved2: new ArrayT(DWORD, 1),
 pCurrentCtx: _void.Δ
});

var STGOPTIONS = new StructT('STGOPTIONS', {
 usVersion: USHORT,
 reserved: USHORT,
 ulSectorSize: ULONG,
 pwcsTemplateFile: WCHAR.Δ
});

var IPersistMoniker = new StructT('IPersistMoniker', {
 lpVtbl: IPersistMonikerVtbl.Δ
});

var IMonikerProp = new StructT('IMonikerProp', {
 lpVtbl: IMonikerPropVtbl.Δ
});

var IBindProtocol = new StructT('IBindProtocol', {
 lpVtbl: IBindProtocolVtbl.Δ
});

var IBinding = new StructT('IBinding', {
 lpVtbl: IBindingVtbl.Δ
});


var IBindStatusCallbackEx = new StructT('IBindStatusCallbackEx', {
 lpVtbl: IBindStatusCallbackExVtbl.Δ
});

var IAuthenticate = new StructT('IAuthenticate', {
 lpVtbl: IAuthenticateVtbl.Δ
});

var IAuthenticateEx = new StructT('IAuthenticateEx', {
 lpVtbl: IAuthenticateExVtbl.Δ
});

var IHttpNegotiate = new StructT('IHttpNegotiate', {
 lpVtbl: IHttpNegotiateVtbl.Δ
});

var IHttpNegotiate2 = new StructT('IHttpNegotiate2', {
 lpVtbl: IHttpNegotiate2Vtbl.Δ
});

var IHttpNegotiate3 = new StructT('IHttpNegotiate3', {
 lpVtbl: IHttpNegotiate3Vtbl.Δ
});

var IWinInetFileStream = new StructT('IWinInetFileStream', {
 lpVtbl: IWinInetFileStreamVtbl.Δ
});

var IWindowForBindingUI = new StructT('IWindowForBindingUI', {
 lpVtbl: IWindowForBindingUIVtbl.Δ
});

var ICodeInstall = new StructT('ICodeInstall', {
 lpVtbl: ICodeInstallVtbl.Δ
});

var IUri = new StructT('IUri', {
 lpVtbl: IUriVtbl.Δ
});

var IUriContainer = new StructT('IUriContainer', {
 lpVtbl: IUriContainerVtbl.Δ
});

var IUriBuilder = new StructT('IUriBuilder', {
 lpVtbl: IUriBuilderVtbl.Δ
});

var IUriBuilderFactory = new StructT('IUriBuilderFactory', {
 lpVtbl: IUriBuilderFactoryVtbl.Δ
});

var IWinInetInfo = new StructT('IWinInetInfo', {
 lpVtbl: IWinInetInfoVtbl.Δ
});

var IHttpSecurity = new StructT('IHttpSecurity', {
 lpVtbl: IHttpSecurityVtbl.Δ
});

var IWinInetHttpInfo = new StructT('IWinInetHttpInfo', {
 lpVtbl: IWinInetHttpInfoVtbl.Δ
});

var IWinInetCacheHints = new StructT('IWinInetCacheHints', {
 lpVtbl: IWinInetCacheHintsVtbl.Δ
});

var IWinInetCacheHints2 = new StructT('IWinInetCacheHints2', {
 lpVtbl: IWinInetCacheHints2Vtbl.Δ
});

var IBindHost = new StructT('IBindHost', {
 lpVtbl: IBindHostVtbl.Δ
});

var IInternet = new StructT('IInternet', {
 lpVtbl: IInternetVtbl.Δ
});

var IInternetBindInfo = new StructT('IInternetBindInfo', {
 lpVtbl: IInternetBindInfoVtbl.Δ
});

var IInternetBindInfoEx = new StructT('IInternetBindInfoEx', {
 lpVtbl: IInternetBindInfoExVtbl.Δ
});

var IInternetProtocolRoot = new StructT('IInternetProtocolRoot', {
 lpVtbl: IInternetProtocolRootVtbl.Δ
});

var IInternetProtocol = new StructT('IInternetProtocol', {
 lpVtbl: IInternetProtocolVtbl.Δ
});

var IInternetProtocolEx = new StructT('IInternetProtocolEx', {
 lpVtbl: IInternetProtocolExVtbl.Δ
});

var IInternetProtocolSink = new StructT('IInternetProtocolSink', {
 lpVtbl: IInternetProtocolSinkVtbl.Δ
});

var IInternetProtocolSinkStackable = new StructT('IInternetProtocolSinkStackable', {
 lpVtbl: IInternetProtocolSinkStackableVtbl.Δ
});

var IInternetSession = new StructT('IInternetSession', {
 lpVtbl: IInternetSessionVtbl.Δ
});

var IInternetThreadSwitch = new StructT('IInternetThreadSwitch', {
 lpVtbl: IInternetThreadSwitchVtbl.Δ
});

var IInternetPriority = new StructT('IInternetPriority', {
 lpVtbl: IInternetPriorityVtbl.Δ
});

var IInternetProtocolInfo = new StructT('IInternetProtocolInfo', {
 lpVtbl: IInternetProtocolInfoVtbl.Δ
});

var IInternetSecurityMgrSite = new StructT('IInternetSecurityMgrSite', {
 lpVtbl: IInternetSecurityMgrSiteVtbl.Δ
});

var IInternetSecurityManager = new StructT('IInternetSecurityManager', {
 lpVtbl: IInternetSecurityManagerVtbl.Δ
});

var IInternetSecurityManagerEx = new StructT('IInternetSecurityManagerEx', {
 lpVtbl: IInternetSecurityManagerExVtbl.Δ
});

var IInternetSecurityManagerEx2 = new StructT('IInternetSecurityManagerEx2', {
 lpVtbl: IInternetSecurityManagerEx2Vtbl.Δ
});

var IZoneIdentifier = new StructT('IZoneIdentifier', {
 lpVtbl: IZoneIdentifierVtbl.Δ
});

var IInternetHostSecurityManager = new StructT('IInternetHostSecurityManager', {
 lpVtbl: IInternetHostSecurityManagerVtbl.Δ
});

var IInternetZoneManager = new StructT('IInternetZoneManager', {
 lpVtbl: IInternetZoneManagerVtbl.Δ
});

var IInternetZoneManagerEx = new StructT('IInternetZoneManagerEx', {
 lpVtbl: IInternetZoneManagerExVtbl.Δ
});

var IInternetZoneManagerEx2 = new StructT('IInternetZoneManagerEx2', {
 lpVtbl: IInternetZoneManagerEx2Vtbl.Δ
});

var ISoftDistExt = new StructT('ISoftDistExt', {
 lpVtbl: ISoftDistExtVtbl.Δ
});

var ICatalogFileInfo = new StructT('ICatalogFileInfo', {
 lpVtbl: ICatalogFileInfoVtbl.Δ
});

var IDataFilter = new StructT('IDataFilter', {
 lpVtbl: IDataFilterVtbl.Δ
});

var IEncodingFilterFactory = new StructT('IEncodingFilterFactory', {
 lpVtbl: IEncodingFilterFactoryVtbl.Δ
});

var IWrappedProtocol = new StructT('IWrappedProtocol', {
 lpVtbl: IWrappedProtocolVtbl.Δ
});

var IOleAdviseHolder = new StructT('IOleAdviseHolder', {
 lpVtbl: IOleAdviseHolderVtbl.Δ
});

var IOleCache = new StructT('IOleCache', {
 lpVtbl: IOleCacheVtbl.Δ
});

var IOleCache2 = new StructT('IOleCache2', {
 lpVtbl: IOleCache2Vtbl.Δ
});

var IOleCacheControl = new StructT('IOleCacheControl', {
 lpVtbl: IOleCacheControlVtbl.Δ
});

var IParseDisplayName = new StructT('IParseDisplayName', {
 lpVtbl: IParseDisplayNameVtbl.Δ
});

var IOleContainer = new StructT('IOleContainer', {
 lpVtbl: IOleContainerVtbl.Δ
});

var IOleClientSite = new StructT('IOleClientSite', {
 lpVtbl: IOleClientSiteVtbl.Δ
});

var IOleObject = new StructT('IOleObject', {
 lpVtbl: IOleObjectVtbl.Δ
});

var IOleWindow = new StructT('IOleWindow', {
 lpVtbl: IOleWindowVtbl.Δ
});

var IOleLink = new StructT('IOleLink', {
 lpVtbl: IOleLinkVtbl.Δ
});

var IOleItemContainer = new StructT('IOleItemContainer', {
 lpVtbl: IOleItemContainerVtbl.Δ
});

var IOleInPlaceUIWindow = new StructT('IOleInPlaceUIWindow', {
 lpVtbl: IOleInPlaceUIWindowVtbl.Δ
});

var IOleInPlaceActiveObject = new StructT('IOleInPlaceActiveObject', {
 lpVtbl: IOleInPlaceActiveObjectVtbl.Δ
});

var IOleInPlaceFrame = new StructT('IOleInPlaceFrame', {
 lpVtbl: IOleInPlaceFrameVtbl.Δ
});

var IOleInPlaceObject = new StructT('IOleInPlaceObject', {
 lpVtbl: IOleInPlaceObjectVtbl.Δ
});

var IOleInPlaceSite = new StructT('IOleInPlaceSite', {
 lpVtbl: IOleInPlaceSiteVtbl.Δ
});

var IContinue = new StructT('IContinue', {
 lpVtbl: IContinueVtbl.Δ
});

var IViewObject = new StructT('IViewObject', {
 lpVtbl: IViewObjectVtbl.Δ
});

var IViewObject2 = new StructT('IViewObject2', {
 lpVtbl: IViewObject2Vtbl.Δ
});

var IDropSource = new StructT('IDropSource', {
 lpVtbl: IDropSourceVtbl.Δ
});

var IDropTarget = new StructT('IDropTarget', {
 lpVtbl: IDropTargetVtbl.Δ
});

var IDropSourceNotify = new StructT('IDropSourceNotify', {
 lpVtbl: IDropSourceNotifyVtbl.Δ
});

var IEnumOLEVERB = new StructT('IEnumOLEVERB', {
 lpVtbl: IEnumOLEVERBVtbl.Δ
});

var IOleAdviseHolderVtbl = new StructT('IOleAdviseHolderVtbl', {
 QueryInterface: new CallbackT(long, [IOleAdviseHolder.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleAdviseHolder.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleAdviseHolder.Δ]).Δ,
 Advise: new CallbackT(long, [IOleAdviseHolder.Δ, IAdviseSink.Δ, ulong.Δ]).Δ,
 Unadvise: new CallbackT(long, [IOleAdviseHolder.Δ, ulong]).Δ,
 EnumAdvise: new CallbackT(long, [IOleAdviseHolder.Δ, IEnumSTATDATA.Δ.Δ]).Δ,
 SendOnRename: new CallbackT(long, [IOleAdviseHolder.Δ, IMoniker.Δ]).Δ,
 SendOnSave: new CallbackT(long, [IOleAdviseHolder.Δ]).Δ,
 SendOnClose: new CallbackT(long, [IOleAdviseHolder.Δ]).Δ
});

var IOleCacheVtbl = new StructT('IOleCacheVtbl', {
 QueryInterface: new CallbackT(long, [IOleCache.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleCache.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleCache.Δ]).Δ,
 Cache: new CallbackT(long, [IOleCache.Δ, tagFORMATETC.Δ, ulong, ulong.Δ]).Δ,
 Uncache: new CallbackT(long, [IOleCache.Δ, ulong]).Δ,
 EnumCache: new CallbackT(long, [IOleCache.Δ, IEnumSTATDATA.Δ.Δ]).Δ,
 InitCache: new CallbackT(long, [IOleCache.Δ, IDataObject.Δ]).Δ,
 SetData: new CallbackT(long, [IOleCache.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ, int]).Δ
});

var IOleCache2Vtbl = new StructT('IOleCache2Vtbl', {
 QueryInterface: new CallbackT(long, [IOleCache2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleCache2.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleCache2.Δ]).Δ,
 Cache: new CallbackT(long, [IOleCache2.Δ, tagFORMATETC.Δ, ulong, ulong.Δ]).Δ,
 Uncache: new CallbackT(long, [IOleCache2.Δ, ulong]).Δ,
 EnumCache: new CallbackT(long, [IOleCache2.Δ, IEnumSTATDATA.Δ.Δ]).Δ,
 InitCache: new CallbackT(long, [IOleCache2.Δ, IDataObject.Δ]).Δ,
 SetData: new CallbackT(long, [IOleCache2.Δ, tagFORMATETC.Δ, tagSTGMEDIUM.Δ, int]).Δ,
 UpdateCache: new CallbackT(long, [IOleCache2.Δ, IDataObject.Δ, ulong, _void.Δ]).Δ,
 DiscardCache: new CallbackT(long, [IOleCache2.Δ, ulong]).Δ
});

var IOleCacheControlVtbl = new StructT('IOleCacheControlVtbl', {
 QueryInterface: new CallbackT(long, [IOleCacheControl.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleCacheControl.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleCacheControl.Δ]).Δ,
 OnRun: new CallbackT(long, [IOleCacheControl.Δ, IDataObject.Δ]).Δ,
 OnStop: new CallbackT(long, [IOleCacheControl.Δ]).Δ
});

var IParseDisplayNameVtbl = new StructT('IParseDisplayNameVtbl', {
 QueryInterface: new CallbackT(long, [IParseDisplayName.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IParseDisplayName.Δ]).Δ,
 Release: new CallbackT(ulong, [IParseDisplayName.Δ]).Δ,
 ParseDisplayName: new CallbackT(long, [IParseDisplayName.Δ, IBindCtx.Δ, ushort.Δ, ulong.Δ, IMoniker.Δ.Δ]).Δ
});

var IOleContainerVtbl = new StructT('IOleContainerVtbl', {
 QueryInterface: new CallbackT(long, [IOleContainer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleContainer.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleContainer.Δ]).Δ,
 ParseDisplayName: new CallbackT(long, [IOleContainer.Δ, IBindCtx.Δ, ushort.Δ, ulong.Δ, IMoniker.Δ.Δ]).Δ,
 EnumObjects: new CallbackT(long, [IOleContainer.Δ, ulong, IEnumUnknown.Δ.Δ]).Δ,
 LockContainer: new CallbackT(long, [IOleContainer.Δ, int]).Δ
});

var IOleClientSiteVtbl = new StructT('IOleClientSiteVtbl', {
 QueryInterface: new CallbackT(long, [IOleClientSite.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleClientSite.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleClientSite.Δ]).Δ,
 SaveObject: new CallbackT(long, [IOleClientSite.Δ]).Δ,
 GetMoniker: new CallbackT(long, [IOleClientSite.Δ, ulong, ulong, IMoniker.Δ.Δ]).Δ,
 GetContainer: new CallbackT(long, [IOleClientSite.Δ, IOleContainer.Δ.Δ]).Δ,
 ShowObject: new CallbackT(long, [IOleClientSite.Δ]).Δ,
 OnShowWindow: new CallbackT(long, [IOleClientSite.Δ, int]).Δ,
 RequestNewObjectLayout: new CallbackT(long, [IOleClientSite.Δ]).Δ
});

var IOleObjectVtbl = new StructT('IOleObjectVtbl', {
 QueryInterface: new CallbackT(long, [IOleObject.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleObject.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleObject.Δ]).Δ,
 SetClientSite: new CallbackT(long, [IOleObject.Δ, IOleClientSite.Δ]).Δ,
 GetClientSite: new CallbackT(long, [IOleObject.Δ, IOleClientSite.Δ.Δ]).Δ,
 SetHostNames: new CallbackT(long, [IOleObject.Δ, ushort.Δ, ushort.Δ]).Δ,
 Close: new CallbackT(long, [IOleObject.Δ, ulong]).Δ,
 SetMoniker: new CallbackT(long, [IOleObject.Δ, ulong, IMoniker.Δ]).Δ,
 GetMoniker: new CallbackT(long, [IOleObject.Δ, ulong, ulong, IMoniker.Δ.Δ]).Δ,
 InitFromData: new CallbackT(long, [IOleObject.Δ, IDataObject.Δ, int, ulong]).Δ,
 GetClipboardData: new CallbackT(long, [IOleObject.Δ, ulong, IDataObject.Δ.Δ]).Δ,
 DoVerb: new CallbackT(long, [IOleObject.Δ, long, tagMSG.Δ, IOleClientSite.Δ, long, HWND__.Δ, tagRECT.Δ]).Δ,
 EnumVerbs: new CallbackT(long, [IOleObject.Δ, IEnumOLEVERB.Δ.Δ]).Δ,
 Update: new CallbackT(long, [IOleObject.Δ]).Δ,
 IsUpToDate: new CallbackT(long, [IOleObject.Δ]).Δ,
 GetUserClassID: new CallbackT(long, [IOleObject.Δ, _GUID.Δ]).Δ,
 GetUserType: new CallbackT(long, [IOleObject.Δ, ulong, ushort.Δ.Δ]).Δ,
 SetExtent: new CallbackT(long, [IOleObject.Δ, ulong, tagSIZE.Δ]).Δ,
 GetExtent: new CallbackT(long, [IOleObject.Δ, ulong, tagSIZE.Δ]).Δ,
 Advise: new CallbackT(long, [IOleObject.Δ, IAdviseSink.Δ, ulong.Δ]).Δ,
 Unadvise: new CallbackT(long, [IOleObject.Δ, ulong]).Δ,
 EnumAdvise: new CallbackT(long, [IOleObject.Δ, IEnumSTATDATA.Δ.Δ]).Δ,
 GetMiscStatus: new CallbackT(long, [IOleObject.Δ, ulong, ulong.Δ]).Δ,
 SetColorScheme: new CallbackT(long, [IOleObject.Δ, tagLOGPALETTE.Δ]).Δ
});

var LINKSRCDESCRIPTOR = new StructT('LINKSRCDESCRIPTOR', {
 cbSize: ULONG,
 clsid: CLSID,
 dwDrawAspect: DWORD,
 sizel: SIZEL,
 pointl: POINTL,
 dwStatus: DWORD,
 dwFullUserTypeName: DWORD,
 dwSrcOfCopy: DWORD
});

var IOleWindowVtbl = new StructT('IOleWindowVtbl', {
 QueryInterface: new CallbackT(long, [IOleWindow.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleWindow.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleWindow.Δ]).Δ,
 GetWindow: new CallbackT(long, [IOleWindow.Δ, HWND__.Δ.Δ]).Δ,
 ContextSensitiveHelp: new CallbackT(long, [IOleWindow.Δ, int]).Δ
});

var IOleLinkVtbl = new StructT('IOleLinkVtbl', {
 QueryInterface: new CallbackT(long, [IOleLink.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleLink.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleLink.Δ]).Δ,
 SetUpdateOptions: new CallbackT(long, [IOleLink.Δ, ulong]).Δ,
 GetUpdateOptions: new CallbackT(long, [IOleLink.Δ, ulong.Δ]).Δ,
 SetSourceMoniker: new CallbackT(long, [IOleLink.Δ, IMoniker.Δ, _GUID.Δ]).Δ,
 GetSourceMoniker: new CallbackT(long, [IOleLink.Δ, IMoniker.Δ.Δ]).Δ,
 SetSourceDisplayName: new CallbackT(long, [IOleLink.Δ, ushort.Δ]).Δ,
 GetSourceDisplayName: new CallbackT(long, [IOleLink.Δ, ushort.Δ.Δ]).Δ,
 BindToSource: new CallbackT(long, [IOleLink.Δ, ulong, IBindCtx.Δ]).Δ,
 BindIfRunning: new CallbackT(long, [IOleLink.Δ]).Δ,
 GetBoundSource: new CallbackT(long, [IOleLink.Δ, IUnknown.Δ.Δ]).Δ,
 UnbindSource: new CallbackT(long, [IOleLink.Δ]).Δ,
 Update: new CallbackT(long, [IOleLink.Δ, IBindCtx.Δ]).Δ
});

var IOleItemContainerVtbl = new StructT('IOleItemContainerVtbl', {
 QueryInterface: new CallbackT(long, [IOleItemContainer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleItemContainer.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleItemContainer.Δ]).Δ,
 ParseDisplayName: new CallbackT(long, [IOleItemContainer.Δ, IBindCtx.Δ, ushort.Δ, ulong.Δ, IMoniker.Δ.Δ]).Δ,
 EnumObjects: new CallbackT(long, [IOleItemContainer.Δ, ulong, IEnumUnknown.Δ.Δ]).Δ,
 LockContainer: new CallbackT(long, [IOleItemContainer.Δ, int]).Δ,
 GetObjectA: new CallbackT(long, [IOleItemContainer.Δ, ushort.Δ, ulong, IBindCtx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 GetObjectStorage: new CallbackT(long, [IOleItemContainer.Δ, ushort.Δ, IBindCtx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 IsRunning: new CallbackT(long, [IOleItemContainer.Δ, ushort.Δ]).Δ
});

var IOleInPlaceUIWindowVtbl = new StructT('IOleInPlaceUIWindowVtbl', {
 QueryInterface: new CallbackT(long, [IOleInPlaceUIWindow.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleInPlaceUIWindow.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleInPlaceUIWindow.Δ]).Δ,
 GetWindow: new CallbackT(long, [IOleInPlaceUIWindow.Δ, HWND__.Δ.Δ]).Δ,
 ContextSensitiveHelp: new CallbackT(long, [IOleInPlaceUIWindow.Δ, int]).Δ,
 GetBorder: new CallbackT(long, [IOleInPlaceUIWindow.Δ, tagRECT.Δ]).Δ,
 RequestBorderSpace: new CallbackT(long, [IOleInPlaceUIWindow.Δ, tagRECT.Δ]).Δ,
 SetBorderSpace: new CallbackT(long, [IOleInPlaceUIWindow.Δ, tagRECT.Δ]).Δ,
 SetActiveObject: new CallbackT(long, [IOleInPlaceUIWindow.Δ, IOleInPlaceActiveObject.Δ, ushort.Δ]).Δ
});

var IOleInPlaceActiveObjectVtbl = new StructT('IOleInPlaceActiveObjectVtbl', {
 QueryInterface: new CallbackT(long, [IOleInPlaceActiveObject.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleInPlaceActiveObject.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleInPlaceActiveObject.Δ]).Δ,
 GetWindow: new CallbackT(long, [IOleInPlaceActiveObject.Δ, HWND__.Δ.Δ]).Δ,
 ContextSensitiveHelp: new CallbackT(long, [IOleInPlaceActiveObject.Δ, int]).Δ,
 TranslateAcceleratorA: new CallbackT(long, [IOleInPlaceActiveObject.Δ, tagMSG.Δ]).Δ,
 OnFrameWindowActivate: new CallbackT(long, [IOleInPlaceActiveObject.Δ, int]).Δ,
 OnDocWindowActivate: new CallbackT(long, [IOleInPlaceActiveObject.Δ, int]).Δ,
 ResizeBorder: new CallbackT(long, [IOleInPlaceActiveObject.Δ, tagRECT.Δ, IOleInPlaceUIWindow.Δ, int]).Δ,
 EnableModeless: new CallbackT(long, [IOleInPlaceActiveObject.Δ, int]).Δ
});

var OLEINPLACEFRAMEINFO = new StructT('OLEINPLACEFRAMEINFO', {
 cb: UINT,
 fMDIApp: BOOL,
 hwndFrame: HWND,
 haccel: HACCEL,
 cAccelEntries: UINT
});

var OLEMENUGROUPWIDTHS = new StructT('OLEMENUGROUPWIDTHS', {
 width: new ArrayT(LONG,  6 )
});

var IOleInPlaceFrameVtbl = new StructT('IOleInPlaceFrameVtbl', {
 QueryInterface: new CallbackT(long, [IOleInPlaceFrame.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleInPlaceFrame.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleInPlaceFrame.Δ]).Δ,
 GetWindow: new CallbackT(long, [IOleInPlaceFrame.Δ, HWND__.Δ.Δ]).Δ,
 ContextSensitiveHelp: new CallbackT(long, [IOleInPlaceFrame.Δ, int]).Δ,
 GetBorder: new CallbackT(long, [IOleInPlaceFrame.Δ, tagRECT.Δ]).Δ,
 RequestBorderSpace: new CallbackT(long, [IOleInPlaceFrame.Δ, tagRECT.Δ]).Δ,
 SetBorderSpace: new CallbackT(long, [IOleInPlaceFrame.Δ, tagRECT.Δ]).Δ,
 SetActiveObject: new CallbackT(long, [IOleInPlaceFrame.Δ, IOleInPlaceActiveObject.Δ, ushort.Δ]).Δ,
 InsertMenus: new CallbackT(long, [IOleInPlaceFrame.Δ, HMENU__.Δ, tagOleMenuGroupWidths.Δ]).Δ,
 SetMenu: new CallbackT(long, [IOleInPlaceFrame.Δ, HMENU__.Δ, _void.Δ, HWND__.Δ]).Δ,
 RemoveMenus: new CallbackT(long, [IOleInPlaceFrame.Δ, HMENU__.Δ]).Δ,
 SetStatusText: new CallbackT(long, [IOleInPlaceFrame.Δ, ushort.Δ]).Δ,
 EnableModeless: new CallbackT(long, [IOleInPlaceFrame.Δ, int]).Δ,
 TranslateAcceleratorA: new CallbackT(long, [IOleInPlaceFrame.Δ, tagMSG.Δ, ushort]).Δ
});

var IOleInPlaceObjectVtbl = new StructT('IOleInPlaceObjectVtbl', {
 QueryInterface: new CallbackT(long, [IOleInPlaceObject.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleInPlaceObject.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleInPlaceObject.Δ]).Δ,
 GetWindow: new CallbackT(long, [IOleInPlaceObject.Δ, HWND__.Δ.Δ]).Δ,
 ContextSensitiveHelp: new CallbackT(long, [IOleInPlaceObject.Δ, int]).Δ,
 InPlaceDeactivate: new CallbackT(long, [IOleInPlaceObject.Δ]).Δ,
 UIDeactivate: new CallbackT(long, [IOleInPlaceObject.Δ]).Δ,
 SetObjectRects: new CallbackT(long, [IOleInPlaceObject.Δ, tagRECT.Δ, tagRECT.Δ]).Δ,
 ReactivateAndUndo: new CallbackT(long, [IOleInPlaceObject.Δ]).Δ
});

var IOleInPlaceSiteVtbl = new StructT('IOleInPlaceSiteVtbl', {
 QueryInterface: new CallbackT(long, [IOleInPlaceSite.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IOleInPlaceSite.Δ]).Δ,
 Release: new CallbackT(ulong, [IOleInPlaceSite.Δ]).Δ,
 GetWindow: new CallbackT(long, [IOleInPlaceSite.Δ, HWND__.Δ.Δ]).Δ,
 ContextSensitiveHelp: new CallbackT(long, [IOleInPlaceSite.Δ, int]).Δ,
 CanInPlaceActivate: new CallbackT(long, [IOleInPlaceSite.Δ]).Δ,
 OnInPlaceActivate: new CallbackT(long, [IOleInPlaceSite.Δ]).Δ,
 OnUIActivate: new CallbackT(long, [IOleInPlaceSite.Δ]).Δ,
 GetWindowContext: new CallbackT(long, [IOleInPlaceSite.Δ, IOleInPlaceFrame.Δ.Δ, IOleInPlaceUIWindow.Δ.Δ, tagRECT.Δ, tagRECT.Δ, tagOIFI.Δ]).Δ,
 Scroll: new CallbackT(long, [IOleInPlaceSite.Δ, SIZEL]).Δ,
 OnUIDeactivate: new CallbackT(long, [IOleInPlaceSite.Δ, int]).Δ,
 OnInPlaceDeactivate: new CallbackT(long, [IOleInPlaceSite.Δ]).Δ,
 DiscardUndoState: new CallbackT(long, [IOleInPlaceSite.Δ]).Δ,
 DeactivateAndUndo: new CallbackT(long, [IOleInPlaceSite.Δ]).Δ,
 OnPosRectChange: new CallbackT(long, [IOleInPlaceSite.Δ, tagRECT.Δ]).Δ
});

var IContinueVtbl = new StructT('IContinueVtbl', {
 QueryInterface: new CallbackT(long, [IContinue.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IContinue.Δ]).Δ,
 Release: new CallbackT(ulong, [IContinue.Δ]).Δ,
 FContinue: new CallbackT(long, [IContinue.Δ]).Δ
});

var IViewObjectVtbl = new StructT('IViewObjectVtbl', {
 QueryInterface: new CallbackT(long, [IViewObject.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IViewObject.Δ]).Δ,
 Release: new CallbackT(ulong, [IViewObject.Δ]).Δ,
 Draw: new CallbackT(long, [IViewObject.Δ, ulong, long, _void.Δ, tagDVTARGETDEVICE.Δ, HDC__.Δ, HDC__.Δ, _RECTL.Δ, _RECTL.Δ, new CallbackT(int, [ulong]).Δ, ulong]).Δ,
 GetColorSet: new CallbackT(long, [IViewObject.Δ, ulong, long, _void.Δ, tagDVTARGETDEVICE.Δ, HDC__.Δ, tagLOGPALETTE.Δ.Δ]).Δ,
 Freeze: new CallbackT(long, [IViewObject.Δ, ulong, long, _void.Δ, ulong.Δ]).Δ,
 Unfreeze: new CallbackT(long, [IViewObject.Δ, ulong]).Δ,
 SetAdvise: new CallbackT(long, [IViewObject.Δ, ulong, ulong, IAdviseSink.Δ]).Δ,
 GetAdvise: new CallbackT(long, [IViewObject.Δ, ulong.Δ, ulong.Δ, IAdviseSink.Δ.Δ]).Δ
});

var IViewObject2Vtbl = new StructT('IViewObject2Vtbl', {
 QueryInterface: new CallbackT(long, [IViewObject2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IViewObject2.Δ]).Δ,
 Release: new CallbackT(ulong, [IViewObject2.Δ]).Δ,
 Draw: new CallbackT(long, [IViewObject2.Δ, ulong, long, _void.Δ, tagDVTARGETDEVICE.Δ, HDC__.Δ, HDC__.Δ, _RECTL.Δ, _RECTL.Δ, new CallbackT(int, [ulong]).Δ, ulong]).Δ,
 GetColorSet: new CallbackT(long, [IViewObject2.Δ, ulong, long, _void.Δ, tagDVTARGETDEVICE.Δ, HDC__.Δ, tagLOGPALETTE.Δ.Δ]).Δ,
 Freeze: new CallbackT(long, [IViewObject2.Δ, ulong, long, _void.Δ, ulong.Δ]).Δ,
 Unfreeze: new CallbackT(long, [IViewObject2.Δ, ulong]).Δ,
 SetAdvise: new CallbackT(long, [IViewObject2.Δ, ulong, ulong, IAdviseSink.Δ]).Δ,
 GetAdvise: new CallbackT(long, [IViewObject2.Δ, ulong.Δ, ulong.Δ, IAdviseSink.Δ.Δ]).Δ,
 GetExtent: new CallbackT(long, [IViewObject2.Δ, ulong, long, tagDVTARGETDEVICE.Δ, tagSIZE.Δ]).Δ
});

var IDropSourceVtbl = new StructT('IDropSourceVtbl', {
 QueryInterface: new CallbackT(long, [IDropSource.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDropSource.Δ]).Δ,
 Release: new CallbackT(ulong, [IDropSource.Δ]).Δ,
 QueryContinueDrag: new CallbackT(long, [IDropSource.Δ, int, ulong]).Δ,
 GiveFeedback: new CallbackT(long, [IDropSource.Δ, ulong]).Δ
});

var IDropTargetVtbl = new StructT('IDropTargetVtbl', {
 QueryInterface: new CallbackT(long, [IDropTarget.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDropTarget.Δ]).Δ,
 Release: new CallbackT(ulong, [IDropTarget.Δ]).Δ,
 DragEnter: new CallbackT(long, [IDropTarget.Δ, IDataObject.Δ, ulong, POINTL, ulong.Δ]).Δ,
 DragOver: new CallbackT(long, [IDropTarget.Δ, ulong, POINTL, ulong.Δ]).Δ,
 DragLeave: new CallbackT(long, [IDropTarget.Δ]).Δ,
 Drop: new CallbackT(long, [IDropTarget.Δ, IDataObject.Δ, ulong, POINTL, ulong.Δ]).Δ
});

var IDropSourceNotifyVtbl = new StructT('IDropSourceNotifyVtbl', {
 QueryInterface: new CallbackT(long, [IDropSourceNotify.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDropSourceNotify.Δ]).Δ,
 Release: new CallbackT(ulong, [IDropSourceNotify.Δ]).Δ,
 DragEnterTarget: new CallbackT(long, [IDropSourceNotify.Δ, HWND__.Δ]).Δ,
 DragLeaveTarget: new CallbackT(long, [IDropSourceNotify.Δ]).Δ
});

var OLEVERB = new StructT('OLEVERB', {
 lVerb: LONG,
 lpszVerbName: LPOLESTR,
 fuFlags: DWORD,
 grfAttribs: DWORD
});

var IEnumOLEVERBVtbl = new StructT('IEnumOLEVERBVtbl', {
 QueryInterface: new CallbackT(long, [IEnumOLEVERB.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumOLEVERB.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumOLEVERB.Δ]).Δ,
 Next: new CallbackT(long, [IEnumOLEVERB.Δ, ulong, tagOLEVERB.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumOLEVERB.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumOLEVERB.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumOLEVERB.Δ, IEnumOLEVERB.Δ.Δ]).Δ
});

var IServiceProvider = new StructT('IServiceProvider', {
 lpVtbl: IServiceProviderVtbl.Δ
});

var IServiceProviderVtbl = new StructT('IServiceProviderVtbl', {
 QueryInterface: new CallbackT(long, [IServiceProvider.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IServiceProvider.Δ]).Δ,
 Release: new CallbackT(ulong, [IServiceProvider.Δ]).Δ,
 QueryService: new CallbackT(long, [IServiceProvider.Δ, _GUID.Δ, _GUID.Δ, _void.Δ.Δ]).Δ
});

var IXMLDOMImplementation = new StructT('IXMLDOMImplementation', {
 lpVtbl: IXMLDOMImplementationVtbl.Δ
});

var IXMLDOMNode = new StructT('IXMLDOMNode', {
 lpVtbl: IXMLDOMNodeVtbl.Δ
});

var IXMLDOMDocumentFragment = new StructT('IXMLDOMDocumentFragment', {
 lpVtbl: IXMLDOMDocumentFragmentVtbl.Δ
});

var IXMLDOMDocument = new StructT('IXMLDOMDocument', {
 lpVtbl: IXMLDOMDocumentVtbl.Δ
});

var IXMLDOMNodeList = new StructT('IXMLDOMNodeList', {
 lpVtbl: IXMLDOMNodeListVtbl.Δ
});

var IXMLDOMNamedNodeMap = new StructT('IXMLDOMNamedNodeMap', {
 lpVtbl: IXMLDOMNamedNodeMapVtbl.Δ
});

var IXMLDOMCharacterData = new StructT('IXMLDOMCharacterData', {
 lpVtbl: IXMLDOMCharacterDataVtbl.Δ
});

var IXMLDOMAttribute = new StructT('IXMLDOMAttribute', {
 lpVtbl: IXMLDOMAttributeVtbl.Δ
});

var IXMLDOMElement = new StructT('IXMLDOMElement', {
 lpVtbl: IXMLDOMElementVtbl.Δ
});

var IXMLDOMText = new StructT('IXMLDOMText', {
 lpVtbl: IXMLDOMTextVtbl.Δ
});

var IXMLDOMComment = new StructT('IXMLDOMComment', {
 lpVtbl: IXMLDOMCommentVtbl.Δ
});

var IXMLDOMProcessingInstruction = new StructT('IXMLDOMProcessingInstruction', {
 lpVtbl: IXMLDOMProcessingInstructionVtbl.Δ
});

var IXMLDOMCDATASection = new StructT('IXMLDOMCDATASection', {
 lpVtbl: IXMLDOMCDATASectionVtbl.Δ
});

var IXMLDOMDocumentType = new StructT('IXMLDOMDocumentType', {
 lpVtbl: IXMLDOMDocumentTypeVtbl.Δ
});

var IXMLDOMNotation = new StructT('IXMLDOMNotation', {
 lpVtbl: IXMLDOMNotationVtbl.Δ
});

var IXMLDOMEntity = new StructT('IXMLDOMEntity', {
 lpVtbl: IXMLDOMEntityVtbl.Δ
});

var IXMLDOMEntityReference = new StructT('IXMLDOMEntityReference', {
 lpVtbl: IXMLDOMEntityReferenceVtbl.Δ
});

var IXMLDOMParseError = new StructT('IXMLDOMParseError', {
 lpVtbl: IXMLDOMParseErrorVtbl.Δ
});

var IXTLRuntime = new StructT('IXTLRuntime', {
 lpVtbl: IXTLRuntimeVtbl.Δ
});

var XMLDOMDocumentEvents = new StructT('XMLDOMDocumentEvents', {
 lpVtbl: XMLDOMDocumentEventsVtbl.Δ
});



var IXMLHttpRequest = new StructT('IXMLHttpRequest', {
 lpVtbl: IXMLHttpRequestVtbl.Δ
});


var IXMLDSOControl = new StructT('IXMLDSOControl', {
 lpVtbl: IXMLDSOControlVtbl.Δ
});


var IXMLElementCollection = new StructT('IXMLElementCollection', {
 lpVtbl: IXMLElementCollectionVtbl.Δ
});

var IXMLDocument = new StructT('IXMLDocument', {
 lpVtbl: IXMLDocumentVtbl.Δ
});

var IXMLDocument2 = new StructT('IXMLDocument2', {
 lpVtbl: IXMLDocument2Vtbl.Δ
});

var IXMLElement = new StructT('IXMLElement', {
 lpVtbl: IXMLElementVtbl.Δ
});

var IXMLElement2 = new StructT('IXMLElement2', {
 lpVtbl: IXMLElement2Vtbl.Δ
});

var IXMLAttribute = new StructT('IXMLAttribute', {
 lpVtbl: IXMLAttributeVtbl.Δ
});

var IXMLError = new StructT('IXMLError', {
 lpVtbl: IXMLErrorVtbl.Δ
});


var ICreateTypeInfo = new StructT('ICreateTypeInfo', {
 lpVtbl: ICreateTypeInfoVtbl.Δ
});

var ICreateTypeInfo2 = new StructT('ICreateTypeInfo2', {
 lpVtbl: ICreateTypeInfo2Vtbl.Δ
});

var ICreateTypeLib = new StructT('ICreateTypeLib', {
 lpVtbl: ICreateTypeLibVtbl.Δ
});

var ICreateTypeLib2 = new StructT('ICreateTypeLib2', {
 lpVtbl: ICreateTypeLib2Vtbl.Δ
});

var IDispatch = new StructT('IDispatch', {
 lpVtbl: IDispatchVtbl.Δ
});

var IEnumVARIANT = new StructT('IEnumVARIANT', {
 lpVtbl: IEnumVARIANTVtbl.Δ
});

var ITypeComp = new StructT('ITypeComp', {
 lpVtbl: ITypeCompVtbl.Δ
});

var ITypeInfo = new StructT('ITypeInfo', {
 lpVtbl: ITypeInfoVtbl.Δ
});

var ITypeInfo2 = new StructT('ITypeInfo2', {
 lpVtbl: ITypeInfo2Vtbl.Δ
});

var ITypeLib = new StructT('ITypeLib', {
 lpVtbl: ITypeLibVtbl.Δ
});

var ITypeLib2 = new StructT('ITypeLib2', {
 lpVtbl: ITypeLib2Vtbl.Δ
});

var ITypeChangeEvents = new StructT('ITypeChangeEvents', {
 lpVtbl: ITypeChangeEventsVtbl.Δ
});

var IErrorInfo = new StructT('IErrorInfo', {
 lpVtbl: IErrorInfoVtbl.Δ
});

var ICreateErrorInfo = new StructT('ICreateErrorInfo', {
 lpVtbl: ICreateErrorInfoVtbl.Δ
});

var ISupportErrorInfo = new StructT('ISupportErrorInfo', {
 lpVtbl: ISupportErrorInfoVtbl.Δ
});

var ITypeFactory = new StructT('ITypeFactory', {
 lpVtbl: ITypeFactoryVtbl.Δ
});

var ITypeMarshal = new StructT('ITypeMarshal', {
 lpVtbl: ITypeMarshalVtbl.Δ
});

var IRecordInfo = new StructT('IRecordInfo', {
 lpVtbl: IRecordInfoVtbl.Δ
});

var IErrorLog = new StructT('IErrorLog', {
 lpVtbl: IErrorLogVtbl.Δ
});

var IPropertyBag = new StructT('IPropertyBag', {
 lpVtbl: IPropertyBagVtbl.Δ
});

var SAFEnew ArrayTBOUND = new StructT('SAFEnew ArrayTBOUND', {
 cElements: ULONG,
 lLbound: LONG
});

var _wireVARIANT = new StructT('_wireVARIANT', {
 clSize: DWORD,
 rpcReserved: DWORD,
 vt: USHORT,
 wReserved1: USHORT,
 wReserved2: USHORT,
 wReserved3: USHORT
});

var _wireBRECORD = new StructT('_wireBRECORD', {
 fFlags: ULONG,
 clSize: ULONG,
 pRecInfo: IRecordInfo.Δ,
 pRecord: byte.Δ
});

var SAFEARR_BSTR = new StructT('SAFEARR_BSTR', {
 Size: ULONG,
 aBstr: wireBSTR.Δ
});

var SAFEARR_UNKNOWN = new StructT('SAFEARR_UNKNOWN', {
 Size: ULONG,
 apUnknown: IUnknown.Δ.Δ
});

var SAFEARR_DISPATCH = new StructT('SAFEARR_DISPATCH', {
 Size: ULONG,
 apDispatch: IDispatch.Δ.Δ
});

var SAFEARR_VARIANT = new StructT('SAFEARR_VARIANT', {
 Size: ULONG,
 aVariant: wireVARIANT.Δ
});

var SAFEARR_BRECORD = new StructT('SAFEARR_BRECORD', {
 Size: ULONG,
 aRecord: wireBRECORD.Δ
});

var SAFEARR_HAVEIID = new StructT('SAFEARR_HAVEIID', {
 Size: ULONG,
 apUnknown: IUnknown.Δ.Δ,
 iid: IID
});

var SAFEnew ArrayTUNION = new StructT('SAFEnew ArrayTUNION', {
 sfType: ULONG,
 u: __MIDL_IOleAutomationTypes_0001
});

var _wireSAFEnew ArrayT = new StructT('_wireSAFEnew ArrayT', {
 cDims: USHORT,
 fFeatures: USHORT,
 cbElements: ULONG,
 cLocks: ULONG,
 uArrayStructs: SAFEnew ArrayTUNION,
 rgsabound: new ArrayT(SAFEnew ArrayTBOUND,  1 )
});

var SAFEnew ArrayT = new StructT('SAFEnew ArrayT', {
 cDims: USHORT,
 fFeatures: USHORT,
 cbElements: ULONG,
 cLocks: ULONG,
 pvData: PVOID,
 rgsabound: new ArrayT(SAFEnew ArrayTBOUND,  1 )
});


var undefined = new StructT('undefined', {
 vt: VARTYPE,
 wReserved1: WORD,
 wReserved2: WORD,
 wReserved3: WORD
});

var undefined = new StructT('undefined', {
 pvRecord: PVOID,
 pRecInfo: IRecordInfo.Δ
});

var TYPEDESC = new StructT('TYPEDESC', {
 vt: VARTYPE
});

var new ArrayTDESC = new StructT('new ArrayTDESC', {
 tdescElem: TYPEDESC,
 cDims: USHORT,
 rgbounds: new ArrayT(SAFEnew ArrayTBOUND,  1 )
});

var PARAMDESCEX = new StructT('PARAMDESCEX', {
 cBytes: ULONG,
 varDefaultValue: VARIANTARG
});

var PARAMDESC = new StructT('PARAMDESC', {
 pparamdescex: LPPARAMDESCEX,
 wParamFlags: USHORT
});

var IDLDESC = new StructT('IDLDESC', {
 dwReserved: ULONG_PTR,
 wIDLFlags: USHORT
});

var ELEMDESC = new StructT('ELEMDESC', {
 tdesc: TYPEDESC
});

var TYPEATTR = new StructT('TYPEATTR', {
 guid: GUID,
 lcid: LCID,
 dwReserved: DWORD,
 memidConstructor: MEMBERID,
 memidDestructor: MEMBERID,
 lpstrSchema: LPOLESTR,
 cbSizeInstance: ULONG,
 typekind: TYPEKIND,
 cFuncs: WORD,
 cVars: WORD,
 cImplTypes: WORD,
 cbSizeVft: WORD,
 cbAlignment: WORD,
 wTypeFlags: WORD,
 wMajorVerNum: WORD,
 wMinorVerNum: WORD,
 tdescAlias: TYPEDESC,
 idldescType: IDLDESC
});

var DISPPARAMS = new StructT('DISPPARAMS', {
 rgvarg: VARIANTARG.Δ,
 rgdispidNamedArgs: DISPID.Δ,
 cArgs: UINT,
 cNamedArgs: UINT
});

var EXCEPINFO = new StructT('EXCEPINFO', {
 wCode: WORD,
 wReserved: WORD,
 bstrSource: BSTR,
 bstrDescription: BSTR,
 bstrHelpFile: BSTR,
 dwHelpContext: DWORD,
 pvReserved: PVOID,
 pfnDeferredFillIn: new CallbackT(long, [tagEXCEPINFO.Δ]).Δ,
 scode: SCODE
});

var FUNCDESC = new StructT('FUNCDESC', {
 memid: MEMBERID,
 lprgscode: SCODE.Δ,
 lprgelemdescParam: ELEMDESC.Δ,
 funckind: FUNCKIND,
 invkind: INVOKEKIND,
 callconv: CALLCONV,
 cParams: SHORT,
 cParamsOpt: SHORT,
 oVft: SHORT,
 cScodes: SHORT,
 elemdescFunc: ELEMDESC,
 wFuncFlags: WORD
});

var VARDESC = new StructT('VARDESC', {
 memid: MEMBERID,
 lpstrSchema: LPOLESTR,
 elemdescVar: ELEMDESC,
 wVarFlags: WORD,
 varkind: VARKIND
});

var CLEANLOCALSTORAGE = new StructT('CLEANLOCALSTORAGE', {
 pInterface: IUnknown.Δ,
 pStorage: PVOID,
 flags: DWORD
});

var CUSTDATAITEM = new StructT('CUSTDATAITEM', {
 guid: GUID,
 varValue: VARIANTARG
});

var CUSTDATA = new StructT('CUSTDATA', {
 cCustData: DWORD,
 prgCustData: LPCUSTDATAITEM
});

var ICreateTypeInfoVtbl = new StructT('ICreateTypeInfoVtbl', {
 QueryInterface: new CallbackT(long, [ICreateTypeInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICreateTypeInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [ICreateTypeInfo.Δ]).Δ,
 SetGuid: new CallbackT(long, [ICreateTypeInfo.Δ, _GUID.Δ]).Δ,
 SetTypeFlags: new CallbackT(long, [ICreateTypeInfo.Δ, uint]).Δ,
 SetDocString: new CallbackT(long, [ICreateTypeInfo.Δ, ushort.Δ]).Δ,
 SetHelpContext: new CallbackT(long, [ICreateTypeInfo.Δ, ulong]).Δ,
 SetVersion: new CallbackT(long, [ICreateTypeInfo.Δ, ushort, ushort]).Δ,
 AddRefTypeInfo: new CallbackT(long, [ICreateTypeInfo.Δ, ITypeInfo.Δ, ulong.Δ]).Δ,
 AddFuncDesc: new CallbackT(long, [ICreateTypeInfo.Δ, uint, tagFUNCDESC.Δ]).Δ,
 AddImplType: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ulong]).Δ,
 SetImplTypeFlags: new CallbackT(long, [ICreateTypeInfo.Δ, uint, int]).Δ,
 SetAlignment: new CallbackT(long, [ICreateTypeInfo.Δ, ushort]).Δ,
 SetSchema: new CallbackT(long, [ICreateTypeInfo.Δ, ushort.Δ]).Δ,
 AddVarDesc: new CallbackT(long, [ICreateTypeInfo.Δ, uint, tagVARDESC.Δ]).Δ,
 SetFuncAndParamNames: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ushort.Δ.Δ, uint]).Δ,
 SetVarName: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ushort.Δ]).Δ,
 SetTypeDescAlias: new CallbackT(long, [ICreateTypeInfo.Δ, tagTYPEDESC.Δ]).Δ,
 DefineFuncAsDllEntry: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ushort.Δ, ushort.Δ]).Δ,
 SetFuncDocString: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ushort.Δ]).Δ,
 SetVarDocString: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ushort.Δ]).Δ,
 SetFuncHelpContext: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ulong]).Δ,
 SetVarHelpContext: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ulong]).Δ,
 SetMops: new CallbackT(long, [ICreateTypeInfo.Δ, uint, ushort.Δ]).Δ,
 SetTypeIdldesc: new CallbackT(long, [ICreateTypeInfo.Δ, tagIDLDESC.Δ]).Δ,
 LayOut: new CallbackT(long, [ICreateTypeInfo.Δ]).Δ
});

var ICreateTypeInfo2Vtbl = new StructT('ICreateTypeInfo2Vtbl', {
 QueryInterface: new CallbackT(long, [ICreateTypeInfo2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICreateTypeInfo2.Δ]).Δ,
 Release: new CallbackT(ulong, [ICreateTypeInfo2.Δ]).Δ,
 SetGuid: new CallbackT(long, [ICreateTypeInfo2.Δ, _GUID.Δ]).Δ,
 SetTypeFlags: new CallbackT(long, [ICreateTypeInfo2.Δ, uint]).Δ,
 SetDocString: new CallbackT(long, [ICreateTypeInfo2.Δ, ushort.Δ]).Δ,
 SetHelpContext: new CallbackT(long, [ICreateTypeInfo2.Δ, ulong]).Δ,
 SetVersion: new CallbackT(long, [ICreateTypeInfo2.Δ, ushort, ushort]).Δ,
 AddRefTypeInfo: new CallbackT(long, [ICreateTypeInfo2.Δ, ITypeInfo.Δ, ulong.Δ]).Δ,
 AddFuncDesc: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, tagFUNCDESC.Δ]).Δ,
 AddImplType: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ulong]).Δ,
 SetImplTypeFlags: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, int]).Δ,
 SetAlignment: new CallbackT(long, [ICreateTypeInfo2.Δ, ushort]).Δ,
 SetSchema: new CallbackT(long, [ICreateTypeInfo2.Δ, ushort.Δ]).Δ,
 AddVarDesc: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, tagVARDESC.Δ]).Δ,
 SetFuncAndParamNames: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ushort.Δ.Δ, uint]).Δ,
 SetVarName: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ushort.Δ]).Δ,
 SetTypeDescAlias: new CallbackT(long, [ICreateTypeInfo2.Δ, tagTYPEDESC.Δ]).Δ,
 DefineFuncAsDllEntry: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ushort.Δ, ushort.Δ]).Δ,
 SetFuncDocString: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ushort.Δ]).Δ,
 SetVarDocString: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ushort.Δ]).Δ,
 SetFuncHelpContext: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ulong]).Δ,
 SetVarHelpContext: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ulong]).Δ,
 SetMops: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ushort.Δ]).Δ,
 SetTypeIdldesc: new CallbackT(long, [ICreateTypeInfo2.Δ, tagIDLDESC.Δ]).Δ,
 LayOut: new CallbackT(long, [ICreateTypeInfo2.Δ]).Δ,
 DeleteFuncDesc: new CallbackT(long, [ICreateTypeInfo2.Δ, uint]).Δ,
 DeleteFuncDescByMemId: new CallbackT(long, [ICreateTypeInfo2.Δ, long, INVOKEKIND]).Δ,
 DeleteVarDesc: new CallbackT(long, [ICreateTypeInfo2.Δ, uint]).Δ,
 DeleteVarDescByMemId: new CallbackT(long, [ICreateTypeInfo2.Δ, long]).Δ,
 DeleteImplType: new CallbackT(long, [ICreateTypeInfo2.Δ, uint]).Δ,
 SetCustData: new CallbackT(long, [ICreateTypeInfo2.Δ, _GUID.Δ, tagVARIANT.Δ]).Δ,
 SetFuncCustData: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 SetParamCustData: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 SetVarCustData: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 SetImplTypeCustData: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 SetHelpStringContext: new CallbackT(long, [ICreateTypeInfo2.Δ, ulong]).Δ,
 SetFuncHelpStringContext: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ulong]).Δ,
 SetVarHelpStringContext: new CallbackT(long, [ICreateTypeInfo2.Δ, uint, ulong]).Δ,
 Invalidate: new CallbackT(long, [ICreateTypeInfo2.Δ]).Δ,
 SetName: new CallbackT(long, [ICreateTypeInfo2.Δ, ushort.Δ]).Δ
});

var ICreateTypeLibVtbl = new StructT('ICreateTypeLibVtbl', {
 QueryInterface: new CallbackT(long, [ICreateTypeLib.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICreateTypeLib.Δ]).Δ,
 Release: new CallbackT(ulong, [ICreateTypeLib.Δ]).Δ,
 CreateTypeInfo: new CallbackT(long, [ICreateTypeLib.Δ, ushort.Δ, TYPEKIND, ICreateTypeInfo.Δ.Δ]).Δ,
 SetName: new CallbackT(long, [ICreateTypeLib.Δ, ushort.Δ]).Δ,
 SetVersion: new CallbackT(long, [ICreateTypeLib.Δ, ushort, ushort]).Δ,
 SetGuid: new CallbackT(long, [ICreateTypeLib.Δ, _GUID.Δ]).Δ,
 SetDocString: new CallbackT(long, [ICreateTypeLib.Δ, ushort.Δ]).Δ,
 SetHelpFileName: new CallbackT(long, [ICreateTypeLib.Δ, ushort.Δ]).Δ,
 SetHelpContext: new CallbackT(long, [ICreateTypeLib.Δ, ulong]).Δ,
 SetLcid: new CallbackT(long, [ICreateTypeLib.Δ, ulong]).Δ,
 SetLibFlags: new CallbackT(long, [ICreateTypeLib.Δ, uint]).Δ,
 SaveAllChanges: new CallbackT(long, [ICreateTypeLib.Δ]).Δ
});

var ICreateTypeLib2Vtbl = new StructT('ICreateTypeLib2Vtbl', {
 QueryInterface: new CallbackT(long, [ICreateTypeLib2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICreateTypeLib2.Δ]).Δ,
 Release: new CallbackT(ulong, [ICreateTypeLib2.Δ]).Δ,
 CreateTypeInfo: new CallbackT(long, [ICreateTypeLib2.Δ, ushort.Δ, TYPEKIND, ICreateTypeInfo.Δ.Δ]).Δ,
 SetName: new CallbackT(long, [ICreateTypeLib2.Δ, ushort.Δ]).Δ,
 SetVersion: new CallbackT(long, [ICreateTypeLib2.Δ, ushort, ushort]).Δ,
 SetGuid: new CallbackT(long, [ICreateTypeLib2.Δ, _GUID.Δ]).Δ,
 SetDocString: new CallbackT(long, [ICreateTypeLib2.Δ, ushort.Δ]).Δ,
 SetHelpFileName: new CallbackT(long, [ICreateTypeLib2.Δ, ushort.Δ]).Δ,
 SetHelpContext: new CallbackT(long, [ICreateTypeLib2.Δ, ulong]).Δ,
 SetLcid: new CallbackT(long, [ICreateTypeLib2.Δ, ulong]).Δ,
 SetLibFlags: new CallbackT(long, [ICreateTypeLib2.Δ, uint]).Δ,
 SaveAllChanges: new CallbackT(long, [ICreateTypeLib2.Δ]).Δ,
 DeleteTypeInfo: new CallbackT(long, [ICreateTypeLib2.Δ, ushort.Δ]).Δ,
 SetCustData: new CallbackT(long, [ICreateTypeLib2.Δ, _GUID.Δ, tagVARIANT.Δ]).Δ,
 SetHelpStringContext: new CallbackT(long, [ICreateTypeLib2.Δ, ulong]).Δ,
 SetHelpStringDll: new CallbackT(long, [ICreateTypeLib2.Δ, ushort.Δ]).Δ
});

var IDispatchVtbl = new StructT('IDispatchVtbl', {
 QueryInterface: new CallbackT(long, [IDispatch.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDispatch.Δ]).Δ,
 Release: new CallbackT(ulong, [IDispatch.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IDispatch.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IDispatch.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IDispatch.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IDispatch.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ
});

var IEnumVARIANTVtbl = new StructT('IEnumVARIANTVtbl', {
 QueryInterface: new CallbackT(long, [IEnumVARIANT.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumVARIANT.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumVARIANT.Δ]).Δ,
 Next: new CallbackT(long, [IEnumVARIANT.Δ, ulong, tagVARIANT.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumVARIANT.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumVARIANT.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumVARIANT.Δ, IEnumVARIANT.Δ.Δ]).Δ
});

var ITypeCompVtbl = new StructT('ITypeCompVtbl', {
 QueryInterface: new CallbackT(long, [ITypeComp.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeComp.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeComp.Δ]).Δ,
 Bind: new CallbackT(long, [ITypeComp.Δ, ushort.Δ, ulong, ushort, ITypeInfo.Δ.Δ, tagDESCKIND.Δ, tagBINDPTR.Δ]).Δ,
 BindType: new CallbackT(long, [ITypeComp.Δ, ushort.Δ, ulong, ITypeInfo.Δ.Δ, ITypeComp.Δ.Δ]).Δ
});

var ITypeInfoVtbl = new StructT('ITypeInfoVtbl', {
 QueryInterface: new CallbackT(long, [ITypeInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeInfo.Δ]).Δ,
 GetTypeAttr: new CallbackT(long, [ITypeInfo.Δ, tagTYPEATTR.Δ.Δ]).Δ,
 GetTypeComp: new CallbackT(long, [ITypeInfo.Δ, ITypeComp.Δ.Δ]).Δ,
 GetFuncDesc: new CallbackT(long, [ITypeInfo.Δ, uint, tagFUNCDESC.Δ.Δ]).Δ,
 GetVarDesc: new CallbackT(long, [ITypeInfo.Δ, uint, tagVARDESC.Δ.Δ]).Δ,
 GetNames: new CallbackT(long, [ITypeInfo.Δ, long, ushort.Δ.Δ, uint, uint.Δ]).Δ,
 GetRefTypeOfImplType: new CallbackT(long, [ITypeInfo.Δ, uint, ulong.Δ]).Δ,
 GetImplTypeFlags: new CallbackT(long, [ITypeInfo.Δ, uint, int.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [ITypeInfo.Δ, ushort.Δ.Δ, uint, long.Δ]).Δ,
 Invoke: new CallbackT(long, [ITypeInfo.Δ, _void.Δ, long, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 GetDocumentation: new CallbackT(long, [ITypeInfo.Δ, long, ushort.Δ.Δ, ushort.Δ.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetDllEntry: new CallbackT(long, [ITypeInfo.Δ, long, INVOKEKIND, ushort.Δ.Δ, ushort.Δ.Δ, ushort.Δ]).Δ,
 GetRefTypeInfo: new CallbackT(long, [ITypeInfo.Δ, ulong, ITypeInfo.Δ.Δ]).Δ,
 AddressOfMember: new CallbackT(long, [ITypeInfo.Δ, long, INVOKEKIND, _void.Δ.Δ]).Δ,
 CreateInstance: new CallbackT(long, [ITypeInfo.Δ, IUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 GetMops: new CallbackT(long, [ITypeInfo.Δ, long, ushort.Δ.Δ]).Δ,
 GetContainingTypeLib: new CallbackT(long, [ITypeInfo.Δ, ITypeLib.Δ.Δ, uint.Δ]).Δ,
 ReleaseTypeAttr: new CallbackT(_void, [ITypeInfo.Δ, tagTYPEATTR.Δ]).Δ,
 ReleaseFuncDesc: new CallbackT(_void, [ITypeInfo.Δ, tagFUNCDESC.Δ]).Δ,
 ReleaseVarDesc: new CallbackT(_void, [ITypeInfo.Δ, tagVARDESC.Δ]).Δ
});

var ITypeInfo2Vtbl = new StructT('ITypeInfo2Vtbl', {
 QueryInterface: new CallbackT(long, [ITypeInfo2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeInfo2.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeInfo2.Δ]).Δ,
 GetTypeAttr: new CallbackT(long, [ITypeInfo2.Δ, tagTYPEATTR.Δ.Δ]).Δ,
 GetTypeComp: new CallbackT(long, [ITypeInfo2.Δ, ITypeComp.Δ.Δ]).Δ,
 GetFuncDesc: new CallbackT(long, [ITypeInfo2.Δ, uint, tagFUNCDESC.Δ.Δ]).Δ,
 GetVarDesc: new CallbackT(long, [ITypeInfo2.Δ, uint, tagVARDESC.Δ.Δ]).Δ,
 GetNames: new CallbackT(long, [ITypeInfo2.Δ, long, ushort.Δ.Δ, uint, uint.Δ]).Δ,
 GetRefTypeOfImplType: new CallbackT(long, [ITypeInfo2.Δ, uint, ulong.Δ]).Δ,
 GetImplTypeFlags: new CallbackT(long, [ITypeInfo2.Δ, uint, int.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [ITypeInfo2.Δ, ushort.Δ.Δ, uint, long.Δ]).Δ,
 Invoke: new CallbackT(long, [ITypeInfo2.Δ, _void.Δ, long, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 GetDocumentation: new CallbackT(long, [ITypeInfo2.Δ, long, ushort.Δ.Δ, ushort.Δ.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetDllEntry: new CallbackT(long, [ITypeInfo2.Δ, long, INVOKEKIND, ushort.Δ.Δ, ushort.Δ.Δ, ushort.Δ]).Δ,
 GetRefTypeInfo: new CallbackT(long, [ITypeInfo2.Δ, ulong, ITypeInfo.Δ.Δ]).Δ,
 AddressOfMember: new CallbackT(long, [ITypeInfo2.Δ, long, INVOKEKIND, _void.Δ.Δ]).Δ,
 CreateInstance: new CallbackT(long, [ITypeInfo2.Δ, IUnknown.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 GetMops: new CallbackT(long, [ITypeInfo2.Δ, long, ushort.Δ.Δ]).Δ,
 GetContainingTypeLib: new CallbackT(long, [ITypeInfo2.Δ, ITypeLib.Δ.Δ, uint.Δ]).Δ,
 ReleaseTypeAttr: new CallbackT(_void, [ITypeInfo2.Δ, tagTYPEATTR.Δ]).Δ,
 ReleaseFuncDesc: new CallbackT(_void, [ITypeInfo2.Δ, tagFUNCDESC.Δ]).Δ,
 ReleaseVarDesc: new CallbackT(_void, [ITypeInfo2.Δ, tagVARDESC.Δ]).Δ,
 GetTypeKind: new CallbackT(long, [ITypeInfo2.Δ, tagTYPEKIND.Δ]).Δ,
 GetTypeFlags: new CallbackT(long, [ITypeInfo2.Δ, ulong.Δ]).Δ,
 GetFuncIndexOfMemId: new CallbackT(long, [ITypeInfo2.Δ, long, INVOKEKIND, uint.Δ]).Δ,
 GetVarIndexOfMemId: new CallbackT(long, [ITypeInfo2.Δ, long, uint.Δ]).Δ,
 GetCustData: new CallbackT(long, [ITypeInfo2.Δ, _GUID.Δ, tagVARIANT.Δ]).Δ,
 GetFuncCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 GetParamCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 GetVarCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 GetImplTypeCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, _GUID.Δ, tagVARIANT.Δ]).Δ,
 GetDocumentation2: new CallbackT(long, [ITypeInfo2.Δ, long, ulong, ushort.Δ.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetAllCustData: new CallbackT(long, [ITypeInfo2.Δ, tagCUSTDATA.Δ]).Δ,
 GetAllFuncCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, tagCUSTDATA.Δ]).Δ,
 GetAllParamCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, uint, tagCUSTDATA.Δ]).Δ,
 GetAllVarCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, tagCUSTDATA.Δ]).Δ,
 GetAllImplTypeCustData: new CallbackT(long, [ITypeInfo2.Δ, uint, tagCUSTDATA.Δ]).Δ
});

var TLIBATTR = new StructT('TLIBATTR', {
 guid: GUID,
 lcid: LCID,
 syskind: SYSKIND,
 wMajorVerNum: WORD,
 wMinorVerNum: WORD,
 wLibFlags: WORD
});

var ITypeLibVtbl = new StructT('ITypeLibVtbl', {
 QueryInterface: new CallbackT(long, [ITypeLib.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeLib.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeLib.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(uint, [ITypeLib.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [ITypeLib.Δ, uint, ITypeInfo.Δ.Δ]).Δ,
 GetTypeInfoType: new CallbackT(long, [ITypeLib.Δ, uint, tagTYPEKIND.Δ]).Δ,
 GetTypeInfoOfGuid: new CallbackT(long, [ITypeLib.Δ, _GUID.Δ, ITypeInfo.Δ.Δ]).Δ,
 GetLibAttr: new CallbackT(long, [ITypeLib.Δ, tagTLIBATTR.Δ.Δ]).Δ,
 GetTypeComp: new CallbackT(long, [ITypeLib.Δ, ITypeComp.Δ.Δ]).Δ,
 GetDocumentation: new CallbackT(long, [ITypeLib.Δ, int, ushort.Δ.Δ, ushort.Δ.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 IsName: new CallbackT(long, [ITypeLib.Δ, ushort.Δ, ulong, int.Δ]).Δ,
 FindName: new CallbackT(long, [ITypeLib.Δ, ushort.Δ, ulong, ITypeInfo.Δ.Δ, long.Δ, ushort.Δ]).Δ,
 ReleaseTLibAttr: new CallbackT(_void, [ITypeLib.Δ, tagTLIBATTR.Δ]).Δ
});

var ITypeLib2Vtbl = new StructT('ITypeLib2Vtbl', {
 QueryInterface: new CallbackT(long, [ITypeLib2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeLib2.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeLib2.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(uint, [ITypeLib2.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [ITypeLib2.Δ, uint, ITypeInfo.Δ.Δ]).Δ,
 GetTypeInfoType: new CallbackT(long, [ITypeLib2.Δ, uint, tagTYPEKIND.Δ]).Δ,
 GetTypeInfoOfGuid: new CallbackT(long, [ITypeLib2.Δ, _GUID.Δ, ITypeInfo.Δ.Δ]).Δ,
 GetLibAttr: new CallbackT(long, [ITypeLib2.Δ, tagTLIBATTR.Δ.Δ]).Δ,
 GetTypeComp: new CallbackT(long, [ITypeLib2.Δ, ITypeComp.Δ.Δ]).Δ,
 GetDocumentation: new CallbackT(long, [ITypeLib2.Δ, int, ushort.Δ.Δ, ushort.Δ.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 IsName: new CallbackT(long, [ITypeLib2.Δ, ushort.Δ, ulong, int.Δ]).Δ,
 FindName: new CallbackT(long, [ITypeLib2.Δ, ushort.Δ, ulong, ITypeInfo.Δ.Δ, long.Δ, ushort.Δ]).Δ,
 ReleaseTLibAttr: new CallbackT(_void, [ITypeLib2.Δ, tagTLIBATTR.Δ]).Δ,
 GetCustData: new CallbackT(long, [ITypeLib2.Δ, _GUID.Δ, tagVARIANT.Δ]).Δ,
 GetLibStatistics: new CallbackT(long, [ITypeLib2.Δ, ulong.Δ, ulong.Δ]).Δ,
 GetDocumentation2: new CallbackT(long, [ITypeLib2.Δ, int, ulong, ushort.Δ.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetAllCustData: new CallbackT(long, [ITypeLib2.Δ, tagCUSTDATA.Δ]).Δ
});

var ITypeChangeEventsVtbl = new StructT('ITypeChangeEventsVtbl', {
 QueryInterface: new CallbackT(long, [ITypeChangeEvents.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeChangeEvents.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeChangeEvents.Δ]).Δ,
 RequestTypeChange: new CallbackT(long, [ITypeChangeEvents.Δ, CHANGEKIND, ITypeInfo.Δ, ushort.Δ, int.Δ]).Δ,
 AfterTypeChange: new CallbackT(long, [ITypeChangeEvents.Δ, CHANGEKIND, ITypeInfo.Δ, ushort.Δ]).Δ
});

var IErrorInfoVtbl = new StructT('IErrorInfoVtbl', {
 QueryInterface: new CallbackT(long, [IErrorInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IErrorInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IErrorInfo.Δ]).Δ,
 GetGUID: new CallbackT(long, [IErrorInfo.Δ, _GUID.Δ]).Δ,
 GetSource: new CallbackT(long, [IErrorInfo.Δ, ushort.Δ.Δ]).Δ,
 GetDescription: new CallbackT(long, [IErrorInfo.Δ, ushort.Δ.Δ]).Δ,
 GetHelpFile: new CallbackT(long, [IErrorInfo.Δ, ushort.Δ.Δ]).Δ,
 GetHelpContext: new CallbackT(long, [IErrorInfo.Δ, ulong.Δ]).Δ
});

var ICreateErrorInfoVtbl = new StructT('ICreateErrorInfoVtbl', {
 QueryInterface: new CallbackT(long, [ICreateErrorInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICreateErrorInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [ICreateErrorInfo.Δ]).Δ,
 SetGUID: new CallbackT(long, [ICreateErrorInfo.Δ, _GUID.Δ]).Δ,
 SetSource: new CallbackT(long, [ICreateErrorInfo.Δ, ushort.Δ]).Δ,
 SetDescription: new CallbackT(long, [ICreateErrorInfo.Δ, ushort.Δ]).Δ,
 SetHelpFile: new CallbackT(long, [ICreateErrorInfo.Δ, ushort.Δ]).Δ,
 SetHelpContext: new CallbackT(long, [ICreateErrorInfo.Δ, ulong]).Δ
});

var ISupportErrorInfoVtbl = new StructT('ISupportErrorInfoVtbl', {
 QueryInterface: new CallbackT(long, [ISupportErrorInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISupportErrorInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [ISupportErrorInfo.Δ]).Δ,
 InterfaceSupportsErrorInfo: new CallbackT(long, [ISupportErrorInfo.Δ, _GUID.Δ]).Δ
});

var ITypeFactoryVtbl = new StructT('ITypeFactoryVtbl', {
 QueryInterface: new CallbackT(long, [ITypeFactory.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeFactory.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeFactory.Δ]).Δ,
 CreateFromTypeInfo: new CallbackT(long, [ITypeFactory.Δ, ITypeInfo.Δ, _GUID.Δ, IUnknown.Δ.Δ]).Δ
});

var ITypeMarshalVtbl = new StructT('ITypeMarshalVtbl', {
 QueryInterface: new CallbackT(long, [ITypeMarshal.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ITypeMarshal.Δ]).Δ,
 Release: new CallbackT(ulong, [ITypeMarshal.Δ]).Δ,
 Size: new CallbackT(long, [ITypeMarshal.Δ, _void.Δ, ulong, _void.Δ, ulong.Δ]).Δ,
 Marshal: new CallbackT(long, [ITypeMarshal.Δ, _void.Δ, ulong, _void.Δ, ulong, uchar.Δ, ulong.Δ]).Δ,
 Unmarshal: new CallbackT(long, [ITypeMarshal.Δ, _void.Δ, ulong, ulong, uchar.Δ, ulong.Δ]).Δ,
 Free: new CallbackT(long, [ITypeMarshal.Δ, _void.Δ]).Δ
});

var IRecordInfoVtbl = new StructT('IRecordInfoVtbl', {
 QueryInterface: new CallbackT(long, [IRecordInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IRecordInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IRecordInfo.Δ]).Δ,
 RecordInit: new CallbackT(long, [IRecordInfo.Δ, _void.Δ]).Δ,
 RecordClear: new CallbackT(long, [IRecordInfo.Δ, _void.Δ]).Δ,
 RecordCopy: new CallbackT(long, [IRecordInfo.Δ, _void.Δ, _void.Δ]).Δ,
 GetGuid: new CallbackT(long, [IRecordInfo.Δ, _GUID.Δ]).Δ,
 GetName: new CallbackT(long, [IRecordInfo.Δ, ushort.Δ.Δ]).Δ,
 GetSize: new CallbackT(long, [IRecordInfo.Δ, ulong.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IRecordInfo.Δ, ITypeInfo.Δ.Δ]).Δ,
 GetField: new CallbackT(long, [IRecordInfo.Δ, _void.Δ, ushort.Δ, tagVARIANT.Δ]).Δ,
 GetFieldNoCopy: new CallbackT(long, [IRecordInfo.Δ, _void.Δ, ushort.Δ, tagVARIANT.Δ, _void.Δ.Δ]).Δ,
 PutField: new CallbackT(long, [IRecordInfo.Δ, ulong, _void.Δ, ushort.Δ, tagVARIANT.Δ]).Δ,
 PutFieldNoCopy: new CallbackT(long, [IRecordInfo.Δ, ulong, _void.Δ, ushort.Δ, tagVARIANT.Δ]).Δ,
 GetFieldNames: new CallbackT(long, [IRecordInfo.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 IsMatchingType: new CallbackT(int, [IRecordInfo.Δ, IRecordInfo.Δ]).Δ,
 RecordCreate: new CallbackT(_void.Δ, [IRecordInfo.Δ]).Δ,
 RecordCreateCopy: new CallbackT(long, [IRecordInfo.Δ, _void.Δ, _void.Δ.Δ]).Δ,
 RecordDestroy: new CallbackT(long, [IRecordInfo.Δ, _void.Δ]).Δ
});

var IErrorLogVtbl = new StructT('IErrorLogVtbl', {
 QueryInterface: new CallbackT(long, [IErrorLog.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IErrorLog.Δ]).Δ,
 Release: new CallbackT(ulong, [IErrorLog.Δ]).Δ,
 AddError: new CallbackT(long, [IErrorLog.Δ, ushort.Δ, tagEXCEPINFO.Δ]).Δ
});

var IPropertyBagVtbl = new StructT('IPropertyBagVtbl', {
 QueryInterface: new CallbackT(long, [IPropertyBag.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPropertyBag.Δ]).Δ,
 Release: new CallbackT(ulong, [IPropertyBag.Δ]).Δ,
 Read: new CallbackT(long, [IPropertyBag.Δ, ushort.Δ, tagVARIANT.Δ, IErrorLog.Δ]).Δ,
 Write: new CallbackT(long, [IPropertyBag.Δ, ushort.Δ, tagVARIANT.Δ]).Δ
});

var XML_ERROR = new StructT('XML_ERROR', {
 _nLine: uint,
 _pchBuf: BSTR,
 _cchBuf: uint,
 _ich: uint,
 _pszFound: BSTR,
 _pszExpected: BSTR,
 _reserved1: DWORD,
 _reserved2: DWORD
});

var IXMLDOMImplementationVtbl = new StructT('IXMLDOMImplementationVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMImplementation.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMImplementation.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMImplementation.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMImplementation.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMImplementation.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMImplementation.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMImplementation.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 hasFeature: new CallbackT(long, [IXMLDOMImplementation.Δ, ushort.Δ, ushort.Δ, short.Δ]).Δ
});

var IXMLDOMNodeVtbl = new StructT('IXMLDOMNodeVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMNode.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMNode.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMNode.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMNode.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMNode.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMNode.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMNode.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMNode.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMNode.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMNode.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMNode.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMNode.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMNode.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMNode.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMNode.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMNode.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ
});

var IXMLDOMDocumentFragmentVtbl = new StructT('IXMLDOMDocumentFragmentVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMDocumentFragment.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMDocumentFragment.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMDocumentFragment.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ
});

var IXMLDOMDocumentVtbl = new StructT('IXMLDOMDocumentVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMDocument.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMDocument.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMDocument.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMDocument.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMDocument.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMDocument.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMDocument.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMDocument.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMDocument.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMDocument.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMDocument.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMDocument.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMDocument.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMDocument.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMDocument.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_doctype: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMDocumentType.Δ.Δ]).Δ,
 get_implementation: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMImplementation.Δ.Δ]).Δ,
 get_documentElement: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMElement.Δ.Δ]).Δ,
 putref_documentElement: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMElement.Δ]).Δ,
 createElement: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMElement.Δ.Δ]).Δ,
 createDocumentFragment: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMDocumentFragment.Δ.Δ]).Δ,
 createTextNode: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMText.Δ.Δ]).Δ,
 createComment: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMComment.Δ.Δ]).Δ,
 createCDATASection: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMCDATASection.Δ.Δ]).Δ,
 createProcessingInstruction: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, ushort.Δ, IXMLDOMProcessingInstruction.Δ.Δ]).Δ,
 createAttribute: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMAttribute.Δ.Δ]).Δ,
 createEntityReference: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMEntityReference.Δ.Δ]).Δ,
 getElementsByTagName: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 createNode: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG, ushort.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 nodeFromID: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 load: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG, short.Δ]).Δ,
 get_readyState: new CallbackT(long, [IXMLDOMDocument.Δ, long.Δ]).Δ,
 get_parseError: new CallbackT(long, [IXMLDOMDocument.Δ, IXMLDOMParseError.Δ.Δ]).Δ,
 get_url: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ.Δ]).Δ,
 get_async: new CallbackT(long, [IXMLDOMDocument.Δ, short.Δ]).Δ,
 put_async: new CallbackT(long, [IXMLDOMDocument.Δ, short]).Δ,
 abort: new CallbackT(long, [IXMLDOMDocument.Δ]).Δ,
 loadXML: new CallbackT(long, [IXMLDOMDocument.Δ, ushort.Δ, short.Δ]).Δ,
 save: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG]).Δ,
 get_validateOnParse: new CallbackT(long, [IXMLDOMDocument.Δ, short.Δ]).Δ,
 put_validateOnParse: new CallbackT(long, [IXMLDOMDocument.Δ, short]).Δ,
 get_resolveExternals: new CallbackT(long, [IXMLDOMDocument.Δ, short.Δ]).Δ,
 put_resolveExternals: new CallbackT(long, [IXMLDOMDocument.Δ, short]).Δ,
 get_preserveWhiteSpace: new CallbackT(long, [IXMLDOMDocument.Δ, short.Δ]).Δ,
 put_preserveWhiteSpace: new CallbackT(long, [IXMLDOMDocument.Δ, short]).Δ,
 put_onreadystatechange: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG]).Δ,
 put_ondataavailable: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG]).Δ,
 put_ontransformnode: new CallbackT(long, [IXMLDOMDocument.Δ, VARIANTARG]).Δ
});

var IXMLDOMNodeListVtbl = new StructT('IXMLDOMNodeListVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMNodeList.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMNodeList.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMNodeList.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMNodeList.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMNodeList.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMNodeList.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMNodeList.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_item: new CallbackT(long, [IXMLDOMNodeList.Δ, long, IXMLDOMNode.Δ.Δ]).Δ,
 get_length: new CallbackT(long, [IXMLDOMNodeList.Δ, long.Δ]).Δ,
 nextNode: new CallbackT(long, [IXMLDOMNodeList.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 reset: new CallbackT(long, [IXMLDOMNodeList.Δ]).Δ,
 get__newEnum: new CallbackT(long, [IXMLDOMNodeList.Δ, IUnknown.Δ.Δ]).Δ
});

var IXMLDOMNamedNodeMapVtbl = new StructT('IXMLDOMNamedNodeMapVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMNamedNodeMap.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMNamedNodeMap.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 getNamedItem: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 setNamedItem: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeNamedItem: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_item: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, long, IXMLDOMNode.Δ.Δ]).Δ,
 get_length: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, long.Δ]).Δ,
 getQualifiedItem: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, ushort.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeQualifiedItem: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, ushort.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 nextNode: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 reset: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ]).Δ,
 get__newEnum: new CallbackT(long, [IXMLDOMNamedNodeMap.Δ, IUnknown.Δ.Δ]).Δ
});

var IXMLDOMCharacterDataVtbl = new StructT('IXMLDOMCharacterDataVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMCharacterData.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMCharacterData.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMCharacterData.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMCharacterData.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMCharacterData.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMCharacterData.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMCharacterData.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMCharacterData.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMCharacterData.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMCharacterData.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMCharacterData.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMCharacterData.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMCharacterData.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMCharacterData.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMCharacterData.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMCharacterData.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMCharacterData.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMCharacterData.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_data: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ.Δ]).Δ,
 put_data: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ]).Δ,
 get_length: new CallbackT(long, [IXMLDOMCharacterData.Δ, long.Δ]).Δ,
 substringData: new CallbackT(long, [IXMLDOMCharacterData.Δ, long, long, ushort.Δ.Δ]).Δ,
 appendData: new CallbackT(long, [IXMLDOMCharacterData.Δ, ushort.Δ]).Δ,
 insertData: new CallbackT(long, [IXMLDOMCharacterData.Δ, long, ushort.Δ]).Δ,
 deleteData: new CallbackT(long, [IXMLDOMCharacterData.Δ, long, long]).Δ,
 replaceData: new CallbackT(long, [IXMLDOMCharacterData.Δ, long, long, ushort.Δ]).Δ
});

var IXMLDOMAttributeVtbl = new StructT('IXMLDOMAttributeVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMAttribute.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMAttribute.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMAttribute.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMAttribute.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMAttribute.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMAttribute.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMAttribute.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMAttribute.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMAttribute.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMAttribute.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMAttribute.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMAttribute.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMAttribute.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMAttribute.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMAttribute.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMAttribute.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMAttribute.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMAttribute.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_name: new CallbackT(long, [IXMLDOMAttribute.Δ, ushort.Δ.Δ]).Δ,
 get_value: new CallbackT(long, [IXMLDOMAttribute.Δ, tagVARIANT.Δ]).Δ,
 put_value: new CallbackT(long, [IXMLDOMAttribute.Δ, VARIANTARG]).Δ
});

var IXMLDOMElementVtbl = new StructT('IXMLDOMElementVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMElement.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMElement.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMElement.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMElement.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMElement.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMElement.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMElement.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMElement.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMElement.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMElement.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMElement.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMElement.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMElement.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMElement.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMElement.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMElement.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMElement.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_tagName: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ.Δ]).Δ,
 getAttribute: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ, tagVARIANT.Δ]).Δ,
 setAttribute: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ, VARIANTARG]).Δ,
 removeAttribute: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ]).Δ,
 getAttributeNode: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ, IXMLDOMAttribute.Δ.Δ]).Δ,
 setAttributeNode: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMAttribute.Δ, IXMLDOMAttribute.Δ.Δ]).Δ,
 removeAttributeNode: new CallbackT(long, [IXMLDOMElement.Δ, IXMLDOMAttribute.Δ, IXMLDOMAttribute.Δ.Δ]).Δ,
 getElementsByTagName: new CallbackT(long, [IXMLDOMElement.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 normalize: new CallbackT(long, [IXMLDOMElement.Δ]).Δ
});

var IXMLDOMTextVtbl = new StructT('IXMLDOMTextVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMText.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMText.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMText.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMText.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMText.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMText.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMText.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMText.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMText.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMText.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMText.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMText.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMText.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMText.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMText.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMText.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMText.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMText.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_data: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ.Δ]).Δ,
 put_data: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ]).Δ,
 get_length: new CallbackT(long, [IXMLDOMText.Δ, long.Δ]).Δ,
 substringData: new CallbackT(long, [IXMLDOMText.Δ, long, long, ushort.Δ.Δ]).Δ,
 appendData: new CallbackT(long, [IXMLDOMText.Δ, ushort.Δ]).Δ,
 insertData: new CallbackT(long, [IXMLDOMText.Δ, long, ushort.Δ]).Δ,
 deleteData: new CallbackT(long, [IXMLDOMText.Δ, long, long]).Δ,
 replaceData: new CallbackT(long, [IXMLDOMText.Δ, long, long, ushort.Δ]).Δ,
 splitText: new CallbackT(long, [IXMLDOMText.Δ, long, IXMLDOMText.Δ.Δ]).Δ
});

var IXMLDOMCommentVtbl = new StructT('IXMLDOMCommentVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMComment.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMComment.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMComment.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMComment.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMComment.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMComment.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMComment.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMComment.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMComment.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMComment.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMComment.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMComment.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMComment.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMComment.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMComment.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMComment.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMComment.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMComment.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_data: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ.Δ]).Δ,
 put_data: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ]).Δ,
 get_length: new CallbackT(long, [IXMLDOMComment.Δ, long.Δ]).Δ,
 substringData: new CallbackT(long, [IXMLDOMComment.Δ, long, long, ushort.Δ.Δ]).Δ,
 appendData: new CallbackT(long, [IXMLDOMComment.Δ, ushort.Δ]).Δ,
 insertData: new CallbackT(long, [IXMLDOMComment.Δ, long, ushort.Δ]).Δ,
 deleteData: new CallbackT(long, [IXMLDOMComment.Δ, long, long]).Δ,
 replaceData: new CallbackT(long, [IXMLDOMComment.Δ, long, long, ushort.Δ]).Δ
});

var IXMLDOMProcessingInstructionVtbl = new StructT('IXMLDOMProcessingInstructionVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMProcessingInstruction.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMProcessingInstruction.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_target: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 get_data: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ.Δ]).Δ,
 put_data: new CallbackT(long, [IXMLDOMProcessingInstruction.Δ, ushort.Δ]).Δ
});

var IXMLDOMCDATASectionVtbl = new StructT('IXMLDOMCDATASectionVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMCDATASection.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMCDATASection.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMCDATASection.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMCDATASection.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMCDATASection.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMCDATASection.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMCDATASection.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMCDATASection.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMCDATASection.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMCDATASection.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMCDATASection.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMCDATASection.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMCDATASection.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMCDATASection.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMCDATASection.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMCDATASection.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMCDATASection.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMCDATASection.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_data: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ.Δ]).Δ,
 put_data: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ]).Δ,
 get_length: new CallbackT(long, [IXMLDOMCDATASection.Δ, long.Δ]).Δ,
 substringData: new CallbackT(long, [IXMLDOMCDATASection.Δ, long, long, ushort.Δ.Δ]).Δ,
 appendData: new CallbackT(long, [IXMLDOMCDATASection.Δ, ushort.Δ]).Δ,
 insertData: new CallbackT(long, [IXMLDOMCDATASection.Δ, long, ushort.Δ]).Δ,
 deleteData: new CallbackT(long, [IXMLDOMCDATASection.Δ, long, long]).Δ,
 replaceData: new CallbackT(long, [IXMLDOMCDATASection.Δ, long, long, ushort.Δ]).Δ,
 splitText: new CallbackT(long, [IXMLDOMCDATASection.Δ, long, IXMLDOMText.Δ.Δ]).Δ
});

var IXMLDOMDocumentTypeVtbl = new StructT('IXMLDOMDocumentTypeVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMDocumentType.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMDocumentType.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMDocumentType.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMDocumentType.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMDocumentType.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMDocumentType.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMDocumentType.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMDocumentType.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMDocumentType.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMDocumentType.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMDocumentType.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMDocumentType.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMDocumentType.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMDocumentType.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMDocumentType.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMDocumentType.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMDocumentType.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_name: new CallbackT(long, [IXMLDOMDocumentType.Δ, ushort.Δ.Δ]).Δ,
 get_entities: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 get_notations: new CallbackT(long, [IXMLDOMDocumentType.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ
});

var IXMLDOMNotationVtbl = new StructT('IXMLDOMNotationVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMNotation.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMNotation.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMNotation.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMNotation.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMNotation.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMNotation.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMNotation.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMNotation.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMNotation.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMNotation.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMNotation.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMNotation.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMNotation.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMNotation.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMNotation.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMNotation.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMNotation.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMNotation.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMNotation.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_publicId: new CallbackT(long, [IXMLDOMNotation.Δ, tagVARIANT.Δ]).Δ,
 get_systemId: new CallbackT(long, [IXMLDOMNotation.Δ, tagVARIANT.Δ]).Δ
});

var IXMLDOMEntityVtbl = new StructT('IXMLDOMEntityVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMEntity.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMEntity.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMEntity.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMEntity.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMEntity.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMEntity.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMEntity.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMEntity.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMEntity.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMEntity.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMEntity.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMEntity.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMEntity.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMEntity.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMEntity.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMEntity.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMEntity.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMEntity.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 get_publicId: new CallbackT(long, [IXMLDOMEntity.Δ, tagVARIANT.Δ]).Δ,
 get_systemId: new CallbackT(long, [IXMLDOMEntity.Δ, tagVARIANT.Δ]).Δ,
 get_notationName: new CallbackT(long, [IXMLDOMEntity.Δ, ushort.Δ.Δ]).Δ
});

var IXMLDOMEntityReferenceVtbl = new StructT('IXMLDOMEntityReferenceVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMEntityReference.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMEntityReference.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMEntityReference.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMEntityReference.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMEntityReference.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMEntityReference.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMEntityReference.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXMLDOMEntityReference.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXMLDOMEntityReference.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXMLDOMEntityReference.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXMLDOMEntityReference.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXMLDOMEntityReference.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXMLDOMEntityReference.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXMLDOMEntityReference.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXMLDOMEntityReference.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXMLDOMEntityReference.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXMLDOMEntityReference.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXMLDOMEntityReference.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXMLDOMEntityReference.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ
});

var IXMLDOMParseErrorVtbl = new StructT('IXMLDOMParseErrorVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDOMParseError.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDOMParseError.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDOMParseError.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDOMParseError.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDOMParseError.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDOMParseError.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDOMParseError.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_errorCode: new CallbackT(long, [IXMLDOMParseError.Δ, long.Δ]).Δ,
 get_url: new CallbackT(long, [IXMLDOMParseError.Δ, ushort.Δ.Δ]).Δ,
 get_reason: new CallbackT(long, [IXMLDOMParseError.Δ, ushort.Δ.Δ]).Δ,
 get_srcText: new CallbackT(long, [IXMLDOMParseError.Δ, ushort.Δ.Δ]).Δ,
 get_line: new CallbackT(long, [IXMLDOMParseError.Δ, long.Δ]).Δ,
 get_linepos: new CallbackT(long, [IXMLDOMParseError.Δ, long.Δ]).Δ,
 get_filepos: new CallbackT(long, [IXMLDOMParseError.Δ, long.Δ]).Δ
});

var IXTLRuntimeVtbl = new StructT('IXTLRuntimeVtbl', {
 QueryInterface: new CallbackT(long, [IXTLRuntime.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXTLRuntime.Δ]).Δ,
 Release: new CallbackT(ulong, [IXTLRuntime.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXTLRuntime.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXTLRuntime.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXTLRuntime.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXTLRuntime.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_nodeName: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ.Δ]).Δ,
 get_nodeValue: new CallbackT(long, [IXTLRuntime.Δ, tagVARIANT.Δ]).Δ,
 put_nodeValue: new CallbackT(long, [IXTLRuntime.Δ, VARIANTARG]).Δ,
 get_nodeType: new CallbackT(long, [IXTLRuntime.Δ, tagDOMNodeType.Δ]).Δ,
 get_parentNode: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_childNodes: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 get_firstChild: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_lastChild: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_previousSibling: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nextSibling: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNamedNodeMap.Δ.Δ]).Δ,
 insertBefore: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, VARIANTARG, IXMLDOMNode.Δ.Δ]).Δ,
 replaceChild: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 removeChild: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 appendChild: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 hasChildNodes: new CallbackT(long, [IXTLRuntime.Δ, short.Δ]).Δ,
 get_ownerDocument: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 cloneNode: new CallbackT(long, [IXTLRuntime.Δ, short, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypeString: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ.Δ]).Δ,
 get_text: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ]).Δ,
 get_specified: new CallbackT(long, [IXTLRuntime.Δ, short.Δ]).Δ,
 get_definition: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_nodeTypedValue: new CallbackT(long, [IXTLRuntime.Δ, tagVARIANT.Δ]).Δ,
 put_nodeTypedValue: new CallbackT(long, [IXTLRuntime.Δ, VARIANTARG]).Δ,
 get_dataType: new CallbackT(long, [IXTLRuntime.Δ, tagVARIANT.Δ]).Δ,
 put_dataType: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ]).Δ,
 get_xml: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ.Δ]).Δ,
 transformNode: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, ushort.Δ.Δ]).Δ,
 selectNodes: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ, IXMLDOMNodeList.Δ.Δ]).Δ,
 selectSingleNode: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ, IXMLDOMNode.Δ.Δ]).Δ,
 get_parsed: new CallbackT(long, [IXTLRuntime.Δ, short.Δ]).Δ,
 get_namespaceURI: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ.Δ]).Δ,
 get_prefix: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ.Δ]).Δ,
 get_baseName: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ.Δ]).Δ,
 transformNodeToObject: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, VARIANTARG]).Δ,
 uniqueID: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, long.Δ]).Δ,
 depth: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, long.Δ]).Δ,
 childNumber: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, long.Δ]).Δ,
 ancestorChildNumber: new CallbackT(long, [IXTLRuntime.Δ, ushort.Δ, IXMLDOMNode.Δ, long.Δ]).Δ,
 absoluteChildNumber: new CallbackT(long, [IXTLRuntime.Δ, IXMLDOMNode.Δ, long.Δ]).Δ,
 formatIndex: new CallbackT(long, [IXTLRuntime.Δ, long, ushort.Δ, ushort.Δ.Δ]).Δ,
 formatNumber: new CallbackT(long, [IXTLRuntime.Δ, double, ushort.Δ, ushort.Δ.Δ]).Δ,
 formatDate: new CallbackT(long, [IXTLRuntime.Δ, VARIANTARG, ushort.Δ, VARIANTARG, ushort.Δ.Δ]).Δ,
 formatTime: new CallbackT(long, [IXTLRuntime.Δ, VARIANTARG, ushort.Δ, VARIANTARG, ushort.Δ.Δ]).Δ
});

var XMLDOMDocumentEventsVtbl = new StructT('XMLDOMDocumentEventsVtbl', {
 QueryInterface: new CallbackT(long, [XMLDOMDocumentEvents.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [XMLDOMDocumentEvents.Δ]).Δ,
 Release: new CallbackT(ulong, [XMLDOMDocumentEvents.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [XMLDOMDocumentEvents.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [XMLDOMDocumentEvents.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [XMLDOMDocumentEvents.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [XMLDOMDocumentEvents.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ
});

var IXMLHttpRequestVtbl = new StructT('IXMLHttpRequestVtbl', {
 QueryInterface: new CallbackT(long, [IXMLHttpRequest.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLHttpRequest.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLHttpRequest.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLHttpRequest.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLHttpRequest.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLHttpRequest.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLHttpRequest.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 open: new CallbackT(long, [IXMLHttpRequest.Δ, ushort.Δ, ushort.Δ, VARIANTARG, VARIANTARG, VARIANTARG]).Δ,
 setRequestHeader: new CallbackT(long, [IXMLHttpRequest.Δ, ushort.Δ, ushort.Δ]).Δ,
 getResponseHeader: new CallbackT(long, [IXMLHttpRequest.Δ, ushort.Δ, ushort.Δ.Δ]).Δ,
 getAllResponseHeaders: new CallbackT(long, [IXMLHttpRequest.Δ, ushort.Δ.Δ]).Δ,
 send: new CallbackT(long, [IXMLHttpRequest.Δ, VARIANTARG]).Δ,
 abort: new CallbackT(long, [IXMLHttpRequest.Δ]).Δ,
 get_status: new CallbackT(long, [IXMLHttpRequest.Δ, long.Δ]).Δ,
 get_statusText: new CallbackT(long, [IXMLHttpRequest.Δ, ushort.Δ.Δ]).Δ,
 get_responseXML: new CallbackT(long, [IXMLHttpRequest.Δ, IDispatch.Δ.Δ]).Δ,
 get_responseText: new CallbackT(long, [IXMLHttpRequest.Δ, ushort.Δ.Δ]).Δ,
 get_responseBody: new CallbackT(long, [IXMLHttpRequest.Δ, tagVARIANT.Δ]).Δ,
 get_responseStream: new CallbackT(long, [IXMLHttpRequest.Δ, tagVARIANT.Δ]).Δ,
 get_readyState: new CallbackT(long, [IXMLHttpRequest.Δ, long.Δ]).Δ,
 put_onreadystatechange: new CallbackT(long, [IXMLHttpRequest.Δ, IDispatch.Δ]).Δ
});

var IXMLDSOControlVtbl = new StructT('IXMLDSOControlVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDSOControl.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDSOControl.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDSOControl.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDSOControl.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDSOControl.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDSOControl.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDSOControl.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_XMLDocument: new CallbackT(long, [IXMLDSOControl.Δ, IXMLDOMDocument.Δ.Δ]).Δ,
 put_XMLDocument: new CallbackT(long, [IXMLDSOControl.Δ, IXMLDOMDocument.Δ]).Δ,
 get_JavaDSOCompatible: new CallbackT(long, [IXMLDSOControl.Δ, int.Δ]).Δ,
 put_JavaDSOCompatible: new CallbackT(long, [IXMLDSOControl.Δ, int]).Δ,
 get_readyState: new CallbackT(long, [IXMLDSOControl.Δ, long.Δ]).Δ
});

var IXMLElementCollectionVtbl = new StructT('IXMLElementCollectionVtbl', {
 QueryInterface: new CallbackT(long, [IXMLElementCollection.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLElementCollection.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLElementCollection.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLElementCollection.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLElementCollection.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLElementCollection.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLElementCollection.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 put_length: new CallbackT(long, [IXMLElementCollection.Δ, long]).Δ,
 get_length: new CallbackT(long, [IXMLElementCollection.Δ, long.Δ]).Δ,
 get__newEnum: new CallbackT(long, [IXMLElementCollection.Δ, IUnknown.Δ.Δ]).Δ,
 item: new CallbackT(long, [IXMLElementCollection.Δ, VARIANTARG, VARIANTARG, IDispatch.Δ.Δ]).Δ
});

var IXMLDocumentVtbl = new StructT('IXMLDocumentVtbl', {
 QueryInterface: new CallbackT(long, [IXMLDocument.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDocument.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDocument.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDocument.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDocument.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDocument.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDocument.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_root: new CallbackT(long, [IXMLDocument.Δ, IXMLElement.Δ.Δ]).Δ,
 get_fileSize: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 get_fileModifiedDate: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 get_fileUpdatedDate: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 get_URL: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 put_URL: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ]).Δ,
 get_mimeType: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 get_readyState: new CallbackT(long, [IXMLDocument.Δ, long.Δ]).Δ,
 get_charset: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 put_charset: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ]).Δ,
 get_version: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 get_doctype: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 get_dtdURL: new CallbackT(long, [IXMLDocument.Δ, ushort.Δ.Δ]).Δ,
 createElement: new CallbackT(long, [IXMLDocument.Δ, VARIANTARG, VARIANTARG, IXMLElement.Δ.Δ]).Δ
});

var IXMLDocument2Vtbl = new StructT('IXMLDocument2Vtbl', {
 QueryInterface: new CallbackT(long, [IXMLDocument2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLDocument2.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLDocument2.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLDocument2.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLDocument2.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLDocument2.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLDocument2.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_root: new CallbackT(long, [IXMLDocument2.Δ, IXMLElement2.Δ.Δ]).Δ,
 get_fileSize: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 get_fileModifiedDate: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 get_fileUpdatedDate: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 get_URL: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 put_URL: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ]).Δ,
 get_mimeType: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 get_readyState: new CallbackT(long, [IXMLDocument2.Δ, long.Δ]).Δ,
 get_charset: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 put_charset: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ]).Δ,
 get_version: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 get_doctype: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 get_dtdURL: new CallbackT(long, [IXMLDocument2.Δ, ushort.Δ.Δ]).Δ,
 createElement: new CallbackT(long, [IXMLDocument2.Δ, VARIANTARG, VARIANTARG, IXMLElement2.Δ.Δ]).Δ,
 get_async: new CallbackT(long, [IXMLDocument2.Δ, short.Δ]).Δ,
 put_async: new CallbackT(long, [IXMLDocument2.Δ, short]).Δ
});

var IXMLElementVtbl = new StructT('IXMLElementVtbl', {
 QueryInterface: new CallbackT(long, [IXMLElement.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLElement.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLElement.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLElement.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLElement.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLElement.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLElement.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_tagName: new CallbackT(long, [IXMLElement.Δ, ushort.Δ.Δ]).Δ,
 put_tagName: new CallbackT(long, [IXMLElement.Δ, ushort.Δ]).Δ,
 get_parent: new CallbackT(long, [IXMLElement.Δ, IXMLElement.Δ.Δ]).Δ,
 setAttribute: new CallbackT(long, [IXMLElement.Δ, ushort.Δ, VARIANTARG]).Δ,
 getAttribute: new CallbackT(long, [IXMLElement.Δ, ushort.Δ, tagVARIANT.Δ]).Δ,
 removeAttribute: new CallbackT(long, [IXMLElement.Δ, ushort.Δ]).Δ,
 get_children: new CallbackT(long, [IXMLElement.Δ, IXMLElementCollection.Δ.Δ]).Δ,
 get_type: new CallbackT(long, [IXMLElement.Δ, long.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLElement.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLElement.Δ, ushort.Δ]).Δ,
 addChild: new CallbackT(long, [IXMLElement.Δ, IXMLElement.Δ, long, long]).Δ,
 removeChild: new CallbackT(long, [IXMLElement.Δ, IXMLElement.Δ]).Δ
});

var IXMLElement2Vtbl = new StructT('IXMLElement2Vtbl', {
 QueryInterface: new CallbackT(long, [IXMLElement2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLElement2.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLElement2.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLElement2.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLElement2.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLElement2.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLElement2.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_tagName: new CallbackT(long, [IXMLElement2.Δ, ushort.Δ.Δ]).Δ,
 put_tagName: new CallbackT(long, [IXMLElement2.Δ, ushort.Δ]).Δ,
 get_parent: new CallbackT(long, [IXMLElement2.Δ, IXMLElement2.Δ.Δ]).Δ,
 setAttribute: new CallbackT(long, [IXMLElement2.Δ, ushort.Δ, VARIANTARG]).Δ,
 getAttribute: new CallbackT(long, [IXMLElement2.Δ, ushort.Δ, tagVARIANT.Δ]).Δ,
 removeAttribute: new CallbackT(long, [IXMLElement2.Δ, ushort.Δ]).Δ,
 get_children: new CallbackT(long, [IXMLElement2.Δ, IXMLElementCollection.Δ.Δ]).Δ,
 get_type: new CallbackT(long, [IXMLElement2.Δ, long.Δ]).Δ,
 get_text: new CallbackT(long, [IXMLElement2.Δ, ushort.Δ.Δ]).Δ,
 put_text: new CallbackT(long, [IXMLElement2.Δ, ushort.Δ]).Δ,
 addChild: new CallbackT(long, [IXMLElement2.Δ, IXMLElement2.Δ, long, long]).Δ,
 removeChild: new CallbackT(long, [IXMLElement2.Δ, IXMLElement2.Δ]).Δ,
 get_attributes: new CallbackT(long, [IXMLElement2.Δ, IXMLElementCollection.Δ.Δ]).Δ
});

var IXMLAttributeVtbl = new StructT('IXMLAttributeVtbl', {
 QueryInterface: new CallbackT(long, [IXMLAttribute.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLAttribute.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLAttribute.Δ]).Δ,
 GetTypeInfoCount: new CallbackT(long, [IXMLAttribute.Δ, uint.Δ]).Δ,
 GetTypeInfo: new CallbackT(long, [IXMLAttribute.Δ, uint, ulong, ITypeInfo.Δ.Δ]).Δ,
 GetIDsOfNames: new CallbackT(long, [IXMLAttribute.Δ, _GUID.Δ, ushort.Δ.Δ, uint, ulong, long.Δ]).Δ,
 Invoke: new CallbackT(long, [IXMLAttribute.Δ, long, _GUID.Δ, ulong, ushort, tagDISPPARAMS.Δ, tagVARIANT.Δ, tagEXCEPINFO.Δ, uint.Δ]).Δ,
 get_name: new CallbackT(long, [IXMLAttribute.Δ, ushort.Δ.Δ]).Δ,
 get_value: new CallbackT(long, [IXMLAttribute.Δ, ushort.Δ.Δ]).Δ
});

var IXMLErrorVtbl = new StructT('IXMLErrorVtbl', {
 QueryInterface: new CallbackT(long, [IXMLError.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IXMLError.Δ]).Δ,
 Release: new CallbackT(ulong, [IXMLError.Δ]).Δ,
 GetErrorInfo: new CallbackT(long, [IXMLError.Δ, _xml_error.Δ]).Δ
});

var IPersistMonikerVtbl = new StructT('IPersistMonikerVtbl', {
 QueryInterface: new CallbackT(long, [IPersistMoniker.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPersistMoniker.Δ]).Δ,
 Release: new CallbackT(ulong, [IPersistMoniker.Δ]).Δ,
 GetClassID: new CallbackT(long, [IPersistMoniker.Δ, _GUID.Δ]).Δ,
 IsDirty: new CallbackT(long, [IPersistMoniker.Δ]).Δ,
 Load: new CallbackT(long, [IPersistMoniker.Δ, int, IMoniker.Δ, IBindCtx.Δ, ulong]).Δ,
 Save: new CallbackT(long, [IPersistMoniker.Δ, IMoniker.Δ, IBindCtx.Δ, int]).Δ,
 SaveCompleted: new CallbackT(long, [IPersistMoniker.Δ, IMoniker.Δ, IBindCtx.Δ]).Δ,
 GetCurMoniker: new CallbackT(long, [IPersistMoniker.Δ, IMoniker.Δ.Δ]).Δ
});

var IMonikerPropVtbl = new StructT('IMonikerPropVtbl', {
 QueryInterface: new CallbackT(long, [IMonikerProp.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IMonikerProp.Δ]).Δ,
 Release: new CallbackT(ulong, [IMonikerProp.Δ]).Δ,
 PutProperty: new CallbackT(long, [IMonikerProp.Δ, MONIKERPROPERTY, ushort.Δ]).Δ
});

var IBindProtocolVtbl = new StructT('IBindProtocolVtbl', {
 QueryInterface: new CallbackT(long, [IBindProtocol.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IBindProtocol.Δ]).Δ,
 Release: new CallbackT(ulong, [IBindProtocol.Δ]).Δ,
 CreateBinding: new CallbackT(long, [IBindProtocol.Δ, ushort.Δ, IBindCtx.Δ, IBinding.Δ.Δ]).Δ
});

var IBindingVtbl = new StructT('IBindingVtbl', {
 QueryInterface: new CallbackT(long, [IBinding.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IBinding.Δ]).Δ,
 Release: new CallbackT(ulong, [IBinding.Δ]).Δ,
 Abort: new CallbackT(long, [IBinding.Δ]).Δ,
 Suspend: new CallbackT(long, [IBinding.Δ]).Δ,
 Resume: new CallbackT(long, [IBinding.Δ]).Δ,
 SetPriority: new CallbackT(long, [IBinding.Δ, long]).Δ,
 GetPriority: new CallbackT(long, [IBinding.Δ, long.Δ]).Δ,
 GetBindResult: new CallbackT(long, [IBinding.Δ, _GUID.Δ, ulong.Δ, ushort.Δ.Δ, ulong.Δ]).Δ
});

var BINDINFO = new StructT('BINDINFO', {
 cbSize: ULONG,
 szExtraInfo: LPWSTR,
 stgmedData: STGMEDIUM,
 grfBindInfoF: DWORD,
 dwBindVerb: DWORD,
 szCustomVerb: LPWSTR,
 cbstgmedData: DWORD,
 dwOptions: DWORD,
 dwOptionsFlags: DWORD,
 dwCodePage: DWORD,
 securityAttributes: SECURITY_ATTRIBUTES,
 iid: IID,
 pUnk: IUnknown.Δ,
 dwReserved: DWORD
});

var REMSECURITY_ATTRIBUTES = new StructT('REMSECURITY_ATTRIBUTES', {
 nLength: DWORD,
 lpSecurityDescriptor: DWORD,
 bInheritHandle: BOOL
});

var RemBINDINFO = new StructT('RemBINDINFO', {
 cbSize: ULONG,
 szExtraInfo: LPWSTR,
 grfBindInfoF: DWORD,
 dwBindVerb: DWORD,
 szCustomVerb: LPWSTR,
 cbstgmedData: DWORD,
 dwOptions: DWORD,
 dwOptionsFlags: DWORD,
 dwCodePage: DWORD,
 securityAttributes: REMSECURITY_ATTRIBUTES,
 iid: IID,
 pUnk: IUnknown.Δ,
 dwReserved: DWORD
});

var RemFORMATETC = new StructT('RemFORMATETC', {
 cfFormat: DWORD,
 ptd: DWORD,
 dwAspect: DWORD,
 lindex: LONG,
 tymed: DWORD
});

var IBindStatusCallbackVtbl = new StructT('IBindStatusCallbackVtbl', {
 QueryInterface: new CallbackT(long, [IBindStatusCallback.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IBindStatusCallback.Δ]).Δ,
 Release: new CallbackT(ulong, [IBindStatusCallback.Δ]).Δ,
 OnStartBinding: new CallbackT(long, [IBindStatusCallback.Δ, ulong, IBinding.Δ]).Δ,
 GetPriority: new CallbackT(long, [IBindStatusCallback.Δ, long.Δ]).Δ,
 OnLowResource: new CallbackT(long, [IBindStatusCallback.Δ, ulong]).Δ,
 OnProgress: new CallbackT(long, [IBindStatusCallback.Δ, ulong, ulong, ulong, ushort.Δ]).Δ,
 OnStopBinding: new CallbackT(long, [IBindStatusCallback.Δ, long, ushort.Δ]).Δ,
 GetBindInfo: new CallbackT(long, [IBindStatusCallback.Δ, ulong.Δ, _tagBINDINFO.Δ]).Δ,
 OnDataAvailable: new CallbackT(long, [IBindStatusCallback.Δ, ulong, ulong, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 OnObjectAvailable: new CallbackT(long, [IBindStatusCallback.Δ, _GUID.Δ, IUnknown.Δ]).Δ
});

var IBindStatusCallbackExVtbl = new StructT('IBindStatusCallbackExVtbl', {
 QueryInterface: new CallbackT(long, [IBindStatusCallbackEx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IBindStatusCallbackEx.Δ]).Δ,
 Release: new CallbackT(ulong, [IBindStatusCallbackEx.Δ]).Δ,
 OnStartBinding: new CallbackT(long, [IBindStatusCallbackEx.Δ, ulong, IBinding.Δ]).Δ,
 GetPriority: new CallbackT(long, [IBindStatusCallbackEx.Δ, long.Δ]).Δ,
 OnLowResource: new CallbackT(long, [IBindStatusCallbackEx.Δ, ulong]).Δ,
 OnProgress: new CallbackT(long, [IBindStatusCallbackEx.Δ, ulong, ulong, ulong, ushort.Δ]).Δ,
 OnStopBinding: new CallbackT(long, [IBindStatusCallbackEx.Δ, long, ushort.Δ]).Δ,
 GetBindInfo: new CallbackT(long, [IBindStatusCallbackEx.Δ, ulong.Δ, _tagBINDINFO.Δ]).Δ,
 OnDataAvailable: new CallbackT(long, [IBindStatusCallbackEx.Δ, ulong, ulong, tagFORMATETC.Δ, tagSTGMEDIUM.Δ]).Δ,
 OnObjectAvailable: new CallbackT(long, [IBindStatusCallbackEx.Δ, _GUID.Δ, IUnknown.Δ]).Δ,
 GetBindInfoEx: new CallbackT(long, [IBindStatusCallbackEx.Δ, ulong.Δ, _tagBINDINFO.Δ, ulong.Δ, ulong.Δ]).Δ
});

var IAuthenticateVtbl = new StructT('IAuthenticateVtbl', {
 QueryInterface: new CallbackT(long, [IAuthenticate.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAuthenticate.Δ]).Δ,
 Release: new CallbackT(ulong, [IAuthenticate.Δ]).Δ,
 Authenticate: new CallbackT(long, [IAuthenticate.Δ, HWND__.Δ.Δ, ushort.Δ.Δ, ushort.Δ.Δ]).Δ
});

var AUTHENTICATEINFO = new StructT('AUTHENTICATEINFO', {
 dwFlags: DWORD,
 dwReserved: DWORD
});

var IAuthenticateExVtbl = new StructT('IAuthenticateExVtbl', {
 QueryInterface: new CallbackT(long, [IAuthenticateEx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IAuthenticateEx.Δ]).Δ,
 Release: new CallbackT(ulong, [IAuthenticateEx.Δ]).Δ,
 Authenticate: new CallbackT(long, [IAuthenticateEx.Δ, HWND__.Δ.Δ, ushort.Δ.Δ, ushort.Δ.Δ]).Δ,
 AuthenticateEx: new CallbackT(long, [IAuthenticateEx.Δ, HWND__.Δ.Δ, ushort.Δ.Δ, ushort.Δ.Δ, _tagAUTHENTICATEINFO.Δ]).Δ
});

var IHttpNegotiateVtbl = new StructT('IHttpNegotiateVtbl', {
 QueryInterface: new CallbackT(long, [IHttpNegotiate.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IHttpNegotiate.Δ]).Δ,
 Release: new CallbackT(ulong, [IHttpNegotiate.Δ]).Δ,
 BeginningTransaction: new CallbackT(long, [IHttpNegotiate.Δ, ushort.Δ, ushort.Δ, ulong, ushort.Δ.Δ]).Δ,
 OnResponse: new CallbackT(long, [IHttpNegotiate.Δ, ulong, ushort.Δ, ushort.Δ, ushort.Δ.Δ]).Δ
});

var IHttpNegotiate2Vtbl = new StructT('IHttpNegotiate2Vtbl', {
 QueryInterface: new CallbackT(long, [IHttpNegotiate2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IHttpNegotiate2.Δ]).Δ,
 Release: new CallbackT(ulong, [IHttpNegotiate2.Δ]).Δ,
 BeginningTransaction: new CallbackT(long, [IHttpNegotiate2.Δ, ushort.Δ, ushort.Δ, ulong, ushort.Δ.Δ]).Δ,
 OnResponse: new CallbackT(long, [IHttpNegotiate2.Δ, ulong, ushort.Δ, ushort.Δ, ushort.Δ.Δ]).Δ,
 GetRootSecurityId: new CallbackT(long, [IHttpNegotiate2.Δ, uchar.Δ, ulong.Δ, ulong]).Δ
});

var IHttpNegotiate3Vtbl = new StructT('IHttpNegotiate3Vtbl', {
 QueryInterface: new CallbackT(long, [IHttpNegotiate3.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IHttpNegotiate3.Δ]).Δ,
 Release: new CallbackT(ulong, [IHttpNegotiate3.Δ]).Δ,
 BeginningTransaction: new CallbackT(long, [IHttpNegotiate3.Δ, ushort.Δ, ushort.Δ, ulong, ushort.Δ.Δ]).Δ,
 OnResponse: new CallbackT(long, [IHttpNegotiate3.Δ, ulong, ushort.Δ, ushort.Δ, ushort.Δ.Δ]).Δ,
 GetRootSecurityId: new CallbackT(long, [IHttpNegotiate3.Δ, uchar.Δ, ulong.Δ, ulong]).Δ,
 GetSerializedClientCertContext: new CallbackT(long, [IHttpNegotiate3.Δ, uchar.Δ.Δ, ulong.Δ]).Δ
});

var IWinInetFileStreamVtbl = new StructT('IWinInetFileStreamVtbl', {
 QueryInterface: new CallbackT(long, [IWinInetFileStream.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWinInetFileStream.Δ]).Δ,
 Release: new CallbackT(ulong, [IWinInetFileStream.Δ]).Δ,
 SetHandleForUnlock: new CallbackT(long, [IWinInetFileStream.Δ, ulong, ulong]).Δ,
 SetDeleteFile: new CallbackT(long, [IWinInetFileStream.Δ, ulong]).Δ
});

var IWindowForBindingUIVtbl = new StructT('IWindowForBindingUIVtbl', {
 QueryInterface: new CallbackT(long, [IWindowForBindingUI.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWindowForBindingUI.Δ]).Δ,
 Release: new CallbackT(ulong, [IWindowForBindingUI.Δ]).Δ,
 GetWindow: new CallbackT(long, [IWindowForBindingUI.Δ, _GUID.Δ, HWND__.Δ.Δ]).Δ
});

var ICodeInstallVtbl = new StructT('ICodeInstallVtbl', {
 QueryInterface: new CallbackT(long, [ICodeInstall.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICodeInstall.Δ]).Δ,
 Release: new CallbackT(ulong, [ICodeInstall.Δ]).Δ,
 GetWindow: new CallbackT(long, [ICodeInstall.Δ, _GUID.Δ, HWND__.Δ.Δ]).Δ,
 OnCodeInstallProblem: new CallbackT(long, [ICodeInstall.Δ, ulong, ushort.Δ, ushort.Δ, ulong]).Δ
});

var IUriVtbl = new StructT('IUriVtbl', {
 QueryInterface: new CallbackT(long, [IUri.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IUri.Δ]).Δ,
 Release: new CallbackT(ulong, [IUri.Δ]).Δ,
 GetPropertyBSTR: new CallbackT(long, [IUri.Δ, Uri_PROPERTY, ushort.Δ.Δ, ulong]).Δ,
 GetPropertyLength: new CallbackT(long, [IUri.Δ, Uri_PROPERTY, ulong.Δ, ulong]).Δ,
 GetPropertyDWORD: new CallbackT(long, [IUri.Δ, Uri_PROPERTY, ulong.Δ, ulong]).Δ,
 HasProperty: new CallbackT(long, [IUri.Δ, Uri_PROPERTY, int.Δ]).Δ,
 GetAbsoluteUri: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetAuthority: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetDisplayUri: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetDomain: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetExtension: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetFragment: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetHost: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetPassword: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetPath: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetPathAndQuery: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetQuery: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetRawUri: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetSchemeName: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetUserInfo: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetUserNameA: new CallbackT(long, [IUri.Δ, ushort.Δ.Δ]).Δ,
 GetHostType: new CallbackT(long, [IUri.Δ, ulong.Δ]).Δ,
 GetPort: new CallbackT(long, [IUri.Δ, ulong.Δ]).Δ,
 GetScheme: new CallbackT(long, [IUri.Δ, ulong.Δ]).Δ,
 GetZone: new CallbackT(long, [IUri.Δ, ulong.Δ]).Δ,
 GetProperties: new CallbackT(long, [IUri.Δ, ulong.Δ]).Δ,
 IsEqual: new CallbackT(long, [IUri.Δ, IUri.Δ, int.Δ]).Δ
});

var IUriContainerVtbl = new StructT('IUriContainerVtbl', {
 QueryInterface: new CallbackT(long, [IUriContainer.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IUriContainer.Δ]).Δ,
 Release: new CallbackT(ulong, [IUriContainer.Δ]).Δ,
 GetIUri: new CallbackT(long, [IUriContainer.Δ, IUri.Δ.Δ]).Δ
});

var IUriBuilderVtbl = new StructT('IUriBuilderVtbl', {
 QueryInterface: new CallbackT(long, [IUriBuilder.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IUriBuilder.Δ]).Δ,
 Release: new CallbackT(ulong, [IUriBuilder.Δ]).Δ,
 CreateUriSimple: new CallbackT(long, [IUriBuilder.Δ, ulong, ulong, IUri.Δ.Δ]).Δ,
 CreateUri: new CallbackT(long, [IUriBuilder.Δ, ulong, ulong, ulong, IUri.Δ.Δ]).Δ,
 CreateUriWithFlags: new CallbackT(long, [IUriBuilder.Δ, ulong, ulong, ulong, ulong, IUri.Δ.Δ]).Δ,
 GetIUri: new CallbackT(long, [IUriBuilder.Δ, IUri.Δ.Δ]).Δ,
 SetIUri: new CallbackT(long, [IUriBuilder.Δ, IUri.Δ]).Δ,
 GetFragment: new CallbackT(long, [IUriBuilder.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetHost: new CallbackT(long, [IUriBuilder.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetPassword: new CallbackT(long, [IUriBuilder.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetPath: new CallbackT(long, [IUriBuilder.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetPort: new CallbackT(long, [IUriBuilder.Δ, int.Δ, ulong.Δ]).Δ,
 GetQuery: new CallbackT(long, [IUriBuilder.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetSchemeName: new CallbackT(long, [IUriBuilder.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 GetUserNameA: new CallbackT(long, [IUriBuilder.Δ, ulong.Δ, ushort.Δ.Δ]).Δ,
 SetFragment: new CallbackT(long, [IUriBuilder.Δ, ushort.Δ]).Δ,
 SetHost: new CallbackT(long, [IUriBuilder.Δ, ushort.Δ]).Δ,
 SetPassword: new CallbackT(long, [IUriBuilder.Δ, ushort.Δ]).Δ,
 SetPath: new CallbackT(long, [IUriBuilder.Δ, ushort.Δ]).Δ,
 SetPortA: new CallbackT(long, [IUriBuilder.Δ, int, ulong]).Δ,
 SetQuery: new CallbackT(long, [IUriBuilder.Δ, ushort.Δ]).Δ,
 SetSchemeName: new CallbackT(long, [IUriBuilder.Δ, ushort.Δ]).Δ,
 SetUserName: new CallbackT(long, [IUriBuilder.Δ, ushort.Δ]).Δ,
 RemoveProperties: new CallbackT(long, [IUriBuilder.Δ, ulong]).Δ,
 HasBeenModified: new CallbackT(long, [IUriBuilder.Δ, int.Δ]).Δ
});

var IUriBuilderFactoryVtbl = new StructT('IUriBuilderFactoryVtbl', {
 QueryInterface: new CallbackT(long, [IUriBuilderFactory.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IUriBuilderFactory.Δ]).Δ,
 Release: new CallbackT(ulong, [IUriBuilderFactory.Δ]).Δ,
 CreateIUriBuilder: new CallbackT(long, [IUriBuilderFactory.Δ, ulong, ulong, IUriBuilder.Δ.Δ]).Δ,
 CreateInitializedIUriBuilder: new CallbackT(long, [IUriBuilderFactory.Δ, ulong, ulong, IUriBuilder.Δ.Δ]).Δ
});

var IWinInetInfoVtbl = new StructT('IWinInetInfoVtbl', {
 QueryInterface: new CallbackT(long, [IWinInetInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWinInetInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IWinInetInfo.Δ]).Δ,
 QueryOption: new CallbackT(long, [IWinInetInfo.Δ, ulong, _void.Δ, ulong.Δ]).Δ
});

var IHttpSecurityVtbl = new StructT('IHttpSecurityVtbl', {
 QueryInterface: new CallbackT(long, [IHttpSecurity.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IHttpSecurity.Δ]).Δ,
 Release: new CallbackT(ulong, [IHttpSecurity.Δ]).Δ,
 GetWindow: new CallbackT(long, [IHttpSecurity.Δ, _GUID.Δ, HWND__.Δ.Δ]).Δ,
 OnSecurityProblem: new CallbackT(long, [IHttpSecurity.Δ, ulong]).Δ
});

var IWinInetHttpInfoVtbl = new StructT('IWinInetHttpInfoVtbl', {
 QueryInterface: new CallbackT(long, [IWinInetHttpInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWinInetHttpInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IWinInetHttpInfo.Δ]).Δ,
 QueryOption: new CallbackT(long, [IWinInetHttpInfo.Δ, ulong, _void.Δ, ulong.Δ]).Δ,
 QueryInfo: new CallbackT(long, [IWinInetHttpInfo.Δ, ulong, _void.Δ, ulong.Δ, ulong.Δ, ulong.Δ]).Δ
});

var IWinInetCacheHintsVtbl = new StructT('IWinInetCacheHintsVtbl', {
 QueryInterface: new CallbackT(long, [IWinInetCacheHints.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWinInetCacheHints.Δ]).Δ,
 Release: new CallbackT(ulong, [IWinInetCacheHints.Δ]).Δ,
 SetCacheExtension: new CallbackT(long, [IWinInetCacheHints.Δ, ushort.Δ, _void.Δ, ulong.Δ, ulong.Δ, ulong.Δ]).Δ
});

var IWinInetCacheHints2Vtbl = new StructT('IWinInetCacheHints2Vtbl', {
 QueryInterface: new CallbackT(long, [IWinInetCacheHints2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWinInetCacheHints2.Δ]).Δ,
 Release: new CallbackT(ulong, [IWinInetCacheHints2.Δ]).Δ,
 SetCacheExtension: new CallbackT(long, [IWinInetCacheHints2.Δ, ushort.Δ, _void.Δ, ulong.Δ, ulong.Δ, ulong.Δ]).Δ,
 SetCacheExtension2: new CallbackT(long, [IWinInetCacheHints2.Δ, ushort.Δ, ushort.Δ, ulong.Δ, ulong.Δ, ulong.Δ]).Δ
});

var IBindHostVtbl = new StructT('IBindHostVtbl', {
 QueryInterface: new CallbackT(long, [IBindHost.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IBindHost.Δ]).Δ,
 Release: new CallbackT(ulong, [IBindHost.Δ]).Δ,
 CreateMoniker: new CallbackT(long, [IBindHost.Δ, ushort.Δ, IBindCtx.Δ, IMoniker.Δ.Δ, ulong]).Δ,
 MonikerBindToStorage: new CallbackT(long, [IBindHost.Δ, IMoniker.Δ, IBindCtx.Δ, IBindStatusCallback.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 MonikerBindToObject: new CallbackT(long, [IBindHost.Δ, IMoniker.Δ, IBindCtx.Δ, IBindStatusCallback.Δ, _GUID.Δ, _void.Δ.Δ]).Δ
});

var IInternetVtbl = new StructT('IInternetVtbl', {
 QueryInterface: new CallbackT(long, [IInternet.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternet.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternet.Δ]).Δ
});

var IInternetBindInfoVtbl = new StructT('IInternetBindInfoVtbl', {
 QueryInterface: new CallbackT(long, [IInternetBindInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetBindInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetBindInfo.Δ]).Δ,
 GetBindInfo: new CallbackT(long, [IInternetBindInfo.Δ, ulong.Δ, _tagBINDINFO.Δ]).Δ,
 GetBindString: new CallbackT(long, [IInternetBindInfo.Δ, ulong, ushort.Δ.Δ, ulong, ulong.Δ]).Δ
});

var IInternetBindInfoExVtbl = new StructT('IInternetBindInfoExVtbl', {
 QueryInterface: new CallbackT(long, [IInternetBindInfoEx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetBindInfoEx.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetBindInfoEx.Δ]).Δ,
 GetBindInfo: new CallbackT(long, [IInternetBindInfoEx.Δ, ulong.Δ, _tagBINDINFO.Δ]).Δ,
 GetBindString: new CallbackT(long, [IInternetBindInfoEx.Δ, ulong, ushort.Δ.Δ, ulong, ulong.Δ]).Δ,
 GetBindInfoEx: new CallbackT(long, [IInternetBindInfoEx.Δ, ulong.Δ, _tagBINDINFO.Δ, ulong.Δ, ulong.Δ]).Δ
});

var PROTOCOLDATA = new StructT('PROTOCOLDATA', {
 grfFlags: DWORD,
 dwState: DWORD,
 pData: LPVOID,
 cbData: ULONG
});

var StartParam = new StructT('StartParam', {
 iid: IID,
 pIBindCtx: IBindCtx.Δ,
 pItf: IUnknown.Δ
});

var IInternetProtocolRootVtbl = new StructT('IInternetProtocolRootVtbl', {
 QueryInterface: new CallbackT(long, [IInternetProtocolRoot.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetProtocolRoot.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetProtocolRoot.Δ]).Δ,
 Start: new CallbackT(long, [IInternetProtocolRoot.Δ, ushort.Δ, IInternetProtocolSink.Δ, IInternetBindInfo.Δ, ulong, ulong]).Δ,
 Continue: new CallbackT(long, [IInternetProtocolRoot.Δ, _tagPROTOCOLDATA.Δ]).Δ,
 Abort: new CallbackT(long, [IInternetProtocolRoot.Δ, long, ulong]).Δ,
 Terminate: new CallbackT(long, [IInternetProtocolRoot.Δ, ulong]).Δ,
 Suspend: new CallbackT(long, [IInternetProtocolRoot.Δ]).Δ,
 Resume: new CallbackT(long, [IInternetProtocolRoot.Δ]).Δ
});

var IInternetProtocolVtbl = new StructT('IInternetProtocolVtbl', {
 QueryInterface: new CallbackT(long, [IInternetProtocol.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetProtocol.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetProtocol.Δ]).Δ,
 Start: new CallbackT(long, [IInternetProtocol.Δ, ushort.Δ, IInternetProtocolSink.Δ, IInternetBindInfo.Δ, ulong, ulong]).Δ,
 Continue: new CallbackT(long, [IInternetProtocol.Δ, _tagPROTOCOLDATA.Δ]).Δ,
 Abort: new CallbackT(long, [IInternetProtocol.Δ, long, ulong]).Δ,
 Terminate: new CallbackT(long, [IInternetProtocol.Δ, ulong]).Δ,
 Suspend: new CallbackT(long, [IInternetProtocol.Δ]).Δ,
 Resume: new CallbackT(long, [IInternetProtocol.Δ]).Δ,
 Read: new CallbackT(long, [IInternetProtocol.Δ, _void.Δ, ulong, ulong.Δ]).Δ,
 Seek: new CallbackT(long, [IInternetProtocol.Δ, _LARGE_INTEGER, ulong, _ULARGE_INTEGER.Δ]).Δ,
 LockRequest: new CallbackT(long, [IInternetProtocol.Δ, ulong]).Δ,
 UnlockRequest: new CallbackT(long, [IInternetProtocol.Δ]).Δ
});

var IInternetProtocolExVtbl = new StructT('IInternetProtocolExVtbl', {
 QueryInterface: new CallbackT(long, [IInternetProtocolEx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetProtocolEx.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetProtocolEx.Δ]).Δ,
 Start: new CallbackT(long, [IInternetProtocolEx.Δ, ushort.Δ, IInternetProtocolSink.Δ, IInternetBindInfo.Δ, ulong, ulong]).Δ,
 Continue: new CallbackT(long, [IInternetProtocolEx.Δ, _tagPROTOCOLDATA.Δ]).Δ,
 Abort: new CallbackT(long, [IInternetProtocolEx.Δ, long, ulong]).Δ,
 Terminate: new CallbackT(long, [IInternetProtocolEx.Δ, ulong]).Δ,
 Suspend: new CallbackT(long, [IInternetProtocolEx.Δ]).Δ,
 Resume: new CallbackT(long, [IInternetProtocolEx.Δ]).Δ,
 Read: new CallbackT(long, [IInternetProtocolEx.Δ, _void.Δ, ulong, ulong.Δ]).Δ,
 Seek: new CallbackT(long, [IInternetProtocolEx.Δ, _LARGE_INTEGER, ulong, _ULARGE_INTEGER.Δ]).Δ,
 LockRequest: new CallbackT(long, [IInternetProtocolEx.Δ, ulong]).Δ,
 UnlockRequest: new CallbackT(long, [IInternetProtocolEx.Δ]).Δ,
 StartEx: new CallbackT(long, [IInternetProtocolEx.Δ, IUri.Δ, IInternetProtocolSink.Δ, IInternetBindInfo.Δ, ulong, ulong]).Δ
});

var IInternetProtocolSinkVtbl = new StructT('IInternetProtocolSinkVtbl', {
 QueryInterface: new CallbackT(long, [IInternetProtocolSink.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetProtocolSink.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetProtocolSink.Δ]).Δ,
 Switch: new CallbackT(long, [IInternetProtocolSink.Δ, _tagPROTOCOLDATA.Δ]).Δ,
 ReportProgress: new CallbackT(long, [IInternetProtocolSink.Δ, ulong, ushort.Δ]).Δ,
 ReportData: new CallbackT(long, [IInternetProtocolSink.Δ, ulong, ulong, ulong]).Δ,
 ReportResult: new CallbackT(long, [IInternetProtocolSink.Δ, long, ulong, ushort.Δ]).Δ
});

var IInternetProtocolSinkStackableVtbl = new StructT('IInternetProtocolSinkStackableVtbl', {
 QueryInterface: new CallbackT(long, [IInternetProtocolSinkStackable.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetProtocolSinkStackable.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetProtocolSinkStackable.Δ]).Δ,
 SwitchSink: new CallbackT(long, [IInternetProtocolSinkStackable.Δ, IInternetProtocolSink.Δ]).Δ,
 CommitSwitch: new CallbackT(long, [IInternetProtocolSinkStackable.Δ]).Δ,
 RollbackSwitch: new CallbackT(long, [IInternetProtocolSinkStackable.Δ]).Δ
});

var IInternetSessionVtbl = new StructT('IInternetSessionVtbl', {
 QueryInterface: new CallbackT(long, [IInternetSession.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetSession.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetSession.Δ]).Δ,
 RegisterNameSpace: new CallbackT(long, [IInternetSession.Δ, IClassFactory.Δ, _GUID.Δ, ushort.Δ, ulong, ushort.Δ.Δ, ulong]).Δ,
 UnregisterNameSpace: new CallbackT(long, [IInternetSession.Δ, IClassFactory.Δ, ushort.Δ]).Δ,
 RegisterMimeFilter: new CallbackT(long, [IInternetSession.Δ, IClassFactory.Δ, _GUID.Δ, ushort.Δ]).Δ,
 UnregisterMimeFilter: new CallbackT(long, [IInternetSession.Δ, IClassFactory.Δ, ushort.Δ]).Δ,
 CreateBinding: new CallbackT(long, [IInternetSession.Δ, IBindCtx.Δ, ushort.Δ, IUnknown.Δ, IUnknown.Δ.Δ, IInternetProtocol.Δ.Δ, ulong]).Δ,
 SetSessionOption: new CallbackT(long, [IInternetSession.Δ, ulong, _void.Δ, ulong, ulong]).Δ,
 GetSessionOption: new CallbackT(long, [IInternetSession.Δ, ulong, _void.Δ, ulong.Δ, ulong]).Δ
});

var IInternetThreadSwitchVtbl = new StructT('IInternetThreadSwitchVtbl', {
 QueryInterface: new CallbackT(long, [IInternetThreadSwitch.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetThreadSwitch.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetThreadSwitch.Δ]).Δ,
 Prepare: new CallbackT(long, [IInternetThreadSwitch.Δ]).Δ,
 Continue: new CallbackT(long, [IInternetThreadSwitch.Δ]).Δ
});

var IInternetPriorityVtbl = new StructT('IInternetPriorityVtbl', {
 QueryInterface: new CallbackT(long, [IInternetPriority.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetPriority.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetPriority.Δ]).Δ,
 SetPriority: new CallbackT(long, [IInternetPriority.Δ, long]).Δ,
 GetPriority: new CallbackT(long, [IInternetPriority.Δ, long.Δ]).Δ
});

var IInternetProtocolInfoVtbl = new StructT('IInternetProtocolInfoVtbl', {
 QueryInterface: new CallbackT(long, [IInternetProtocolInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetProtocolInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetProtocolInfo.Δ]).Δ,
 ParseUrl: new CallbackT(long, [IInternetProtocolInfo.Δ, ushort.Δ, PARSEACTION, ulong, ushort.Δ, ulong, ulong.Δ, ulong]).Δ,
 CombineUrl: new CallbackT(long, [IInternetProtocolInfo.Δ, ushort.Δ, ushort.Δ, ulong, ushort.Δ, ulong, ulong.Δ, ulong]).Δ,
 CompareUrl: new CallbackT(long, [IInternetProtocolInfo.Δ, ushort.Δ, ushort.Δ, ulong]).Δ,
 QueryInfo: new CallbackT(long, [IInternetProtocolInfo.Δ, ushort.Δ, QUERYOPTION, ulong, _void.Δ, ulong, ulong.Δ, ulong]).Δ
});

var IInternetSecurityMgrSiteVtbl = new StructT('IInternetSecurityMgrSiteVtbl', {
 QueryInterface: new CallbackT(long, [IInternetSecurityMgrSite.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetSecurityMgrSite.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetSecurityMgrSite.Δ]).Δ,
 GetWindow: new CallbackT(long, [IInternetSecurityMgrSite.Δ, HWND__.Δ.Δ]).Δ,
 EnableModeless: new CallbackT(long, [IInternetSecurityMgrSite.Δ, int]).Δ
});

var IInternetSecurityManagerVtbl = new StructT('IInternetSecurityManagerVtbl', {
 QueryInterface: new CallbackT(long, [IInternetSecurityManager.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetSecurityManager.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetSecurityManager.Δ]).Δ,
 SetSecuritySite: new CallbackT(long, [IInternetSecurityManager.Δ, IInternetSecurityMgrSite.Δ]).Δ,
 GetSecuritySite: new CallbackT(long, [IInternetSecurityManager.Δ, IInternetSecurityMgrSite.Δ.Δ]).Δ,
 MapUrlToZone: new CallbackT(long, [IInternetSecurityManager.Δ, ushort.Δ, ulong.Δ, ulong]).Δ,
 GetSecurityId: new CallbackT(long, [IInternetSecurityManager.Δ, ushort.Δ, uchar.Δ, ulong.Δ, ulong]).Δ,
 ProcessUrlAction: new CallbackT(long, [IInternetSecurityManager.Δ, ushort.Δ, ulong, uchar.Δ, ulong, uchar.Δ, ulong, ulong, ulong]).Δ,
 QueryCustomPolicy: new CallbackT(long, [IInternetSecurityManager.Δ, ushort.Δ, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, uchar.Δ, ulong, ulong]).Δ,
 SetZoneMapping: new CallbackT(long, [IInternetSecurityManager.Δ, ulong, ushort.Δ, ulong]).Δ,
 GetZoneMappings: new CallbackT(long, [IInternetSecurityManager.Δ, ulong, IEnumString.Δ.Δ, ulong]).Δ
});

var IInternetSecurityManagerExVtbl = new StructT('IInternetSecurityManagerExVtbl', {
 QueryInterface: new CallbackT(long, [IInternetSecurityManagerEx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetSecurityManagerEx.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetSecurityManagerEx.Δ]).Δ,
 SetSecuritySite: new CallbackT(long, [IInternetSecurityManagerEx.Δ, IInternetSecurityMgrSite.Δ]).Δ,
 GetSecuritySite: new CallbackT(long, [IInternetSecurityManagerEx.Δ, IInternetSecurityMgrSite.Δ.Δ]).Δ,
 MapUrlToZone: new CallbackT(long, [IInternetSecurityManagerEx.Δ, ushort.Δ, ulong.Δ, ulong]).Δ,
 GetSecurityId: new CallbackT(long, [IInternetSecurityManagerEx.Δ, ushort.Δ, uchar.Δ, ulong.Δ, ulong]).Δ,
 ProcessUrlAction: new CallbackT(long, [IInternetSecurityManagerEx.Δ, ushort.Δ, ulong, uchar.Δ, ulong, uchar.Δ, ulong, ulong, ulong]).Δ,
 QueryCustomPolicy: new CallbackT(long, [IInternetSecurityManagerEx.Δ, ushort.Δ, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, uchar.Δ, ulong, ulong]).Δ,
 SetZoneMapping: new CallbackT(long, [IInternetSecurityManagerEx.Δ, ulong, ushort.Δ, ulong]).Δ,
 GetZoneMappings: new CallbackT(long, [IInternetSecurityManagerEx.Δ, ulong, IEnumString.Δ.Δ, ulong]).Δ,
 ProcessUrlActionEx: new CallbackT(long, [IInternetSecurityManagerEx.Δ, ushort.Δ, ulong, uchar.Δ, ulong, uchar.Δ, ulong, ulong, ulong, ulong.Δ]).Δ
});

var IInternetSecurityManagerEx2Vtbl = new StructT('IInternetSecurityManagerEx2Vtbl', {
 QueryInterface: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetSecurityManagerEx2.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetSecurityManagerEx2.Δ]).Δ,
 SetSecuritySite: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, IInternetSecurityMgrSite.Δ]).Δ,
 GetSecuritySite: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, IInternetSecurityMgrSite.Δ.Δ]).Δ,
 MapUrlToZone: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, ushort.Δ, ulong.Δ, ulong]).Δ,
 GetSecurityId: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, ushort.Δ, uchar.Δ, ulong.Δ, ulong]).Δ,
 ProcessUrlAction: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, ushort.Δ, ulong, uchar.Δ, ulong, uchar.Δ, ulong, ulong, ulong]).Δ,
 QueryCustomPolicy: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, ushort.Δ, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, uchar.Δ, ulong, ulong]).Δ,
 SetZoneMapping: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, ulong, ushort.Δ, ulong]).Δ,
 GetZoneMappings: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, ulong, IEnumString.Δ.Δ, ulong]).Δ,
 ProcessUrlActionEx: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, ushort.Δ, ulong, uchar.Δ, ulong, uchar.Δ, ulong, ulong, ulong, ulong.Δ]).Δ,
 MapUrlToZoneEx2: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, IUri.Δ, ulong.Δ, ulong, ushort.Δ.Δ, ulong.Δ]).Δ,
 ProcessUrlActionEx2: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, IUri.Δ, ulong, uchar.Δ, ulong, uchar.Δ, ulong, ulong, ulong, ulong.Δ]).Δ,
 GetSecurityIdEx2: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, IUri.Δ, uchar.Δ, ulong.Δ, ulong]).Δ,
 QueryCustomPolicyEx2: new CallbackT(long, [IInternetSecurityManagerEx2.Δ, IUri.Δ, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, uchar.Δ, ulong, ulong]).Δ
});

var IZoneIdentifierVtbl = new StructT('IZoneIdentifierVtbl', {
 QueryInterface: new CallbackT(long, [IZoneIdentifier.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IZoneIdentifier.Δ]).Δ,
 Release: new CallbackT(ulong, [IZoneIdentifier.Δ]).Δ,
 GetId: new CallbackT(long, [IZoneIdentifier.Δ, ulong.Δ]).Δ,
 SetId: new CallbackT(long, [IZoneIdentifier.Δ, ulong]).Δ,
 Remove: new CallbackT(long, [IZoneIdentifier.Δ]).Δ
});

var IInternetHostSecurityManagerVtbl = new StructT('IInternetHostSecurityManagerVtbl', {
 QueryInterface: new CallbackT(long, [IInternetHostSecurityManager.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetHostSecurityManager.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetHostSecurityManager.Δ]).Δ,
 GetSecurityId: new CallbackT(long, [IInternetHostSecurityManager.Δ, uchar.Δ, ulong.Δ, ulong]).Δ,
 ProcessUrlAction: new CallbackT(long, [IInternetHostSecurityManager.Δ, ulong, uchar.Δ, ulong, uchar.Δ, ulong, ulong, ulong]).Δ,
 QueryCustomPolicy: new CallbackT(long, [IInternetHostSecurityManager.Δ, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, uchar.Δ, ulong, ulong]).Δ
});

var ZONEATTRIBUTES = new StructT('ZONEATTRIBUTES', {
 cbSize: ULONG,
 szDisplayName: new ArrayT(WCHAR,  260 ),
 szDescription: new ArrayT(WCHAR,  200 ),
 szIconPath: new ArrayT(WCHAR,  260 ),
 dwTemplateMinLevel: DWORD,
 dwTemplateRecommended: DWORD,
 dwTemplateCurrentLevel: DWORD,
 dwFlags: DWORD
});

var IInternetZoneManagerVtbl = new StructT('IInternetZoneManagerVtbl', {
 QueryInterface: new CallbackT(long, [IInternetZoneManager.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetZoneManager.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetZoneManager.Δ]).Δ,
 GetZoneAttributes: new CallbackT(long, [IInternetZoneManager.Δ, ulong, _ZONEATTRIBUTES.Δ]).Δ,
 SetZoneAttributes: new CallbackT(long, [IInternetZoneManager.Δ, ulong, _ZONEATTRIBUTES.Δ]).Δ,
 GetZoneCustomPolicy: new CallbackT(long, [IInternetZoneManager.Δ, ulong, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, URLZONEREG]).Δ,
 SetZoneCustomPolicy: new CallbackT(long, [IInternetZoneManager.Δ, ulong, _GUID.Δ, uchar.Δ, ulong, URLZONEREG]).Δ,
 GetZoneActionPolicy: new CallbackT(long, [IInternetZoneManager.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG]).Δ,
 SetZoneActionPolicy: new CallbackT(long, [IInternetZoneManager.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG]).Δ,
 PromptAction: new CallbackT(long, [IInternetZoneManager.Δ, ulong, HWND__.Δ, ushort.Δ, ushort.Δ, ulong]).Δ,
 LogAction: new CallbackT(long, [IInternetZoneManager.Δ, ulong, ushort.Δ, ushort.Δ, ulong]).Δ,
 CreateZoneEnumerator: new CallbackT(long, [IInternetZoneManager.Δ, ulong.Δ, ulong.Δ, ulong]).Δ,
 GetZoneAt: new CallbackT(long, [IInternetZoneManager.Δ, ulong, ulong, ulong.Δ]).Δ,
 DestroyZoneEnumerator: new CallbackT(long, [IInternetZoneManager.Δ, ulong]).Δ,
 CopyTemplatePoliciesToZone: new CallbackT(long, [IInternetZoneManager.Δ, ulong, ulong, ulong]).Δ
});

var IInternetZoneManagerExVtbl = new StructT('IInternetZoneManagerExVtbl', {
 QueryInterface: new CallbackT(long, [IInternetZoneManagerEx.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetZoneManagerEx.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetZoneManagerEx.Δ]).Δ,
 GetZoneAttributes: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, _ZONEATTRIBUTES.Δ]).Δ,
 SetZoneAttributes: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, _ZONEATTRIBUTES.Δ]).Δ,
 GetZoneCustomPolicy: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, URLZONEREG]).Δ,
 SetZoneCustomPolicy: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, _GUID.Δ, uchar.Δ, ulong, URLZONEREG]).Δ,
 GetZoneActionPolicy: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG]).Δ,
 SetZoneActionPolicy: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG]).Δ,
 PromptAction: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, HWND__.Δ, ushort.Δ, ushort.Δ, ulong]).Δ,
 LogAction: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, ushort.Δ, ushort.Δ, ulong]).Δ,
 CreateZoneEnumerator: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong.Δ, ulong.Δ, ulong]).Δ,
 GetZoneAt: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, ulong, ulong.Δ]).Δ,
 DestroyZoneEnumerator: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong]).Δ,
 CopyTemplatePoliciesToZone: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, ulong, ulong]).Δ,
 GetZoneActionPolicyEx: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG, ulong]).Δ,
 SetZoneActionPolicyEx: new CallbackT(long, [IInternetZoneManagerEx.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG, ulong]).Δ
});

var IInternetZoneManagerEx2Vtbl = new StructT('IInternetZoneManagerEx2Vtbl', {
 QueryInterface: new CallbackT(long, [IInternetZoneManagerEx2.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IInternetZoneManagerEx2.Δ]).Δ,
 Release: new CallbackT(ulong, [IInternetZoneManagerEx2.Δ]).Δ,
 GetZoneAttributes: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, _ZONEATTRIBUTES.Δ]).Δ,
 SetZoneAttributes: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, _ZONEATTRIBUTES.Δ]).Δ,
 GetZoneCustomPolicy: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, _GUID.Δ, uchar.Δ.Δ, ulong.Δ, URLZONEREG]).Δ,
 SetZoneCustomPolicy: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, _GUID.Δ, uchar.Δ, ulong, URLZONEREG]).Δ,
 GetZoneActionPolicy: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG]).Δ,
 SetZoneActionPolicy: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG]).Δ,
 PromptAction: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, HWND__.Δ, ushort.Δ, ushort.Δ, ulong]).Δ,
 LogAction: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, ushort.Δ, ushort.Δ, ulong]).Δ,
 CreateZoneEnumerator: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong.Δ, ulong.Δ, ulong]).Δ,
 GetZoneAt: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, ulong, ulong.Δ]).Δ,
 DestroyZoneEnumerator: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong]).Δ,
 CopyTemplatePoliciesToZone: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, ulong, ulong]).Δ,
 GetZoneActionPolicyEx: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG, ulong]).Δ,
 SetZoneActionPolicyEx: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, ulong, uchar.Δ, ulong, URLZONEREG, ulong]).Δ,
 GetZoneAttributesEx: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, _ZONEATTRIBUTES.Δ, ulong]).Δ,
 GetZoneSecurityState: new CallbackT(long, [IInternetZoneManagerEx2.Δ, ulong, int, ulong.Δ, int.Δ]).Δ,
 GetIESecurityState: new CallbackT(long, [IInternetZoneManagerEx2.Δ, int, ulong.Δ, int.Δ, int]).Δ,
 FixUnsecureSettings: new CallbackT(long, [IInternetZoneManagerEx2.Δ]).Δ
});

var CODEBASEHOLD = new StructT('CODEBASEHOLD', {
 cbSize: ULONG,
 szDistUnit: LPWSTR,
 szCodeBase: LPWSTR,
 dwVersionMS: DWORD,
 dwVersionLS: DWORD,
 dwStyle: DWORD
});

var SOFTDISTINFO = new StructT('SOFTDISTINFO', {
 cbSize: ULONG,
 dwFlags: DWORD,
 dwAdState: DWORD,
 szTitle: LPWSTR,
 szAbstract: LPWSTR,
 szHREF: LPWSTR,
 dwInstalledVersionMS: DWORD,
 dwInstalledVersionLS: DWORD,
 dwUpdateVersionMS: DWORD,
 dwUpdateVersionLS: DWORD,
 dwAdvertisedVersionMS: DWORD,
 dwAdvertisedVersionLS: DWORD,
 dwReserved: DWORD
});

var ISoftDistExtVtbl = new StructT('ISoftDistExtVtbl', {
 QueryInterface: new CallbackT(long, [ISoftDistExt.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ISoftDistExt.Δ]).Δ,
 Release: new CallbackT(ulong, [ISoftDistExt.Δ]).Δ,
 ProcessSoftDist: new CallbackT(long, [ISoftDistExt.Δ, ushort.Δ, IXMLElement.Δ, _tagSOFTDISTINFO.Δ]).Δ,
 GetFirstCodeBase: new CallbackT(long, [ISoftDistExt.Δ, ushort.Δ.Δ, ulong.Δ]).Δ,
 GetNextCodeBase: new CallbackT(long, [ISoftDistExt.Δ, ushort.Δ.Δ, ulong.Δ]).Δ,
 AsyncInstallDistributionUnit: new CallbackT(long, [ISoftDistExt.Δ, IBindCtx.Δ, _void.Δ, ulong, _tagCODEBASEHOLD.Δ]).Δ
});

var ICatalogFileInfoVtbl = new StructT('ICatalogFileInfoVtbl', {
 QueryInterface: new CallbackT(long, [ICatalogFileInfo.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [ICatalogFileInfo.Δ]).Δ,
 Release: new CallbackT(ulong, [ICatalogFileInfo.Δ]).Δ,
 GetCatalogFile: new CallbackT(long, [ICatalogFileInfo.Δ, char.Δ.Δ]).Δ,
 GetJavaTrust: new CallbackT(long, [ICatalogFileInfo.Δ, _void.Δ.Δ]).Δ
});

var IDataFilterVtbl = new StructT('IDataFilterVtbl', {
 QueryInterface: new CallbackT(long, [IDataFilter.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IDataFilter.Δ]).Δ,
 Release: new CallbackT(ulong, [IDataFilter.Δ]).Δ,
 DoEncode: new CallbackT(long, [IDataFilter.Δ, ulong, long, uchar.Δ, long, uchar.Δ, long, long.Δ, long.Δ, ulong]).Δ,
 DoDecode: new CallbackT(long, [IDataFilter.Δ, ulong, long, uchar.Δ, long, uchar.Δ, long, long.Δ, long.Δ, ulong]).Δ,
 SetEncodingLevel: new CallbackT(long, [IDataFilter.Δ, ulong]).Δ
});

var PROTOCOLFILTERDATA = new StructT('PROTOCOLFILTERDATA', {
 cbSize: DWORD,
 pProtocolSink: IInternetProtocolSink.Δ,
 pProtocol: IInternetProtocol.Δ,
 pUnk: IUnknown.Δ,
 dwFilterFlags: DWORD
});

var DATAINFO = new StructT('DATAINFO', {
 ulTotalSize: ULONG,
 ulavrPacketSize: ULONG,
 ulConnectSpeed: ULONG,
 ulProcessorSpeed: ULONG
});

var IEncodingFilterFactoryVtbl = new StructT('IEncodingFilterFactoryVtbl', {
 QueryInterface: new CallbackT(long, [IEncodingFilterFactory.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEncodingFilterFactory.Δ]).Δ,
 Release: new CallbackT(ulong, [IEncodingFilterFactory.Δ]).Δ,
 FindBestFilter: new CallbackT(long, [IEncodingFilterFactory.Δ, ushort.Δ, ushort.Δ, DATAINFO, IDataFilter.Δ.Δ]).Δ,
 GetDefaultFilter: new CallbackT(long, [IEncodingFilterFactory.Δ, ushort.Δ, ushort.Δ, IDataFilter.Δ.Δ]).Δ
});

var HIT_LOGGING_INFO = new StructT('HIT_LOGGING_INFO', {
 dwStructSize: DWORD,
 lpszLoggedUrlName: LPSTR,
 StartTime: SYSTEMTIME,
 EndTime: SYSTEMTIME,
 lpszExtendedInfo: LPSTR
});

var CONFIRMSAFETY = new StructT('CONFIRMSAFETY', {
 clsid: CLSID,
 pUnk: IUnknown.Δ,
 dwFlags: DWORD
});

var IWrappedProtocolVtbl = new StructT('IWrappedProtocolVtbl', {
 QueryInterface: new CallbackT(long, [IWrappedProtocol.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IWrappedProtocol.Δ]).Δ,
 Release: new CallbackT(ulong, [IWrappedProtocol.Δ]).Δ,
 GetWrapperCode: new CallbackT(long, [IWrappedProtocol.Δ, long.Δ, ulong]).Δ
});

var IPropertyStorage = new StructT('IPropertyStorage', {
 lpVtbl: IPropertyStorageVtbl.Δ
});

var IPropertySetStorage = new StructT('IPropertySetStorage', {
 lpVtbl: IPropertySetStorageVtbl.Δ
});

var IEnumSTATPROPSTG = new StructT('IEnumSTATPROPSTG', {
 lpVtbl: IEnumSTATPROPSTGVtbl.Δ
});

var IEnumSTATPROPSETSTG = new StructT('IEnumSTATPROPSETSTG', {
 lpVtbl: IEnumSTATPROPSETSTGVtbl.Δ
});

var VERSIONEDSTREAM = new StructT('VERSIONEDSTREAM', {
 guidVersion: GUID,
 pStream: IStream.Δ
});


var CAC = new StructT('CAC', {
 cElems: ULONG,
 pElems: CHAR.Δ
});

var CAUB = new StructT('CAUB', {
 cElems: ULONG,
 pElems: UCHAR.Δ
});

var CAI = new StructT('CAI', {
 cElems: ULONG,
 pElems: SHORT.Δ
});

var CAUI = new StructT('CAUI', {
 cElems: ULONG,
 pElems: USHORT.Δ
});

var CAL = new StructT('CAL', {
 cElems: ULONG,
 pElems: LONG.Δ
});

var CAUL = new StructT('CAUL', {
 cElems: ULONG,
 pElems: ULONG.Δ
});

var CAFLT = new StructT('CAFLT', {
 cElems: ULONG,
 pElems: FLOAT.Δ
});

var CADBL = new StructT('CADBL', {
 cElems: ULONG,
 pElems: DOUBLE.Δ
});

var CACY = new StructT('CACY', {
 cElems: ULONG,
 pElems: CY.Δ
});

var CADATE = new StructT('CADATE', {
 cElems: ULONG,
 pElems: DATE.Δ
});

var CABSTR = new StructT('CABSTR', {
 cElems: ULONG,
 pElems: BSTR.Δ
});

var CABSTRBLOB = new StructT('CABSTRBLOB', {
 cElems: ULONG,
 pElems: BSTRBLOB.Δ
});

var CABOOL = new StructT('CABOOL', {
 cElems: ULONG,
 pElems: VARIANT_BOOL.Δ
});

var CASCODE = new StructT('CASCODE', {
 cElems: ULONG,
 pElems: SCODE.Δ
});

var CAPROPVARIANT = new StructT('CAPROPVARIANT', {
 cElems: ULONG,
 pElems: PROPVARIANT.Δ
});

var CAH = new StructT('CAH', {
 cElems: ULONG,
 pElems: LARGE_INTEGER.Δ
});

var CAUH = new StructT('CAUH', {
 cElems: ULONG,
 pElems: ULARGE_INTEGER.Δ
});

var CALPSTR = new StructT('CALPSTR', {
 cElems: ULONG,
 pElems: LPSTR.Δ
});

var CALPWSTR = new StructT('CALPWSTR', {
 cElems: ULONG,
 pElems: LPWSTR.Δ
});

var CAFILETIME = new StructT('CAFILETIME', {
 cElems: ULONG,
 pElems: FILETIME.Δ
});

var CACLIPDATA = new StructT('CACLIPDATA', {
 cElems: ULONG,
 pElems: CLIPDATA.Δ
});

var CACLSID = new StructT('CACLSID', {
 cElems: ULONG,
 pElems: CLSID.Δ
});

var undefined = new StructT('undefined', {
 vt: VARTYPE,
 wReserved1: PROPVAR_PAD1,
 wReserved2: PROPVAR_PAD2,
 wReserved3: PROPVAR_PAD3
});

var PROPSPEC = new StructT('PROPSPEC', {
 ulKind: ULONG
});

var STATPROPSTG = new StructT('STATPROPSTG', {
 lpwstrName: LPOLESTR,
 propid: PROPID,
 vt: VARTYPE
});

var STATPROPSETSTG = new StructT('STATPROPSETSTG', {
 fmtid: FMTID,
 clsid: CLSID,
 grfFlags: DWORD,
 mtime: FILETIME,
 ctime: FILETIME,
 atime: FILETIME,
 dwOSVersion: DWORD
});

var IPropertyStorageVtbl = new StructT('IPropertyStorageVtbl', {
 QueryInterface: new CallbackT(long, [IPropertyStorage.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPropertyStorage.Δ]).Δ,
 Release: new CallbackT(ulong, [IPropertyStorage.Δ]).Δ,
 ReadMultiple: new CallbackT(long, [IPropertyStorage.Δ, ulong, tagPROPSPEC.Δ, tagPROPVARIANT.Δ]).Δ,
 WriteMultiple: new CallbackT(long, [IPropertyStorage.Δ, ulong, tagPROPSPEC.Δ, tagPROPVARIANT.Δ, ulong]).Δ,
 DeleteMultiple: new CallbackT(long, [IPropertyStorage.Δ, ulong, tagPROPSPEC.Δ]).Δ,
 ReadPropertyNames: new CallbackT(long, [IPropertyStorage.Δ, ulong, ulong.Δ, ushort.Δ.Δ]).Δ,
 WritePropertyNames: new CallbackT(long, [IPropertyStorage.Δ, ulong, ulong.Δ, ushort.Δ.Δ]).Δ,
 DeletePropertyNames: new CallbackT(long, [IPropertyStorage.Δ, ulong, ulong.Δ]).Δ,
 Commit: new CallbackT(long, [IPropertyStorage.Δ, ulong]).Δ,
 Revert: new CallbackT(long, [IPropertyStorage.Δ]).Δ,
 Enum: new CallbackT(long, [IPropertyStorage.Δ, IEnumSTATPROPSTG.Δ.Δ]).Δ,
 SetTimes: new CallbackT(long, [IPropertyStorage.Δ, _FILETIME.Δ, _FILETIME.Δ, _FILETIME.Δ]).Δ,
 SetClass: new CallbackT(long, [IPropertyStorage.Δ, _GUID.Δ]).Δ,
 Stat: new CallbackT(long, [IPropertyStorage.Δ, tagSTATPROPSETSTG.Δ]).Δ
});

var IPropertySetStorageVtbl = new StructT('IPropertySetStorageVtbl', {
 QueryInterface: new CallbackT(long, [IPropertySetStorage.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPropertySetStorage.Δ]).Δ,
 Release: new CallbackT(ulong, [IPropertySetStorage.Δ]).Δ,
 Create: new CallbackT(long, [IPropertySetStorage.Δ, _GUID.Δ, _GUID.Δ, ulong, ulong, IPropertyStorage.Δ.Δ]).Δ,
 Open: new CallbackT(long, [IPropertySetStorage.Δ, _GUID.Δ, ulong, IPropertyStorage.Δ.Δ]).Δ,
 Delete: new CallbackT(long, [IPropertySetStorage.Δ, _GUID.Δ]).Δ,
 Enum: new CallbackT(long, [IPropertySetStorage.Δ, IEnumSTATPROPSETSTG.Δ.Δ]).Δ
});

var IEnumSTATPROPSTGVtbl = new StructT('IEnumSTATPROPSTGVtbl', {
 QueryInterface: new CallbackT(long, [IEnumSTATPROPSTG.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumSTATPROPSTG.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumSTATPROPSTG.Δ]).Δ,
 Next: new CallbackT(long, [IEnumSTATPROPSTG.Δ, ulong, tagSTATPROPSTG.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumSTATPROPSTG.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumSTATPROPSTG.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumSTATPROPSTG.Δ, IEnumSTATPROPSTG.Δ.Δ]).Δ
});

var IEnumSTATPROPSETSTGVtbl = new StructT('IEnumSTATPROPSETSTGVtbl', {
 QueryInterface: new CallbackT(long, [IEnumSTATPROPSETSTG.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IEnumSTATPROPSETSTG.Δ]).Δ,
 Release: new CallbackT(ulong, [IEnumSTATPROPSETSTG.Δ]).Δ,
 Next: new CallbackT(long, [IEnumSTATPROPSETSTG.Δ, ulong, tagSTATPROPSETSTG.Δ, ulong.Δ]).Δ,
 Skip: new CallbackT(long, [IEnumSTATPROPSETSTG.Δ, ulong]).Δ,
 Reset: new CallbackT(long, [IEnumSTATPROPSETSTG.Δ]).Δ,
 Clone: new CallbackT(long, [IEnumSTATPROPSETSTG.Δ, IEnumSTATPROPSETSTG.Δ.Δ]).Δ
});

var SERIALIZEDPROPERTYVALUE = new StructT('SERIALIZEDPROPERTYVALUE', {
 dwType: DWORD,
 rgb: new ArrayT(BYTE, 1)
});

var NUMPARSE = new StructT('NUMPARSE', {
 cDig: INT,
 dwInFlags: ULONG,
 dwOutFlags: ULONG,
 cchUsed: INT,
 nBaseShift: INT,
 nPwr10: INT
});

var UDATE = new StructT('UDATE', {
 st: SYSTEMTIME,
 wDayOfYear: USHORT
});

var PARAMDATA = new StructT('PARAMDATA', {
 szName: OLECHAR.Δ,
 vt: VARTYPE
});

var METHODDATA = new StructT('METHODDATA', {
 szName: OLECHAR.Δ,
 ppdata: PARAMDATA.Δ,
 dispid: DISPID,
 iMeth: UINT,
 cc: CALLCONV,
 cArgs: UINT,
 wFlags: WORD,
 vtReturn: VARTYPE
});

var INTERFACEDATA = new StructT('INTERFACEDATA', {
 pmethdata: METHODDATA.Δ,
 cMembers: UINT
});

var OLESTREAM = new StructT('OLESTREAM', {
 lpstbl: LPOLESTREAMVTBL
});

var OLESTREAMVTBL = new StructT('OLESTREAMVTBL', {
 Get: new CallbackT(ulong, [_OLESTREAM.Δ, _void.Δ, ulong]).Δ,
 Put: new CallbackT(ulong, [_OLESTREAM.Δ, _void.Δ, ulong]).Δ
});

var OPENFILENAME_NT4 = new StructT('OPENFILENAME_NT4', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCSTR,
 lpstrCustomFilter: LPSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCSTR,
 lpstrTitle: LPCSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCSTR
});

var OPENFILENAME_NT4W = new StructT('OPENFILENAME_NT4W', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCWSTR,
 lpstrCustomFilter: LPWSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPWSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPWSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCWSTR,
 lpstrTitle: LPCWSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCWSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCWSTR
});

var OPENFILENAME = new StructT('OPENFILENAME', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCSTR,
 lpstrCustomFilter: LPSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCSTR,
 lpstrTitle: LPCSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCSTR,
 pvReserved: _void.Δ,
 dwReserved: DWORD,
 FlagsEx: DWORD
});

var OPENFILENAMEW = new StructT('OPENFILENAMEW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 lpstrFilter: LPCWSTR,
 lpstrCustomFilter: LPWSTR,
 nMaxCustFilter: DWORD,
 nFilterIndex: DWORD,
 lpstrFile: LPWSTR,
 nMaxFile: DWORD,
 lpstrFileTitle: LPWSTR,
 nMaxFileTitle: DWORD,
 lpstrInitialDir: LPCWSTR,
 lpstrTitle: LPCWSTR,
 Flags: DWORD,
 nFileOffset: WORD,
 nFileExtension: WORD,
 lpstrDefExt: LPCWSTR,
 lCustData: LPARAM,
 lpfnHook: LPOFNHOOKPROC,
 lpTemplateName: LPCWSTR,
 pvReserved: _void.Δ,
 dwReserved: DWORD,
 FlagsEx: DWORD
});

var OFNOTIFY = new StructT('OFNOTIFY', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEA,
 pszFile: LPSTR
});

var OFNOTIFYW = new StructT('OFNOTIFYW', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEW,
 pszFile: LPWSTR
});

var OFNOTIFYEX = new StructT('OFNOTIFYEX', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEA,
 psf: LPVOID,
 pidl: LPVOID
});

var OFNOTIFYEXW = new StructT('OFNOTIFYEXW', {
 hdr: NMHDR,
 lpOFN: LPOPENFILENAMEW,
 psf: LPVOID,
 pidl: LPVOID
});

var CHOOSECOLOR = new StructT('CHOOSECOLOR', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HWND,
 rgbResult: COLORREF,
 lpCustColors: COLORREF.Δ,
 Flags: DWORD,
 lCustData: LPARAM,
 lpfnHook: LPCCHOOKPROC,
 lpTemplateName: LPCSTR
});

var CHOOSECOLORW = new StructT('CHOOSECOLORW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HWND,
 rgbResult: COLORREF,
 lpCustColors: COLORREF.Δ,
 Flags: DWORD,
 lCustData: LPARAM,
 lpfnHook: LPCCHOOKPROC,
 lpTemplateName: LPCWSTR
});

var FINDREPLACE = new StructT('FINDREPLACE', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 Flags: DWORD,
 lpstrFindWhat: LPSTR,
 lpstrReplaceWith: LPSTR,
 wFindWhatLen: WORD,
 wReplaceWithLen: WORD,
 lCustData: LPARAM,
 lpfnHook: LPFRHOOKPROC,
 lpTemplateName: LPCSTR
});

var FINDREPLACEW = new StructT('FINDREPLACEW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hInstance: HINSTANCE,
 Flags: DWORD,
 lpstrFindWhat: LPWSTR,
 lpstrReplaceWith: LPWSTR,
 wFindWhatLen: WORD,
 wReplaceWithLen: WORD,
 lCustData: LPARAM,
 lpfnHook: LPFRHOOKPROC,
 lpTemplateName: LPCWSTR
});

var CHOOSEFONT = new StructT('CHOOSEFONT', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDC: HDC,
 lpLogFont: LPLOGFONTA,
 iPointSize: INT,
 Flags: DWORD,
 rgbColors: COLORREF,
 lCustData: LPARAM,
 lpfnHook: LPCFHOOKPROC,
 lpTemplateName: LPCSTR,
 hInstance: HINSTANCE,
 lpszStyle: LPSTR,
 nFontType: WORD,
 ___MISSING_ALIGNMENT__: WORD,
 nSizeMin: INT,
 nSizeMax: INT
});

var CHOOSEFONTW = new StructT('CHOOSEFONTW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDC: HDC,
 lpLogFont: LPLOGFONTW,
 iPointSize: INT,
 Flags: DWORD,
 rgbColors: COLORREF,
 lCustData: LPARAM,
 lpfnHook: LPCFHOOKPROC,
 lpTemplateName: LPCWSTR,
 hInstance: HINSTANCE,
 lpszStyle: LPWSTR,
 nFontType: WORD,
 ___MISSING_ALIGNMENT__: WORD,
 nSizeMin: INT,
 nSizeMax: INT
});

var PRINTDLG = new StructT('PRINTDLG', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 nFromPage: WORD,
 nToPage: WORD,
 nMinPage: WORD,
 nMaxPage: WORD,
 nCopies: WORD,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPrintHook: LPPRINTHOOKPROC,
 lpfnSetupHook: LPSETUPHOOKPROC,
 lpPrintTemplateName: LPCSTR,
 lpSetupTemplateName: LPCSTR,
 hPrintTemplate: HGLOBAL,
 hSetupTemplate: HGLOBAL
});

var PRINTDLGW = new StructT('PRINTDLGW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 nFromPage: WORD,
 nToPage: WORD,
 nMinPage: WORD,
 nMaxPage: WORD,
 nCopies: WORD,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPrintHook: LPPRINTHOOKPROC,
 lpfnSetupHook: LPSETUPHOOKPROC,
 lpPrintTemplateName: LPCWSTR,
 lpSetupTemplateName: LPCWSTR,
 hPrintTemplate: HGLOBAL,
 hSetupTemplate: HGLOBAL
});

var IPrintDialogCallback = new StructT('IPrintDialogCallback', {
 lpVtbl: IPrintDialogCallbackVtbl.Δ
});

var IPrintDialogCallbackVtbl = new StructT('IPrintDialogCallbackVtbl', {
 QueryInterface: new CallbackT(long, [IPrintDialogCallback.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPrintDialogCallback.Δ]).Δ,
 Release: new CallbackT(ulong, [IPrintDialogCallback.Δ]).Δ,
 InitDone: new CallbackT(long, [IPrintDialogCallback.Δ]).Δ,
 SelectionChange: new CallbackT(long, [IPrintDialogCallback.Δ]).Δ,
 HandleMessage: new CallbackT(long, [IPrintDialogCallback.Δ, HWND__.Δ, uint, uint, long, long.Δ]).Δ
});

var IPrintDialogServices = new StructT('IPrintDialogServices', {
 lpVtbl: IPrintDialogServicesVtbl.Δ
});

var IPrintDialogServicesVtbl = new StructT('IPrintDialogServicesVtbl', {
 QueryInterface: new CallbackT(long, [IPrintDialogServices.Δ, _GUID.Δ, _void.Δ.Δ]).Δ,
 AddRef: new CallbackT(ulong, [IPrintDialogServices.Δ]).Δ,
 Release: new CallbackT(ulong, [IPrintDialogServices.Δ]).Δ,
 GetCurrentDevMode: new CallbackT(long, [IPrintDialogServices.Δ, _devicemodeA.Δ, uint.Δ]).Δ,
 GetCurrentPrinterName: new CallbackT(long, [IPrintDialogServices.Δ, ushort.Δ, uint.Δ]).Δ,
 GetCurrentPortName: new CallbackT(long, [IPrintDialogServices.Δ, ushort.Δ, uint.Δ]).Δ
});

var PRINTPAGERANGE = new StructT('PRINTPAGERANGE', {
 nFromPage: DWORD,
 nToPage: DWORD
});

var PRINTDLGEX = new StructT('PRINTDLGEX', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 Flags2: DWORD,
 ExclusionFlags: DWORD,
 nPageRanges: DWORD,
 nMaxPageRanges: DWORD,
 lpPageRanges: LPPRINTPAGERANGE,
 nMinPage: DWORD,
 nMaxPage: DWORD,
 nCopies: DWORD,
 hInstance: HINSTANCE,
 lpPrintTemplateName: LPCSTR,
 lpCallback: LPUNKNOWN,
 nPropertyPages: DWORD,
 lphPropertyPages: HPROPSHEETPAGE.Δ,
 nStartPage: DWORD,
 dwResultAction: DWORD
});

var PRINTDLGEXW = new StructT('PRINTDLGEXW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 hDC: HDC,
 Flags: DWORD,
 Flags2: DWORD,
 ExclusionFlags: DWORD,
 nPageRanges: DWORD,
 nMaxPageRanges: DWORD,
 lpPageRanges: LPPRINTPAGERANGE,
 nMinPage: DWORD,
 nMaxPage: DWORD,
 nCopies: DWORD,
 hInstance: HINSTANCE,
 lpPrintTemplateName: LPCWSTR,
 lpCallback: LPUNKNOWN,
 nPropertyPages: DWORD,
 lphPropertyPages: HPROPSHEETPAGE.Δ,
 nStartPage: DWORD,
 dwResultAction: DWORD
});

var DEVNAMES = new StructT('DEVNAMES', {
 wDriverOffset: WORD,
 wDeviceOffset: WORD,
 wOutputOffset: WORD,
 wDefault: WORD
});

var PAGESETUPDLG = new StructT('PAGESETUPDLG', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 Flags: DWORD,
 ptPaperSize: POINT,
 rtMinMargin: RECT,
 rtMargin: RECT,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPageSetupHook: LPPAGESETUPHOOK,
 lpfnPagePaintHook: LPPAGEPAINTHOOK,
 lpPageSetupTemplateName: LPCSTR,
 hPageSetupTemplate: HGLOBAL
});

var PAGESETUPDLGW = new StructT('PAGESETUPDLGW', {
 lStructSize: DWORD,
 hwndOwner: HWND,
 hDevMode: HGLOBAL,
 hDevNames: HGLOBAL,
 Flags: DWORD,
 ptPaperSize: POINT,
 rtMinMargin: RECT,
 rtMargin: RECT,
 hInstance: HINSTANCE,
 lCustData: LPARAM,
 lpfnPageSetupHook: LPPAGESETUPHOOK,
 lpfnPagePaintHook: LPPAGEPAINTHOOK,
 lpPageSetupTemplateName: LPCWSTR,
 hPageSetupTemplate: HGLOBAL
});

var SERVICE_DESCRIPTION = new StructT('SERVICE_DESCRIPTION', {
 lpDescription: LPSTR
});

var SERVICE_DESCRIPTIONW = new StructT('SERVICE_DESCRIPTIONW', {
 lpDescription: LPWSTR
});

var SC_ACTION = new StructT('SC_ACTION', {
 Type: SC_ACTION_TYPE,
 Delay: DWORD
});

var SERVICE_FAILURE_ACTIONS = new StructT('SERVICE_FAILURE_ACTIONS', {
 dwResetPeriod: DWORD,
 lpRebootMsg: LPSTR,
 lpCommand: LPSTR,
 cActions: DWORD,
 lpsaActions: SC_ACTION.Δ
});

var SERVICE_FAILURE_ACTIONSW = new StructT('SERVICE_FAILURE_ACTIONSW', {
 dwResetPeriod: DWORD,
 lpRebootMsg: LPWSTR,
 lpCommand: LPWSTR,
 cActions: DWORD,
 lpsaActions: SC_ACTION.Δ
});

var SERVICE_DELAYED_AUTO_START_INFO = new StructT('SERVICE_DELAYED_AUTO_START_INFO', {
 fDelayedAutostart: BOOL
});

var SERVICE_FAILURE_ACTIONS_FLAG = new StructT('SERVICE_FAILURE_ACTIONS_FLAG', {
 fFailureActionsOnNonCrashFailures: BOOL
});

var SERVICE_SID_INFO = new StructT('SERVICE_SID_INFO', {
 dwServiceSidType: DWORD
});

var SERVICE_REQUIRED_PRIVILEGES_INFO = new StructT('SERVICE_REQUIRED_PRIVILEGES_INFO', {
 pmszRequiredPrivileges: LPSTR
});

var SERVICE_REQUIRED_PRIVILEGES_INFOW = new StructT('SERVICE_REQUIRED_PRIVILEGES_INFOW', {
 pmszRequiredPrivileges: LPWSTR
});

var SERVICE_PRESHUTDOWN_INFO = new StructT('SERVICE_PRESHUTDOWN_INFO', {
 dwPreshutdownTimeout: DWORD
});

var SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = new StructT('SERVICE_TRIGGER_SPECIFIC_DATA_ITEM', {
 dwDataType: DWORD,
 cbData: DWORD,
 pData: PBYTE
});

var SERVICE_TRIGGER = new StructT('SERVICE_TRIGGER', {
 dwTriggerType: DWORD,
 dwAction: DWORD,
 pTriggerSubtype: GUID.Δ,
 cDataItems: DWORD,
 pDataItems: PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM
});

var SERVICE_TRIGGER_INFO = new StructT('SERVICE_TRIGGER_INFO', {
 cTriggers: DWORD,
 pTriggers: PSERVICE_TRIGGER,
 pReserved: PBYTE
});

var SERVICE_PREFERRED_NODE_INFO = new StructT('SERVICE_PREFERRED_NODE_INFO', {
 usPreferredNode: USHORT,
 fDelete: BOOLEAN
});

var SERVICE_TIMECHANGE_INFO = new StructT('SERVICE_TIMECHANGE_INFO', {
 liNewTime: LARGE_INTEGER,
 liOldTime: LARGE_INTEGER
});

var SC_HANDLE__ = new StructT('SC_HANDLE__', {
 unused: int
});

var SERVICE_STATUS_HANDLE__ = new StructT('SERVICE_STATUS_HANDLE__', {
 unused: int
});

var SERVICE_STATUS = new StructT('SERVICE_STATUS', {
 dwServiceType: DWORD,
 dwCurrentState: DWORD,
 dwControlsAccepted: DWORD,
 dwWin32ExitCode: DWORD,
 dwServiceSpecificExitCode: DWORD,
 dwCheckPoint: DWORD,
 dwWaitHint: DWORD
});

var SERVICE_STATUS_PROCESS = new StructT('SERVICE_STATUS_PROCESS', {
 dwServiceType: DWORD,
 dwCurrentState: DWORD,
 dwControlsAccepted: DWORD,
 dwWin32ExitCode: DWORD,
 dwServiceSpecificExitCode: DWORD,
 dwCheckPoint: DWORD,
 dwWaitHint: DWORD,
 dwProcessId: DWORD,
 dwServiceFlags: DWORD
});

var ENUM_SERVICE_STATUS = new StructT('ENUM_SERVICE_STATUS', {
 lpServiceName: LPSTR,
 lpDisplayName: LPSTR,
 ServiceStatus: SERVICE_STATUS
});

var ENUM_SERVICE_STATUSW = new StructT('ENUM_SERVICE_STATUSW', {
 lpServiceName: LPWSTR,
 lpDisplayName: LPWSTR,
 ServiceStatus: SERVICE_STATUS
});

var ENUM_SERVICE_STATUS_PROCESS = new StructT('ENUM_SERVICE_STATUS_PROCESS', {
 lpServiceName: LPSTR,
 lpDisplayName: LPSTR,
 ServiceStatusProcess: SERVICE_STATUS_PROCESS
});

var ENUM_SERVICE_STATUS_PROCESSW = new StructT('ENUM_SERVICE_STATUS_PROCESSW', {
 lpServiceName: LPWSTR,
 lpDisplayName: LPWSTR,
 ServiceStatusProcess: SERVICE_STATUS_PROCESS
});

var QUERY_SERVICE_LOCK_STATUS = new StructT('QUERY_SERVICE_LOCK_STATUS', {
 fIsLocked: DWORD,
 lpLockOwner: LPSTR,
 dwLockDuration: DWORD
});

var QUERY_SERVICE_LOCK_STATUSW = new StructT('QUERY_SERVICE_LOCK_STATUSW', {
 fIsLocked: DWORD,
 lpLockOwner: LPWSTR,
 dwLockDuration: DWORD
});

var QUERY_SERVICE_CONFIG = new StructT('QUERY_SERVICE_CONFIG', {
 dwServiceType: DWORD,
 dwStartType: DWORD,
 dwErrorControl: DWORD,
 lpBinaryPathName: LPSTR,
 lpLoadOrderGroup: LPSTR,
 dwTagId: DWORD,
 lpDependencies: LPSTR,
 lpServiceStartName: LPSTR,
 lpDisplayName: LPSTR
});

var QUERY_SERVICE_CONFIGW = new StructT('QUERY_SERVICE_CONFIGW', {
 dwServiceType: DWORD,
 dwStartType: DWORD,
 dwErrorControl: DWORD,
 lpBinaryPathName: LPWSTR,
 lpLoadOrderGroup: LPWSTR,
 dwTagId: DWORD,
 lpDependencies: LPWSTR,
 lpServiceStartName: LPWSTR,
 lpDisplayName: LPWSTR
});

var SERVICE_TABLE_ENTRY = new StructT('SERVICE_TABLE_ENTRY', {
 lpServiceName: LPSTR,
 lpServiceProc: LPSERVICE_MAIN_FUNCTIONA
});

var SERVICE_TABLE_ENTRYW = new StructT('SERVICE_TABLE_ENTRYW', {
 lpServiceName: LPWSTR,
 lpServiceProc: LPSERVICE_MAIN_FUNCTIONW
});

var SERVICE_NOTIFY_1 = new StructT('SERVICE_NOTIFY_1', {
 dwVersion: DWORD,
 pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
 pContext: PVOID,
 dwNotificationStatus: DWORD,
 ServiceStatus: SERVICE_STATUS_PROCESS
});

var SERVICE_NOTIFY = new StructT('SERVICE_NOTIFY', {
 dwVersion: DWORD,
 pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
 pContext: PVOID,
 dwNotificationStatus: DWORD,
 ServiceStatus: SERVICE_STATUS_PROCESS,
 dwNotificationTriggered: DWORD,
 pszServiceNames: LPSTR
});

var SERVICE_NOTIFYW = new StructT('SERVICE_NOTIFYW', {
 dwVersion: DWORD,
 pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
 pContext: PVOID,
 dwNotificationStatus: DWORD,
 ServiceStatus: SERVICE_STATUS_PROCESS,
 dwNotificationTriggered: DWORD,
 pszServiceNames: LPWSTR
});

var SERVICE_CONTROL_STATUS_REASON_PARAMS = new StructT('SERVICE_CONTROL_STATUS_REASON_PARAMS', {
 dwReason: DWORD,
 pszComment: LPSTR,
 ServiceStatus: SERVICE_STATUS_PROCESS
});

var SERVICE_CONTROL_STATUS_REASON_PARAMSW = new StructT('SERVICE_CONTROL_STATUS_REASON_PARAMSW', {
 dwReason: DWORD,
 pszComment: LPWSTR,
 ServiceStatus: SERVICE_STATUS_PROCESS
});

var MODEMDEVCAPS = new StructT('MODEMDEVCAPS', {
 dwActualSize: DWORD,
 dwRequiredSize: DWORD,
 dwDevSpecificOffset: DWORD,
 dwDevSpecificSize: DWORD,
 dwModemProviderVersion: DWORD,
 dwModemManufacturerOffset: DWORD,
 dwModemManufacturerSize: DWORD,
 dwModemModelOffset: DWORD,
 dwModemModelSize: DWORD,
 dwModemVersionOffset: DWORD,
 dwModemVersionSize: DWORD,
 dwDialOptions: DWORD,
 dwCallSetupFailTimer: DWORD,
 dwInactivityTimeout: DWORD,
 dwSpeakerVolume: DWORD,
 dwSpeakerMode: DWORD,
 dwModemOptions: DWORD,
 dwMaxDTERate: DWORD,
 dwMaxDCERate: DWORD,
 abVariablePortion: new ArrayT(BYTE, 1)
});

var MODEMSETTINGS = new StructT('MODEMSETTINGS', {
 dwActualSize: DWORD,
 dwRequiredSize: DWORD,
 dwDevSpecificOffset: DWORD,
 dwDevSpecificSize: DWORD,
 dwCallSetupFailTimer: DWORD,
 dwInactivityTimeout: DWORD,
 dwSpeakerVolume: DWORD,
 dwSpeakerMode: DWORD,
 dwPreferredModemOptions: DWORD,
 dwNegotiatedModemOptions: DWORD,
 dwNegotiatedDCERate: DWORD,
 abVariablePortion: new ArrayT(BYTE, 1)
});

var HIMC__ = new StructT('HIMC__', {
 unused: int
});

var HIMCC__ = new StructT('HIMCC__', {
 unused: int
});

var COMPOSITIONFORM = new StructT('COMPOSITIONFORM', {
 dwStyle: DWORD,
 ptCurrentPos: POINT,
 rcArea: RECT
});

var CANDIDATEFORM = new StructT('CANDIDATEFORM', {
 dwIndex: DWORD,
 dwStyle: DWORD,
 ptCurrentPos: POINT,
 rcArea: RECT
});

var CANDIDATELIST = new StructT('CANDIDATELIST', {
 dwSize: DWORD,
 dwStyle: DWORD,
 dwCount: DWORD,
 dwSelection: DWORD,
 dwPageStart: DWORD,
 dwPageSize: DWORD,
 dwOffset: new ArrayT(DWORD, 1)
});

var REGISTERWORD = new StructT('REGISTERWORD', {
 lpReading: LPSTR,
 lpWord: LPSTR
});

var REGISTERWORDW = new StructT('REGISTERWORDW', {
 lpReading: LPWSTR,
 lpWord: LPWSTR
});

var RECONVERTSTRING = new StructT('RECONVERTSTRING', {
 dwSize: DWORD,
 dwVersion: DWORD,
 dwStrLen: DWORD,
 dwStrOffset: DWORD,
 dwCompStrLen: DWORD,
 dwCompStrOffset: DWORD,
 dwTargetStrLen: DWORD,
 dwTargetStrOffset: DWORD
});

var STYLEBUF = new StructT('STYLEBUF', {
 dwStyle: DWORD,
 szDescription: new ArrayT(CHAR, STYLE_DESCRIPTION_SIZE)
});

var STYLEBUFW = new StructT('STYLEBUFW', {
 dwStyle: DWORD,
 szDescription: new ArrayT(WCHAR, STYLE_DESCRIPTION_SIZE)
});

var IMEMENUITEMINFO = new StructT('IMEMENUITEMINFO', {
 cbSize: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: DWORD,
 szString: new ArrayT(CHAR, IMEMENUITEM_STRING_SIZE),
 hbmpItem: HBITMAP
});

var IMEMENUITEMINFOW = new StructT('IMEMENUITEMINFOW', {
 cbSize: UINT,
 fType: UINT,
 fState: UINT,
 wID: UINT,
 hbmpChecked: HBITMAP,
 hbmpUnchecked: HBITMAP,
 dwItemData: DWORD,
 szString: new ArrayT(WCHAR, IMEMENUITEM_STRING_SIZE),
 hbmpItem: HBITMAP
});

var IMECHARPOSITION = new StructT('IMECHARPOSITION', {
 dwSize: DWORD,
 dwCharPos: DWORD,
 pt: POINT,
 cLineHeight: UINT,
 rcDocument: RECT
});


  _invalid_parameter_noinfo: [ _void, {  } ],
  _invalid_parameter_noinfo_noreturn: [ _void, {  } ],
  _invoke_watson: [ _void, { uintptr_t: uintptr_t } ],
  _except_handler: [ EXCEPTION_DISPOSITION, { _ExceptionRecord: _EXCEPTION_RECORD.Δ, _EstablisherFrame: _void.Δ, _ContextRecord: _CONTEXT.Δ, _DispatcherContext: _void.Δ } ],
  _exception_code: [ _void, {  } ],
  _exception_info: [ _void, {  } ],
  _abnormal_termination: [ _void, {  } ],
  __pctype_func: [ _void, {  } ],
  __pwctype_func: [ wctype_t, {  } ],
  _isctype: [ _void, { _C: int, _Type: int } ],
  _isctype_l: [ _void, { _C: int, _Type: int, _Locale: _locale_t } ],
  isalpha: [ _void, { _C: int } ],
  _isalpha_l: [ _void, { _C: int, _Locale: _locale_t } ],
  isupper: [ _void, { _C: int } ],
  _isupper_l: [ _void, { _C: int, _Locale: _locale_t } ],
  islower: [ _void, { _C: int } ],
  _islower_l: [ _void, { _C: int, _Locale: _locale_t } ],
  isdigit: [ _void, { _C: int } ],
  _isdigit_l: [ _void, { _C: int, _Locale: _locale_t } ],
  isxdigit: [ _void, { _C: int } ],
  _isxdigit_l: [ _void, { _C: int, _Locale: _locale_t } ],
  isspace: [ _void, { _C: int } ],
  _isspace_l: [ _void, { _C: int, _Locale: _locale_t } ],
  ispunct: [ _void, { _C: int } ],
  _ispunct_l: [ _void, { _C: int, _Locale: _locale_t } ],
  isalnum: [ _void, { _C: int } ],
  _isalnum_l: [ _void, { _C: int, _Locale: _locale_t } ],
  isprint: [ _void, { _C: int } ],
  _isprint_l: [ _void, { _C: int, _Locale: _locale_t } ],
  isgraph: [ _void, { _C: int } ],
  _isgraph_l: [ _void, { _C: int, _Locale: _locale_t } ],
  iscntrl: [ _void, { _C: int } ],
  _iscntrl_l: [ _void, { _C: int, _Locale: _locale_t } ],
  toupper: [ _void, { _C: int } ],
  tolower: [ _void, { _C: int } ],
  _tolower: [ _void, { _C: int } ],
  _tolower_l: [ _void, { _C: int, _Locale: _locale_t } ],
  _toupper: [ _void, { _C: int } ],
  _toupper_l: [ _void, { _C: int, _Locale: _locale_t } ],
  __isascii: [ _void, { _C: int } ],
  __toascii: [ _void, { _C: int } ],
  __iscsymf: [ _void, { _C: int } ],
  __iscsym: [ _void, { _C: int } ],
  iswalpha: [ _void, { _C: wint_t } ],
  _iswalpha_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswupper: [ _void, { _C: wint_t } ],
  _iswupper_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswlower: [ _void, { _C: wint_t } ],
  _iswlower_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswdigit: [ _void, { _C: wint_t } ],
  _iswdigit_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswxdigit: [ _void, { _C: wint_t } ],
  _iswxdigit_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswspace: [ _void, { _C: wint_t } ],
  _iswspace_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswpunct: [ _void, { _C: wint_t } ],
  _iswpunct_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswalnum: [ _void, { _C: wint_t } ],
  _iswalnum_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswprint: [ _void, { _C: wint_t } ],
  _iswprint_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswgraph: [ _void, { _C: wint_t } ],
  _iswgraph_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswcntrl: [ _void, { _C: wint_t } ],
  _iswcntrl_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  iswascii: [ _void, { _C: wint_t } ],
  isleadbyte: [ _void, { _C: int } ],
  _isleadbyte_l: [ _void, { _C: int, _Locale: _locale_t } ],
  towupper: [ wint_t, { _C: wint_t } ],
  _towupper_l: [ wint_t, { _C: wint_t, _Locale: _locale_t } ],
  towlower: [ wint_t, { _C: wint_t } ],
  _towlower_l: [ wint_t, { _C: wint_t, _Locale: _locale_t } ],
  iswctype: [ _void, { _C: wint_t, _Type: wctype_t } ],
  _iswctype_l: [ _void, { _C: wint_t, _Type: wctype_t, _Locale: _locale_t } ],
  __iswcsymf: [ _void, { _C: wint_t } ],
  _iswcsymf_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  __iswcsym: [ _void, { _C: wint_t } ],
  _iswcsym_l: [ _void, { _C: wint_t, _Locale: _locale_t } ],
  is_wctype: [ _void, { _C: wint_t, _Type: wctype_t } ],
  ___mb_cur_max_func: [ _void, {  } ],
  ___mb_cur_max_l_func: [ _void, { _locale_t: _locale_t } ],
  PtrToPtr64: [ _void, { p: _void.Δ } ],
  Ptr64ToPtr: [ _void, { p: _void.Δ } ],
  HandleToHandle64: [ _void, { h: _void.Δ } ],
  Handle64ToHandle: [ _void, { h: _void.Δ } ],
  Int64ShllMod32: [ ULONGLONG, { Value: ULONGLONG, ShiftCount: DWORD } ],
  Int64ShraMod32: [ LONGLONG, { Value: LONGLONG, ShiftCount: DWORD } ],
  Int64ShrlMod32: [ ULONGLONG, { Value: ULONGLONG, ShiftCount: DWORD } ],
  _rotl: [ _void, { _Val: uint, _Shift: int } ],
  _rotl64: [ _void, { _Val: ulonglong, _Shift: int } ],
  _rotr: [ _void, { _Val: uint, _Shift: int } ],
  _rotr64: [ _void, { _Val: ulonglong, _Shift: int } ],
  _memccpy: [ _void, { _Dst: _void.Δ, _Src: _void.Δ, _Val: int, _MaxCount: size_t } ],
  memchr: [ _void, { _Buf: _void.Δ, _Val: int, _MaxCount: size_t } ],
  _memicmp: [ _void, { _Buf1: _void.Δ, _Buf2: _void.Δ, _Size: size_t } ],
  _memicmp_l: [ _void, { _Buf1: _void.Δ, _Buf2: _void.Δ, _Size: size_t, _Locale: _locale_t } ],
  memcmp: [ _void, { _Buf1: _void.Δ, _Buf2: _void.Δ, _Size: size_t } ],
  memcpy: [ _void, { _Dst: _void.Δ, _Src: _void.Δ, _Size: size_t } ],
  memcpy_s: [ errno_t, { _Dst: _void.Δ, _DstSize: rsize_t, _Src: _void.Δ, _MaxCount: rsize_t } ],
  memset: [ _void, { _Dst: _void.Δ, _Val: int, _Size: size_t } ],
  memccpy: [ _void, { _Dst: _void.Δ, _Src: _void.Δ, _Val: int, _Size: size_t } ],
  memicmp: [ _void, { _Buf1: _void.Δ, _Buf2: _void.Δ, _Size: size_t } ],
  _strset_s: [ errno_t, { _Dst: char.Δ, _DstSize: size_t, _Value: int } ],
  _strset: [ _void, { _Dest: char.Δ, _Value: int } ],
  strcpy_s: [ errno_t, { _Dst: char.Δ, _SizeInBytes: rsize_t, _Src: char.Δ } ],
  strcpy: [ _void, { _Dest: char.Δ, _Source: char.Δ } ],
  strcat_s: [ errno_t, { _Dst: char.Δ, _SizeInBytes: rsize_t, _Src: char.Δ } ],
  strcat: [ _void, { _Dest: char.Δ, _Source: char.Δ } ],
  strcmp: [ _void, { _Str1: char.Δ, _Str2: char.Δ } ],
  strlen: [ size_t, { _Str: char.Δ } ],
  strnlen: [ size_t, { _Str: char.Δ, _MaxCount: size_t } ],
  strnlen_s: [ size_t, { _Str: char.Δ, _MaxCount: size_t } ],
  memmove_s: [ errno_t, { _Dst: _void.Δ, _DstSize: rsize_t, _Src: _void.Δ, _MaxCount: rsize_t } ],
  memmove: [ _void, { _Dst: _void.Δ, _Src: _void.Δ, _Size: size_t } ],
  _strdup: [ _void, { _Src: char.Δ } ],
  strchr: [ _void, { _Str: char.Δ, _Val: int } ],
  _stricmp: [ _void, { _Str1: char.Δ, _Str2: char.Δ } ],
  _strcmpi: [ _void, { _Str1: char.Δ, _Str2: char.Δ } ],
  _stricmp_l: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _Locale: _locale_t } ],
  strcoll: [ _void, { _Str1: char.Δ, _Str2: char.Δ } ],
  _strcoll_l: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _Locale: _locale_t } ],
  _stricoll: [ _void, { _Str1: char.Δ, _Str2: char.Δ } ],
  _stricoll_l: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _Locale: _locale_t } ],
  _strncoll: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _MaxCount: size_t } ],
  _strncoll_l: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _strnicoll: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _MaxCount: size_t } ],
  _strnicoll_l: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  strcspn: [ size_t, { _Str: char.Δ, _Control: char.Δ } ],
  _strerror: [ _void, { _ErrMsg: char.Δ } ],
  _strerror_s: [ errno_t, { _Buf: char.Δ, _SizeInBytes: size_t, _ErrMsg: char.Δ } ],
  strerror: [ _void, { int: int } ],
  strerror_s: [ errno_t, { _Buf: char.Δ, _SizeInBytes: size_t, _ErrNum: int } ],
  _strlwr_s: [ errno_t, { _Str: char.Δ, _Size: size_t } ],
  _strlwr: [ _void, { _String: char.Δ } ],
  _strlwr_s_l: [ errno_t, { _Str: char.Δ, _Size: size_t, _Locale: _locale_t } ],
  _strlwr_l: [ _void, { _String: char.Δ, _Locale: _locale_t } ],
  strncat_s: [ errno_t, { _Dst: char.Δ, _SizeInBytes: rsize_t, _Src: char.Δ, _MaxCount: rsize_t } ],
  strncat: [ _void, { _Dest: char.Δ, _Source: char.Δ, _Count: size_t } ],
  strncmp: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _MaxCount: size_t } ],
  _strnicmp: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _MaxCount: size_t } ],
  _strnicmp_l: [ _void, { _Str1: char.Δ, _Str2: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  strncpy_s: [ errno_t, { _Dst: char.Δ, _SizeInBytes: rsize_t, _Src: char.Δ, _MaxCount: rsize_t } ],
  strncpy: [ _void, { _Dest: char.Δ, _Source: char.Δ, _Count: size_t } ],
  _strnset_s: [ errno_t, { _Str: char.Δ, _SizeInBytes: size_t, _Val: int, _MaxCount: size_t } ],
  _strnset: [ _void, { _Dest: char.Δ, _Val: int, _Count: size_t } ],
  strpbrk: [ _void, { _Str: char.Δ, _Control: char.Δ } ],
  strrchr: [ _void, { _Str: char.Δ, _Ch: int } ],
  _strrev: [ _void, { _Str: char.Δ } ],
  strspn: [ size_t, { _Str: char.Δ, _Control: char.Δ } ],
  strstr: [ _void, { _Str: char.Δ, _SubStr: char.Δ } ],
  strtok: [ _void, { _Str: char.Δ, _Delim: char.Δ } ],
  strtok_s: [ _void, { _Str: char.Δ, _Delim: char.Δ, _Context: char.Δ.Δ } ],
  _strupr_s: [ errno_t, { _Str: char.Δ, _Size: size_t } ],
  _strupr: [ _void, { _String: char.Δ } ],
  _strupr_s_l: [ errno_t, { _Str: char.Δ, _Size: size_t, _Locale: _locale_t } ],
  _strupr_l: [ _void, { _String: char.Δ, _Locale: _locale_t } ],
  strxfrm: [ size_t, { _Dst: char.Δ, _Src: char.Δ, _MaxCount: size_t } ],
  _strxfrm_l: [ size_t, { _Dst: char.Δ, _Src: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  strdup: [ _void, { _Src: char.Δ } ],
  strcmpi: [ _void, { _Str1: char.Δ, _Str2: char.Δ } ],
  stricmp: [ _void, { _Str1: char.Δ, _Str2: char.Δ } ],
  strlwr: [ _void, { _Str: char.Δ } ],
  strnicmp: [ _void, { _Str1: char.Δ, _Str: char.Δ, _MaxCount: size_t } ],
  strnset: [ _void, { _Str: char.Δ, _Val: int, _MaxCount: size_t } ],
  strrev: [ _void, { _Str: char.Δ } ],
  strset: [ _void, { _Str: char.Δ, _Val: int } ],
  strupr: [ _void, { _Str: char.Δ } ],
  _wcsdup: [ wchar_t, { _Str: wchar_t.Δ } ],
  wcscat_s: [ errno_t, { _Dst: wchar_t.Δ, _SizeInWords: rsize_t, _Src: wchar_t.Δ } ],
  wcscat: [ wchar_t, { _Dest: wchar_t.Δ, _Source: wchar_t.Δ } ],
  wcschr: [ wchar_t, { _Str: wchar_t.Δ, _Ch: wchar_t } ],
  wcscmp: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ } ],
  wcscpy_s: [ errno_t, { _Dst: wchar_t.Δ, _SizeInWords: rsize_t, _Src: wchar_t.Δ } ],
  wcscpy: [ wchar_t, { _Dest: wchar_t.Δ, _Source: wchar_t.Δ } ],
  wcscspn: [ size_t, { _Str: wchar_t.Δ, _Control: wchar_t.Δ } ],
  wcslen: [ size_t, { _Str: wchar_t.Δ } ],
  wcsnlen: [ size_t, { _Src: wchar_t.Δ, _MaxCount: size_t } ],
  wcsnlen_s: [ size_t, { _Src: wchar_t.Δ, _MaxCount: size_t } ],
  wcsncat_s: [ errno_t, { _Dst: wchar_t.Δ, _SizeInWords: rsize_t, _Src: wchar_t.Δ, _MaxCount: rsize_t } ],
  wcsncat: [ wchar_t, { _Dest: wchar_t.Δ, _Source: wchar_t.Δ, _Count: size_t } ],
  wcsncmp: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t } ],
  wcsncpy_s: [ errno_t, { _Dst: wchar_t.Δ, _SizeInWords: rsize_t, _Src: wchar_t.Δ, _MaxCount: rsize_t } ],
  wcsncpy: [ wchar_t, { _Dest: wchar_t.Δ, _Source: wchar_t.Δ, _Count: size_t } ],
  wcspbrk: [ wchar_t, { _Str: wchar_t.Δ, _Control: wchar_t.Δ } ],
  wcsrchr: [ wchar_t, { _Str: wchar_t.Δ, _Ch: wchar_t } ],
  wcsspn: [ size_t, { _Str: wchar_t.Δ, _Control: wchar_t.Δ } ],
  wcsstr: [ wchar_t, { _Str: wchar_t.Δ, _SubStr: wchar_t.Δ } ],
  wcstok: [ wchar_t, { _Str: wchar_t.Δ, _Delim: wchar_t.Δ } ],
  wcstok_s: [ wchar_t, { _Str: wchar_t.Δ, _Delim: wchar_t.Δ, _Context: ushort.Δ.Δ } ],
  _wcserror: [ wchar_t, { _ErrNum: int } ],
  _wcserror_s: [ errno_t, { _Buf: wchar_t.Δ, _SizeInWords: size_t, _ErrNum: int } ],
  __wcserror: [ wchar_t, { _Str: wchar_t.Δ } ],
  __wcserror_s: [ errno_t, { _Buffer: wchar_t.Δ, _SizeInWords: size_t, _ErrMsg: wchar_t.Δ } ],
  _wcsicmp: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ } ],
  _wcsicmp_l: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _Locale: _locale_t } ],
  _wcsnicmp: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t } ],
  _wcsnicmp_l: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _wcsnset_s: [ errno_t, { _Dst: wchar_t.Δ, _SizeInWords: size_t, _Val: wchar_t, _MaxCount: size_t } ],
  _wcsnset: [ wchar_t, { _Str: wchar_t.Δ, _Val: wchar_t, _MaxCount: size_t } ],
  _wcsrev: [ wchar_t, { _Str: wchar_t.Δ } ],
  _wcsset_s: [ errno_t, { _Dst: wchar_t.Δ, _SizeInWords: size_t, _Value: wchar_t } ],
  _wcsset: [ wchar_t, { _Str: wchar_t.Δ, _Val: wchar_t } ],
  _wcslwr_s: [ errno_t, { _Str: wchar_t.Δ, _SizeInWords: size_t } ],
  _wcslwr: [ wchar_t, { _String: wchar_t.Δ } ],
  _wcslwr_s_l: [ errno_t, { _Str: wchar_t.Δ, _SizeInWords: size_t, _Locale: _locale_t } ],
  _wcslwr_l: [ wchar_t, { _String: wchar_t.Δ, _Locale: _locale_t } ],
  _wcsupr_s: [ errno_t, { _Str: wchar_t.Δ, _Size: size_t } ],
  _wcsupr: [ wchar_t, { _String: wchar_t.Δ } ],
  _wcsupr_s_l: [ errno_t, { _Str: wchar_t.Δ, _Size: size_t, _Locale: _locale_t } ],
  _wcsupr_l: [ wchar_t, { _String: wchar_t.Δ, _Locale: _locale_t } ],
  wcsxfrm: [ size_t, { _Dst: wchar_t.Δ, _Src: wchar_t.Δ, _MaxCount: size_t } ],
  _wcsxfrm_l: [ size_t, { _Dst: wchar_t.Δ, _Src: wchar_t.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  wcscoll: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ } ],
  _wcscoll_l: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _Locale: _locale_t } ],
  _wcsicoll: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ } ],
  _wcsicoll_l: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _Locale: _locale_t } ],
  _wcsncoll: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t } ],
  _wcsncoll_l: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _wcsnicoll: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t } ],
  _wcsnicoll_l: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  wcsdup: [ wchar_t, { _Str: wchar_t.Δ } ],
  wcsicmp: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ } ],
  wcsnicmp: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ, _MaxCount: size_t } ],
  wcsnset: [ wchar_t, { _Str: wchar_t.Δ, _Val: wchar_t, _MaxCount: size_t } ],
  wcsrev: [ wchar_t, { _Str: wchar_t.Δ } ],
  wcsset: [ wchar_t, { _Str: wchar_t.Δ, _Val: wchar_t } ],
  wcslwr: [ wchar_t, { _Str: wchar_t.Δ } ],
  wcsupr: [ wchar_t, { _Str: wchar_t.Δ } ],
  wcsicoll: [ _void, { _Str1: wchar_t.Δ, _Str2: wchar_t.Δ } ],
  InterlockedBitTestAndSet: [ BOOLEAN, { Base: LONG.Δ, Bit: LONG } ],
  InterlockedBitTestAndReset: [ BOOLEAN, { Base: LONG.Δ, Bit: LONG } ],
  InterlockedBitTestAndComplement: [ BOOLEAN, { Base: LONG.Δ, Bit: LONG } ],
  MemoryBarrier: [ _void, {  } ],
  ReadPMC: [ DWORD64, { Counter: DWORD } ],
  ReadTimeStampCounter: [ DWORD64, {  } ],
  DbgRaiseAssertionFailure: [ _void, {  } ],
  GetFiberData: [ PVOID, {  } ],
  GetCurrentFiber: [ PVOID, {  } ],
  RtlUnwind: [ _void, { TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID } ],
  RtlInitializeSListHead: [ _void, { ListHead: PSLIST_HEADER } ],
  RtlFirstEntrySList: [ PSINGLE_LIST_ENTRY, { ListHead: SLIST_HEADER.Δ } ],
  RtlInterlockedPopEntrySList: [ PSINGLE_LIST_ENTRY, { ListHead: PSLIST_HEADER } ],
  RtlInterlockedPushEntrySList: [ PSINGLE_LIST_ENTRY, { ListHead: PSLIST_HEADER, ListEntry: PSINGLE_LIST_ENTRY } ],
  RtlInterlockedFlushSList: [ PSINGLE_LIST_ENTRY, { ListHead: PSLIST_HEADER } ],
  RtlQueryDepthSList: [ WORD, { ListHead: PSLIST_HEADER } ],
  RtlRunOnceInitialize: [ _void, { RunOnce: PRTL_RUN_ONCE } ],
  RtlRunOnceExecuteOnce: [ DWORD, { RunOnce: PRTL_RUN_ONCE, InitFn: PRTL_RUN_ONCE_INIT_FN, Parameter: PVOID, Context: PVOID.Δ } ],
  RtlRunOnceBeginInitialize: [ DWORD, { RunOnce: PRTL_RUN_ONCE, Flags: DWORD, Context: PVOID.Δ } ],
  RtlRunOnceComplete: [ DWORD, { RunOnce: PRTL_RUN_ONCE, Flags: DWORD, Context: PVOID } ],
  HEAP_MAKE_TAG_FLAGS: [ DWORD, { TagBase: DWORD, Tag: DWORD } ],
  RtlCaptureStackBackTrace: [ WORD, { FramesToSkip: DWORD, FramesToCapture: DWORD, BackTrace: PVOID.Δ, BackTraceHash: PDWORD } ],
  RtlCaptureContext: [ _void, { ContextRecord: PCONTEXT } ],
  RtlCompareMemory: [ SIZE_T, { Source1: _void.Δ, Source2: _void.Δ, Length: SIZE_T } ],
  RtlSecureZeroMemory: [ PVOID, { ptr: PVOID, cnt: SIZE_T } ],
  RtlPcToFileHeader: [ PVOID, { PcValue: PVOID, BaseOfImage: PVOID.Δ } ],
  VerSetConditionMask: [ ULONGLONG, { ConditionMask: ULONGLONG, TypeMask: DWORD, Condition: BYTE } ],
  RtlGetProductInfo: [ BOOLEAN, { OSMajorVersion: DWORD, OSMinorVersion: DWORD, SpMajorVersion: DWORD, SpMinorVersion: DWORD, ReturnedProductType: PDWORD } ],
  RtlCopyExtendedContext: [ DWORD, { Destination: PCONTEXT_EX, ContextFlags: DWORD, Source: PCONTEXT_EX } ],
  RtlInitializeExtendedContext: [ DWORD, { Context: PVOID, ContextFlags: DWORD, ContextEx: PCONTEXT_EX.Δ } ],
  RtlGetEnabledExtendedFeatures: [ DWORD64, { FeatureMask: DWORD64 } ],
  RtlGetExtendedContextLength: [ DWORD, { ContextFlags: DWORD, ContextLength: PDWORD } ],
  RtlGetExtendedFeaturesMask: [ DWORD64, { ContextEx: PCONTEXT_EX } ],
  RtlLocateExtendedFeature: [ PVOID, { ContextEx: PCONTEXT_EX, FeatureId: DWORD, Length: PDWORD } ],
  RtlLocateLegacyContext: [ PCONTEXT, { ContextEx: PCONTEXT_EX, Length: PDWORD } ],
  RtlSetExtendedFeaturesMask: [ _void, { ContextEx: PCONTEXT_EX, FeatureMask: DWORD64 } ],
  TpInitializeCallbackEnviron: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpSetCallbackThreadpool: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON, Pool: PTP_POOL } ],
  TpSetCallbackCleanupGroup: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON, CleanupGroup: PTP_CLEANUP_GROUP, CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK } ],
  TpSetCallbackActivationContext: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON, ActivationContext: _ACTIVATION_CONTEXT.Δ } ],
  TpSetCallbackNoActivationContext: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpSetCallbackLongFunction: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpSetCallbackRaceWithDll: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON, DllHandle: PVOID } ],
  TpSetCallbackFinalizationCallback: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON, FinalizationCallback: PTP_SIMPLE_CALLBACK } ],
  TpSetCallbackPriority: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON, Priority: TP_CALLBACK_PRIORITY } ],
  TpSetCallbackPersistent: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  TpDestroyCallbackEnviron: [ _void, { CallbackEnviron: PTP_CALLBACK_ENVIRON } ],
  NtCurrentTeb: [ struct _TEB, {  } ],
  InitOnceInitialize: [ _void, { InitOnce: PINIT_ONCE } ],
  InitOnceExecuteOnce: [ BOOL, { InitOnce: PINIT_ONCE, InitFn: PINIT_ONCE_FN, Parameter: PVOID, Context: LPVOID.Δ } ],
  InitOnceBeginInitialize: [ BOOL, { lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, fPending: PBOOL, lpContext: LPVOID.Δ } ],
  InitOnceComplete: [ BOOL, { lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, lpContext: LPVOID } ],
  InitializeSRWLock: [ _void, { SRWLock: PSRWLOCK } ],
  ReleaseSRWLockExclusive: [ _void, { SRWLock: PSRWLOCK } ],
  ReleaseSRWLockShared: [ _void, { SRWLock: PSRWLOCK } ],
  AcquireSRWLockExclusive: [ _void, { SRWLock: PSRWLOCK } ],
  AcquireSRWLockShared: [ _void, { SRWLock: PSRWLOCK } ],
  TryAcquireSRWLockExclusive: [ BOOLEAN, { SRWLock: PSRWLOCK } ],
  TryAcquireSRWLockShared: [ BOOLEAN, { SRWLock: PSRWLOCK } ],
  InitializeConditionVariable: [ _void, { ConditionVariable: PCONDITION_VARIABLE } ],
  WakeConditionVariable: [ _void, { ConditionVariable: PCONDITION_VARIABLE } ],
  WakeAllConditionVariable: [ _void, { ConditionVariable: PCONDITION_VARIABLE } ],
  SleepConditionVariableCS: [ BOOL, { ConditionVariable: PCONDITION_VARIABLE, CriticalSection: PCRITICAL_SECTION, dwMilliseconds: DWORD } ],
  SleepConditionVariableSRW: [ BOOL, { ConditionVariable: PCONDITION_VARIABLE, SRWLock: PSRWLOCK, dwMilliseconds: DWORD, Flags: ULONG } ],
  EncodePointer: [ PVOID, { Ptr: PVOID } ],
  DecodePointer: [ PVOID, { Ptr: PVOID } ],
  EncodeSystemPointer: [ PVOID, { Ptr: PVOID } ],
  DecodeSystemPointer: [ PVOID, { Ptr: PVOID } ],
  InterlockedIncrement: [ LONG, { lpAddend: LONG.Δ } ],
  InterlockedDecrement: [ LONG, { lpAddend: LONG.Δ } ],
  InterlockedExchange: [ LONG, { Target: LONG.Δ, Value: LONG } ],
  InterlockedExchangeAdd: [ LONG, { Addend: LONG.Δ, Value: LONG } ],
  InterlockedCompareExchange: [ LONG, { Destination: LONG.Δ, Exchange: LONG, Comperand: LONG } ],
  InterlockedCompareExchange64: [ LONGLONG, { Destination: LONGLONG.Δ, Exchange: LONGLONG, Comperand: LONGLONG } ],
  InterlockedAnd64: [ LONGLONG, { Destination: LONGLONG.Δ, Value: LONGLONG } ],
  InterlockedOr64: [ LONGLONG, { Destination: LONGLONG.Δ, Value: LONGLONG } ],
  InterlockedXor64: [ LONGLONG, { Destination: LONGLONG.Δ, Value: LONGLONG } ],
  InterlockedIncrement64: [ LONGLONG, { Addend: LONGLONG.Δ } ],
  InterlockedDecrement64: [ LONGLONG, { Addend: LONGLONG.Δ } ],
  InterlockedExchange64: [ LONGLONG, { Target: LONGLONG.Δ, Value: LONGLONG } ],
  InterlockedExchangeAdd64: [ LONGLONG, { Addend: LONGLONG.Δ, Value: LONGLONG } ],
  InitializeSListHead: [ _void, { ListHead: PSLIST_HEADER } ],
  InterlockedPopEntrySList: [ PSINGLE_LIST_ENTRY, { ListHead: PSLIST_HEADER } ],
  InterlockedPushEntrySList: [ PSINGLE_LIST_ENTRY, { ListHead: PSLIST_HEADER, ListEntry: PSINGLE_LIST_ENTRY } ],
  InterlockedFlushSList: [ PSINGLE_LIST_ENTRY, { ListHead: PSLIST_HEADER } ],
  QueryDepthSList: [ USHORT, { ListHead: PSLIST_HEADER } ],
  FreeResource: [ BOOL, { hResData: HGLOBAL } ],
  LockResource: [ LPVOID, { hResData: HGLOBAL } ],
  WinMain: [ _void, { hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPSTR, nShowCmd: int } ],
  wWinMain: [ _void, { hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPWSTR, nShowCmd: int } ],
  FreeLibrary: [ BOOL, { hLibModule: HMODULE } ],
  FreeLibraryAndExitThread: [ _void, { hLibModule: HMODULE, dwExitCode: DWORD } ],
  DisableThreadLibraryCalls: [ BOOL, { hLibModule: HMODULE } ],
  GetProcAddress: [ FARPROC, { hModule: HMODULE, lpProcName: LPCSTR } ],
  GetVersion: [ DWORD, {  } ],
  GlobalAlloc: [ HGLOBAL, { uFlags: UINT, dwBytes: SIZE_T } ],
  GlobalReAlloc: [ HGLOBAL, { hMem: HGLOBAL, dwBytes: SIZE_T, uFlags: UINT } ],
  GlobalSize: [ SIZE_T, { hMem: HGLOBAL } ],
  GlobalFlags: [ UINT, { hMem: HGLOBAL } ],
  GlobalLock: [ LPVOID, { hMem: HGLOBAL } ],
  GlobalHandle: [ HGLOBAL, { pMem: LPCVOID } ],
  GlobalUnlock: [ BOOL, { hMem: HGLOBAL } ],
  GlobalFree: [ HGLOBAL, { hMem: HGLOBAL } ],
  GlobalCompact: [ SIZE_T, { dwMinFree: DWORD } ],
  GlobalFix: [ _void, { hMem: HGLOBAL } ],
  GlobalUnfix: [ _void, { hMem: HGLOBAL } ],
  GlobalWire: [ LPVOID, { hMem: HGLOBAL } ],
  GlobalUnWire: [ BOOL, { hMem: HGLOBAL } ],
  GlobalMemoryStatus: [ _void, { lpBuffer: LPMEMORYSTATUS } ],
  GlobalMemoryStatusEx: [ BOOL, { lpBuffer: LPMEMORYSTATUSEX } ],
  LocalAlloc: [ HLOCAL, { uFlags: UINT, uBytes: SIZE_T } ],
  LocalReAlloc: [ HLOCAL, { hMem: HLOCAL, uBytes: SIZE_T, uFlags: UINT } ],
  LocalLock: [ LPVOID, { hMem: HLOCAL } ],
  LocalHandle: [ HLOCAL, { pMem: LPCVOID } ],
  LocalUnlock: [ BOOL, { hMem: HLOCAL } ],
  LocalSize: [ SIZE_T, { hMem: HLOCAL } ],
  LocalFlags: [ UINT, { hMem: HLOCAL } ],
  LocalFree: [ HLOCAL, { hMem: HLOCAL } ],
  LocalShrink: [ SIZE_T, { hMem: HLOCAL, cbNewSize: UINT } ],
  LocalCompact: [ SIZE_T, { uMinFree: UINT } ],
  FlushInstructionCache: [ BOOL, { hProcess: HANDLE, lpBaseAddress: LPCVOID, dwSize: SIZE_T } ],
  FlushProcessWriteBuffers: [ _void, {  } ],
  QueryThreadCycleTime: [ BOOL, { ThreadHandle: HANDLE, CycleTime: PULONG64 } ],
  QueryProcessCycleTime: [ BOOL, { ProcessHandle: HANDLE, CycleTime: PULONG64 } ],
  QueryIdleProcessorCycleTime: [ BOOL, { BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64 } ],
  QueryIdleProcessorCycleTimeEx: [ BOOL, { Group: USHORT, BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64 } ],
  QueryUnbiasedInterruptTime: [ BOOL, { UnbiasedTime: PULONGLONG } ],
  GetProcessorSystemCycleTime: [ BOOL, { Group: USHORT, Buffer: PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, ReturnedLength: PDWORD } ],
  VirtualAlloc: [ LPVOID, { lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD } ],
  VirtualFree: [ BOOL, { lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD } ],
  VirtualProtect: [ BOOL, { lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD } ],
  VirtualQuery: [ SIZE_T, { lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T } ],
  VirtualAllocEx: [ LPVOID, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD } ],
  VirtualAllocExNuma: [ LPVOID, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD, nndPreferred: DWORD } ],
  GetWriteWatch: [ UINT, { dwFlags: DWORD, lpBaseAddress: PVOID, dwRegionSize: SIZE_T, lpAddresses: PVOID.Δ, lpdwCount: ULONG_PTR.Δ, lpdwGranularity: PULONG } ],
  ResetWriteWatch: [ UINT, { lpBaseAddress: LPVOID, dwRegionSize: SIZE_T } ],
  GetLargePageMinimum: [ SIZE_T, {  } ],
  EnumSystemFirmwareTables: [ UINT, { FirmwareTableProviderSignature: DWORD, pFirmwareTableEnumBuffer: PVOID, BufferSize: DWORD } ],
  GetSystemFirmwareTable: [ UINT, { FirmwareTableProviderSignature: DWORD, FirmwareTableID: DWORD, pFirmwareTableBuffer: PVOID, BufferSize: DWORD } ],
  GetPhysicallyInstalledSystemMemory: [ BOOL, { TotalMemoryInKilobytes: PULONGLONG } ],
  VirtualFreeEx: [ BOOL, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD } ],
  VirtualProtectEx: [ BOOL, { hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD } ],
  VirtualQueryEx: [ SIZE_T, { hProcess: HANDLE, lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T } ],
  HeapCreate: [ HANDLE, { flOptions: DWORD, dwInitialSize: SIZE_T, dwMaximumSize: SIZE_T } ],
  HeapDestroy: [ BOOL, { hHeap: HANDLE } ],
  HeapAlloc: [ LPVOID, { hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T } ],
  HeapReAlloc: [ LPVOID, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T } ],
  HeapFree: [ BOOL, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID } ],
  HeapSize: [ SIZE_T, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID } ],
  HeapValidate: [ BOOL, { hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID } ],
  HeapCompact: [ SIZE_T, { hHeap: HANDLE, dwFlags: DWORD } ],
  GetProcessHeap: [ HANDLE, {  } ],
  GetProcessHeaps: [ DWORD, { NumberOfHeaps: DWORD, ProcessHeaps: PHANDLE } ],
  HeapLock: [ BOOL, { hHeap: HANDLE } ],
  HeapUnlock: [ BOOL, { hHeap: HANDLE } ],
  HeapWalk: [ BOOL, { hHeap: HANDLE, lpEntry: LPPROCESS_HEAP_ENTRY } ],
  HeapSetInformation: [ BOOL, { HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T } ],
  HeapQueryInformation: [ BOOL, { HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T, ReturnLength: PSIZE_T } ],
  GetBinaryTypeA: [ BOOL, { lpApplicationName: LPCSTR, lpBinaryType: LPDWORD } ],
  GetBinaryTypeW: [ BOOL, { lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD } ],
  GetShortPathNameA: [ DWORD, { lpszLongPath: LPCSTR, lpszShortPath: LPSTR, cchBuffer: DWORD } ],
  GetShortPathNameW: [ DWORD, { lpszLongPath: LPCWSTR, lpszShortPath: LPWSTR, cchBuffer: DWORD } ],
  GetLongPathNameA: [ DWORD, { lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD } ],
  GetLongPathNameW: [ DWORD, { lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD } ],
  GetLongPathNameTransactedA: [ DWORD, { lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD, hTransaction: HANDLE } ],
  GetLongPathNameTransactedW: [ DWORD, { lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD, hTransaction: HANDLE } ],
  GetProcessAffinityMask: [ BOOL, { hProcess: HANDLE, lpProcessAffinityMask: PDWORD_PTR, lpSystemAffinityMask: PDWORD_PTR } ],
  SetProcessAffinityMask: [ BOOL, { hProcess: HANDLE, dwProcessAffinityMask: DWORD_PTR } ],
  GetProcessGroupAffinity: [ BOOL, { hProcess: HANDLE, GroupCount: PUSHORT, GroupArray: PUSHORT } ],
  GetProcessHandleCount: [ BOOL, { hProcess: HANDLE, pdwHandleCount: PDWORD } ],
  GetProcessTimes: [ BOOL, { hProcess: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetProcessIoCounters: [ BOOL, { hProcess: HANDLE, lpIoCounters: PIO_COUNTERS } ],
  GetProcessWorkingSetSize: [ BOOL, { hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T } ],
  GetProcessWorkingSetSizeEx: [ BOOL, { hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T, Flags: PDWORD } ],
  SetProcessWorkingSetSize: [ BOOL, { hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T } ],
  SetProcessWorkingSetSizeEx: [ BOOL, { hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T, Flags: DWORD } ],
  SetProcessAffinityUpdateMode: [ BOOL, { hProcess: HANDLE, dwFlags: DWORD } ],
  QueryProcessAffinityUpdateMode: [ BOOL, { hProcess: HANDLE, lpdwFlags: LPDWORD } ],
  OpenProcess: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD } ],
  GetCurrentProcess: [ HANDLE, {  } ],
  GetCurrentProcessId: [ DWORD, {  } ],
  ExitProcess: [ _void, { uExitCode: UINT } ],
  TerminateProcess: [ BOOL, { hProcess: HANDLE, uExitCode: UINT } ],
  GetExitCodeProcess: [ BOOL, { hProcess: HANDLE, lpExitCode: LPDWORD } ],
  FatalExit: [ _void, { ExitCode: int } ],
  GetEnvironmentStrings: [ LPCH, {  } ],
  GetEnvironmentStringsW: [ LPWCH, {  } ],
  SetEnvironmentStringsA: [ BOOL, { NewEnvironment: LPCH } ],
  SetEnvironmentStringsW: [ BOOL, { NewEnvironment: LPWCH } ],
  FreeEnvironmentStringsA: [ BOOL, { LPCH: LPCH } ],
  FreeEnvironmentStringsW: [ BOOL, { LPWCH: LPWCH } ],
  RaiseException: [ _void, { dwExceptionCode: DWORD, dwExceptionFlags: DWORD, nNumberOfArguments: DWORD, lpArguments: ULONG_PTR.Δ } ],
  RaiseFailFastException: [ _void, { pExceptionRecord: PEXCEPTION_RECORD, pContextRecord: PCONTEXT, dwFlags: DWORD } ],
  UnhandledExceptionFilter: [ LONG, { ExceptionInfo: _EXCEPTION_POINTERS.Δ } ],
  SetUnhandledExceptionFilter: [ LPTOP_LEVEL_EXCEPTION_FILTER, { lpTopLevelExceptionFilter: LPTOP_LEVEL_EXCEPTION_FILTER } ],
  CreateFiber: [ LPVOID, { dwStackSize: SIZE_T, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID } ],
  CreateFiberEx: [ LPVOID, { dwStackCommitSize: SIZE_T, dwStackReserveSize: SIZE_T, dwFlags: DWORD, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID } ],
  DeleteFiber: [ _void, { lpFiber: LPVOID } ],
  ConvertThreadToFiber: [ LPVOID, { lpParameter: LPVOID } ],
  ConvertThreadToFiberEx: [ LPVOID, { lpParameter: LPVOID, dwFlags: DWORD } ],
  ConvertFiberToThread: [ BOOL, {  } ],
  IsThreadAFiber: [ BOOL, {  } ],
  SwitchToFiber: [ _void, { lpFiber: LPVOID } ],
  SwitchToThread: [ BOOL, {  } ],
  CreateUmsCompletionList: [ BOOL, { UmsCompletionList: PUMS_COMPLETION_LIST.Δ } ],
  DequeueUmsCompletionListItems: [ BOOL, { UmsCompletionList: PUMS_COMPLETION_LIST, WaitTimeOut: DWORD, UmsThreadList: PUMS_CONTEXT.Δ } ],
  GetUmsCompletionListEvent: [ BOOL, { UmsCompletionList: PUMS_COMPLETION_LIST, UmsCompletionEvent: PHANDLE } ],
  ExecuteUmsThread: [ BOOL, { UmsThread: PUMS_CONTEXT } ],
  UmsThreadYield: [ BOOL, { SchedulerParam: PVOID } ],
  DeleteUmsCompletionList: [ BOOL, { UmsCompletionList: PUMS_COMPLETION_LIST } ],
  GetCurrentUmsThread: [ PUMS_CONTEXT, {  } ],
  GetNextUmsListItem: [ PUMS_CONTEXT, { UmsContext: PUMS_CONTEXT } ],
  QueryUmsThreadInformation: [ BOOL, { UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG, ReturnLength: PULONG } ],
  SetUmsThreadInformation: [ BOOL, { UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG } ],
  DeleteUmsThreadContext: [ BOOL, { UmsThread: PUMS_CONTEXT } ],
  CreateUmsThreadContext: [ BOOL, { lpUmsThread: PUMS_CONTEXT.Δ } ],
  EnterUmsSchedulingMode: [ BOOL, { SchedulerStartupInfo: PUMS_SCHEDULER_STARTUP_INFO } ],
  CreateThread: [ HANDLE, { lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD } ],
  CreateRemoteThread: [ HANDLE, { hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD } ],
  CreateRemoteThreadEx: [ HANDLE, { hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, lpThreadId: LPDWORD } ],
  GetCurrentThread: [ HANDLE, {  } ],
  GetCurrentThreadId: [ DWORD, {  } ],
  SetThreadStackGuarantee: [ BOOL, { StackSizeInBytes: PULONG } ],
  GetProcessIdOfThread: [ DWORD, { Thread: HANDLE } ],
  GetThreadId: [ DWORD, { Thread: HANDLE } ],
  GetProcessId: [ DWORD, { Process: HANDLE } ],
  GetCurrentProcessorNumber: [ DWORD, {  } ],
  GetCurrentProcessorNumberEx: [ _void, { ProcNumber: PPROCESSOR_NUMBER } ],
  GetThreadGroupAffinity: [ BOOL, { hThread: HANDLE, GroupAffinity: PGROUP_AFFINITY } ],
  SetThreadAffinityMask: [ DWORD_PTR, { hThread: HANDLE, dwThreadAffinityMask: DWORD_PTR } ],
  SetThreadGroupAffinity: [ BOOL, { hThread: HANDLE, GroupAffinity: GROUP_AFFINITY.Δ, PreviousGroupAffinity: PGROUP_AFFINITY } ],
  SetThreadIdealProcessorEx: [ BOOL, { hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER, lpPreviousIdealProcessor: PPROCESSOR_NUMBER } ],
  GetThreadIdealProcessorEx: [ BOOL, { hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER } ],
  SetThreadIdealProcessor: [ DWORD, { hThread: HANDLE, dwIdealProcessor: DWORD } ],
  SetProcessDEPPolicy: [ BOOL, { dwFlags: DWORD } ],
  GetProcessDEPPolicy: [ BOOL, { hProcess: HANDLE, lpFlags: LPDWORD, lpPermanent: PBOOL } ],
  SetProcessPriorityBoost: [ BOOL, { hProcess: HANDLE, bDisablePriorityBoost: BOOL } ],
  GetProcessPriorityBoost: [ BOOL, { hProcess: HANDLE, pDisablePriorityBoost: PBOOL } ],
  RequestWakeupLatency: [ BOOL, { latency: LATENCY_TIME } ],
  IsSystemResumeAutomatic: [ BOOL, {  } ],
  OpenThread: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwThreadId: DWORD } ],
  SetThreadPriority: [ BOOL, { hThread: HANDLE, nPriority: int } ],
  SetThreadPriorityBoost: [ BOOL, { hThread: HANDLE, bDisablePriorityBoost: BOOL } ],
  GetThreadPriorityBoost: [ BOOL, { hThread: HANDLE, pDisablePriorityBoost: PBOOL } ],
  GetThreadPriority: [ _void, { hThread: HANDLE } ],
  GetThreadTimes: [ BOOL, { hThread: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetThreadIOPendingFlag: [ BOOL, { hThread: HANDLE, lpIOIsPending: PBOOL } ],
  ExitThread: [ _void, { dwExitCode: DWORD } ],
  TerminateThread: [ BOOL, { hThread: HANDLE, dwExitCode: DWORD } ],
  GetExitCodeThread: [ BOOL, { hThread: HANDLE, lpExitCode: LPDWORD } ],
  GetThreadSelectorEntry: [ BOOL, { hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: LPLDT_ENTRY } ],
  SetThreadExecutionState: [ EXECUTION_STATE, { esFlags: EXECUTION_STATE } ],
  PowerCreateRequest: [ HANDLE, { Context: PREASON_CONTEXT } ],
  PowerSetRequest: [ BOOL, { PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE } ],
  PowerClearRequest: [ BOOL, { PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE } ],
  GetLastError: [ DWORD, {  } ],
  SetLastError: [ _void, { dwErrCode: DWORD } ],
  GetOverlappedResult: [ BOOL, { hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: BOOL } ],
  CreateIoCompletionPort: [ HANDLE, { FileHandle: HANDLE, ExistingCompletionPort: HANDLE, CompletionKey: ULONG_PTR, NumberOfConcurrentThreads: DWORD } ],
  GetQueuedCompletionStatus: [ BOOL, { CompletionPort: HANDLE, lpNumberOfBytesTransferred: LPDWORD, lpCompletionKey: PULONG_PTR, lpOverlapped: LPOVERLAPPED.Δ, dwMilliseconds: DWORD } ],
  GetQueuedCompletionStatusEx: [ BOOL, { CompletionPort: HANDLE, lpCompletionPortEntries: LPOVERLAPPED_ENTRY, ulCount: ULONG, ulNumEntriesRemoved: PULONG, dwMilliseconds: DWORD, fAlertable: BOOL } ],
  PostQueuedCompletionStatus: [ BOOL, { CompletionPort: HANDLE, dwNumberOfBytesTransferred: DWORD, dwCompletionKey: ULONG_PTR, lpOverlapped: LPOVERLAPPED } ],
  SetFileCompletionNotificationModes: [ BOOL, { FileHandle: HANDLE, Flags: UCHAR } ],
  SetFileIoOverlappedRange: [ BOOL, { FileHandle: HANDLE, OverlappedRangeStart: PUCHAR, Length: ULONG } ],
  GetErrorMode: [ UINT, {  } ],
  SetErrorMode: [ UINT, { uMode: UINT } ],
  GetThreadErrorMode: [ DWORD, {  } ],
  SetThreadErrorMode: [ BOOL, { dwNewMode: DWORD, lpOldMode: LPDWORD } ],
  ReadProcessMemory: [ BOOL, { hProcess: HANDLE, lpBaseAddress: LPCVOID, lpBuffer: LPVOID, nSize: SIZE_T, lpNumberOfBytesRead: SIZE_T.Δ } ],
  WriteProcessMemory: [ BOOL, { hProcess: HANDLE, lpBaseAddress: LPVOID, lpBuffer: LPCVOID, nSize: SIZE_T, lpNumberOfBytesWritten: SIZE_T.Δ } ],
  GetThreadContext: [ BOOL, { hThread: HANDLE, lpContext: LPCONTEXT } ],
  SetThreadContext: [ BOOL, { hThread: HANDLE, lpContext: CONTEXT.Δ } ],
  Wow64GetThreadContext: [ BOOL, { hThread: HANDLE, lpContext: PWOW64_CONTEXT } ],
  Wow64GetThreadSelectorEntry: [ BOOL, { hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: PWOW64_LDT_ENTRY } ],
  Wow64SetThreadContext: [ BOOL, { hThread: HANDLE, lpContext: WOW64_CONTEXT.Δ } ],
  SuspendThread: [ DWORD, { hThread: HANDLE } ],
  Wow64SuspendThread: [ DWORD, { hThread: HANDLE } ],
  ResumeThread: [ DWORD, { hThread: HANDLE } ],
  QueueUserAPC: [ DWORD, { pfnAPC: PAPCFUNC, hThread: HANDLE, dwData: ULONG_PTR } ],
  IsDebuggerPresent: [ BOOL, {  } ],
  CheckRemoteDebuggerPresent: [ BOOL, { hProcess: HANDLE, pbDebuggerPresent: PBOOL } ],
  DebugBreak: [ _void, {  } ],
  WaitForDebugEvent: [ BOOL, { lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD } ],
  ContinueDebugEvent: [ BOOL, { dwProcessId: DWORD, dwThreadId: DWORD, dwContinueStatus: DWORD } ],
  DebugActiveProcess: [ BOOL, { dwProcessId: DWORD } ],
  DebugActiveProcessStop: [ BOOL, { dwProcessId: DWORD } ],
  DebugSetProcessKillOnExit: [ BOOL, { KillOnExit: BOOL } ],
  DebugBreakProcess: [ BOOL, { Process: HANDLE } ],
  InitializeCriticalSection: [ _void, { lpCriticalSection: LPCRITICAL_SECTION } ],
  EnterCriticalSection: [ _void, { lpCriticalSection: LPCRITICAL_SECTION } ],
  LeaveCriticalSection: [ _void, { lpCriticalSection: LPCRITICAL_SECTION } ],
  InitializeCriticalSectionAndSpinCount: [ BOOL, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD } ],
  InitializeCriticalSectionEx: [ BOOL, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD, Flags: DWORD } ],
  SetCriticalSectionSpinCount: [ DWORD, { lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD } ],
  TryEnterCriticalSection: [ BOOL, { lpCriticalSection: LPCRITICAL_SECTION } ],
  DeleteCriticalSection: [ _void, { lpCriticalSection: LPCRITICAL_SECTION } ],
  SetEvent: [ BOOL, { hEvent: HANDLE } ],
  ResetEvent: [ BOOL, { hEvent: HANDLE } ],
  PulseEvent: [ BOOL, { hEvent: HANDLE } ],
  ReleaseSemaphore: [ BOOL, { hSemaphore: HANDLE, lReleaseCount: LONG, lpPreviousCount: LPLONG } ],
  ReleaseMutex: [ BOOL, { hMutex: HANDLE } ],
  WaitForSingleObject: [ DWORD, { hHandle: HANDLE, dwMilliseconds: DWORD } ],
  WaitForMultipleObjects: [ DWORD, { nCount: DWORD, lpHandles: HANDLE.Δ, bWaitAll: BOOL, dwMilliseconds: DWORD } ],
  Sleep: [ _void, { dwMilliseconds: DWORD } ],
  LoadResource: [ HGLOBAL, { hModule: HMODULE, hResInfo: HRSRC } ],
  SizeofResource: [ DWORD, { hModule: HMODULE, hResInfo: HRSRC } ],
  GlobalDeleteAtom: [ ATOM, { nAtom: ATOM } ],
  InitAtomTable: [ BOOL, { nSize: DWORD } ],
  DeleteAtom: [ ATOM, { nAtom: ATOM } ],
  SetHandleCount: [ UINT, { uNumber: UINT } ],
  GetLogicalDrives: [ DWORD, {  } ],
  LockFile: [ BOOL, { hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD } ],
  UnlockFile: [ BOOL, { hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD } ],
  LockFileEx: [ BOOL, { hFile: HANDLE, dwFlags: DWORD, dwReserved: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD, lpOverlapped: LPOVERLAPPED } ],
  UnlockFileEx: [ BOOL, { hFile: HANDLE, dwReserved: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD, lpOverlapped: LPOVERLAPPED } ],
  GetFileInformationByHandle: [ BOOL, { hFile: HANDLE, lpFileInformation: LPBY_HANDLE_FILE_INFORMATION } ],
  GetFileType: [ DWORD, { hFile: HANDLE } ],
  GetFileSize: [ DWORD, { hFile: HANDLE, lpFileSizeHigh: LPDWORD } ],
  GetFileSizeEx: [ BOOL, { hFile: HANDLE, lpFileSize: PLARGE_INTEGER } ],
  GetStdHandle: [ HANDLE, { nStdHandle: DWORD } ],
  SetStdHandle: [ BOOL, { nStdHandle: DWORD, hHandle: HANDLE } ],
  SetStdHandleEx: [ BOOL, { nStdHandle: DWORD, hHandle: HANDLE, phPrevValue: PHANDLE } ],
  WriteFile: [ BOOL, { hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  ReadFile: [ BOOL, { hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  FlushFileBuffers: [ BOOL, { hFile: HANDLE } ],
  DeviceIoControl: [ BOOL, { hDevice: HANDLE, dwIoControlCode: DWORD, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  RequestDeviceWakeup: [ BOOL, { hDevice: HANDLE } ],
  CancelDeviceWakeupRequest: [ BOOL, { hDevice: HANDLE } ],
  GetDevicePowerState: [ BOOL, { hDevice: HANDLE, pfOn: BOOL.Δ } ],
  SetMessageWaitingIndicator: [ BOOL, { hMsgIndicator: HANDLE, ulMsgCount: ULONG } ],
  SetEndOfFile: [ BOOL, { hFile: HANDLE } ],
  SetFilePointer: [ DWORD, { hFile: HANDLE, lDistanceToMove: LONG, lpDistanceToMoveHigh: PLONG, dwMoveMethod: DWORD } ],
  SetFilePointerEx: [ BOOL, { hFile: HANDLE, liDistanceToMove: LARGE_INTEGER, lpNewFilePointer: PLARGE_INTEGER, dwMoveMethod: DWORD } ],
  FindClose: [ BOOL, { hFindFile: HANDLE } ],
  GetFileTime: [ BOOL, { hFile: HANDLE, lpCreationTime: LPFILETIME, lpLastAccessTime: LPFILETIME, lpLastWriteTime: LPFILETIME } ],
  SetFileTime: [ BOOL, { hFile: HANDLE, lpCreationTime: FILETIME.Δ, lpLastAccessTime: FILETIME.Δ, lpLastWriteTime: FILETIME.Δ } ],
  SetFileValidData: [ BOOL, { hFile: HANDLE, ValidDataLength: LONGLONG } ],
  SetFileShortNameA: [ BOOL, { hFile: HANDLE, lpShortName: LPCSTR } ],
  SetFileShortNameW: [ BOOL, { hFile: HANDLE, lpShortName: LPCWSTR } ],
  CloseHandle: [ BOOL, { hObject: HANDLE } ],
  DuplicateHandle: [ BOOL, { hSourceProcessHandle: HANDLE, hSourceHandle: HANDLE, hTargetProcessHandle: HANDLE, lpTargetHandle: LPHANDLE, dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwOptions: DWORD } ],
  GetHandleInformation: [ BOOL, { hObject: HANDLE, lpdwFlags: LPDWORD } ],
  SetHandleInformation: [ BOOL, { hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD } ],
  LoadModule: [ DWORD, { lpModuleName: LPCSTR, lpParameterBlock: LPVOID } ],
  WinExec: [ UINT, { lpCmdLine: LPCSTR, uCmdShow: UINT } ],
  ClearCommBreak: [ BOOL, { hFile: HANDLE } ],
  ClearCommError: [ BOOL, { hFile: HANDLE, lpErrors: LPDWORD, lpStat: LPCOMSTAT } ],
  SetupComm: [ BOOL, { hFile: HANDLE, dwInQueue: DWORD, dwOutQueue: DWORD } ],
  EscapeCommFunction: [ BOOL, { hFile: HANDLE, dwFunc: DWORD } ],
  GetCommConfig: [ BOOL, { hCommDev: HANDLE, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  GetCommMask: [ BOOL, { hFile: HANDLE, lpEvtMask: LPDWORD } ],
  GetCommProperties: [ BOOL, { hFile: HANDLE, lpCommProp: LPCOMMPROP } ],
  GetCommModemStatus: [ BOOL, { hFile: HANDLE, lpModemStat: LPDWORD } ],
  GetCommState: [ BOOL, { hFile: HANDLE, lpDCB: LPDCB } ],
  GetCommTimeouts: [ BOOL, { hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  PurgeComm: [ BOOL, { hFile: HANDLE, dwFlags: DWORD } ],
  SetCommBreak: [ BOOL, { hFile: HANDLE } ],
  SetCommConfig: [ BOOL, { hCommDev: HANDLE, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  SetCommMask: [ BOOL, { hFile: HANDLE, dwEvtMask: DWORD } ],
  SetCommState: [ BOOL, { hFile: HANDLE, lpDCB: LPDCB } ],
  SetCommTimeouts: [ BOOL, { hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  TransmitCommChar: [ BOOL, { hFile: HANDLE, cChar: char } ],
  WaitCommEvent: [ BOOL, { hFile: HANDLE, lpEvtMask: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  SetTapePosition: [ DWORD, { hDevice: HANDLE, dwPositionMethod: DWORD, dwPartition: DWORD, dwOffsetLow: DWORD, dwOffsetHigh: DWORD, bImmediate: BOOL } ],
  GetTapePosition: [ DWORD, { hDevice: HANDLE, dwPositionType: DWORD, lpdwPartition: LPDWORD, lpdwOffsetLow: LPDWORD, lpdwOffsetHigh: LPDWORD } ],
  PrepareTape: [ DWORD, { hDevice: HANDLE, dwOperation: DWORD, bImmediate: BOOL } ],
  EraseTape: [ DWORD, { hDevice: HANDLE, dwEraseType: DWORD, bImmediate: BOOL } ],
  CreateTapePartition: [ DWORD, { hDevice: HANDLE, dwPartitionMethod: DWORD, dwCount: DWORD, dwSize: DWORD } ],
  WriteTapemark: [ DWORD, { hDevice: HANDLE, dwTapemarkType: DWORD, dwTapemarkCount: DWORD, bImmediate: BOOL } ],
  GetTapeStatus: [ DWORD, { hDevice: HANDLE } ],
  GetTapeParameters: [ DWORD, { hDevice: HANDLE, dwOperation: DWORD, lpdwSize: LPDWORD, lpTapeInformation: LPVOID } ],
  SetTapeParameters: [ DWORD, { hDevice: HANDLE, dwOperation: DWORD, lpTapeInformation: LPVOID } ],
  Beep: [ BOOL, { dwFreq: DWORD, dwDuration: DWORD } ],
  MulDiv: [ _void, { nNumber: int, nNumerator: int, nDenominator: int } ],
  GetSystemTime: [ _void, { lpSystemTime: LPSYSTEMTIME } ],
  GetSystemTimeAsFileTime: [ _void, { lpSystemTimeAsFileTime: LPFILETIME } ],
  SetSystemTime: [ BOOL, { lpSystemTime: SYSTEMTIME.Δ } ],
  GetLocalTime: [ _void, { lpSystemTime: LPSYSTEMTIME } ],
  SetLocalTime: [ BOOL, { lpSystemTime: SYSTEMTIME.Δ } ],
  GetSystemInfo: [ _void, { lpSystemInfo: LPSYSTEM_INFO } ],
  GetSystemDEPPolicy: [ DEP_SYSTEM_POLICY_TYPE, {  } ],
  SetSystemFileCacheSize: [ BOOL, { MinimumFileCacheSize: SIZE_T, MaximumFileCacheSize: SIZE_T, Flags: DWORD } ],
  GetSystemFileCacheSize: [ BOOL, { lpMinimumFileCacheSize: PSIZE_T, lpMaximumFileCacheSize: PSIZE_T, lpFlags: PDWORD } ],
  GetSystemRegistryQuota: [ BOOL, { pdwQuotaAllowed: PDWORD, pdwQuotaUsed: PDWORD } ],
  GetSystemTimes: [ BOOL, { lpIdleTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME } ],
  GetNativeSystemInfo: [ _void, { lpSystemInfo: LPSYSTEM_INFO } ],
  IsProcessorFeaturePresent: [ BOOL, { ProcessorFeature: DWORD } ],
  SystemTimeToTzSpecificLocalTime: [ BOOL, { lpTimeZoneInformation: TIME_ZONE_INFORMATION.Δ, lpUniversalTime: SYSTEMTIME.Δ, lpLocalTime: LPSYSTEMTIME } ],
  TzSpecificLocalTimeToSystemTime: [ BOOL, { lpTimeZoneInformation: TIME_ZONE_INFORMATION.Δ, lpLocalTime: SYSTEMTIME.Δ, lpUniversalTime: LPSYSTEMTIME } ],
  GetTimeZoneInformationForYear: [ BOOL, { wYear: USHORT, pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION, ptzi: LPTIME_ZONE_INFORMATION } ],
  GetTimeZoneInformation: [ DWORD, { lpTimeZoneInformation: LPTIME_ZONE_INFORMATION } ],
  SetTimeZoneInformation: [ BOOL, { lpTimeZoneInformation: TIME_ZONE_INFORMATION.Δ } ],
  GetDynamicTimeZoneInformation: [ DWORD, { pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION } ],
  SetDynamicTimeZoneInformation: [ BOOL, { lpTimeZoneInformation: DYNAMIC_TIME_ZONE_INFORMATION.Δ } ],
  SystemTimeToFileTime: [ BOOL, { lpSystemTime: SYSTEMTIME.Δ, lpFileTime: LPFILETIME } ],
  FileTimeToLocalFileTime: [ BOOL, { lpFileTime: FILETIME.Δ, lpLocalFileTime: LPFILETIME } ],
  LocalFileTimeToFileTime: [ BOOL, { lpLocalFileTime: FILETIME.Δ, lpFileTime: LPFILETIME } ],
  FileTimeToSystemTime: [ BOOL, { lpFileTime: FILETIME.Δ, lpSystemTime: LPSYSTEMTIME } ],
  CompareFileTime: [ LONG, { lpFileTime1: FILETIME.Δ, lpFileTime2: FILETIME.Δ } ],
  FileTimeToDosDateTime: [ BOOL, { lpFileTime: FILETIME.Δ, lpFatDate: LPWORD, lpFatTime: LPWORD } ],
  DosDateTimeToFileTime: [ BOOL, { wFatDate: WORD, wFatTime: WORD, lpFileTime: LPFILETIME } ],
  GetTickCount: [ DWORD, {  } ],
  GetTickCount64: [ ULONGLONG, {  } ],
  SetSystemTimeAdjustment: [ BOOL, { dwTimeAdjustment: DWORD, bTimeAdjustmentDisabled: BOOL } ],
  GetSystemTimeAdjustment: [ BOOL, { lpTimeAdjustment: PDWORD, lpTimeIncrement: PDWORD, lpTimeAdjustmentDisabled: PBOOL } ],
  FormatMessageA: [ DWORD, { dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPSTR, nSize: DWORD, Arguments: va_list.Δ } ],
  FormatMessageW: [ DWORD, { dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPWSTR, nSize: DWORD, Arguments: va_list.Δ } ],
  CreatePipe: [ BOOL, { hReadPipe: PHANDLE, hWritePipe: PHANDLE, lpPipeAttributes: LPSECURITY_ATTRIBUTES, nSize: DWORD } ],
  ConnectNamedPipe: [ BOOL, { hNamedPipe: HANDLE, lpOverlapped: LPOVERLAPPED } ],
  DisconnectNamedPipe: [ BOOL, { hNamedPipe: HANDLE } ],
  SetNamedPipeHandleState: [ BOOL, { hNamedPipe: HANDLE, lpMode: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD } ],
  GetNamedPipeInfo: [ BOOL, { hNamedPipe: HANDLE, lpFlags: LPDWORD, lpOutBufferSize: LPDWORD, lpInBufferSize: LPDWORD, lpMaxInstances: LPDWORD } ],
  PeekNamedPipe: [ BOOL, { hNamedPipe: HANDLE, lpBuffer: LPVOID, nBufferSize: DWORD, lpBytesRead: LPDWORD, lpTotalBytesAvail: LPDWORD, lpBytesLeftThisMessage: LPDWORD } ],
  TransactNamedPipe: [ BOOL, { hNamedPipe: HANDLE, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  CreateMailslotA: [ HANDLE, { lpName: LPCSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateMailslotW: [ HANDLE, { lpName: LPCWSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetMailslotInfo: [ BOOL, { hMailslot: HANDLE, lpMaxMessageSize: LPDWORD, lpNextSize: LPDWORD, lpMessageCount: LPDWORD, lpReadTimeout: LPDWORD } ],
  SetMailslotInfo: [ BOOL, { hMailslot: HANDLE, lReadTimeout: DWORD } ],
  MapViewOfFile: [ LPVOID, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T } ],
  FlushViewOfFile: [ BOOL, { lpBaseAddress: LPCVOID, dwNumberOfBytesToFlush: SIZE_T } ],
  UnmapViewOfFile: [ BOOL, { lpBaseAddress: LPCVOID } ],
  EncryptFileA: [ BOOL, { lpFileName: LPCSTR } ],
  EncryptFileW: [ BOOL, { lpFileName: LPCWSTR } ],
  DecryptFileA: [ BOOL, { lpFileName: LPCSTR, dwReserved: DWORD } ],
  DecryptFileW: [ BOOL, { lpFileName: LPCWSTR, dwReserved: DWORD } ],
  FileEncryptionStatusA: [ BOOL, { lpFileName: LPCSTR, lpStatus: LPDWORD } ],
  FileEncryptionStatusW: [ BOOL, { lpFileName: LPCWSTR, lpStatus: LPDWORD } ],
  OpenEncryptedFileRawA: [ DWORD, { lpFileName: LPCSTR, ulFlags: ULONG, pvContext: PVOID.Δ } ],
  OpenEncryptedFileRawW: [ DWORD, { lpFileName: LPCWSTR, ulFlags: ULONG, pvContext: PVOID.Δ } ],
  ReadEncryptedFileRaw: [ DWORD, { pfExportCallback: PFE_EXPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID } ],
  WriteEncryptedFileRaw: [ DWORD, { pfImportCallback: PFE_IMPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID } ],
  CloseEncryptedFileRaw: [ _void, { pvContext: PVOID } ],
  lstrcmpA: [ _void, { lpString1: LPCSTR, lpString2: LPCSTR } ],
  lstrcmpW: [ _void, { lpString1: LPCWSTR, lpString2: LPCWSTR } ],
  lstrcmpiA: [ _void, { lpString1: LPCSTR, lpString2: LPCSTR } ],
  lstrcmpiW: [ _void, { lpString1: LPCWSTR, lpString2: LPCWSTR } ],
  lstrcpynA: [ LPSTR, { lpString1: LPSTR, lpString2: LPCSTR, iMaxLength: int } ],
  lstrcpynW: [ LPWSTR, { lpString1: LPWSTR, lpString2: LPCWSTR, iMaxLength: int } ],
  lstrcpyA: [ LPSTR, { lpString1: LPSTR, lpString2: LPCSTR } ],
  lstrcpyW: [ LPWSTR, { lpString1: LPWSTR, lpString2: LPCWSTR } ],
  lstrcatA: [ LPSTR, { lpString1: LPSTR, lpString2: LPCSTR } ],
  lstrcatW: [ LPWSTR, { lpString1: LPWSTR, lpString2: LPCWSTR } ],
  lstrlenA: [ _void, { lpString: LPCSTR } ],
  lstrlenW: [ _void, { lpString: LPCWSTR } ],
  OpenFile: [ HFILE, { lpFileName: LPCSTR, lpReOpenBuff: LPOFSTRUCT, uStyle: UINT } ],
  _lopen: [ HFILE, { lpPathName: LPCSTR, iReadWrite: int } ],
  _lcreat: [ HFILE, { lpPathName: LPCSTR, iAttribute: int } ],
  _lread: [ UINT, { hFile: HFILE, lpBuffer: LPVOID, uBytes: UINT } ],
  _lwrite: [ UINT, { hFile: HFILE, lpBuffer: LPCCH, uBytes: UINT } ],
  _hread: [ _void, { hFile: HFILE, lpBuffer: LPVOID, lBytes: long } ],
  _hwrite: [ _void, { hFile: HFILE, lpBuffer: LPCCH, lBytes: long } ],
  _lclose: [ HFILE, { hFile: HFILE } ],
  _llseek: [ LONG, { hFile: HFILE, lOffset: LONG, iOrigin: int } ],
  IsTextUnicode: [ BOOL, { lpv: _void.Δ, iSize: int, lpiResult: LPINT } ],
  FlsAlloc: [ DWORD, { lpCallback: PFLS_CALLBACK_FUNCTION } ],
  FlsGetValue: [ PVOID, { dwFlsIndex: DWORD } ],
  FlsSetValue: [ BOOL, { dwFlsIndex: DWORD, lpFlsData: PVOID } ],
  FlsFree: [ BOOL, { dwFlsIndex: DWORD } ],
  TlsAlloc: [ DWORD, {  } ],
  TlsGetValue: [ LPVOID, { dwTlsIndex: DWORD } ],
  TlsSetValue: [ BOOL, { dwTlsIndex: DWORD, lpTlsValue: LPVOID } ],
  TlsFree: [ BOOL, { dwTlsIndex: DWORD } ],
  SleepEx: [ DWORD, { dwMilliseconds: DWORD, bAlertable: BOOL } ],
  WaitForSingleObjectEx: [ DWORD, { hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  WaitForMultipleObjectsEx: [ DWORD, { nCount: DWORD, lpHandles: HANDLE.Δ, bWaitAll: BOOL, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  SignalObjectAndWait: [ DWORD, { hObjectToSignal: HANDLE, hObjectToWaitOn: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL } ],
  ReadFileEx: [ BOOL, { hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  WriteFileEx: [ BOOL, { hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  BackupRead: [ BOOL, { hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: LPVOID.Δ } ],
  BackupSeek: [ BOOL, { hFile: HANDLE, dwLowBytesToSeek: DWORD, dwHighBytesToSeek: DWORD, lpdwLowByteSeeked: LPDWORD, lpdwHighByteSeeked: LPDWORD, lpContext: LPVOID.Δ } ],
  BackupWrite: [ BOOL, { hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: LPVOID.Δ } ],
  ReadFileScatter: [ BOOL, { hFile: HANDLE, aSegmentArray: FILE_SEGMENT_ELEMENT.Δ, nNumberOfBytesToRead: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  WriteFileGather: [ BOOL, { hFile: HANDLE, aSegmentArray: FILE_SEGMENT_ELEMENT.Δ, nNumberOfBytesToWrite: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  CreateMutexA: [ HANDLE, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCSTR } ],
  CreateMutexW: [ HANDLE, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCWSTR } ],
  OpenMutexA: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenMutexW: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateEventA: [ HANDLE, { lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCSTR } ],
  CreateEventW: [ HANDLE, { lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCWSTR } ],
  OpenEventA: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenEventW: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateSemaphoreA: [ HANDLE, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR } ],
  CreateSemaphoreW: [ HANDLE, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR } ],
  OpenSemaphoreA: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenSemaphoreW: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  CreateWaitableTimerA: [ HANDLE, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCSTR } ],
  CreateWaitableTimerW: [ HANDLE, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCWSTR } ],
  OpenWaitableTimerA: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCSTR } ],
  OpenWaitableTimerW: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCWSTR } ],
  SetWaitableTimerEx: [ BOOL, { hTimer: HANDLE, lpDueTime: LARGE_INTEGER.Δ, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, WakeContext: PREASON_CONTEXT, TolerableDelay: ULONG } ],
  SetWaitableTimer: [ BOOL, { hTimer: HANDLE, lpDueTime: LARGE_INTEGER.Δ, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, fResume: BOOL } ],
  CancelWaitableTimer: [ BOOL, { hTimer: HANDLE } ],
  CreateMutexExA: [ HANDLE, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateMutexExW: [ HANDLE, { lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateEventExA: [ HANDLE, { lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateEventExW: [ HANDLE, { lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateSemaphoreExA: [ HANDLE, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateSemaphoreExW: [ HANDLE, { lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateWaitableTimerExA: [ HANDLE, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateWaitableTimerExW: [ HANDLE, { lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD } ],
  CreateFileMappingA: [ HANDLE, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR } ],
  CreateFileMappingW: [ HANDLE, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR } ],
  CreateFileMappingNumaA: [ HANDLE, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR, nndPreferred: DWORD } ],
  CreateFileMappingNumaW: [ HANDLE, { hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR, nndPreferred: DWORD } ],
  OpenFileMappingA: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenFileMappingW: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  GetLogicalDriveStringsA: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetLogicalDriveStringsW: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  CreateMemoryResourceNotification: [ HANDLE, { NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE } ],
  QueryMemoryResourceNotification: [ BOOL, { ResourceNotificationHandle: HANDLE, ResourceState: PBOOL } ],
  LoadLibraryA: [ HMODULE, { lpLibFileName: LPCSTR } ],
  LoadLibraryW: [ HMODULE, { lpLibFileName: LPCWSTR } ],
  LoadLibraryExA: [ HMODULE, { lpLibFileName: LPCSTR, hFile: HANDLE, dwFlags: DWORD } ],
  LoadLibraryExW: [ HMODULE, { lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: DWORD } ],
  GetModuleFileNameA: [ DWORD, { hModule: HMODULE, lpFilename: LPSTR, nSize: DWORD } ],
  GetModuleFileNameW: [ DWORD, { hModule: HMODULE, lpFilename: LPWSTR, nSize: DWORD } ],
  GetModuleHandleA: [ HMODULE, { lpModuleName: LPCSTR } ],
  GetModuleHandleW: [ HMODULE, { lpModuleName: LPCWSTR } ],
  GetModuleHandleExA: [ BOOL, { dwFlags: DWORD, lpModuleName: LPCSTR, phModule: HMODULE.Δ } ],
  GetModuleHandleExW: [ BOOL, { dwFlags: DWORD, lpModuleName: LPCWSTR, phModule: HMODULE.Δ } ],
  NeedCurrentDirectoryForExePathA: [ BOOL, { ExeName: LPCSTR } ],
  NeedCurrentDirectoryForExePathW: [ BOOL, { ExeName: LPCWSTR } ],
  QueryFullProcessImageNameA: [ BOOL, { hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPSTR, lpdwSize: PDWORD } ],
  QueryFullProcessImageNameW: [ BOOL, { hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPWSTR, lpdwSize: PDWORD } ],
  InitializeProcThreadAttributeList: [ BOOL, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: DWORD, dwFlags: DWORD, lpSize: PSIZE_T } ],
  DeleteProcThreadAttributeList: [ _void, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST } ],
  UpdateProcThreadAttribute: [ BOOL, { lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwFlags: DWORD, Attribute: DWORD_PTR, lpValue: PVOID, cbSize: SIZE_T, lpPreviousValue: PVOID, lpReturnSize: PSIZE_T } ],
  CreateProcessA: [ BOOL, { lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessW: [ BOOL, { lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  SetProcessShutdownParameters: [ BOOL, { dwLevel: DWORD, dwFlags: DWORD } ],
  GetProcessShutdownParameters: [ BOOL, { lpdwLevel: LPDWORD, lpdwFlags: LPDWORD } ],
  GetProcessVersion: [ DWORD, { ProcessId: DWORD } ],
  FatalAppExitA: [ _void, { uAction: UINT, lpMessageText: LPCSTR } ],
  FatalAppExitW: [ _void, { uAction: UINT, lpMessageText: LPCWSTR } ],
  GetStartupInfoA: [ _void, { lpStartupInfo: LPSTARTUPINFOA } ],
  GetStartupInfoW: [ _void, { lpStartupInfo: LPSTARTUPINFOW } ],
  GetCommandLineA: [ LPSTR, {  } ],
  GetCommandLineW: [ LPWSTR, {  } ],
  GetEnvironmentVariableA: [ DWORD, { lpName: LPCSTR, lpBuffer: LPSTR, nSize: DWORD } ],
  GetEnvironmentVariableW: [ DWORD, { lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: DWORD } ],
  SetEnvironmentVariableA: [ BOOL, { lpName: LPCSTR, lpValue: LPCSTR } ],
  SetEnvironmentVariableW: [ BOOL, { lpName: LPCWSTR, lpValue: LPCWSTR } ],
  ExpandEnvironmentStringsA: [ DWORD, { lpSrc: LPCSTR, lpDst: LPSTR, nSize: DWORD } ],
  ExpandEnvironmentStringsW: [ DWORD, { lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD } ],
  GetFirmwareEnvironmentVariableA: [ DWORD, { lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: DWORD } ],
  GetFirmwareEnvironmentVariableW: [ DWORD, { lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: DWORD } ],
  SetFirmwareEnvironmentVariableA: [ BOOL, { lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: DWORD } ],
  SetFirmwareEnvironmentVariableW: [ BOOL, { lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: DWORD } ],
  OutputDebugStringA: [ _void, { lpOutputString: LPCSTR } ],
  OutputDebugStringW: [ _void, { lpOutputString: LPCWSTR } ],
  FindResourceA: [ HRSRC, { hModule: HMODULE, lpName: LPCSTR, lpType: LPCSTR } ],
  FindResourceW: [ HRSRC, { hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR } ],
  FindResourceExA: [ HRSRC, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD } ],
  FindResourceExW: [ HRSRC, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD } ],
  EnumResourceTypesA: [ BOOL, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR } ],
  EnumResourceTypesW: [ BOOL, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR } ],
  EnumResourceNamesA: [ BOOL, { hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR } ],
  EnumResourceNamesW: [ BOOL, { hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR } ],
  EnumResourceLanguagesA: [ BOOL, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR } ],
  EnumResourceLanguagesW: [ BOOL, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR } ],
  EnumResourceTypesExA: [ BOOL, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceTypesExW: [ BOOL, { hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceNamesExA: [ BOOL, { hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceNamesExW: [ BOOL, { hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceLanguagesExA: [ BOOL, { hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  EnumResourceLanguagesExW: [ BOOL, { hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID } ],
  BeginUpdateResourceA: [ HANDLE, { pFileName: LPCSTR, bDeleteExistingResources: BOOL } ],
  BeginUpdateResourceW: [ HANDLE, { pFileName: LPCWSTR, bDeleteExistingResources: BOOL } ],
  UpdateResourceA: [ BOOL, { hUpdate: HANDLE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD } ],
  UpdateResourceW: [ BOOL, { hUpdate: HANDLE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD } ],
  EndUpdateResourceA: [ BOOL, { hUpdate: HANDLE, fDiscard: BOOL } ],
  EndUpdateResourceW: [ BOOL, { hUpdate: HANDLE, fDiscard: BOOL } ],
  GlobalAddAtomA: [ ATOM, { lpString: LPCSTR } ],
  GlobalAddAtomW: [ ATOM, { lpString: LPCWSTR } ],
  GlobalFindAtomA: [ ATOM, { lpString: LPCSTR } ],
  GlobalFindAtomW: [ ATOM, { lpString: LPCWSTR } ],
  GlobalGetAtomNameA: [ UINT, { nAtom: ATOM, lpBuffer: LPSTR, nSize: int } ],
  GlobalGetAtomNameW: [ UINT, { nAtom: ATOM, lpBuffer: LPWSTR, nSize: int } ],
  AddAtomA: [ ATOM, { lpString: LPCSTR } ],
  AddAtomW: [ ATOM, { lpString: LPCWSTR } ],
  FindAtomA: [ ATOM, { lpString: LPCSTR } ],
  FindAtomW: [ ATOM, { lpString: LPCWSTR } ],
  GetAtomNameA: [ UINT, { nAtom: ATOM, lpBuffer: LPSTR, nSize: int } ],
  GetAtomNameW: [ UINT, { nAtom: ATOM, lpBuffer: LPWSTR, nSize: int } ],
  GetProfileIntA: [ UINT, { lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT } ],
  GetProfileIntW: [ UINT, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT } ],
  GetProfileStringA: [ DWORD, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD } ],
  GetProfileStringW: [ DWORD, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD } ],
  WriteProfileStringA: [ BOOL, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR } ],
  WriteProfileStringW: [ BOOL, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR } ],
  GetProfileSectionA: [ DWORD, { lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD } ],
  GetProfileSectionW: [ DWORD, { lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD } ],
  WriteProfileSectionA: [ BOOL, { lpAppName: LPCSTR, lpString: LPCSTR } ],
  WriteProfileSectionW: [ BOOL, { lpAppName: LPCWSTR, lpString: LPCWSTR } ],
  GetPrivateProfileIntA: [ UINT, { lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT, lpFileName: LPCSTR } ],
  GetPrivateProfileIntW: [ UINT, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT, lpFileName: LPCWSTR } ],
  GetPrivateProfileStringA: [ DWORD, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileStringW: [ DWORD, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  WritePrivateProfileStringA: [ BOOL, { lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR } ],
  WritePrivateProfileStringW: [ BOOL, { lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR } ],
  GetPrivateProfileSectionA: [ DWORD, { lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileSectionW: [ DWORD, { lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  WritePrivateProfileSectionA: [ BOOL, { lpAppName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR } ],
  WritePrivateProfileSectionW: [ BOOL, { lpAppName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR } ],
  GetPrivateProfileSectionNamesA: [ DWORD, { lpszReturnBuffer: LPSTR, nSize: DWORD, lpFileName: LPCSTR } ],
  GetPrivateProfileSectionNamesW: [ DWORD, { lpszReturnBuffer: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR } ],
  GetPrivateProfileStructA: [ BOOL, { lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR } ],
  GetPrivateProfileStructW: [ BOOL, { lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR } ],
  WritePrivateProfileStructA: [ BOOL, { lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR } ],
  WritePrivateProfileStructW: [ BOOL, { lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR } ],
  GetDriveTypeA: [ UINT, { lpRootPathName: LPCSTR } ],
  GetDriveTypeW: [ UINT, { lpRootPathName: LPCWSTR } ],
  GetSystemDirectoryA: [ UINT, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemDirectoryW: [ UINT, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetTempPathA: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetTempPathW: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  GetTempFileNameA: [ UINT, { lpPathName: LPCSTR, lpPrefixString: LPCSTR, uUnique: UINT, lpTempFileName: LPSTR } ],
  GetTempFileNameW: [ UINT, { lpPathName: LPCWSTR, lpPrefixString: LPCWSTR, uUnique: UINT, lpTempFileName: LPWSTR } ],
  GetWindowsDirectoryA: [ UINT, { lpBuffer: LPSTR, uSize: UINT } ],
  GetWindowsDirectoryW: [ UINT, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetSystemWindowsDirectoryA: [ UINT, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemWindowsDirectoryW: [ UINT, { lpBuffer: LPWSTR, uSize: UINT } ],
  GetSystemWow64DirectoryA: [ UINT, { lpBuffer: LPSTR, uSize: UINT } ],
  GetSystemWow64DirectoryW: [ UINT, { lpBuffer: LPWSTR, uSize: UINT } ],
  Wow64EnableWow64FsRedirection: [ BOOLEAN, { Wow64FsEnableRedirection: BOOLEAN } ],
  Wow64DisableWow64FsRedirection: [ BOOL, { OldValue: PVOID.Δ } ],
  Wow64RevertWow64FsRedirection: [ BOOL, { OlValue: PVOID } ],
  SetCurrentDirectoryA: [ BOOL, { lpPathName: LPCSTR } ],
  SetCurrentDirectoryW: [ BOOL, { lpPathName: LPCWSTR } ],
  GetCurrentDirectoryA: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetCurrentDirectoryW: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  SetDllDirectoryA: [ BOOL, { lpPathName: LPCSTR } ],
  SetDllDirectoryW: [ BOOL, { lpPathName: LPCWSTR } ],
  GetDllDirectoryA: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPSTR } ],
  GetDllDirectoryW: [ DWORD, { nBufferLength: DWORD, lpBuffer: LPWSTR } ],
  SetSearchPathMode: [ BOOL, { Flags: DWORD } ],
  GetDiskFreeSpaceA: [ BOOL, { lpRootPathName: LPCSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD } ],
  GetDiskFreeSpaceW: [ BOOL, { lpRootPathName: LPCWSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD } ],
  GetDiskFreeSpaceExA: [ BOOL, { lpDirectoryName: LPCSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER } ],
  GetDiskFreeSpaceExW: [ BOOL, { lpDirectoryName: LPCWSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER } ],
  CreateDirectoryA: [ BOOL, { lpPathName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryW: [ BOOL, { lpPathName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryExA: [ BOOL, { lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryExW: [ BOOL, { lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateDirectoryTransactedA: [ BOOL, { lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  CreateDirectoryTransactedW: [ BOOL, { lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  RemoveDirectoryA: [ BOOL, { lpPathName: LPCSTR } ],
  RemoveDirectoryW: [ BOOL, { lpPathName: LPCWSTR } ],
  RemoveDirectoryTransactedA: [ BOOL, { lpPathName: LPCSTR, hTransaction: HANDLE } ],
  RemoveDirectoryTransactedW: [ BOOL, { lpPathName: LPCWSTR, hTransaction: HANDLE } ],
  GetFullPathNameA: [ DWORD, { lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: LPSTR.Δ } ],
  GetFullPathNameW: [ DWORD, { lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: LPWSTR.Δ } ],
  GetFullPathNameTransactedA: [ DWORD, { lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: LPSTR.Δ, hTransaction: HANDLE } ],
  GetFullPathNameTransactedW: [ DWORD, { lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: LPWSTR.Δ, hTransaction: HANDLE } ],
  DefineDosDeviceA: [ BOOL, { dwFlags: DWORD, lpDeviceName: LPCSTR, lpTargetPath: LPCSTR } ],
  DefineDosDeviceW: [ BOOL, { dwFlags: DWORD, lpDeviceName: LPCWSTR, lpTargetPath: LPCWSTR } ],
  QueryDosDeviceA: [ DWORD, { lpDeviceName: LPCSTR, lpTargetPath: LPSTR, ucchMax: DWORD } ],
  QueryDosDeviceW: [ DWORD, { lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR, ucchMax: DWORD } ],
  CreateFileA: [ HANDLE, { lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE } ],
  CreateFileW: [ HANDLE, { lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE } ],
  CreateFileTransactedA: [ HANDLE, { lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID } ],
  CreateFileTransactedW: [ HANDLE, { lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID } ],
  ReOpenFile: [ HANDLE, { hOriginalFile: HANDLE, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwFlagsAndAttributes: DWORD } ],
  SetFileAttributesA: [ BOOL, { lpFileName: LPCSTR, dwFileAttributes: DWORD } ],
  SetFileAttributesW: [ BOOL, { lpFileName: LPCWSTR, dwFileAttributes: DWORD } ],
  GetFileAttributesA: [ DWORD, { lpFileName: LPCSTR } ],
  GetFileAttributesW: [ DWORD, { lpFileName: LPCWSTR } ],
  SetFileAttributesTransactedA: [ BOOL, { lpFileName: LPCSTR, dwFileAttributes: DWORD, hTransaction: HANDLE } ],
  SetFileAttributesTransactedW: [ BOOL, { lpFileName: LPCWSTR, dwFileAttributes: DWORD, hTransaction: HANDLE } ],
  GetFileAttributesTransactedA: [ BOOL, { lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE } ],
  GetFileAttributesTransactedW: [ BOOL, { lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE } ],
  GetFileAttributesExA: [ BOOL, { lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID } ],
  GetFileAttributesExW: [ BOOL, { lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID } ],
  GetCompressedFileSizeA: [ DWORD, { lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD } ],
  GetCompressedFileSizeW: [ DWORD, { lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD } ],
  GetCompressedFileSizeTransactedA: [ DWORD, { lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE } ],
  GetCompressedFileSizeTransactedW: [ DWORD, { lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE } ],
  DeleteFileA: [ BOOL, { lpFileName: LPCSTR } ],
  DeleteFileW: [ BOOL, { lpFileName: LPCWSTR } ],
  DeleteFileTransactedA: [ BOOL, { lpFileName: LPCSTR, hTransaction: HANDLE } ],
  DeleteFileTransactedW: [ BOOL, { lpFileName: LPCWSTR, hTransaction: HANDLE } ],
  CheckNameLegalDOS8Dot3A: [ BOOL, { lpName: LPCSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL } ],
  CheckNameLegalDOS8Dot3W: [ BOOL, { lpName: LPCWSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL } ],
  FindFirstFileExA: [ HANDLE, { lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD } ],
  FindFirstFileExW: [ HANDLE, { lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD } ],
  FindFirstFileTransactedA: [ HANDLE, { lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE } ],
  FindFirstFileTransactedW: [ HANDLE, { lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE } ],
  FindFirstFileA: [ HANDLE, { lpFileName: LPCSTR, lpFindFileData: LPWIN32_FIND_DATAA } ],
  FindFirstFileW: [ HANDLE, { lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATAW } ],
  FindNextFileA: [ BOOL, { hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAA } ],
  FindNextFileW: [ BOOL, { hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAW } ],
  SearchPathA: [ DWORD, { lpPath: LPCSTR, lpFileName: LPCSTR, lpExtension: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: LPSTR.Δ } ],
  SearchPathW: [ DWORD, { lpPath: LPCWSTR, lpFileName: LPCWSTR, lpExtension: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: LPWSTR.Δ } ],
  CopyFileA: [ BOOL, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, bFailIfExists: BOOL } ],
  CopyFileW: [ BOOL, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, bFailIfExists: BOOL } ],
  CopyFileExA: [ BOOL, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD } ],
  CopyFileExW: [ BOOL, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD } ],
  CopyFileTransactedA: [ BOOL, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE } ],
  CopyFileTransactedW: [ BOOL, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE } ],
  MoveFileA: [ BOOL, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR } ],
  MoveFileW: [ BOOL, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR } ],
  MoveFileExA: [ BOOL, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, dwFlags: DWORD } ],
  MoveFileExW: [ BOOL, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: DWORD } ],
  MoveFileWithProgressA: [ BOOL, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD } ],
  MoveFileWithProgressW: [ BOOL, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD } ],
  MoveFileTransactedA: [ BOOL, { lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  MoveFileTransactedW: [ BOOL, { lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  ReplaceFileA: [ BOOL, { lpReplacedFileName: LPCSTR, lpReplacementFileName: LPCSTR, lpBackupFileName: LPCSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID } ],
  ReplaceFileW: [ BOOL, { lpReplacedFileName: LPCWSTR, lpReplacementFileName: LPCWSTR, lpBackupFileName: LPCWSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID } ],
  CreateHardLinkA: [ BOOL, { lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateHardLinkW: [ BOOL, { lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateHardLinkTransactedA: [ BOOL, { lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  CreateHardLinkTransactedW: [ BOOL, { lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE } ],
  FindFirstStreamW: [ HANDLE, { lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD } ],
  FindFirstStreamTransactedW: [ HANDLE, { lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE } ],
  FindNextStreamW: [ BOOL, { hFindStream: HANDLE, lpFindStreamData: LPVOID } ],
  FindFirstFileNameW: [ HANDLE, { lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWCHAR } ],
  FindNextFileNameW: [ BOOL, { hFindStream: HANDLE, StringLength: LPDWORD, LinkName: PWCHAR } ],
  FindFirstFileNameTransactedW: [ HANDLE, { lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWCHAR, hTransaction: HANDLE } ],
  CreateNamedPipeA: [ HANDLE, { lpName: LPCSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  CreateNamedPipeW: [ HANDLE, { lpName: LPCWSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetNamedPipeHandleStateA: [ BOOL, { hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPSTR, nMaxUserNameSize: DWORD } ],
  GetNamedPipeHandleStateW: [ BOOL, { hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPWSTR, nMaxUserNameSize: DWORD } ],
  CallNamedPipeA: [ BOOL, { lpNamedPipeName: LPCSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD } ],
  CallNamedPipeW: [ BOOL, { lpNamedPipeName: LPCWSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD } ],
  WaitNamedPipeA: [ BOOL, { lpNamedPipeName: LPCSTR, nTimeOut: DWORD } ],
  WaitNamedPipeW: [ BOOL, { lpNamedPipeName: LPCWSTR, nTimeOut: DWORD } ],
  GetNamedPipeAttribute: [ BOOL, { Pipe: HANDLE, AttributeType: PIPE_ATTRIBUTE_TYPE, AttributeName: PSTR, AttributeValue: PVOID, AttributeValueLength: PSIZE_T } ],
  SetNamedPipeAttribute: [ BOOL, { Pipe: HANDLE, AttributeType: PIPE_ATTRIBUTE_TYPE, AttributeName: PSTR, AttributeValue: PVOID, AttributeValueLength: SIZE_T } ],
  GetNamedPipeClientComputerNameA: [ BOOL, { Pipe: HANDLE, ClientComputerName: LPSTR, ClientComputerNameLength: ULONG } ],
  GetNamedPipeClientComputerNameW: [ BOOL, { Pipe: HANDLE, ClientComputerName: LPWSTR, ClientComputerNameLength: ULONG } ],
  GetNamedPipeClientProcessId: [ BOOL, { Pipe: HANDLE, ClientProcessId: PULONG } ],
  GetNamedPipeClientSessionId: [ BOOL, { Pipe: HANDLE, ClientSessionId: PULONG } ],
  GetNamedPipeServerProcessId: [ BOOL, { Pipe: HANDLE, ServerProcessId: PULONG } ],
  GetNamedPipeServerSessionId: [ BOOL, { Pipe: HANDLE, ServerSessionId: PULONG } ],
  SetVolumeLabelA: [ BOOL, { lpRootPathName: LPCSTR, lpVolumeName: LPCSTR } ],
  SetVolumeLabelW: [ BOOL, { lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR } ],
  SetFileApisToOEM: [ _void, {  } ],
  SetFileApisToANSI: [ _void, {  } ],
  AreFileApisANSI: [ BOOL, {  } ],
  GetVolumeInformationA: [ BOOL, { lpRootPathName: LPCSTR, lpVolumeNameBuffer: LPSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPSTR, nFileSystemNameSize: DWORD } ],
  GetVolumeInformationW: [ BOOL, { lpRootPathName: LPCWSTR, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD } ],
  GetVolumeInformationByHandleW: [ BOOL, { hFile: HANDLE, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD } ],
  CancelSynchronousIo: [ BOOL, { hThread: HANDLE } ],
  CancelIoEx: [ BOOL, { hFile: HANDLE, lpOverlapped: LPOVERLAPPED } ],
  CancelIo: [ BOOL, { hFile: HANDLE } ],
  SetFileBandwidthReservation: [ BOOL, { hFile: HANDLE, nPeriodMilliseconds: DWORD, nBytesPerPeriod: DWORD, bDiscardable: BOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD } ],
  GetFileBandwidthReservation: [ BOOL, { hFile: HANDLE, lpPeriodMilliseconds: LPDWORD, lpBytesPerPeriod: LPDWORD, pDiscardable: LPBOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD } ],
  ClearEventLogA: [ BOOL, { hEventLog: HANDLE, lpBackupFileName: LPCSTR } ],
  ClearEventLogW: [ BOOL, { hEventLog: HANDLE, lpBackupFileName: LPCWSTR } ],
  BackupEventLogA: [ BOOL, { hEventLog: HANDLE, lpBackupFileName: LPCSTR } ],
  BackupEventLogW: [ BOOL, { hEventLog: HANDLE, lpBackupFileName: LPCWSTR } ],
  CloseEventLog: [ BOOL, { hEventLog: HANDLE } ],
  DeregisterEventSource: [ BOOL, { hEventLog: HANDLE } ],
  NotifyChangeEventLog: [ BOOL, { hEventLog: HANDLE, hEvent: HANDLE } ],
  GetNumberOfEventLogRecords: [ BOOL, { hEventLog: HANDLE, NumberOfRecords: PDWORD } ],
  GetOldestEventLogRecord: [ BOOL, { hEventLog: HANDLE, OldestRecord: PDWORD } ],
  OpenEventLogA: [ HANDLE, { lpUNCServerName: LPCSTR, lpSourceName: LPCSTR } ],
  OpenEventLogW: [ HANDLE, { lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR } ],
  RegisterEventSourceA: [ HANDLE, { lpUNCServerName: LPCSTR, lpSourceName: LPCSTR } ],
  RegisterEventSourceW: [ HANDLE, { lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR } ],
  OpenBackupEventLogA: [ HANDLE, { lpUNCServerName: LPCSTR, lpFileName: LPCSTR } ],
  OpenBackupEventLogW: [ HANDLE, { lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR } ],
  ReadEventLogA: [ BOOL, { hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: DWORD.Δ, pnMinNumberOfBytesNeeded: DWORD.Δ } ],
  ReadEventLogW: [ BOOL, { hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: DWORD.Δ, pnMinNumberOfBytesNeeded: DWORD.Δ } ],
  ReportEventA: [ BOOL, { hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: LPCSTR.Δ, lpRawData: LPVOID } ],
  ReportEventW: [ BOOL, { hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: LPCWSTR.Δ, lpRawData: LPVOID } ],
  GetEventLogInformation: [ BOOL, { hEventLog: HANDLE, dwInfoLevel: DWORD, lpBuffer: LPVOID, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  DuplicateToken: [ BOOL, { ExistingTokenHandle: HANDLE, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: PHANDLE } ],
  GetKernelObjectSecurity: [ BOOL, { Handle: HANDLE, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  ImpersonateNamedPipeClient: [ BOOL, { hNamedPipe: HANDLE } ],
  ImpersonateSelf: [ BOOL, { ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL } ],
  RevertToSelf: [ BOOL, {  } ],
  SetThreadToken: [ BOOL, { Thread: PHANDLE, Token: HANDLE } ],
  AccessCheck: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL } ],
  AccessCheckByType: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL } ],
  AccessCheckByTypeResultList: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD } ],
  OpenProcessToken: [ BOOL, { ProcessHandle: HANDLE, DesiredAccess: DWORD, TokenHandle: PHANDLE } ],
  OpenThreadToken: [ BOOL, { ThreadHandle: HANDLE, DesiredAccess: DWORD, OpenAsSelf: BOOL, TokenHandle: PHANDLE } ],
  GetTokenInformation: [ BOOL, { TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD, ReturnLength: PDWORD } ],
  SetTokenInformation: [ BOOL, { TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD } ],
  AdjustTokenPrivileges: [ BOOL, { TokenHandle: HANDLE, DisableAllPrivileges: BOOL, NewState: PTOKEN_PRIVILEGES, BufferLength: DWORD, PreviousState: PTOKEN_PRIVILEGES, ReturnLength: PDWORD } ],
  AdjustTokenGroups: [ BOOL, { TokenHandle: HANDLE, ResetToDefault: BOOL, NewState: PTOKEN_GROUPS, BufferLength: DWORD, PreviousState: PTOKEN_GROUPS, ReturnLength: PDWORD } ],
  PrivilegeCheck: [ BOOL, { ClientToken: HANDLE, RequiredPrivileges: PPRIVILEGE_SET, pfResult: LPBOOL } ],
  AccessCheckAndAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckAndAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeAndAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeAndAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmByHandleA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  AccessCheckByTypeResultListAndAuditAlarmByHandleW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL } ],
  ObjectOpenAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL } ],
  ObjectOpenAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL } ],
  ObjectPrivilegeAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  ObjectPrivilegeAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  ObjectCloseAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectCloseAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectDeleteAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  ObjectDeleteAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL } ],
  PrivilegedServiceAuditAlarmA: [ BOOL, { SubsystemName: LPCSTR, ServiceName: LPCSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  PrivilegedServiceAuditAlarmW: [ BOOL, { SubsystemName: LPCWSTR, ServiceName: LPCWSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL } ],
  IsWellKnownSid: [ BOOL, { pSid: PSID, WellKnownSidType: WELL_KNOWN_SID_TYPE } ],
  CreateWellKnownSid: [ BOOL, { WellKnownSidType: WELL_KNOWN_SID_TYPE, DomainSid: PSID, pSid: PSID, cbSid: DWORD.Δ } ],
  EqualDomainSid: [ BOOL, { pSid1: PSID, pSid2: PSID, pfEqual: BOOL.Δ } ],
  GetWindowsAccountDomainSid: [ BOOL, { pSid: PSID, pDomainSid: PSID, cbDomainSid: DWORD.Δ } ],
  IsValidSid: [ BOOL, { pSid: PSID } ],
  EqualSid: [ BOOL, { pSid1: PSID, pSid2: PSID } ],
  EqualPrefixSid: [ BOOL, { pSid1: PSID, pSid2: PSID } ],
  GetSidLengthRequired: [ DWORD, { nSubAuthorityCount: UCHAR } ],
  AllocateAndInitializeSid: [ BOOL, { pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE, nSubAuthority0: DWORD, nSubAuthority1: DWORD, nSubAuthority2: DWORD, nSubAuthority3: DWORD, nSubAuthority4: DWORD, nSubAuthority5: DWORD, nSubAuthority6: DWORD, nSubAuthority7: DWORD, pSid: PSID.Δ } ],
  FreeSid: [ PVOID, { pSid: PSID } ],
  InitializeSid: [ BOOL, { Sid: PSID, pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE } ],
  GetSidIdentifierAuthority: [ PSID_IDENTIFIER_AUTHORITY, { pSid: PSID } ],
  GetSidSubAuthority: [ PDWORD, { pSid: PSID, nSubAuthority: DWORD } ],
  GetSidSubAuthorityCount: [ PUCHAR, { pSid: PSID } ],
  GetLengthSid: [ DWORD, { pSid: PSID } ],
  CopySid: [ BOOL, { nDestinationSidLength: DWORD, pDestinationSid: PSID, pSourceSid: PSID } ],
  AreAllAccessesGranted: [ BOOL, { GrantedAccess: DWORD, DesiredAccess: DWORD } ],
  AreAnyAccessesGranted: [ BOOL, { GrantedAccess: DWORD, DesiredAccess: DWORD } ],
  MapGenericMask: [ _void, { AccessMask: PDWORD, GenericMapping: PGENERIC_MAPPING } ],
  IsValidAcl: [ BOOL, { pAcl: PACL } ],
  InitializeAcl: [ BOOL, { pAcl: PACL, nAclLength: DWORD, dwAclRevision: DWORD } ],
  GetAclInformation: [ BOOL, { pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS } ],
  SetAclInformation: [ BOOL, { pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS } ],
  AddAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, dwStartingAceIndex: DWORD, pAceList: LPVOID, nAceListLength: DWORD } ],
  DeleteAce: [ BOOL, { pAcl: PACL, dwAceIndex: DWORD } ],
  GetAce: [ BOOL, { pAcl: PACL, dwAceIndex: DWORD, pAce: LPVOID.Δ } ],
  AddAccessAllowedAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAccessAllowedAceEx: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddMandatoryAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, MandatoryPolicy: DWORD, pLabelSid: PSID } ],
  AddConditionalAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AceType: UCHAR, AccessMask: DWORD, pSid: PSID, ConditionStr: PWCHAR, ReturnLength: DWORD.Δ } ],
  AddAccessDeniedAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAccessDeniedAceEx: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID } ],
  AddAuditAccessAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  AddAuditAccessAceEx: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  AddAccessAllowedObjectAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: GUID.Δ, InheritedObjectTypeGuid: GUID.Δ, pSid: PSID } ],
  AddAccessDeniedObjectAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: GUID.Δ, InheritedObjectTypeGuid: GUID.Δ, pSid: PSID } ],
  AddAuditAccessObjectAce: [ BOOL, { pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: GUID.Δ, InheritedObjectTypeGuid: GUID.Δ, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL } ],
  FindFirstFreeAce: [ BOOL, { pAcl: PACL, pAce: LPVOID.Δ } ],
  InitializeSecurityDescriptor: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, dwRevision: DWORD } ],
  IsValidSecurityDescriptor: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  IsValidRelativeSecurityDescriptor: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, SecurityDescriptorLength: ULONG, RequiredInformation: SECURITY_INFORMATION } ],
  GetSecurityDescriptorLength: [ DWORD, { pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  GetSecurityDescriptorControl: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pControl: PSECURITY_DESCRIPTOR_CONTROL, lpdwRevision: LPDWORD } ],
  SetSecurityDescriptorControl: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, ControlBitsOfInterest: SECURITY_DESCRIPTOR_CONTROL, ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL } ],
  SetSecurityDescriptorDacl: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, bDaclPresent: BOOL, pDacl: PACL, bDaclDefaulted: BOOL } ],
  GetSecurityDescriptorDacl: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbDaclPresent: LPBOOL, pDacl: PACL.Δ, lpbDaclDefaulted: LPBOOL } ],
  SetSecurityDescriptorSacl: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, bSaclPresent: BOOL, pSacl: PACL, bSaclDefaulted: BOOL } ],
  GetSecurityDescriptorSacl: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbSaclPresent: LPBOOL, pSacl: PACL.Δ, lpbSaclDefaulted: LPBOOL } ],
  SetSecurityDescriptorOwner: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: PSID, bOwnerDefaulted: BOOL } ],
  GetSecurityDescriptorOwner: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: PSID.Δ, lpbOwnerDefaulted: LPBOOL } ],
  SetSecurityDescriptorGroup: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: PSID, bGroupDefaulted: BOOL } ],
  GetSecurityDescriptorGroup: [ BOOL, { pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: PSID.Δ, lpbGroupDefaulted: LPBOOL } ],
  SetSecurityDescriptorRMControl: [ DWORD, { SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR } ],
  GetSecurityDescriptorRMControl: [ DWORD, { SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR } ],
  CreatePrivateObjectSecurity: [ BOOL, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: PSECURITY_DESCRIPTOR.Δ, IsDirectoryObject: BOOL, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  ConvertToAutoInheritPrivateObjectSecurity: [ BOOL, { ParentDescriptor: PSECURITY_DESCRIPTOR, CurrentSecurityDescriptor: PSECURITY_DESCRIPTOR, NewSecurityDescriptor: PSECURITY_DESCRIPTOR.Δ, ObjectType: GUID.Δ, IsDirectoryObject: BOOLEAN, GenericMapping: PGENERIC_MAPPING } ],
  CreatePrivateObjectSecurityEx: [ BOOL, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: PSECURITY_DESCRIPTOR.Δ, ObjectType: GUID.Δ, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  CreatePrivateObjectSecurityWithMultipleInheritance: [ BOOL, { ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: PSECURITY_DESCRIPTOR.Δ, ObjectTypes: _GUID.Δ.Δ, GuidCount: ULONG, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING } ],
  SetPrivateObjectSecurity: [ BOOL, { SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: PSECURITY_DESCRIPTOR.Δ, GenericMapping: PGENERIC_MAPPING, Token: HANDLE } ],
  SetPrivateObjectSecurityEx: [ BOOL, { SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: PSECURITY_DESCRIPTOR.Δ, AutoInheritFlags: ULONG, GenericMapping: PGENERIC_MAPPING, Token: HANDLE } ],
  GetPrivateObjectSecurity: [ BOOL, { ObjectDescriptor: PSECURITY_DESCRIPTOR, SecurityInformation: SECURITY_INFORMATION, ResultantDescriptor: PSECURITY_DESCRIPTOR, DescriptorLength: DWORD, ReturnLength: PDWORD } ],
  DestroyPrivateObjectSecurity: [ BOOL, { ObjectDescriptor: PSECURITY_DESCRIPTOR.Δ } ],
  MakeSelfRelativeSD: [ BOOL, { pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferLength: LPDWORD } ],
  MakeAbsoluteSD: [ BOOL, { pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwAbsoluteSecurityDescriptorSize: LPDWORD, pDacl: PACL, lpdwDaclSize: LPDWORD, pSacl: PACL, lpdwSaclSize: LPDWORD, pOwner: PSID, lpdwOwnerSize: LPDWORD, pPrimaryGroup: PSID, lpdwPrimaryGroupSize: LPDWORD } ],
  MakeAbsoluteSD2: [ BOOL, { pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferSize: LPDWORD } ],
  QuerySecurityAccessMask: [ _void, { SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD } ],
  SetSecurityAccessMask: [ _void, { SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD } ],
  SetFileSecurityA: [ BOOL, { lpFileName: LPCSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  SetFileSecurityW: [ BOOL, { lpFileName: LPCWSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  GetFileSecurityA: [ BOOL, { lpFileName: LPCSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  GetFileSecurityW: [ BOOL, { lpFileName: LPCWSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  SetKernelObjectSecurity: [ BOOL, { Handle: HANDLE, SecurityInformation: SECURITY_INFORMATION, SecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  FindFirstChangeNotificationA: [ HANDLE, { lpPathName: LPCSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD } ],
  FindFirstChangeNotificationW: [ HANDLE, { lpPathName: LPCWSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD } ],
  FindNextChangeNotification: [ BOOL, { hChangeHandle: HANDLE } ],
  FindCloseChangeNotification: [ BOOL, { hChangeHandle: HANDLE } ],
  ReadDirectoryChangesW: [ BOOL, { hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: DWORD, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE } ],
  VirtualLock: [ BOOL, { lpAddress: LPVOID, dwSize: SIZE_T } ],
  VirtualUnlock: [ BOOL, { lpAddress: LPVOID, dwSize: SIZE_T } ],
  MapViewOfFileEx: [ LPVOID, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID } ],
  MapViewOfFileExNuma: [ LPVOID, { hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID, nndPreferred: DWORD } ],
  SetPriorityClass: [ BOOL, { hProcess: HANDLE, dwPriorityClass: DWORD } ],
  GetPriorityClass: [ DWORD, { hProcess: HANDLE } ],
  IsBadReadPtr: [ BOOL, { lp: _void.Δ, ucb: UINT_PTR } ],
  IsBadWritePtr: [ BOOL, { lp: LPVOID, ucb: UINT_PTR } ],
  IsBadHugeReadPtr: [ BOOL, { lp: _void.Δ, ucb: UINT_PTR } ],
  IsBadHugeWritePtr: [ BOOL, { lp: LPVOID, ucb: UINT_PTR } ],
  IsBadCodePtr: [ BOOL, { lpfn: FARPROC } ],
  IsBadStringPtrA: [ BOOL, { lpsz: LPCSTR, ucchMax: UINT_PTR } ],
  IsBadStringPtrW: [ BOOL, { lpsz: LPCWSTR, ucchMax: UINT_PTR } ],
  LookupAccountSidA: [ BOOL, { lpSystemName: LPCSTR, Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidW: [ BOOL, { lpSystemName: LPCWSTR, Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidLocalA: [ BOOL, { Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountSidLocalW: [ BOOL, { Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameA: [ BOOL, { lpSystemName: LPCSTR, lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameW: [ BOOL, { lpSystemName: LPCWSTR, lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameLocalA: [ BOOL, { lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupAccountNameLocalW: [ BOOL, { lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE } ],
  LookupPrivilegeValueA: [ BOOL, { lpSystemName: LPCSTR, lpName: LPCSTR, lpLuid: PLUID } ],
  LookupPrivilegeValueW: [ BOOL, { lpSystemName: LPCWSTR, lpName: LPCWSTR, lpLuid: PLUID } ],
  LookupPrivilegeNameA: [ BOOL, { lpSystemName: LPCSTR, lpLuid: PLUID, lpName: LPSTR, cchName: LPDWORD } ],
  LookupPrivilegeNameW: [ BOOL, { lpSystemName: LPCWSTR, lpLuid: PLUID, lpName: LPWSTR, cchName: LPDWORD } ],
  LookupPrivilegeDisplayNameA: [ BOOL, { lpSystemName: LPCSTR, lpName: LPCSTR, lpDisplayName: LPSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD } ],
  LookupPrivilegeDisplayNameW: [ BOOL, { lpSystemName: LPCWSTR, lpName: LPCWSTR, lpDisplayName: LPWSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD } ],
  AllocateLocallyUniqueId: [ BOOL, { Luid: PLUID } ],
  BuildCommDCBA: [ BOOL, { lpDef: LPCSTR, lpDCB: LPDCB } ],
  BuildCommDCBW: [ BOOL, { lpDef: LPCWSTR, lpDCB: LPDCB } ],
  BuildCommDCBAndTimeoutsA: [ BOOL, { lpDef: LPCSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  BuildCommDCBAndTimeoutsW: [ BOOL, { lpDef: LPCWSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS } ],
  CommConfigDialogA: [ BOOL, { lpszName: LPCSTR, hWnd: HWND, lpCC: LPCOMMCONFIG } ],
  CommConfigDialogW: [ BOOL, { lpszName: LPCWSTR, hWnd: HWND, lpCC: LPCOMMCONFIG } ],
  GetDefaultCommConfigA: [ BOOL, { lpszName: LPCSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  GetDefaultCommConfigW: [ BOOL, { lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD } ],
  SetDefaultCommConfigA: [ BOOL, { lpszName: LPCSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  SetDefaultCommConfigW: [ BOOL, { lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD } ],
  GetComputerNameA: [ BOOL, { lpBuffer: LPSTR, nSize: LPDWORD } ],
  GetComputerNameW: [ BOOL, { lpBuffer: LPWSTR, nSize: LPDWORD } ],
  SetComputerNameA: [ BOOL, { lpComputerName: LPCSTR } ],
  SetComputerNameW: [ BOOL, { lpComputerName: LPCWSTR } ],
  GetComputerNameExA: [ BOOL, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPSTR, nSize: LPDWORD } ],
  GetComputerNameExW: [ BOOL, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPWSTR, nSize: LPDWORD } ],
  SetComputerNameExA: [ BOOL, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCSTR } ],
  SetComputerNameExW: [ BOOL, { NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCWSTR } ],
  DnsHostnameToComputerNameA: [ BOOL, { Hostname: LPCSTR, ComputerName: LPSTR, nSize: LPDWORD } ],
  DnsHostnameToComputerNameW: [ BOOL, { Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD } ],
  GetUserNameA: [ BOOL, { lpBuffer: LPSTR, pcbBuffer: LPDWORD } ],
  GetUserNameW: [ BOOL, { lpBuffer: LPWSTR, pcbBuffer: LPDWORD } ],
  LogonUserA: [ BOOL, { lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE } ],
  LogonUserW: [ BOOL, { lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE } ],
  LogonUserExA: [ BOOL, { lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: PSID.Δ, ppProfileBuffer: PVOID.Δ, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS } ],
  LogonUserExW: [ BOOL, { lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: PSID.Δ, ppProfileBuffer: PVOID.Δ, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS } ],
  ImpersonateLoggedOnUser: [ BOOL, { hToken: HANDLE } ],
  CreateProcessAsUserA: [ BOOL, { hToken: HANDLE, lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessAsUserW: [ BOOL, { hToken: HANDLE, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessWithLogonW: [ BOOL, { lpUsername: LPCWSTR, lpDomain: LPCWSTR, lpPassword: LPCWSTR, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  CreateProcessWithTokenW: [ BOOL, { hToken: HANDLE, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION } ],
  ImpersonateAnonymousToken: [ BOOL, { ThreadHandle: HANDLE } ],
  DuplicateTokenEx: [ BOOL, { hExistingToken: HANDLE, dwDesiredAccess: DWORD, lpTokenAttributes: LPSECURITY_ATTRIBUTES, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, TokenType: TOKEN_TYPE, phNewToken: PHANDLE } ],
  CreateRestrictedToken: [ BOOL, { ExistingTokenHandle: HANDLE, Flags: DWORD, DisableSidCount: DWORD, SidsToDisable: PSID_AND_ATTRIBUTES, DeletePrivilegeCount: DWORD, PrivilegesToDelete: PLUID_AND_ATTRIBUTES, RestrictedSidCount: DWORD, SidsToRestrict: PSID_AND_ATTRIBUTES, NewTokenHandle: PHANDLE } ],
  IsTokenRestricted: [ BOOL, { TokenHandle: HANDLE } ],
  IsTokenUntrusted: [ BOOL, { TokenHandle: HANDLE } ],
  CheckTokenMembership: [ BOOL, { TokenHandle: HANDLE, SidToCheck: PSID, IsMember: PBOOL } ],
  RegisterWaitForSingleObject: [ BOOL, { phNewWaitObject: PHANDLE, hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG } ],
  RegisterWaitForSingleObjectEx: [ HANDLE, { hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG } ],
  UnregisterWait: [ BOOL, { WaitHandle: HANDLE } ],
  UnregisterWaitEx: [ BOOL, { WaitHandle: HANDLE, CompletionEvent: HANDLE } ],
  QueueUserWorkItem: [ BOOL, { Function: LPTHREAD_START_ROUTINE, Context: PVOID, Flags: ULONG } ],
  BindIoCompletionCallback: [ BOOL, { FileHandle: HANDLE, Function: LPOVERLAPPED_COMPLETION_ROUTINE, Flags: ULONG } ],
  CreateTimerQueue: [ HANDLE, {  } ],
  CreateTimerQueueTimer: [ BOOL, { phNewTimer: PHANDLE, TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, Flags: ULONG } ],
  ChangeTimerQueueTimer: [ BOOL, { TimerQueue: HANDLE, Timer: HANDLE, DueTime: ULONG, Period: ULONG } ],
  DeleteTimerQueueTimer: [ BOOL, { TimerQueue: HANDLE, Timer: HANDLE, CompletionEvent: HANDLE } ],
  DeleteTimerQueueEx: [ BOOL, { TimerQueue: HANDLE, CompletionEvent: HANDLE } ],
  SetTimerQueueTimer: [ HANDLE, { TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, PreferIo: BOOL } ],
  CancelTimerQueueTimer: [ BOOL, { TimerQueue: HANDLE, Timer: HANDLE } ],
  DeleteTimerQueue: [ BOOL, { TimerQueue: HANDLE } ],
  CreateThreadpool: [ PTP_POOL, { reserved: PVOID } ],
  SetThreadpoolThreadMaximum: [ _void, { ptpp: PTP_POOL, cthrdMost: DWORD } ],
  SetThreadpoolThreadMinimum: [ BOOL, { ptpp: PTP_POOL, cthrdMic: DWORD } ],
  SetThreadpoolStackInformation: [ BOOL, { ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION } ],
  QueryThreadpoolStackInformation: [ BOOL, { ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION } ],
  CloseThreadpool: [ _void, { ptpp: PTP_POOL } ],
  CreateThreadpoolCleanupGroup: [ PTP_CLEANUP_GROUP, {  } ],
  CloseThreadpoolCleanupGroupMembers: [ _void, { ptpcg: PTP_CLEANUP_GROUP, fCancelPendingCallbacks: BOOL, pvCleanupContext: PVOID } ],
  CloseThreadpoolCleanupGroup: [ _void, { ptpcg: PTP_CLEANUP_GROUP } ],
  InitializeThreadpoolEnvironment: [ _void, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolCallbackPool: [ _void, { pcbe: PTP_CALLBACK_ENVIRON, ptpp: PTP_POOL } ],
  SetThreadpoolCallbackCleanupGroup: [ _void, { pcbe: PTP_CALLBACK_ENVIRON, ptpcg: PTP_CLEANUP_GROUP, pfng: PTP_CLEANUP_GROUP_CANCEL_CALLBACK } ],
  SetThreadpoolCallbackRunsLong: [ _void, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolCallbackLibrary: [ _void, { pcbe: PTP_CALLBACK_ENVIRON, mod: PVOID } ],
  SetThreadpoolCallbackPriority: [ _void, { pcbe: PTP_CALLBACK_ENVIRON, Priority: TP_CALLBACK_PRIORITY } ],
  SetThreadpoolCallbackPersistent: [ _void, { pcbe: PTP_CALLBACK_ENVIRON } ],
  DestroyThreadpoolEnvironment: [ _void, { pcbe: PTP_CALLBACK_ENVIRON } ],
  SetEventWhenCallbackReturns: [ _void, { pci: PTP_CALLBACK_INSTANCE, evt: HANDLE } ],
  ReleaseSemaphoreWhenCallbackReturns: [ _void, { pci: PTP_CALLBACK_INSTANCE, sem: HANDLE, crel: DWORD } ],
  ReleaseMutexWhenCallbackReturns: [ _void, { pci: PTP_CALLBACK_INSTANCE, mut: HANDLE } ],
  LeaveCriticalSectionWhenCallbackReturns: [ _void, { pci: PTP_CALLBACK_INSTANCE, pcs: PCRITICAL_SECTION } ],
  FreeLibraryWhenCallbackReturns: [ _void, { pci: PTP_CALLBACK_INSTANCE, mod: HMODULE } ],
  CallbackMayRunLong: [ BOOL, { pci: PTP_CALLBACK_INSTANCE } ],
  DisassociateCurrentThreadFromCallback: [ _void, { pci: PTP_CALLBACK_INSTANCE } ],
  TrySubmitThreadpoolCallback: [ BOOL, { pfns: PTP_SIMPLE_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  CreateThreadpoolWork: [ PTP_WORK, { pfnwk: PTP_WORK_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SubmitThreadpoolWork: [ _void, { pwk: PTP_WORK } ],
  WaitForThreadpoolWorkCallbacks: [ _void, { pwk: PTP_WORK, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolWork: [ _void, { pwk: PTP_WORK } ],
  CreateThreadpoolTimer: [ PTP_TIMER, { pfnti: PTP_TIMER_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolTimer: [ _void, { pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: DWORD, msWindowLength: DWORD } ],
  IsThreadpoolTimerSet: [ BOOL, { pti: PTP_TIMER } ],
  WaitForThreadpoolTimerCallbacks: [ _void, { pti: PTP_TIMER, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolTimer: [ _void, { pti: PTP_TIMER } ],
  CreateThreadpoolWait: [ PTP_WAIT, { pfnwa: PTP_WAIT_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  SetThreadpoolWait: [ _void, { pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME } ],
  WaitForThreadpoolWaitCallbacks: [ _void, { pwa: PTP_WAIT, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolWait: [ _void, { pwa: PTP_WAIT } ],
  CreateThreadpoolIo: [ PTP_IO, { fl: HANDLE, pfnio: PTP_WIN32_IO_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON } ],
  StartThreadpoolIo: [ _void, { pio: PTP_IO } ],
  CancelThreadpoolIo: [ _void, { pio: PTP_IO } ],
  WaitForThreadpoolIoCallbacks: [ _void, { pio: PTP_IO, fCancelPendingCallbacks: BOOL } ],
  CloseThreadpoolIo: [ _void, { pio: PTP_IO } ],
  CreatePrivateNamespaceA: [ HANDLE, { lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR } ],
  CreatePrivateNamespaceW: [ HANDLE, { lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR } ],
  OpenPrivateNamespaceA: [ HANDLE, { lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR } ],
  OpenPrivateNamespaceW: [ HANDLE, { lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR } ],
  ClosePrivateNamespace: [ BOOLEAN, { Handle: HANDLE, Flags: ULONG } ],
  CreateBoundaryDescriptorA: [ HANDLE, { Name: LPCSTR, Flags: ULONG } ],
  CreateBoundaryDescriptorW: [ HANDLE, { Name: LPCWSTR, Flags: ULONG } ],
  AddSIDToBoundaryDescriptor: [ BOOL, { BoundaryDescriptor: HANDLE.Δ, RequiredSid: PSID } ],
  AddIntegrityLabelToBoundaryDescriptor: [ BOOL, { BoundaryDescriptor: HANDLE.Δ, IntegrityLabel: PSID } ],
  DeleteBoundaryDescriptor: [ _void, { BoundaryDescriptor: HANDLE } ],
  GetCurrentHwProfileA: [ BOOL, { lpHwProfileInfo: LPHW_PROFILE_INFOA } ],
  GetCurrentHwProfileW: [ BOOL, { lpHwProfileInfo: LPHW_PROFILE_INFOW } ],
  QueryPerformanceCounter: [ BOOL, { lpPerformanceCount: LARGE_INTEGER.Δ } ],
  QueryPerformanceFrequency: [ BOOL, { lpFrequency: LARGE_INTEGER.Δ } ],
  GetVersionExA: [ BOOL, { lpVersionInformation: LPOSVERSIONINFOA } ],
  GetVersionExW: [ BOOL, { lpVersionInformation: LPOSVERSIONINFOW } ],
  VerifyVersionInfoA: [ BOOL, { lpVersionInformation: LPOSVERSIONINFOEXA, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG } ],
  VerifyVersionInfoW: [ BOOL, { lpVersionInformation: LPOSVERSIONINFOEXW, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG } ],
  GetProductInfo: [ BOOL, { dwOSMajorVersion: DWORD, dwOSMinorVersion: DWORD, dwSpMajorVersion: DWORD, dwSpMinorVersion: DWORD, pdwReturnedProductType: PDWORD } ],
  HRESULT_FROM_WIN32: [ HRESULT, { x: ulong } ],
  GetSystemPowerStatus: [ BOOL, { lpSystemPowerStatus: LPSYSTEM_POWER_STATUS } ],
  SetSystemPowerState: [ BOOL, { fSuspend: BOOL, fForce: BOOL } ],
  AllocateUserPhysicalPages: [ BOOL, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR } ],
  AllocateUserPhysicalPagesNuma: [ BOOL, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR, nndPreferred: DWORD } ],
  FreeUserPhysicalPages: [ BOOL, { hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR } ],
  MapUserPhysicalPages: [ BOOL, { VirtualAddress: PVOID, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR } ],
  MapUserPhysicalPagesScatter: [ BOOL, { VirtualAddresses: PVOID.Δ, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR } ],
  CreateJobObjectA: [ HANDLE, { lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR } ],
  CreateJobObjectW: [ HANDLE, { lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR } ],
  OpenJobObjectA: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR } ],
  OpenJobObjectW: [ HANDLE, { dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR } ],
  AssignProcessToJobObject: [ BOOL, { hJob: HANDLE, hProcess: HANDLE } ],
  TerminateJobObject: [ BOOL, { hJob: HANDLE, uExitCode: UINT } ],
  QueryInformationJobObject: [ BOOL, { hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD, lpReturnLength: LPDWORD } ],
  SetInformationJobObject: [ BOOL, { hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD } ],
  IsProcessInJob: [ BOOL, { ProcessHandle: HANDLE, JobHandle: HANDLE, Result: PBOOL } ],
  CreateJobSet: [ BOOL, { NumJob: ULONG, UserJobSet: PJOB_SET_new ArrayT, Flags: ULONG } ],
  AddVectoredExceptionHandler: [ PVOID, { First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER } ],
  RemoveVectoredExceptionHandler: [ ULONG, { Handle: PVOID } ],
  AddVectoredContinueHandler: [ PVOID, { First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER } ],
  RemoveVectoredContinueHandler: [ ULONG, { Handle: PVOID } ],
  FindFirstVolumeA: [ HANDLE, { lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  FindFirstVolumeW: [ HANDLE, { lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  FindNextVolumeA: [ BOOL, { hFindVolume: HANDLE, lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  FindNextVolumeW: [ BOOL, { hFindVolume: HANDLE, lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  FindVolumeClose: [ BOOL, { hFindVolume: HANDLE } ],
  FindFirstVolumeMountPointA: [ HANDLE, { lpszRootPathName: LPCSTR, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD } ],
  FindFirstVolumeMountPointW: [ HANDLE, { lpszRootPathName: LPCWSTR, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD } ],
  FindNextVolumeMountPointA: [ BOOL, { hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD } ],
  FindNextVolumeMountPointW: [ BOOL, { hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD } ],
  FindVolumeMountPointClose: [ BOOL, { hFindVolumeMountPoint: HANDLE } ],
  SetVolumeMountPointA: [ BOOL, { lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPCSTR } ],
  SetVolumeMountPointW: [ BOOL, { lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPCWSTR } ],
  DeleteVolumeMountPointA: [ BOOL, { lpszVolumeMountPoint: LPCSTR } ],
  DeleteVolumeMountPointW: [ BOOL, { lpszVolumeMountPoint: LPCWSTR } ],
  GetVolumeNameForVolumeMountPointA: [ BOOL, { lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPSTR, cchBufferLength: DWORD } ],
  GetVolumeNameForVolumeMountPointW: [ BOOL, { lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPWSTR, cchBufferLength: DWORD } ],
  GetVolumePathNameA: [ BOOL, { lpszFileName: LPCSTR, lpszVolumePathName: LPSTR, cchBufferLength: DWORD } ],
  GetVolumePathNameW: [ BOOL, { lpszFileName: LPCWSTR, lpszVolumePathName: LPWSTR, cchBufferLength: DWORD } ],
  GetVolumePathNamesForVolumeNameA: [ BOOL, { lpszVolumeName: LPCSTR, lpszVolumePathNames: LPCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD } ],
  GetVolumePathNamesForVolumeNameW: [ BOOL, { lpszVolumeName: LPCWSTR, lpszVolumePathNames: LPWCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD } ],
  CreateActCtxA: [ HANDLE, { pActCtx: PCACTCTXA } ],
  CreateActCtxW: [ HANDLE, { pActCtx: PCACTCTXW } ],
  AddRefActCtx: [ _void, { hActCtx: HANDLE } ],
  ReleaseActCtx: [ _void, { hActCtx: HANDLE } ],
  ZombifyActCtx: [ BOOL, { hActCtx: HANDLE } ],
  ActivateActCtx: [ BOOL, { hActCtx: HANDLE, lpCookie: ULONG_PTR.Δ } ],
  DeactivateActCtx: [ BOOL, { dwFlags: DWORD, ulCookie: ULONG_PTR } ],
  GetCurrentActCtx: [ BOOL, { lphActCtx: HANDLE.Δ } ],
  FindActCtxSectionStringA: [ BOOL, { dwFlags: DWORD, lpExtensionGuid: GUID.Δ, ulSectionId: ULONG, lpStringToFind: LPCSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  FindActCtxSectionStringW: [ BOOL, { dwFlags: DWORD, lpExtensionGuid: GUID.Δ, ulSectionId: ULONG, lpStringToFind: LPCWSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  FindActCtxSectionGuid: [ BOOL, { dwFlags: DWORD, lpExtensionGuid: GUID.Δ, ulSectionId: ULONG, lpGuidToFind: GUID.Δ, ReturnedData: PACTCTX_SECTION_KEYED_DATA } ],
  QueryActCtxW: [ BOOL, { dwFlags: DWORD, hActCtx: HANDLE, pvSubInstance: PVOID, ulInfoClass: ULONG, pvBuffer: PVOID, cbBuffer: SIZE_T, pcbWrittenOrRequired: SIZE_T.Δ } ],
  ProcessIdToSessionId: [ BOOL, { dwProcessId: DWORD, pSessionId: DWORD.Δ } ],
  WTSGetActiveConsoleSessionId: [ DWORD, {  } ],
  IsWow64Process: [ BOOL, { hProcess: HANDLE, Wow64Process: PBOOL } ],
  GetLogicalProcessorInformation: [ BOOL, { Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: PDWORD } ],
  GetLogicalProcessorInformationEx: [ BOOL, { RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP, Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, ReturnedLength: PDWORD } ],
  GetActiveProcessorGroupCount: [ WORD, {  } ],
  GetMaximumProcessorGroupCount: [ WORD, {  } ],
  GetActiveProcessorCount: [ DWORD, { GroupNumber: WORD } ],
  GetMaximumProcessorCount: [ DWORD, { GroupNumber: WORD } ],
  GetNumaHighestNodeNumber: [ BOOL, { HighestNodeNumber: PULONG } ],
  GetNumaProcessorNode: [ BOOL, { Processor: UCHAR, NodeNumber: PUCHAR } ],
  GetNumaNodeNumberFromHandle: [ BOOL, { hFile: HANDLE, NodeNumber: PUSHORT } ],
  GetNumaProcessorNodeEx: [ BOOL, { Processor: PPROCESSOR_NUMBER, NodeNumber: PUSHORT } ],
  GetNumaNodeProcessorMask: [ BOOL, { Node: UCHAR, ProcessorMask: PULONGLONG } ],
  GetNumaNodeProcessorMaskEx: [ BOOL, { Node: USHORT, ProcessorMask: PGROUP_AFFINITY } ],
  GetNumaAvailableMemoryNode: [ BOOL, { Node: UCHAR, AvailableBytes: PULONGLONG } ],
  GetNumaAvailableMemoryNodeEx: [ BOOL, { Node: USHORT, AvailableBytes: PULONGLONG } ],
  GetNumaProximityNode: [ BOOL, { ProximityId: ULONG, NodeNumber: PUCHAR } ],
  GetNumaProximityNodeEx: [ BOOL, { ProximityId: ULONG, NodeNumber: PUSHORT } ],
  RegisterApplicationRecoveryCallback: [ HRESULT, { pRecoveyCallback: APPLICATION_RECOVERY_CALLBACK, pvParameter: PVOID, dwPingInterval: DWORD, dwFlags: DWORD } ],
  UnregisterApplicationRecoveryCallback: [ HRESULT, {  } ],
  RegisterApplicationRestart: [ HRESULT, { pwzCommandline: PCWSTR, dwFlags: DWORD } ],
  UnregisterApplicationRestart: [ HRESULT, {  } ],
  GetApplicationRecoveryCallback: [ HRESULT, { hProcess: HANDLE, pRecoveryCallback: APPLICATION_RECOVERY_CALLBACK.Δ, ppvParameter: PVOID.Δ, pdwPingInterval: PDWORD, pdwFlags: PDWORD } ],
  GetApplicationRestartSettings: [ HRESULT, { hProcess: HANDLE, pwzCommandline: PWSTR, pcchSize: PDWORD, pdwFlags: PDWORD } ],
  ApplicationRecoveryInProgress: [ HRESULT, { pbCancelled: PBOOL } ],
  ApplicationRecoveryFinished: [ _void, { bSuccess: BOOL } ],
  SetFileInformationByHandle: [ BOOL, { hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD } ],
  GetFileInformationByHandleEx: [ BOOL, { hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD } ],
  OpenFileById: [ HANDLE, { hVolumeHint: HANDLE, lpFileId: LPFILE_ID_DESCRIPTOR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwFlagsAndAttributes: DWORD } ],
  CreateSymbolicLinkA: [ BOOLEAN, { lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD } ],
  CreateSymbolicLinkW: [ BOOLEAN, { lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD } ],
  CreateSymbolicLinkTransactedA: [ BOOLEAN, { lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD, hTransaction: HANDLE } ],
  CreateSymbolicLinkTransactedW: [ BOOLEAN, { lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD, hTransaction: HANDLE } ],
  GetFinalPathNameByHandleA: [ DWORD, { hFile: HANDLE, lpszFilePath: LPSTR, cchFilePath: DWORD, dwFlags: DWORD } ],
  GetFinalPathNameByHandleW: [ DWORD, { hFile: HANDLE, lpszFilePath: LPWSTR, cchFilePath: DWORD, dwFlags: DWORD } ],
  QueryActCtxSettingsW: [ BOOL, { dwFlags: DWORD, hActCtx: HANDLE, settingsNameSpace: PCWSTR, settingName: PCWSTR, pvBuffer: PWSTR, dwBuffer: SIZE_T, pdwWrittenOrRequired: SIZE_T.Δ } ],
  ReplacePartitionUnit: [ BOOL, { TargetPartition: PWSTR, SparePartition: PWSTR, Flags: ULONG } ],
  AddSecureMemoryCacheCallback: [ BOOL, { pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK } ],
  RemoveSecureMemoryCacheCallback: [ BOOL, { pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK } ],
  CopyExtendedContext: [ BOOL, { Destination: PCONTEXT_EX, ContextFlags: DWORD, Source: PCONTEXT_EX } ],
  InitializeExtendedContext: [ BOOL, { Context: PVOID, ContextFlags: DWORD, ContextEx: PCONTEXT_EX.Δ } ],
  GetEnabledExtendedFeatures: [ DWORD64, { FeatureMask: DWORD64 } ],
  GetExtendedContextLength: [ BOOL, { ContextFlags: DWORD, ContextLength: PDWORD } ],
  GetExtendedFeaturesMask: [ DWORD64, { ContextEx: PCONTEXT_EX } ],
  LocateExtendedFeature: [ PVOID, { ContextEx: PCONTEXT_EX, FeatureId: DWORD, Length: PDWORD } ],
  LocateLegacyContext: [ PCONTEXT, { ContextEx: PCONTEXT_EX, Length: PDWORD } ],
  SetExtendedFeaturesMask: [ _void, { ContextEx: PCONTEXT_EX, FeatureMask: DWORD64 } ],
  EnableThreadProfiling: [ DWORD, { ThreadHandle: HANDLE, Flags: DWORD, HardwareCounters: DWORD64, PerformanceDataHandle: HANDLE.Δ } ],
  DisableThreadProfiling: [ DWORD, { PerformanceDataHandle: HANDLE } ],
  QueryThreadProfiling: [ DWORD, { ThreadHandle: HANDLE, Enabled: PBOOLEAN } ],
  ReadThreadProfilingData: [ DWORD, { PerformanceDataHandle: HANDLE, Flags: DWORD, PerformanceData: PPERFORMANCE_DATA } ],
  AddFontResourceA: [ _void, { LPCSTR: LPCSTR } ],
  AddFontResourceW: [ _void, { LPCWSTR: LPCWSTR } ],
  AnimatePalette: [ BOOL, { hPal: HPALETTE, iStartIndex: UINT, cEntries: UINT, ppe: PALETTEENTRY.Δ } ],
  Arc: [ BOOL, { hdc: HDC, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int } ],
  BitBlt: [ BOOL, { hdc: HDC, x: int, y: int, cx: int, cy: int, hdcSrc: HDC, x1: int, y1: int, rop: DWORD } ],
  CancelDC: [ BOOL, { hdc: HDC } ],
  Chord: [ BOOL, { hdc: HDC, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int, x4: int, y4: int } ],
  ChoosePixelFormat: [ _void, { hdc: HDC, ppfd: PIXELFORMATDESCRIPTOR.Δ } ],
  CloseMetaFile: [ HMETAFILE, { hdc: HDC } ],
  CombineRgn: [ _void, { hrgnDst: HRGN, hrgnSrc1: HRGN, hrgnSrc2: HRGN, iMode: int } ],
  CopyMetaFileA: [ HMETAFILE, { LPCSTR: LPCSTR } ],
  CopyMetaFileW: [ HMETAFILE, { LPCWSTR: LPCWSTR } ],
  CreateBitmap: [ HBITMAP, { nWidth: int, nHeight: int, nPlanes: UINT, nBitCount: UINT, lpBits: _void.Δ } ],
  CreateBitmapIndirect: [ HBITMAP, { pbm: BITMAP.Δ } ],
  CreateBrushIndirect: [ HBRUSH, { plbrush: LOGBRUSH.Δ } ],
  CreateCompatibleBitmap: [ HBITMAP, { hdc: HDC, cx: int, cy: int } ],
  CreateDiscardableBitmap: [ HBITMAP, { hdc: HDC, cx: int, cy: int } ],
  CreateCompatibleDC: [ HDC, { hdc: HDC } ],
  CreateDCA: [ HDC, { pwszDriver: LPCSTR, pwszDevice: LPCSTR, pszPort: LPCSTR, pdm: DEVMODEA.Δ } ],
  CreateDCW: [ HDC, { pwszDriver: LPCWSTR, pwszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: DEVMODEW.Δ } ],
  CreateDIBitmap: [ HBITMAP, { hdc: HDC, pbmih: BITMAPINFOHEADER.Δ, flInit: DWORD, pjBits: _void.Δ, pbmi: BITMAPINFO.Δ, iUsage: UINT } ],
  CreateDIBPatternBrush: [ HBRUSH, { h: HGLOBAL, iUsage: UINT } ],
  CreateDIBPatternBrushPt: [ HBRUSH, { lpPackedDIB: _void.Δ, iUsage: UINT } ],
  CreateEllipticRgn: [ HRGN, { x1: int, y1: int, x2: int, y2: int } ],
  CreateEllipticRgnIndirect: [ HRGN, { lprect: RECT.Δ } ],
  CreateFontIndirectA: [ HFONT, { lplf: LOGFONTA.Δ } ],
  CreateFontIndirectW: [ HFONT, { lplf: LOGFONTW.Δ } ],
  CreateFontA: [ HFONT, { cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCSTR } ],
  CreateFontW: [ HFONT, { cHeight: int, cWidth: int, cEscapement: int, cOrientation: int, cWeight: int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCWSTR } ],
  CreateHatchBrush: [ HBRUSH, { iHatch: int, color: COLORREF } ],
  CreateICA: [ HDC, { pszDriver: LPCSTR, pszDevice: LPCSTR, pszPort: LPCSTR, pdm: DEVMODEA.Δ } ],
  CreateICW: [ HDC, { pszDriver: LPCWSTR, pszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: DEVMODEW.Δ } ],
  CreateMetaFileA: [ HDC, { pszFile: LPCSTR } ],
  CreateMetaFileW: [ HDC, { pszFile: LPCWSTR } ],
  CreatePalette: [ HPALETTE, { plpal: LOGPALETTE.Δ } ],
  CreatePen: [ HPEN, { iStyle: int, cWidth: int, color: COLORREF } ],
  CreatePenIndirect: [ HPEN, { plpen: LOGPEN.Δ } ],
  CreatePolyPolygonRgn: [ HRGN, { pptl: POINT.Δ, pc: INT.Δ, cPoly: int, iMode: int } ],
  CreatePatternBrush: [ HBRUSH, { hbm: HBITMAP } ],
  CreateRectRgn: [ HRGN, { x1: int, y1: int, x2: int, y2: int } ],
  CreateRectRgnIndirect: [ HRGN, { lprect: RECT.Δ } ],
  CreateRoundRectRgn: [ HRGN, { x1: int, y1: int, x2: int, y2: int, w: int, h: int } ],
  CreateScalableFontResourceA: [ BOOL, { fdwHidden: DWORD, lpszFont: LPCSTR, lpszFile: LPCSTR, lpszPath: LPCSTR } ],
  CreateScalableFontResourceW: [ BOOL, { fdwHidden: DWORD, lpszFont: LPCWSTR, lpszFile: LPCWSTR, lpszPath: LPCWSTR } ],
  CreateSolidBrush: [ HBRUSH, { color: COLORREF } ],
  DeleteDC: [ BOOL, { hdc: HDC } ],
  DeleteMetaFile: [ BOOL, { hmf: HMETAFILE } ],
  DeleteObject: [ BOOL, { ho: HGDIOBJ } ],
  DescribePixelFormat: [ _void, { hdc: HDC, iPixelFormat: int, nBytes: UINT, ppfd: LPPIXELFORMATDESCRIPTOR } ],
  DeviceCapabilitiesA: [ _void, { pDevice: LPCSTR, pPort: LPCSTR, fwCapability: WORD, pOutput: LPSTR, pDevMode: DEVMODEA.Δ } ],
  DeviceCapabilitiesW: [ _void, { pDevice: LPCWSTR, pPort: LPCWSTR, fwCapability: WORD, pOutput: LPWSTR, pDevMode: DEVMODEW.Δ } ],
  DrawEscape: [ _void, { hdc: HDC, iEscape: int, cjIn: int, lpIn: LPCSTR } ],
  Ellipse: [ BOOL, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  EnumFontFamiliesExA: [ _void, { hdc: HDC, lpLogfont: LPLOGFONTA, lpProc: FONTENUMPROCA, lParam: LPARAM, dwFlags: DWORD } ],
  EnumFontFamiliesExW: [ _void, { hdc: HDC, lpLogfont: LPLOGFONTW, lpProc: FONTENUMPROCW, lParam: LPARAM, dwFlags: DWORD } ],
  EnumFontFamiliesA: [ _void, { hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM } ],
  EnumFontFamiliesW: [ _void, { hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM } ],
  EnumFontsA: [ _void, { hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM } ],
  EnumFontsW: [ _void, { hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM } ],
  EnumObjects: [ _void, { hdc: HDC, nType: int, lpFunc: GOBJENUMPROC, lParam: LPARAM } ],
  EqualRgn: [ BOOL, { hrgn1: HRGN, hrgn2: HRGN } ],
  Escape: [ _void, { hdc: HDC, iEscape: int, cjIn: int, pvIn: LPCSTR, pvOut: LPVOID } ],
  ExtEscape: [ _void, { hdc: HDC, iEscape: int, cjInput: int, lpInData: LPCSTR, cjOutput: int, lpOutData: LPSTR } ],
  ExcludeClipRect: [ _void, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  ExtCreateRegion: [ HRGN, { lpx: XFORM.Δ, nCount: DWORD, lpData: RGNDATA.Δ } ],
  ExtFloodFill: [ BOOL, { hdc: HDC, x: int, y: int, color: COLORREF, type: UINT } ],
  FillRgn: [ BOOL, { hdc: HDC, hrgn: HRGN, hbr: HBRUSH } ],
  FloodFill: [ BOOL, { hdc: HDC, x: int, y: int, color: COLORREF } ],
  FrameRgn: [ BOOL, { hdc: HDC, hrgn: HRGN, hbr: HBRUSH, w: int, h: int } ],
  GetROP2: [ _void, { hdc: HDC } ],
  GetAspectRatioFilterEx: [ BOOL, { hdc: HDC, lpsize: LPSIZE } ],
  GetBkColor: [ COLORREF, { hdc: HDC } ],
  GetDCBrushColor: [ COLORREF, { hdc: HDC } ],
  GetDCPenColor: [ COLORREF, { hdc: HDC } ],
  GetBkMode: [ _void, { hdc: HDC } ],
  GetBitmapBits: [ LONG, { hbit: HBITMAP, cb: LONG, lpvBits: LPVOID } ],
  GetBitmapDimensionEx: [ BOOL, { hbit: HBITMAP, lpsize: LPSIZE } ],
  GetBoundsRect: [ UINT, { hdc: HDC, lprect: LPRECT, flags: UINT } ],
  GetBrushOrgEx: [ BOOL, { hdc: HDC, lppt: LPPOINT } ],
  GetCharWidthA: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidthW: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidth32A: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidth32W: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT } ],
  GetCharWidthFloatA: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT } ],
  GetCharWidthFloatW: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT } ],
  GetCharABCWidthsA: [ BOOL, { hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC } ],
  GetCharABCWidthsW: [ BOOL, { hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC } ],
  GetCharABCWidthsFloatA: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT } ],
  GetCharABCWidthsFloatW: [ BOOL, { hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT } ],
  GetClipBox: [ _void, { hdc: HDC, lprect: LPRECT } ],
  GetClipRgn: [ _void, { hdc: HDC, hrgn: HRGN } ],
  GetMetaRgn: [ _void, { hdc: HDC, hrgn: HRGN } ],
  GetCurrentObject: [ HGDIOBJ, { hdc: HDC, type: UINT } ],
  GetCurrentPositionEx: [ BOOL, { hdc: HDC, lppt: LPPOINT } ],
  GetDeviceCaps: [ _void, { hdc: HDC, index: int } ],
  GetDIBits: [ _void, { hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpvBits: LPVOID, lpbmi: LPBITMAPINFO, usage: UINT } ],
  GetFontData: [ DWORD, { hdc: HDC, dwTable: DWORD, dwOffset: DWORD, pvBuffer: PVOID, cjBuffer: DWORD } ],
  GetGlyphOutlineA: [ DWORD, { hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: MAT2.Δ } ],
  GetGlyphOutlineW: [ DWORD, { hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: MAT2.Δ } ],
  GetGraphicsMode: [ _void, { hdc: HDC } ],
  GetMapMode: [ _void, { hdc: HDC } ],
  GetMetaFileBitsEx: [ UINT, { hMF: HMETAFILE, cbBuffer: UINT, lpData: LPVOID } ],
  GetMetaFileA: [ HMETAFILE, { lpName: LPCSTR } ],
  GetMetaFileW: [ HMETAFILE, { lpName: LPCWSTR } ],
  GetNearestColor: [ COLORREF, { hdc: HDC, color: COLORREF } ],
  GetNearestPaletteIndex: [ UINT, { h: HPALETTE, color: COLORREF } ],
  GetObjectType: [ DWORD, { h: HGDIOBJ } ],
  GetOutlineTextMetricsA: [ UINT, { hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICA } ],
  GetOutlineTextMetricsW: [ UINT, { hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICW } ],
  GetPaletteEntries: [ UINT, { hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY } ],
  GetPixel: [ COLORREF, { hdc: HDC, x: int, y: int } ],
  GetPixelFormat: [ _void, { hdc: HDC } ],
  GetPolyFillMode: [ _void, { hdc: HDC } ],
  GetRasterizerCaps: [ BOOL, { lpraststat: LPRASTERIZER_STATUS, cjBytes: UINT } ],
  GetRandomRgn: [ _void, { hdc: HDC, hrgn: HRGN, i: INT } ],
  GetRegionData: [ DWORD, { hrgn: HRGN, nCount: DWORD, lpRgnData: LPRGNDATA } ],
  GetRgnBox: [ _void, { hrgn: HRGN, lprc: LPRECT } ],
  GetStockObject: [ HGDIOBJ, { i: int } ],
  GetStretchBltMode: [ _void, { hdc: HDC } ],
  GetSystemPaletteEntries: [ UINT, { hdc: HDC, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY } ],
  GetSystemPaletteUse: [ UINT, { hdc: HDC } ],
  GetTextCharacterExtra: [ _void, { hdc: HDC } ],
  GetTextAlign: [ UINT, { hdc: HDC } ],
  GetTextColor: [ COLORREF, { hdc: HDC } ],
  GetTextExtentPointA: [ BOOL, { hdc: HDC, lpString: LPCSTR, c: int, lpsz: LPSIZE } ],
  GetTextExtentPointW: [ BOOL, { hdc: HDC, lpString: LPCWSTR, c: int, lpsz: LPSIZE } ],
  GetTextExtentPoint32A: [ BOOL, { hdc: HDC, lpString: LPCSTR, c: int, psizl: LPSIZE } ],
  GetTextExtentPoint32W: [ BOOL, { hdc: HDC, lpString: LPCWSTR, c: int, psizl: LPSIZE } ],
  GetTextExtentExPointA: [ BOOL, { hdc: HDC, lpszString: LPCSTR, cchString: int, nMaxExtent: int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE } ],
  GetTextExtentExPointW: [ BOOL, { hdc: HDC, lpszString: LPCWSTR, cchString: int, nMaxExtent: int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE } ],
  GetTextCharset: [ _void, { hdc: HDC } ],
  GetTextCharsetInfo: [ _void, { hdc: HDC, lpSig: LPFONTSIGNATURE, dwFlags: DWORD } ],
  TranslateCharsetInfo: [ BOOL, { lpSrc: DWORD.Δ, lpCs: LPCHARSETINFO, dwFlags: DWORD } ],
  GetFontLanguageInfo: [ DWORD, { hdc: HDC } ],
  GetCharacterPlacementA: [ DWORD, { hdc: HDC, lpString: LPCSTR, nCount: int, nMexExtent: int, lpResults: LPGCP_RESULTSA, dwFlags: DWORD } ],
  GetCharacterPlacementW: [ DWORD, { hdc: HDC, lpString: LPCWSTR, nCount: int, nMexExtent: int, lpResults: LPGCP_RESULTSW, dwFlags: DWORD } ],
  GetFontUnicodeRanges: [ DWORD, { hdc: HDC, lpgs: LPGLYPHSET } ],
  GetGlyphIndicesA: [ DWORD, { hdc: HDC, lpstr: LPCSTR, c: int, pgi: LPWORD, fl: DWORD } ],
  GetGlyphIndicesW: [ DWORD, { hdc: HDC, lpstr: LPCWSTR, c: int, pgi: LPWORD, fl: DWORD } ],
  GetTextExtentPointI: [ BOOL, { hdc: HDC, pgiIn: LPWORD, cgi: int, psize: LPSIZE } ],
  GetTextExtentExPointI: [ BOOL, { hdc: HDC, lpwszString: LPWORD, cwchString: int, nMaxExtent: int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE } ],
  GetCharWidthI: [ BOOL, { hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, piWidths: LPINT } ],
  GetCharABCWidthsI: [ BOOL, { hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, pabc: LPABC } ],
  AddFontResourceExA: [ _void, { name: LPCSTR, fl: DWORD, res: PVOID } ],
  AddFontResourceExW: [ _void, { name: LPCWSTR, fl: DWORD, res: PVOID } ],
  RemoveFontResourceExA: [ BOOL, { name: LPCSTR, fl: DWORD, pdv: PVOID } ],
  RemoveFontResourceExW: [ BOOL, { name: LPCWSTR, fl: DWORD, pdv: PVOID } ],
  AddFontMemResourceEx: [ HANDLE, { pFileView: PVOID, cjSize: DWORD, pvResrved: PVOID, pNumFonts: DWORD.Δ } ],
  RemoveFontMemResourceEx: [ BOOL, { h: HANDLE } ],
  CreateFontIndirectExA: [ HFONT, { ENUMLOGFONTEXDVA.Δ: ENUMLOGFONTEXDVA.Δ } ],
  CreateFontIndirectExW: [ HFONT, { ENUMLOGFONTEXDVW.Δ: ENUMLOGFONTEXDVW.Δ } ],
  GetViewportExtEx: [ BOOL, { hdc: HDC, lpsize: LPSIZE } ],
  GetViewportOrgEx: [ BOOL, { hdc: HDC, lppoint: LPPOINT } ],
  GetWindowExtEx: [ BOOL, { hdc: HDC, lpsize: LPSIZE } ],
  GetWindowOrgEx: [ BOOL, { hdc: HDC, lppoint: LPPOINT } ],
  IntersectClipRect: [ _void, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  InvertRgn: [ BOOL, { hdc: HDC, hrgn: HRGN } ],
  LineDDA: [ BOOL, { xStart: int, yStart: int, xEnd: int, yEnd: int, lpProc: LINEDDAPROC, data: LPARAM } ],
  LineTo: [ BOOL, { hdc: HDC, x: int, y: int } ],
  MaskBlt: [ BOOL, { hdcDest: HDC, xDest: int, yDest: int, width: int, height: int, hdcSrc: HDC, xSrc: int, ySrc: int, hbmMask: HBITMAP, xMask: int, yMask: int, rop: DWORD } ],
  PlgBlt: [ BOOL, { hdcDest: HDC, lpPoint: POINT.Δ, hdcSrc: HDC, xSrc: int, ySrc: int, width: int, height: int, hbmMask: HBITMAP, xMask: int, yMask: int } ],
  OffsetClipRgn: [ _void, { hdc: HDC, x: int, y: int } ],
  OffsetRgn: [ _void, { hrgn: HRGN, x: int, y: int } ],
  PatBlt: [ BOOL, { hdc: HDC, x: int, y: int, w: int, h: int, rop: DWORD } ],
  Pie: [ BOOL, { hdc: HDC, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int } ],
  PlayMetaFile: [ BOOL, { hdc: HDC, hmf: HMETAFILE } ],
  PaintRgn: [ BOOL, { hdc: HDC, hrgn: HRGN } ],
  PolyPolygon: [ BOOL, { hdc: HDC, apt: POINT.Δ, asz: INT.Δ, csz: int } ],
  PtInRegion: [ BOOL, { hrgn: HRGN, x: int, y: int } ],
  PtVisible: [ BOOL, { hdc: HDC, x: int, y: int } ],
  RectInRegion: [ BOOL, { hrgn: HRGN, lprect: RECT.Δ } ],
  RectVisible: [ BOOL, { hdc: HDC, lprect: RECT.Δ } ],
  Rectangle: [ BOOL, { hdc: HDC, left: int, top: int, right: int, bottom: int } ],
  RestoreDC: [ BOOL, { hdc: HDC, nSavedDC: int } ],
  ResetDCA: [ HDC, { hdc: HDC, lpdm: DEVMODEA.Δ } ],
  ResetDCW: [ HDC, { hdc: HDC, lpdm: DEVMODEW.Δ } ],
  RealizePalette: [ UINT, { hdc: HDC } ],
  RemoveFontResourceA: [ BOOL, { lpFileName: LPCSTR } ],
  RemoveFontResourceW: [ BOOL, { lpFileName: LPCWSTR } ],
  RoundRect: [ BOOL, { hdc: HDC, left: int, top: int, right: int, bottom: int, width: int, height: int } ],
  ResizePalette: [ BOOL, { hpal: HPALETTE, n: UINT } ],
  SaveDC: [ _void, { hdc: HDC } ],
  SelectClipRgn: [ _void, { hdc: HDC, hrgn: HRGN } ],
  ExtSelectClipRgn: [ _void, { hdc: HDC, hrgn: HRGN, mode: int } ],
  SetMetaRgn: [ _void, { hdc: HDC } ],
  SelectObject: [ HGDIOBJ, { hdc: HDC, h: HGDIOBJ } ],
  SelectPalette: [ HPALETTE, { hdc: HDC, hPal: HPALETTE, bForceBkgd: BOOL } ],
  SetBkColor: [ COLORREF, { hdc: HDC, color: COLORREF } ],
  SetDCBrushColor: [ COLORREF, { hdc: HDC, color: COLORREF } ],
  SetDCPenColor: [ COLORREF, { hdc: HDC, color: COLORREF } ],
  SetBkMode: [ _void, { hdc: HDC, mode: int } ],
  SetBitmapBits: [ LONG, { hbm: HBITMAP, cb: DWORD, pvBits: _void.Δ } ],
  SetBoundsRect: [ UINT, { hdc: HDC, lprect: RECT.Δ, flags: UINT } ],
  SetDIBits: [ _void, { hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpBits: _void.Δ, lpbmi: BITMAPINFO.Δ, ColorUse: UINT } ],
  SetDIBitsToDevice: [ _void, { hdc: HDC, xDest: int, yDest: int, w: DWORD, h: DWORD, xSrc: int, ySrc: int, StartScan: UINT, cLines: UINT, lpvBits: _void.Δ, lpbmi: BITMAPINFO.Δ, ColorUse: UINT } ],
  SetMapperFlags: [ DWORD, { hdc: HDC, flags: DWORD } ],
  SetGraphicsMode: [ _void, { hdc: HDC, iMode: int } ],
  SetMapMode: [ _void, { hdc: HDC, iMode: int } ],
  SetLayout: [ DWORD, { hdc: HDC, l: DWORD } ],
  GetLayout: [ DWORD, { hdc: HDC } ],
  SetMetaFileBitsEx: [ HMETAFILE, { cbBuffer: UINT, lpData: BYTE.Δ } ],
  SetPaletteEntries: [ UINT, { hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: PALETTEENTRY.Δ } ],
  SetPixel: [ COLORREF, { hdc: HDC, x: int, y: int, color: COLORREF } ],
  SetPixelV: [ BOOL, { hdc: HDC, x: int, y: int, color: COLORREF } ],
  SetPixelFormat: [ BOOL, { hdc: HDC, format: int, ppfd: PIXELFORMATDESCRIPTOR.Δ } ],
  SetPolyFillMode: [ _void, { hdc: HDC, mode: int } ],
  StretchBlt: [ BOOL, { hdcDest: HDC, xDest: int, yDest: int, wDest: int, hDest: int, hdcSrc: HDC, xSrc: int, ySrc: int, wSrc: int, hSrc: int, rop: DWORD } ],
  SetRectRgn: [ BOOL, { hrgn: HRGN, left: int, top: int, right: int, bottom: int } ],
  StretchDIBits: [ _void, { hdc: HDC, xDest: int, yDest: int, DestWidth: int, DestHeight: int, xSrc: int, ySrc: int, SrcWidth: int, SrcHeight: int, lpBits: _void.Δ, lpbmi: BITMAPINFO.Δ, iUsage: UINT, rop: DWORD } ],
  SetROP2: [ _void, { hdc: HDC, rop2: int } ],
  SetStretchBltMode: [ _void, { hdc: HDC, mode: int } ],
  SetSystemPaletteUse: [ UINT, { hdc: HDC, use: UINT } ],
  SetTextCharacterExtra: [ _void, { hdc: HDC, extra: int } ],
  SetTextColor: [ COLORREF, { hdc: HDC, color: COLORREF } ],
  SetTextAlign: [ UINT, { hdc: HDC, align: UINT } ],
  SetTextJustification: [ BOOL, { hdc: HDC, extra: int, count: int } ],
  UpdateColors: [ BOOL, { hdc: HDC } ],
  AlphaBlend: [ BOOL, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: BLENDFUNCTION } ],
  TransparentBlt: [ BOOL, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: UINT } ],
  GradientFill: [ BOOL, { hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nMesh: ULONG, ulMode: ULONG } ],
  GdiAlphaBlend: [ BOOL, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, ftn: BLENDFUNCTION } ],
  GdiTransparentBlt: [ BOOL, { hdcDest: HDC, xoriginDest: int, yoriginDest: int, wDest: int, hDest: int, hdcSrc: HDC, xoriginSrc: int, yoriginSrc: int, wSrc: int, hSrc: int, crTransparent: UINT } ],
  GdiGradientFill: [ BOOL, { hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nCount: ULONG, ulMode: ULONG } ],
  PlayMetaFileRecord: [ BOOL, { hdc: HDC, lpHandleTable: LPHANDLETABLE, lpMR: LPMETARECORD, noObjs: UINT } ],
  EnumMetaFile: [ BOOL, { hdc: HDC, hmf: HMETAFILE, proc: MFENUMPROC, param: LPARAM } ],
  CloseEnhMetaFile: [ HENHMETAFILE, { hdc: HDC } ],
  CopyEnhMetaFileA: [ HENHMETAFILE, { hEnh: HENHMETAFILE, lpFileName: LPCSTR } ],
  CopyEnhMetaFileW: [ HENHMETAFILE, { hEnh: HENHMETAFILE, lpFileName: LPCWSTR } ],
  CreateEnhMetaFileA: [ HDC, { hdc: HDC, lpFilename: LPCSTR, lprc: RECT.Δ, lpDesc: LPCSTR } ],
  CreateEnhMetaFileW: [ HDC, { hdc: HDC, lpFilename: LPCWSTR, lprc: RECT.Δ, lpDesc: LPCWSTR } ],
  DeleteEnhMetaFile: [ BOOL, { hmf: HENHMETAFILE } ],
  EnumEnhMetaFile: [ BOOL, { hdc: HDC, hmf: HENHMETAFILE, proc: ENHMFENUMPROC, param: LPVOID, lpRect: RECT.Δ } ],
  GetEnhMetaFileA: [ HENHMETAFILE, { lpName: LPCSTR } ],
  GetEnhMetaFileW: [ HENHMETAFILE, { lpName: LPCWSTR } ],
  GetEnhMetaFileBits: [ UINT, { hEMF: HENHMETAFILE, nSize: UINT, lpData: LPBYTE } ],
  GetEnhMetaFileDescriptionA: [ UINT, { hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPSTR } ],
  GetEnhMetaFileDescriptionW: [ UINT, { hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPWSTR } ],
  GetEnhMetaFileHeader: [ UINT, { hemf: HENHMETAFILE, nSize: UINT, lpEnhMetaHeader: LPENHMETAHEADER } ],
  GetEnhMetaFilePaletteEntries: [ UINT, { hemf: HENHMETAFILE, nNumEntries: UINT, lpPaletteEntries: LPPALETTEENTRY } ],
  GetEnhMetaFilePixelFormat: [ UINT, { hemf: HENHMETAFILE, cbBuffer: UINT, ppfd: PIXELFORMATDESCRIPTOR.Δ } ],
  GetWinMetaFileBits: [ UINT, { hemf: HENHMETAFILE, cbData16: UINT, pData16: LPBYTE, iMapMode: INT, hdcRef: HDC } ],
  PlayEnhMetaFile: [ BOOL, { hdc: HDC, hmf: HENHMETAFILE, lprect: RECT.Δ } ],
  PlayEnhMetaFileRecord: [ BOOL, { hdc: HDC, pht: LPHANDLETABLE, pmr: ENHMETARECORD.Δ, cht: UINT } ],
  SetEnhMetaFileBits: [ HENHMETAFILE, { nSize: UINT, pb: BYTE.Δ } ],
  SetWinMetaFileBits: [ HENHMETAFILE, { nSize: UINT, lpMeta16Data: BYTE.Δ, hdcRef: HDC, lpMFP: METAFILEPICT.Δ } ],
  GdiComment: [ BOOL, { hdc: HDC, nSize: UINT, lpData: BYTE.Δ } ],
  GetTextMetricsA: [ BOOL, { hdc: HDC, lptm: LPTEXTMETRICA } ],
  GetTextMetricsW: [ BOOL, { hdc: HDC, lptm: LPTEXTMETRICW } ],
  AngleArc: [ BOOL, { hdc: HDC, x: int, y: int, r: DWORD, StartAngle: FLOAT, SweepAngle: FLOAT } ],
  PolyPolyline: [ BOOL, { hdc: HDC, apt: POINT.Δ, asz: DWORD.Δ, csz: DWORD } ],
  GetWorldTransform: [ BOOL, { hdc: HDC, lpxf: LPXFORM } ],
  SetWorldTransform: [ BOOL, { hdc: HDC, lpxf: XFORM.Δ } ],
  ModifyWorldTransform: [ BOOL, { hdc: HDC, lpxf: XFORM.Δ, mode: DWORD } ],
  CombineTransform: [ BOOL, { lpxfOut: LPXFORM, lpxf1: XFORM.Δ, lpxf2: XFORM.Δ } ],
  CreateDIBSection: [ HBITMAP, { hdc: HDC, lpbmi: BITMAPINFO.Δ, usage: UINT, ppvBits: _void.Δ.Δ, hSection: HANDLE, offset: DWORD } ],
  GetDIBColorTable: [ UINT, { hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: RGBQUAD.Δ } ],
  SetDIBColorTable: [ UINT, { hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: RGBQUAD.Δ } ],
  SetColorAdjustment: [ BOOL, { hdc: HDC, lpca: COLORADJUSTMENT.Δ } ],
  GetColorAdjustment: [ BOOL, { hdc: HDC, lpca: LPCOLORADJUSTMENT } ],
  CreateHalftonePalette: [ HPALETTE, { hdc: HDC } ],
  StartDocA: [ _void, { hdc: HDC, lpdi: DOCINFOA.Δ } ],
  StartDocW: [ _void, { hdc: HDC, lpdi: DOCINFOW.Δ } ],
  EndDoc: [ _void, { hdc: HDC } ],
  StartPage: [ _void, { hdc: HDC } ],
  EndPage: [ _void, { hdc: HDC } ],
  AbortDoc: [ _void, { hdc: HDC } ],
  SetAbortProc: [ _void, { hdc: HDC, proc: ABORTPROC } ],
  AbortPath: [ BOOL, { hdc: HDC } ],
  ArcTo: [ BOOL, { hdc: HDC, left: int, top: int, right: int, bottom: int, xr1: int, yr1: int, xr2: int, yr2: int } ],
  BeginPath: [ BOOL, { hdc: HDC } ],
  CloseFigure: [ BOOL, { hdc: HDC } ],
  EndPath: [ BOOL, { hdc: HDC } ],
  FillPath: [ BOOL, { hdc: HDC } ],
  FlattenPath: [ BOOL, { hdc: HDC } ],
  GetPath: [ _void, { hdc: HDC, apt: LPPOINT, aj: LPBYTE, cpt: int } ],
  PathToRegion: [ HRGN, { hdc: HDC } ],
  PolyDraw: [ BOOL, { hdc: HDC, apt: POINT.Δ, aj: BYTE.Δ, cpt: int } ],
  SelectClipPath: [ BOOL, { hdc: HDC, mode: int } ],
  SetArcDirection: [ _void, { hdc: HDC, dir: int } ],
  SetMiterLimit: [ BOOL, { hdc: HDC, limit: FLOAT, old: PFLOAT } ],
  StrokeAndFillPath: [ BOOL, { hdc: HDC } ],
  StrokePath: [ BOOL, { hdc: HDC } ],
  WidenPath: [ BOOL, { hdc: HDC } ],
  ExtCreatePen: [ HPEN, { iPenStyle: DWORD, cWidth: DWORD, plbrush: LOGBRUSH.Δ, cStyle: DWORD, pstyle: DWORD.Δ } ],
  GetMiterLimit: [ BOOL, { hdc: HDC, plimit: PFLOAT } ],
  GetArcDirection: [ _void, { hdc: HDC } ],
  GetObjectA: [ _void, { h: HANDLE, c: int, pv: LPVOID } ],
  GetObjectW: [ _void, { h: HANDLE, c: int, pv: LPVOID } ],
  MoveToEx: [ BOOL, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  TextOutA: [ BOOL, { hdc: HDC, x: int, y: int, lpString: LPCSTR, c: int } ],
  TextOutW: [ BOOL, { hdc: HDC, x: int, y: int, lpString: LPCWSTR, c: int } ],
  ExtTextOutA: [ BOOL, { hdc: HDC, x: int, y: int, options: UINT, lprect: RECT.Δ, lpString: LPCSTR, c: UINT, lpDx: INT.Δ } ],
  ExtTextOutW: [ BOOL, { hdc: HDC, x: int, y: int, options: UINT, lprect: RECT.Δ, lpString: LPCWSTR, c: UINT, lpDx: INT.Δ } ],
  PolyTextOutA: [ BOOL, { hdc: HDC, ppt: POLYTEXTA.Δ, nstrings: int } ],
  PolyTextOutW: [ BOOL, { hdc: HDC, ppt: POLYTEXTW.Δ, nstrings: int } ],
  CreatePolygonRgn: [ HRGN, { pptl: POINT.Δ, cPoint: int, iMode: int } ],
  DPtoLP: [ BOOL, { hdc: HDC, lppt: LPPOINT, c: int } ],
  LPtoDP: [ BOOL, { hdc: HDC, lppt: LPPOINT, c: int } ],
  Polygon: [ BOOL, { hdc: HDC, apt: POINT.Δ, cpt: int } ],
  Polyline: [ BOOL, { hdc: HDC, apt: POINT.Δ, cpt: int } ],
  PolyBezier: [ BOOL, { hdc: HDC, apt: POINT.Δ, cpt: DWORD } ],
  PolyBezierTo: [ BOOL, { hdc: HDC, apt: POINT.Δ, cpt: DWORD } ],
  PolylineTo: [ BOOL, { hdc: HDC, apt: POINT.Δ, cpt: DWORD } ],
  SetViewportExtEx: [ BOOL, { hdc: HDC, x: int, y: int, lpsz: LPSIZE } ],
  SetViewportOrgEx: [ BOOL, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  SetWindowExtEx: [ BOOL, { hdc: HDC, x: int, y: int, lpsz: LPSIZE } ],
  SetWindowOrgEx: [ BOOL, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  OffsetViewportOrgEx: [ BOOL, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  OffsetWindowOrgEx: [ BOOL, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  ScaleViewportExtEx: [ BOOL, { hdc: HDC, xn: int, dx: int, yn: int, yd: int, lpsz: LPSIZE } ],
  ScaleWindowExtEx: [ BOOL, { hdc: HDC, xn: int, xd: int, yn: int, yd: int, lpsz: LPSIZE } ],
  SetBitmapDimensionEx: [ BOOL, { hbm: HBITMAP, w: int, h: int, lpsz: LPSIZE } ],
  SetBrushOrgEx: [ BOOL, { hdc: HDC, x: int, y: int, lppt: LPPOINT } ],
  GetTextFaceA: [ _void, { hdc: HDC, c: int, lpName: LPSTR } ],
  GetTextFaceW: [ _void, { hdc: HDC, c: int, lpName: LPWSTR } ],
  GetKerningPairsA: [ DWORD, { hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR } ],
  GetKerningPairsW: [ DWORD, { hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR } ],
  GetDCOrgEx: [ BOOL, { hdc: HDC, lppt: LPPOINT } ],
  FixBrushOrgEx: [ BOOL, { hdc: HDC, x: int, y: int, ptl: LPPOINT } ],
  UnrealizeObject: [ BOOL, { h: HGDIOBJ } ],
  GdiFlush: [ BOOL, {  } ],
  GdiSetBatchLimit: [ DWORD, { dw: DWORD } ],
  GdiGetBatchLimit: [ DWORD, {  } ],
  SetICMMode: [ _void, { hdc: HDC, mode: int } ],
  CheckColorsInGamut: [ BOOL, { hdc: HDC, lpRGBTriple: LPRGBTRIPLE, dlpBuffer: LPVOID, nCount: DWORD } ],
  GetColorSpace: [ HCOLORSPACE, { hdc: HDC } ],
  GetLogColorSpaceA: [ BOOL, { hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEA, nSize: DWORD } ],
  GetLogColorSpaceW: [ BOOL, { hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEW, nSize: DWORD } ],
  CreateColorSpaceA: [ HCOLORSPACE, { lplcs: LPLOGCOLORSPACEA } ],
  CreateColorSpaceW: [ HCOLORSPACE, { lplcs: LPLOGCOLORSPACEW } ],
  SetColorSpace: [ HCOLORSPACE, { hdc: HDC, hcs: HCOLORSPACE } ],
  DeleteColorSpace: [ BOOL, { hcs: HCOLORSPACE } ],
  GetICMProfileA: [ BOOL, { hdc: HDC, pBufSize: LPDWORD, pszFilename: LPSTR } ],
  GetICMProfileW: [ BOOL, { hdc: HDC, pBufSize: LPDWORD, pszFilename: LPWSTR } ],
  SetICMProfileA: [ BOOL, { hdc: HDC, lpFileName: LPSTR } ],
  SetICMProfileW: [ BOOL, { hdc: HDC, lpFileName: LPWSTR } ],
  GetDeviceGammaRamp: [ BOOL, { hdc: HDC, lpRamp: LPVOID } ],
  SetDeviceGammaRamp: [ BOOL, { hdc: HDC, lpRamp: LPVOID } ],
  ColorMatchToTarget: [ BOOL, { hdc: HDC, hdcTarget: HDC, action: DWORD } ],
  EnumICMProfilesA: [ _void, { hdc: HDC, proc: ICMENUMPROCA, param: LPARAM } ],
  EnumICMProfilesW: [ _void, { hdc: HDC, proc: ICMENUMPROCW, param: LPARAM } ],
  UpdateICMRegKeyA: [ BOOL, { reserved: DWORD, lpszCMID: LPSTR, lpszFileName: LPSTR, command: UINT } ],
  UpdateICMRegKeyW: [ BOOL, { reserved: DWORD, lpszCMID: LPWSTR, lpszFileName: LPWSTR, command: UINT } ],
  ColorCorrectPalette: [ BOOL, { hdc: HDC, hPal: HPALETTE, deFirst: DWORD, num: DWORD } ],
  wglCopyContext: [ BOOL, { UINT: UINT } ],
  wglCreateContext: [ HGLRC, { HDC: HDC } ],
  wglCreateLayerContext: [ HGLRC, { int: int } ],
  wglDeleteContext: [ BOOL, { HGLRC: HGLRC } ],
  wglGetCurrentContext: [ HGLRC, {  } ],
  wglGetCurrentDC: [ HDC, {  } ],
  wglGetProcAddress: [ PROC, { LPCSTR: LPCSTR } ],
  wglMakeCurrent: [ BOOL, { HGLRC: HGLRC } ],
  wglShareLists: [ BOOL, { HGLRC: HGLRC } ],
  wglUseFontBitmapsA: [ BOOL, { DWORD: DWORD } ],
  wglUseFontBitmapsW: [ BOOL, { DWORD: DWORD } ],
  SwapBuffers: [ BOOL, { HDC: HDC } ],
  wglUseFontOutlinesA: [ BOOL, { LPGLYPHMETRICSFLOAT: LPGLYPHMETRICSFLOAT } ],
  wglUseFontOutlinesW: [ BOOL, { LPGLYPHMETRICSFLOAT: LPGLYPHMETRICSFLOAT } ],
  wglDescribeLayerPlane: [ BOOL, { LPLAYERPLANEDESCRIPTOR: LPLAYERPLANEDESCRIPTOR } ],
  wglSetLayerPaletteEntries: [ _void, { COLORREF.Δ: COLORREF.Δ } ],
  wglGetLayerPaletteEntries: [ _void, { COLORREF.Δ: COLORREF.Δ } ],
  wglRealizeLayerPalette: [ BOOL, { BOOL: BOOL } ],
  wglSwapLayerBuffers: [ BOOL, { UINT: UINT } ],
  wglSwapMultipleBuffers: [ DWORD, { WGLSWAP.Δ: WGLSWAP.Δ } ],
  wvsprintfA: [ _void, { LPCSTR: LPCSTR, arglist: va_list } ],
  wvsprintfW: [ _void, { LPCWSTR: LPCWSTR, arglist: va_list } ],
  wsprintfA: [ _void, { LPCSTR: LPCSTR } ],
  wsprintfW: [ _void, { LPCWSTR: LPCWSTR } ],
  LoadKeyboardLayoutA: [ HKL, { pwszKLID: LPCSTR, Flags: UINT } ],
  LoadKeyboardLayoutW: [ HKL, { pwszKLID: LPCWSTR, Flags: UINT } ],
  ActivateKeyboardLayout: [ HKL, { hkl: HKL, Flags: UINT } ],
  ToUnicodeEx: [ _void, { wVirtKey: UINT, wScanCode: UINT, lpKeyState: BYTE.Δ, pwszBuff: LPWSTR, cchBuff: int, wFlags: UINT, dwhkl: HKL } ],
  UnloadKeyboardLayout: [ BOOL, { hkl: HKL } ],
  GetKeyboardLayoutNameA: [ BOOL, { pwszKLID: LPSTR } ],
  GetKeyboardLayoutNameW: [ BOOL, { pwszKLID: LPWSTR } ],
  GetKeyboardLayoutList: [ _void, { nBuff: int, lpList: HKL.Δ } ],
  GetKeyboardLayout: [ HKL, { idThread: DWORD } ],
  GetMouseMovePointsEx: [ _void, { cbSize: UINT, lppt: LPMOUSEMOVEPOINT, lpptBuf: LPMOUSEMOVEPOINT, nBufPoints: int, resolution: DWORD } ],
  CreateDesktopA: [ HDESK, { lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: DEVMODEA.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  CreateDesktopW: [ HDESK, { lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: DEVMODEW.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  CreateDesktopExA: [ HDESK, { lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: DEVMODEA.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID } ],
  CreateDesktopExW: [ HDESK, { lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: DEVMODEW.Δ, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID } ],
  OpenDesktopA: [ HDESK, { lpszDesktop: LPCSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  OpenDesktopW: [ HDESK, { lpszDesktop: LPCWSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  OpenInputDesktop: [ HDESK, { dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  EnumDesktopsA: [ BOOL, { hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCA, lParam: LPARAM } ],
  EnumDesktopsW: [ BOOL, { hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCW, lParam: LPARAM } ],
  EnumDesktopWindows: [ BOOL, { hDesktop: HDESK, lpfn: WNDENUMPROC, lParam: LPARAM } ],
  SwitchDesktop: [ BOOL, { hDesktop: HDESK } ],
  SetThreadDesktop: [ BOOL, { hDesktop: HDESK } ],
  CloseDesktop: [ BOOL, { hDesktop: HDESK } ],
  GetThreadDesktop: [ HDESK, { dwThreadId: DWORD } ],
  CreateWindowStationA: [ HWINSTA, { lpwinsta: LPCSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  CreateWindowStationW: [ HWINSTA, { lpwinsta: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES } ],
  OpenWindowStationA: [ HWINSTA, { lpszWinSta: LPCSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  OpenWindowStationW: [ HWINSTA, { lpszWinSta: LPCWSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK } ],
  EnumWindowStationsA: [ BOOL, { lpEnumFunc: WINSTAENUMPROCA, lParam: LPARAM } ],
  EnumWindowStationsW: [ BOOL, { lpEnumFunc: WINSTAENUMPROCW, lParam: LPARAM } ],
  CloseWindowStation: [ BOOL, { hWinSta: HWINSTA } ],
  SetProcessWindowStation: [ BOOL, { hWinSta: HWINSTA } ],
  GetProcessWindowStation: [ HWINSTA, {  } ],
  SetUserObjectSecurity: [ BOOL, { hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR } ],
  GetUserObjectSecurity: [ BOOL, { hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  GetUserObjectInformationA: [ BOOL, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  GetUserObjectInformationW: [ BOOL, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD } ],
  SetUserObjectInformationA: [ BOOL, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD } ],
  SetUserObjectInformationW: [ BOOL, { hObj: HANDLE, nIndex: int, pvInfo: PVOID, nLength: DWORD } ],
  IsHungAppWindow: [ BOOL, { hwnd: HWND } ],
  DisableProcessWindowsGhosting: [ _void, {  } ],
  RegisterWindowMessageA: [ UINT, { lpString: LPCSTR } ],
  RegisterWindowMessageW: [ UINT, { lpString: LPCWSTR } ],
  TrackMouseEvent: [ BOOL, { lpEventTrack: LPTRACKMOUSEEVENT } ],
  DrawEdge: [ BOOL, { hdc: HDC, qrc: LPRECT, edge: UINT, grfFlags: UINT } ],
  DrawFrameControl: [ BOOL, { UINT: UINT } ],
  DrawCaption: [ BOOL, { hwnd: HWND, hdc: HDC, lprect: RECT.Δ, flags: UINT } ],
  DrawAnimatedRects: [ BOOL, { hwnd: HWND, idAni: int, lprcFrom: RECT.Δ, lprcTo: RECT.Δ } ],
  GetMessageA: [ BOOL, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT } ],
  GetMessageW: [ BOOL, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT } ],
  TranslateMessage: [ BOOL, { lpMsg: MSG.Δ } ],
  DispatchMessageA: [ LRESULT, { lpMsg: MSG.Δ } ],
  DispatchMessageW: [ LRESULT, { lpMsg: MSG.Δ } ],
  SetMessageQueue: [ BOOL, { cMessagesMax: int } ],
  PeekMessageA: [ BOOL, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT } ],
  PeekMessageW: [ BOOL, { lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT } ],
  RegisterHotKey: [ BOOL, { hWnd: HWND, id: int, fsModifiers: UINT, vk: UINT } ],
  UnregisterHotKey: [ BOOL, { hWnd: HWND, id: int } ],
  ExitWindowsEx: [ BOOL, { uFlags: UINT, dwReason: DWORD } ],
  SwapMouseButton: [ BOOL, { fSwap: BOOL } ],
  GetMessagePos: [ DWORD, {  } ],
  GetMessageTime: [ LONG, {  } ],
  GetMessageExtraInfo: [ LPARAM, {  } ],
  IsWow64Message: [ BOOL, {  } ],
  SetMessageExtraInfo: [ LPARAM, { lParam: LPARAM } ],
  SendMessageA: [ LRESULT, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendMessageW: [ LRESULT, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendMessageTimeoutA: [ LRESULT, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR } ],
  SendMessageTimeoutW: [ LRESULT, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR } ],
  SendNotifyMessageA: [ BOOL, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendNotifyMessageW: [ BOOL, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendMessageCallbackA: [ BOOL, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR } ],
  SendMessageCallbackW: [ BOOL, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR } ],
  BroadcastSystemMessageExA: [ _void, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO } ],
  BroadcastSystemMessageExW: [ _void, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO } ],
  BroadcastSystemMessageA: [ _void, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  BroadcastSystemMessageW: [ _void, { flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  RegisterDeviceNotificationA: [ HDEVNOTIFY, { hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD } ],
  RegisterDeviceNotificationW: [ HDEVNOTIFY, { hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD } ],
  UnregisterDeviceNotification: [ BOOL, { Handle: HDEVNOTIFY } ],
  RegisterPowerSettingNotification: [ HPOWERNOTIFY, { hRecipient: HANDLE, PowerSettingGuid: LPCGUID, Flags: DWORD } ],
  UnregisterPowerSettingNotification: [ BOOL, { Handle: HPOWERNOTIFY } ],
  PostMessageA: [ BOOL, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostMessageW: [ BOOL, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostThreadMessageA: [ BOOL, { idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostThreadMessageW: [ BOOL, { idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  AttachThreadInput: [ BOOL, { idAttach: DWORD, idAttachTo: DWORD, fAttach: BOOL } ],
  ReplyMessage: [ BOOL, { lResult: LRESULT } ],
  WaitMessage: [ BOOL, {  } ],
  WaitForInputIdle: [ DWORD, { hProcess: HANDLE, dwMilliseconds: DWORD } ],
  DefWindowProcA: [ LRESULT, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefWindowProcW: [ LRESULT, { hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  PostQuitMessage: [ _void, { nExitCode: int } ],
  CallWindowProcA: [ LRESULT, { lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  CallWindowProcW: [ LRESULT, { lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  InSendMessage: [ BOOL, {  } ],
  InSendMessageEx: [ DWORD, { lpReserved: LPVOID } ],
  GetDoubleClickTime: [ UINT, {  } ],
  SetDoubleClickTime: [ BOOL, { UINT: UINT } ],
  RegisterClassA: [ ATOM, { lpWndClass: WNDCLASSA.Δ } ],
  RegisterClassW: [ ATOM, { lpWndClass: WNDCLASSW.Δ } ],
  UnregisterClassA: [ BOOL, { lpClassName: LPCSTR, hInstance: HINSTANCE } ],
  UnregisterClassW: [ BOOL, { lpClassName: LPCWSTR, hInstance: HINSTANCE } ],
  GetClassInfoA: [ BOOL, { hInstance: HINSTANCE, lpClassName: LPCSTR, lpWndClass: LPWNDCLASSA } ],
  GetClassInfoW: [ BOOL, { hInstance: HINSTANCE, lpClassName: LPCWSTR, lpWndClass: LPWNDCLASSW } ],
  RegisterClassExA: [ ATOM, { WNDCLASSEXA.Δ: WNDCLASSEXA.Δ } ],
  RegisterClassExW: [ ATOM, { WNDCLASSEXW.Δ: WNDCLASSEXW.Δ } ],
  GetClassInfoExA: [ BOOL, { hInstance: HINSTANCE, lpszClass: LPCSTR, lpwcx: LPWNDCLASSEXA } ],
  GetClassInfoExW: [ BOOL, { hInstance: HINSTANCE, lpszClass: LPCWSTR, lpwcx: LPWNDCLASSEXW } ],
  CreateWindowExA: [ HWND, { dwExStyle: DWORD, lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID } ],
  CreateWindowExW: [ HWND, { dwExStyle: DWORD, lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID } ],
  IsWindow: [ BOOL, { hWnd: HWND } ],
  IsMenu: [ BOOL, { hMenu: HMENU } ],
  IsChild: [ BOOL, { hWndParent: HWND, hWnd: HWND } ],
  DestroyWindow: [ BOOL, { hWnd: HWND } ],
  ShowWindow: [ BOOL, { hWnd: HWND, nCmdShow: int } ],
  AnimateWindow: [ BOOL, { hWnd: HWND, dwTime: DWORD, dwFlags: DWORD } ],
  UpdateLayeredWindow: [ BOOL, { hWnd: HWND, hdcDst: HDC, pptDst: POINT.Δ, psize: SIZE.Δ, hdcSrc: HDC, pptSrc: POINT.Δ, crKey: COLORREF, pblend: BLENDFUNCTION.Δ, dwFlags: DWORD } ],
  UpdateLayeredWindowIndirect: [ BOOL, { hWnd: HWND, pULWInfo: UPDATELAYEREDWINDOWINFO.Δ } ],
  GetLayeredWindowAttributes: [ BOOL, { hwnd: HWND, pcrKey: COLORREF.Δ, pbAlpha: BYTE.Δ, pdwFlags: DWORD.Δ } ],
  PrintWindow: [ BOOL, { hwnd: HWND, hdcBlt: HDC, nFlags: UINT } ],
  SetLayeredWindowAttributes: [ BOOL, { hwnd: HWND, crKey: COLORREF, bAlpha: BYTE, dwFlags: DWORD } ],
  ShowWindowAsync: [ BOOL, { hWnd: HWND, nCmdShow: int } ],
  FlashWindow: [ BOOL, { hWnd: HWND, bInvert: BOOL } ],
  FlashWindowEx: [ BOOL, { pfwi: PFLASHWINFO } ],
  ShowOwnedPopups: [ BOOL, { hWnd: HWND, fShow: BOOL } ],
  OpenIcon: [ BOOL, { hWnd: HWND } ],
  CloseWindow: [ BOOL, { hWnd: HWND } ],
  MoveWindow: [ BOOL, { hWnd: HWND, X: int, Y: int, nWidth: int, nHeight: int, bRepaint: BOOL } ],
  SetWindowPos: [ BOOL, { hWnd: HWND, hWndInsertAfter: HWND, X: int, Y: int, cx: int, cy: int, uFlags: UINT } ],
  GetWindowPlacement: [ BOOL, { hWnd: HWND, lpwndpl: WINDOWPLACEMENT.Δ } ],
  SetWindowPlacement: [ BOOL, { hWnd: HWND, lpwndpl: WINDOWPLACEMENT.Δ } ],
  GetWindowDisplayAffinity: [ BOOL, { hWnd: HWND, pdwAffinity: DWORD.Δ } ],
  SetWindowDisplayAffinity: [ BOOL, { hWnd: HWND, dwAffinity: DWORD } ],
  BeginDeferWindowPos: [ HDWP, { nNumWindows: int } ],
  DeferWindowPos: [ HDWP, { hWinPosInfo: HDWP, hWnd: HWND, hWndInsertAfter: HWND, x: int, y: int, cx: int, cy: int, uFlags: UINT } ],
  EndDeferWindowPos: [ BOOL, { hWinPosInfo: HDWP } ],
  IsWindowVisible: [ BOOL, { hWnd: HWND } ],
  IsIconic: [ BOOL, { hWnd: HWND } ],
  AnyPopup: [ BOOL, {  } ],
  BringWindowToTop: [ BOOL, { hWnd: HWND } ],
  IsZoomed: [ BOOL, { hWnd: HWND } ],
  CreateDialogParamA: [ HWND, { hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  CreateDialogParamW: [ HWND, { hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  CreateDialogIndirectParamA: [ HWND, { hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  CreateDialogIndirectParamW: [ HWND, { hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxParamA: [ INT_PTR, { hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxParamW: [ INT_PTR, { hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxIndirectParamA: [ INT_PTR, { hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  DialogBoxIndirectParamW: [ INT_PTR, { hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM } ],
  EndDialog: [ BOOL, { hDlg: HWND, nResult: INT_PTR } ],
  GetDlgItem: [ HWND, { hDlg: HWND, nIDDlgItem: int } ],
  SetDlgItemInt: [ BOOL, { hDlg: HWND, nIDDlgItem: int, uValue: UINT, bSigned: BOOL } ],
  GetDlgItemInt: [ UINT, { hDlg: HWND, nIDDlgItem: int, lpTranslated: BOOL.Δ, bSigned: BOOL } ],
  SetDlgItemTextA: [ BOOL, { hDlg: HWND, nIDDlgItem: int, lpString: LPCSTR } ],
  SetDlgItemTextW: [ BOOL, { hDlg: HWND, nIDDlgItem: int, lpString: LPCWSTR } ],
  GetDlgItemTextA: [ UINT, { hDlg: HWND, nIDDlgItem: int, lpString: LPSTR, cchMax: int } ],
  GetDlgItemTextW: [ UINT, { hDlg: HWND, nIDDlgItem: int, lpString: LPWSTR, cchMax: int } ],
  CheckDlgButton: [ BOOL, { hDlg: HWND, nIDButton: int, uCheck: UINT } ],
  CheckRadioButton: [ BOOL, { hDlg: HWND, nIDFirstButton: int, nIDLastButton: int, nIDCheckButton: int } ],
  IsDlgButtonChecked: [ UINT, { hDlg: HWND, nIDButton: int } ],
  SendDlgItemMessageA: [ LRESULT, { hDlg: HWND, nIDDlgItem: int, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  SendDlgItemMessageW: [ LRESULT, { hDlg: HWND, nIDDlgItem: int, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  GetNextDlgGroupItem: [ HWND, { hDlg: HWND, hCtl: HWND, bPrevious: BOOL } ],
  GetNextDlgTabItem: [ HWND, { hDlg: HWND, hCtl: HWND, bPrevious: BOOL } ],
  GetDlgCtrlID: [ _void, { hWnd: HWND } ],
  GetDialogBaseUnits: [ _void, {  } ],
  DefDlgProcA: [ LRESULT, { hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefDlgProcW: [ LRESULT, { hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  CallMsgFilterA: [ BOOL, { lpMsg: LPMSG, nCode: int } ],
  CallMsgFilterW: [ BOOL, { lpMsg: LPMSG, nCode: int } ],
  OpenClipboard: [ BOOL, { hWndNewOwner: HWND } ],
  CloseClipboard: [ BOOL, {  } ],
  GetClipboardSequenceNumber: [ DWORD, {  } ],
  GetClipboardOwner: [ HWND, {  } ],
  SetClipboardViewer: [ HWND, { hWndNewViewer: HWND } ],
  GetClipboardViewer: [ HWND, {  } ],
  ChangeClipboardChain: [ BOOL, { hWndRemove: HWND, hWndNewNext: HWND } ],
  SetClipboardData: [ HANDLE, { uFormat: UINT, hMem: HANDLE } ],
  GetClipboardData: [ HANDLE, { uFormat: UINT } ],
  RegisterClipboardFormatA: [ UINT, { lpszFormat: LPCSTR } ],
  RegisterClipboardFormatW: [ UINT, { lpszFormat: LPCWSTR } ],
  CountClipboardFormats: [ _void, {  } ],
  EnumClipboardFormats: [ UINT, { format: UINT } ],
  GetClipboardFormatNameA: [ _void, { format: UINT, lpszFormatName: LPSTR, cchMaxCount: int } ],
  GetClipboardFormatNameW: [ _void, { format: UINT, lpszFormatName: LPWSTR, cchMaxCount: int } ],
  EmptyClipboard: [ BOOL, {  } ],
  IsClipboardFormatAvailable: [ BOOL, { format: UINT } ],
  GetPriorityClipboardFormat: [ _void, { paFormatPriorityList: UINT.Δ, cFormats: int } ],
  GetOpenClipboardWindow: [ HWND, {  } ],
  AddClipboardFormatListener: [ BOOL, { hwnd: HWND } ],
  RemoveClipboardFormatListener: [ BOOL, { hwnd: HWND } ],
  GetUpdatedClipboardFormats: [ BOOL, { lpuiFormats: PUINT, cFormats: UINT, pcFormatsOut: PUINT } ],
  CharToOemA: [ BOOL, { pSrc: LPCSTR, pDst: LPSTR } ],
  CharToOemW: [ BOOL, { pSrc: LPCWSTR, pDst: LPSTR } ],
  OemToCharA: [ BOOL, { pSrc: LPCSTR, pDst: LPSTR } ],
  OemToCharW: [ BOOL, { pSrc: LPCSTR, pDst: LPWSTR } ],
  CharToOemBuffA: [ BOOL, { lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD } ],
  CharToOemBuffW: [ BOOL, { lpszSrc: LPCWSTR, lpszDst: LPSTR, cchDstLength: DWORD } ],
  OemToCharBuffA: [ BOOL, { lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD } ],
  OemToCharBuffW: [ BOOL, { lpszSrc: LPCSTR, lpszDst: LPWSTR, cchDstLength: DWORD } ],
  CharUpperA: [ LPSTR, { lpsz: LPSTR } ],
  CharUpperW: [ LPWSTR, { lpsz: LPWSTR } ],
  CharUpperBuffA: [ DWORD, { lpsz: LPSTR, cchLength: DWORD } ],
  CharUpperBuffW: [ DWORD, { lpsz: LPWSTR, cchLength: DWORD } ],
  CharLowerA: [ LPSTR, { lpsz: LPSTR } ],
  CharLowerW: [ LPWSTR, { lpsz: LPWSTR } ],
  CharLowerBuffA: [ DWORD, { lpsz: LPSTR, cchLength: DWORD } ],
  CharLowerBuffW: [ DWORD, { lpsz: LPWSTR, cchLength: DWORD } ],
  CharNextA: [ LPSTR, { lpsz: LPCSTR } ],
  CharNextW: [ LPWSTR, { lpsz: LPCWSTR } ],
  CharPrevA: [ LPSTR, { lpszStart: LPCSTR, lpszCurrent: LPCSTR } ],
  CharPrevW: [ LPWSTR, { lpszStart: LPCWSTR, lpszCurrent: LPCWSTR } ],
  CharNextExA: [ LPSTR, { CodePage: WORD, lpCurrentChar: LPCSTR, dwFlags: DWORD } ],
  CharPrevExA: [ LPSTR, { CodePage: WORD, lpStart: LPCSTR, lpCurrentChar: LPCSTR, dwFlags: DWORD } ],
  IsCharAlphaA: [ BOOL, { ch: CHAR } ],
  IsCharAlphaW: [ BOOL, { ch: WCHAR } ],
  IsCharAlphaNumericA: [ BOOL, { ch: CHAR } ],
  IsCharAlphaNumericW: [ BOOL, { ch: WCHAR } ],
  IsCharUpperA: [ BOOL, { ch: CHAR } ],
  IsCharUpperW: [ BOOL, { ch: WCHAR } ],
  IsCharLowerA: [ BOOL, { ch: CHAR } ],
  IsCharLowerW: [ BOOL, { ch: WCHAR } ],
  SetFocus: [ HWND, { hWnd: HWND } ],
  GetActiveWindow: [ HWND, {  } ],
  GetFocus: [ HWND, {  } ],
  GetKBCodePage: [ UINT, {  } ],
  GetKeyState: [ SHORT, { nVirtKey: int } ],
  GetAsyncKeyState: [ SHORT, { vKey: int } ],
  GetKeyboardState: [ BOOL, { lpKeyState: PBYTE } ],
  SetKeyboardState: [ BOOL, { lpKeyState: LPBYTE } ],
  GetKeyNameTextA: [ _void, { lParam: LONG, lpString: LPSTR, cchSize: int } ],
  GetKeyNameTextW: [ _void, { lParam: LONG, lpString: LPWSTR, cchSize: int } ],
  GetKeyboardType: [ _void, { nTypeFlag: int } ],
  ToAscii: [ _void, { uVirtKey: UINT, uScanCode: UINT, lpKeyState: BYTE.Δ, lpChar: LPWORD, uFlags: UINT } ],
  ToAsciiEx: [ _void, { uVirtKey: UINT, uScanCode: UINT, lpKeyState: BYTE.Δ, lpChar: LPWORD, uFlags: UINT, dwhkl: HKL } ],
  ToUnicode: [ _void, { wVirtKey: UINT, wScanCode: UINT, lpKeyState: BYTE.Δ, pwszBuff: LPWSTR, cchBuff: int, wFlags: UINT } ],
  OemKeyScan: [ DWORD, { wOemChar: WORD } ],
  VkKeyScanA: [ SHORT, { ch: CHAR } ],
  VkKeyScanW: [ SHORT, { ch: WCHAR } ],
  VkKeyScanExA: [ SHORT, { ch: CHAR, dwhkl: HKL } ],
  VkKeyScanExW: [ SHORT, { ch: WCHAR, dwhkl: HKL } ],
  keybd_event: [ _void, { bVk: BYTE, bScan: BYTE, dwFlags: DWORD, dwExtraInfo: ULONG_PTR } ],
  mouse_event: [ _void, { dwFlags: DWORD, dx: DWORD, dy: DWORD, dwData: DWORD, dwExtraInfo: ULONG_PTR } ],
  SendInput: [ UINT, { cInputs: UINT, pInputs: LPINPUT, cbSize: int } ],
  GetTouchInputInfo: [ BOOL, { hTouchInput: HTOUCHINPUT, cInputs: UINT, pInputs: PTOUCHINPUT, cbSize: int } ],
  CloseTouchInputHandle: [ BOOL, { hTouchInput: HTOUCHINPUT } ],
  RegisterTouchWindow: [ BOOL, { hwnd: HWND, ulFlags: ULONG } ],
  UnregisterTouchWindow: [ BOOL, { hwnd: HWND } ],
  IsTouchWindow: [ BOOL, { hwnd: HWND, pulFlags: PULONG } ],
  GetLastInputInfo: [ BOOL, { plii: PLASTINPUTINFO } ],
  MapVirtualKeyA: [ UINT, { uCode: UINT, uMapType: UINT } ],
  MapVirtualKeyW: [ UINT, { uCode: UINT, uMapType: UINT } ],
  MapVirtualKeyExA: [ UINT, { uCode: UINT, uMapType: UINT, dwhkl: HKL } ],
  MapVirtualKeyExW: [ UINT, { uCode: UINT, uMapType: UINT, dwhkl: HKL } ],
  GetInputState: [ BOOL, {  } ],
  GetQueueStatus: [ DWORD, { flags: UINT } ],
  GetCapture: [ HWND, {  } ],
  SetCapture: [ HWND, { hWnd: HWND } ],
  ReleaseCapture: [ BOOL, {  } ],
  MsgWaitForMultipleObjects: [ DWORD, { nCount: DWORD, pHandles: HANDLE.Δ, fWaitAll: BOOL, dwMilliseconds: DWORD, dwWakeMask: DWORD } ],
  MsgWaitForMultipleObjectsEx: [ DWORD, { nCount: DWORD, pHandles: HANDLE.Δ, dwMilliseconds: DWORD, dwWakeMask: DWORD, dwFlags: DWORD } ],
  SetTimer: [ UINT_PTR, { hWnd: HWND, nIDEvent: UINT_PTR, uElapse: UINT, lpTimerFunc: TIMERPROC } ],
  KillTimer: [ BOOL, { hWnd: HWND, uIDEvent: UINT_PTR } ],
  IsWindowUnicode: [ BOOL, { hWnd: HWND } ],
  EnableWindow: [ BOOL, { hWnd: HWND, bEnable: BOOL } ],
  IsWindowEnabled: [ BOOL, { hWnd: HWND } ],
  LoadAcceleratorsA: [ HACCEL, { hInstance: HINSTANCE, lpTableName: LPCSTR } ],
  LoadAcceleratorsW: [ HACCEL, { hInstance: HINSTANCE, lpTableName: LPCWSTR } ],
  CreateAcceleratorTableA: [ HACCEL, { paccel: LPACCEL, cAccel: int } ],
  CreateAcceleratorTableW: [ HACCEL, { paccel: LPACCEL, cAccel: int } ],
  DestroyAcceleratorTable: [ BOOL, { hAccel: HACCEL } ],
  CopyAcceleratorTableA: [ _void, { hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: int } ],
  CopyAcceleratorTableW: [ _void, { hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: int } ],
  TranslateAcceleratorA: [ _void, { hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG } ],
  TranslateAcceleratorW: [ _void, { hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG } ],
  GetSystemMetrics: [ _void, { nIndex: int } ],
  LoadMenuA: [ HMENU, { hInstance: HINSTANCE, lpMenuName: LPCSTR } ],
  LoadMenuW: [ HMENU, { hInstance: HINSTANCE, lpMenuName: LPCWSTR } ],
  LoadMenuIndirectA: [ HMENU, { lpMenuTemplate: MENUTEMPLATEA.Δ } ],
  LoadMenuIndirectW: [ HMENU, { lpMenuTemplate: MENUTEMPLATEW.Δ } ],
  GetMenu: [ HMENU, { hWnd: HWND } ],
  SetMenu: [ BOOL, { hWnd: HWND, hMenu: HMENU } ],
  ChangeMenuA: [ BOOL, { hMenu: HMENU, cmd: UINT, lpszNewItem: LPCSTR, cmdInsert: UINT, flags: UINT } ],
  ChangeMenuW: [ BOOL, { hMenu: HMENU, cmd: UINT, lpszNewItem: LPCWSTR, cmdInsert: UINT, flags: UINT } ],
  HiliteMenuItem: [ BOOL, { hWnd: HWND, hMenu: HMENU, uIDHiliteItem: UINT, uHilite: UINT } ],
  GetMenuStringA: [ _void, { hMenu: HMENU, uIDItem: UINT, lpString: LPSTR, cchMax: int, flags: UINT } ],
  GetMenuStringW: [ _void, { hMenu: HMENU, uIDItem: UINT, lpString: LPWSTR, cchMax: int, flags: UINT } ],
  GetMenuState: [ UINT, { hMenu: HMENU, uId: UINT, uFlags: UINT } ],
  DrawMenuBar: [ BOOL, { hWnd: HWND } ],
  GetSystemMenu: [ HMENU, { hWnd: HWND, bRevert: BOOL } ],
  CreateMenu: [ HMENU, {  } ],
  CreatePopupMenu: [ HMENU, {  } ],
  DestroyMenu: [ BOOL, { hMenu: HMENU } ],
  CheckMenuItem: [ DWORD, { hMenu: HMENU, uIDCheckItem: UINT, uCheck: UINT } ],
  EnableMenuItem: [ BOOL, { hMenu: HMENU, uIDEnableItem: UINT, uEnable: UINT } ],
  GetSubMenu: [ HMENU, { hMenu: HMENU, nPos: int } ],
  GetMenuItemID: [ UINT, { hMenu: HMENU, nPos: int } ],
  GetMenuItemCount: [ _void, { hMenu: HMENU } ],
  InsertMenuA: [ BOOL, { hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR } ],
  InsertMenuW: [ BOOL, { hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR } ],
  AppendMenuA: [ BOOL, { hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR } ],
  AppendMenuW: [ BOOL, { hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR } ],
  ModifyMenuA: [ BOOL, { hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR } ],
  ModifyMenuW: [ BOOL, { hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR } ],
  RemoveMenu: [ BOOL, { hMenu: HMENU, uPosition: UINT, uFlags: UINT } ],
  DeleteMenu: [ BOOL, { hMenu: HMENU, uPosition: UINT, uFlags: UINT } ],
  SetMenuItemBitmaps: [ BOOL, { hMenu: HMENU, uPosition: UINT, uFlags: UINT, hBitmapUnchecked: HBITMAP, hBitmapChecked: HBITMAP } ],
  GetMenuCheckMarkDimensions: [ LONG, {  } ],
  TrackPopupMenu: [ BOOL, { hMenu: HMENU, uFlags: UINT, x: int, y: int, nReserved: int, hWnd: HWND, prcRect: RECT.Δ } ],
  TrackPopupMenuEx: [ BOOL, { LPTPMPARAMS: LPTPMPARAMS } ],
  CalculatePopupWindowPosition: [ BOOL, { anchorPoint: POINT.Δ, windowSize: SIZE.Δ, flags: UINT, excludeRect: RECT.Δ, popupWindowPosition: RECT.Δ } ],
  GetMenuInfo: [ BOOL, { LPMENUINFO: LPMENUINFO } ],
  SetMenuInfo: [ BOOL, { LPCMENUINFO: LPCMENUINFO } ],
  EndMenu: [ BOOL, {  } ],
  InsertMenuItemA: [ BOOL, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOA } ],
  InsertMenuItemW: [ BOOL, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOW } ],
  GetMenuItemInfoA: [ BOOL, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOA } ],
  GetMenuItemInfoW: [ BOOL, { hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOW } ],
  SetMenuItemInfoA: [ BOOL, { hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOA } ],
  SetMenuItemInfoW: [ BOOL, { hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOW } ],
  GetMenuDefaultItem: [ UINT, { hMenu: HMENU, fByPos: UINT, gmdiFlags: UINT } ],
  SetMenuDefaultItem: [ BOOL, { hMenu: HMENU, uItem: UINT, fByPos: UINT } ],
  GetMenuItemRect: [ BOOL, { hWnd: HWND, hMenu: HMENU, uItem: UINT, lprcItem: LPRECT } ],
  MenuItemFromPoint: [ _void, { hWnd: HWND, hMenu: HMENU, ptScreen: POINT } ],
  DragObject: [ DWORD, { hwndParent: HWND, hwndFrom: HWND, fmt: UINT, data: ULONG_PTR, hcur: HCURSOR } ],
  DragDetect: [ BOOL, { hwnd: HWND, pt: POINT } ],
  DrawIcon: [ BOOL, { hDC: HDC, X: int, Y: int, hIcon: HICON } ],
  DrawTextA: [ _void, { hdc: HDC, lpchText: LPCSTR, cchText: int, lprc: LPRECT, format: UINT } ],
  DrawTextW: [ _void, { hdc: HDC, lpchText: LPCWSTR, cchText: int, lprc: LPRECT, format: UINT } ],
  DrawTextExA: [ _void, { hdc: HDC, lpchText: LPSTR, cchText: int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS } ],
  DrawTextExW: [ _void, { hdc: HDC, lpchText: LPWSTR, cchText: int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS } ],
  GrayStringA: [ BOOL, { hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: int, X: int, Y: int, nWidth: int, nHeight: int } ],
  GrayStringW: [ BOOL, { hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: int, X: int, Y: int, nWidth: int, nHeight: int } ],
  DrawStateA: [ BOOL, { hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: int, y: int, cx: int, cy: int, uFlags: UINT } ],
  DrawStateW: [ BOOL, { hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: int, y: int, cx: int, cy: int, uFlags: UINT } ],
  TabbedTextOutA: [ LONG, { hdc: HDC, x: int, y: int, lpString: LPCSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: INT.Δ, nTabOrigin: int } ],
  TabbedTextOutW: [ LONG, { hdc: HDC, x: int, y: int, lpString: LPCWSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: INT.Δ, nTabOrigin: int } ],
  GetTabbedTextExtentA: [ DWORD, { hdc: HDC, lpString: LPCSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: INT.Δ } ],
  GetTabbedTextExtentW: [ DWORD, { hdc: HDC, lpString: LPCWSTR, chCount: int, nTabPositions: int, lpnTabStopPositions: INT.Δ } ],
  UpdateWindow: [ BOOL, { hWnd: HWND } ],
  SetActiveWindow: [ HWND, { hWnd: HWND } ],
  GetForegroundWindow: [ HWND, {  } ],
  PaintDesktop: [ BOOL, { hdc: HDC } ],
  SwitchToThisWindow: [ _void, { hwnd: HWND, fUnknown: BOOL } ],
  SetForegroundWindow: [ BOOL, { hWnd: HWND } ],
  AllowSetForegroundWindow: [ BOOL, { dwProcessId: DWORD } ],
  LockSetForegroundWindow: [ BOOL, { uLockCode: UINT } ],
  WindowFromDC: [ HWND, { hDC: HDC } ],
  GetDC: [ HDC, { hWnd: HWND } ],
  GetDCEx: [ HDC, { hWnd: HWND, hrgnClip: HRGN, flags: DWORD } ],
  GetWindowDC: [ HDC, { hWnd: HWND } ],
  ReleaseDC: [ _void, { hWnd: HWND, hDC: HDC } ],
  BeginPaint: [ HDC, { hWnd: HWND, lpPaint: LPPAINTSTRUCT } ],
  EndPaint: [ BOOL, { hWnd: HWND, lpPaint: PAINTSTRUCT.Δ } ],
  GetUpdateRect: [ BOOL, { hWnd: HWND, lpRect: LPRECT, bErase: BOOL } ],
  GetUpdateRgn: [ _void, { hWnd: HWND, hRgn: HRGN, bErase: BOOL } ],
  SetWindowRgn: [ _void, { hWnd: HWND, hRgn: HRGN, bRedraw: BOOL } ],
  GetWindowRgn: [ _void, { hWnd: HWND, hRgn: HRGN } ],
  GetWindowRgnBox: [ _void, { hWnd: HWND, lprc: LPRECT } ],
  ExcludeUpdateRgn: [ _void, { hDC: HDC, hWnd: HWND } ],
  InvalidateRect: [ BOOL, { hWnd: HWND, lpRect: RECT.Δ, bErase: BOOL } ],
  ValidateRect: [ BOOL, { hWnd: HWND, lpRect: RECT.Δ } ],
  InvalidateRgn: [ BOOL, { hWnd: HWND, hRgn: HRGN, bErase: BOOL } ],
  ValidateRgn: [ BOOL, { hWnd: HWND, hRgn: HRGN } ],
  RedrawWindow: [ BOOL, { hWnd: HWND, lprcUpdate: RECT.Δ, hrgnUpdate: HRGN, flags: UINT } ],
  LockWindowUpdate: [ BOOL, { hWndLock: HWND } ],
  ScrollWindow: [ BOOL, { hWnd: HWND, XAmount: int, YAmount: int, lpRect: RECT.Δ, lpClipRect: RECT.Δ } ],
  ScrollDC: [ BOOL, { hDC: HDC, dx: int, dy: int, lprcScroll: RECT.Δ, lprcClip: RECT.Δ, hrgnUpdate: HRGN, lprcUpdate: LPRECT } ],
  ScrollWindowEx: [ _void, { hWnd: HWND, dx: int, dy: int, prcScroll: RECT.Δ, prcClip: RECT.Δ, hrgnUpdate: HRGN, prcUpdate: LPRECT, flags: UINT } ],
  SetScrollPos: [ _void, { hWnd: HWND, nBar: int, nPos: int, bRedraw: BOOL } ],
  GetScrollPos: [ _void, { hWnd: HWND, nBar: int } ],
  SetScrollRange: [ BOOL, { hWnd: HWND, nBar: int, nMinPos: int, nMaxPos: int, bRedraw: BOOL } ],
  GetScrollRange: [ BOOL, { hWnd: HWND, nBar: int, lpMinPos: LPINT, lpMaxPos: LPINT } ],
  ShowScrollBar: [ BOOL, { hWnd: HWND, wBar: int, bShow: BOOL } ],
  EnableScrollBar: [ BOOL, { hWnd: HWND, wSBflags: UINT, wArrows: UINT } ],
  SetPropA: [ BOOL, { hWnd: HWND, lpString: LPCSTR, hData: HANDLE } ],
  SetPropW: [ BOOL, { hWnd: HWND, lpString: LPCWSTR, hData: HANDLE } ],
  GetPropA: [ HANDLE, { hWnd: HWND, lpString: LPCSTR } ],
  GetPropW: [ HANDLE, { hWnd: HWND, lpString: LPCWSTR } ],
  RemovePropA: [ HANDLE, { hWnd: HWND, lpString: LPCSTR } ],
  RemovePropW: [ HANDLE, { hWnd: HWND, lpString: LPCWSTR } ],
  EnumPropsExA: [ _void, { hWnd: HWND, lpEnumFunc: PROPENUMPROCEXA, lParam: LPARAM } ],
  EnumPropsExW: [ _void, { hWnd: HWND, lpEnumFunc: PROPENUMPROCEXW, lParam: LPARAM } ],
  EnumPropsA: [ _void, { hWnd: HWND, lpEnumFunc: PROPENUMPROCA } ],
  EnumPropsW: [ _void, { hWnd: HWND, lpEnumFunc: PROPENUMPROCW } ],
  SetWindowTextA: [ BOOL, { hWnd: HWND, lpString: LPCSTR } ],
  SetWindowTextW: [ BOOL, { hWnd: HWND, lpString: LPCWSTR } ],
  GetWindowTextA: [ _void, { hWnd: HWND, lpString: LPSTR, nMaxCount: int } ],
  GetWindowTextW: [ _void, { hWnd: HWND, lpString: LPWSTR, nMaxCount: int } ],
  GetWindowTextLengthA: [ _void, { hWnd: HWND } ],
  GetWindowTextLengthW: [ _void, { hWnd: HWND } ],
  GetClientRect: [ BOOL, { hWnd: HWND, lpRect: LPRECT } ],
  GetWindowRect: [ BOOL, { hWnd: HWND, lpRect: LPRECT } ],
  AdjustWindowRect: [ BOOL, { lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL } ],
  AdjustWindowRectEx: [ BOOL, { lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL, dwExStyle: DWORD } ],
  SetWindowContextHelpId: [ BOOL, { DWORD: DWORD } ],
  GetWindowContextHelpId: [ DWORD, { HWND: HWND } ],
  SetMenuContextHelpId: [ BOOL, { DWORD: DWORD } ],
  GetMenuContextHelpId: [ DWORD, { HMENU: HMENU } ],
  MessageBoxA: [ _void, { hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT } ],
  MessageBoxW: [ _void, { hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT } ],
  MessageBoxExA: [ _void, { hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT, wLanguageId: WORD } ],
  MessageBoxExW: [ _void, { hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT, wLanguageId: WORD } ],
  MessageBoxIndirectA: [ _void, { lpmbp: MSGBOXPARAMSA.Δ } ],
  MessageBoxIndirectW: [ _void, { lpmbp: MSGBOXPARAMSW.Δ } ],
  MessageBeep: [ BOOL, { uType: UINT } ],
  ShowCursor: [ _void, { bShow: BOOL } ],
  SetCursorPos: [ BOOL, { X: int, Y: int } ],
  SetPhysicalCursorPos: [ BOOL, { X: int, Y: int } ],
  SetCursor: [ HCURSOR, { hCursor: HCURSOR } ],
  GetCursorPos: [ BOOL, { lpPoint: LPPOINT } ],
  GetPhysicalCursorPos: [ BOOL, { lpPoint: LPPOINT } ],
  ClipCursor: [ BOOL, { lpRect: RECT.Δ } ],
  GetClipCursor: [ BOOL, { lpRect: LPRECT } ],
  GetCursor: [ HCURSOR, {  } ],
  CreateCaret: [ BOOL, { hWnd: HWND, hBitmap: HBITMAP, nWidth: int, nHeight: int } ],
  GetCaretBlinkTime: [ UINT, {  } ],
  SetCaretBlinkTime: [ BOOL, { uMSeconds: UINT } ],
  DestroyCaret: [ BOOL, {  } ],
  HideCaret: [ BOOL, { hWnd: HWND } ],
  ShowCaret: [ BOOL, { hWnd: HWND } ],
  SetCaretPos: [ BOOL, { X: int, Y: int } ],
  GetCaretPos: [ BOOL, { lpPoint: LPPOINT } ],
  ClientToScreen: [ BOOL, { hWnd: HWND, lpPoint: LPPOINT } ],
  ScreenToClient: [ BOOL, { hWnd: HWND, lpPoint: LPPOINT } ],
  LogicalToPhysicalPoint: [ BOOL, { hWnd: HWND, lpPoint: LPPOINT } ],
  PhysicalToLogicalPoint: [ BOOL, { hWnd: HWND, lpPoint: LPPOINT } ],
  MapWindowPoints: [ _void, { hWndFrom: HWND, hWndTo: HWND, lpPoints: LPPOINT, cPoints: UINT } ],
  WindowFromPoint: [ HWND, { Point: POINT } ],
  WindowFromPhysicalPoint: [ HWND, { Point: POINT } ],
  ChildWindowFromPoint: [ HWND, { hWndParent: HWND, Point: POINT } ],
  ChildWindowFromPointEx: [ HWND, { hwnd: HWND, pt: POINT, flags: UINT } ],
  GetSysColor: [ DWORD, { nIndex: int } ],
  GetSysColorBrush: [ HBRUSH, { nIndex: int } ],
  SetSysColors: [ BOOL, { cElements: int, lpaElements: INT.Δ, lpaRgbValues: COLORREF.Δ } ],
  DrawFocusRect: [ BOOL, { hDC: HDC, lprc: RECT.Δ } ],
  FillRect: [ _void, { hDC: HDC, lprc: RECT.Δ, hbr: HBRUSH } ],
  FrameRect: [ _void, { hDC: HDC, lprc: RECT.Δ, hbr: HBRUSH } ],
  InvertRect: [ BOOL, { hDC: HDC, lprc: RECT.Δ } ],
  SetRect: [ BOOL, { lprc: LPRECT, xLeft: int, yTop: int, xRight: int, yBottom: int } ],
  SetRectEmpty: [ BOOL, { lprc: LPRECT } ],
  CopyRect: [ BOOL, { lprcDst: LPRECT, lprcSrc: RECT.Δ } ],
  InflateRect: [ BOOL, { lprc: LPRECT, dx: int, dy: int } ],
  IntersectRect: [ BOOL, { lprcDst: LPRECT, lprcSrc1: RECT.Δ, lprcSrc2: RECT.Δ } ],
  UnionRect: [ BOOL, { lprcDst: LPRECT, lprcSrc1: RECT.Δ, lprcSrc2: RECT.Δ } ],
  SubtractRect: [ BOOL, { lprcDst: LPRECT, lprcSrc1: RECT.Δ, lprcSrc2: RECT.Δ } ],
  OffsetRect: [ BOOL, { lprc: LPRECT, dx: int, dy: int } ],
  IsRectEmpty: [ BOOL, { lprc: RECT.Δ } ],
  EqualRect: [ BOOL, { lprc1: RECT.Δ, lprc2: RECT.Δ } ],
  PtInRect: [ BOOL, { lprc: RECT.Δ, pt: POINT } ],
  GetWindowWord: [ WORD, { hWnd: HWND, nIndex: int } ],
  SetWindowWord: [ WORD, { hWnd: HWND, nIndex: int, wNewWord: WORD } ],
  GetWindowLongA: [ LONG, { hWnd: HWND, nIndex: int } ],
  GetWindowLongW: [ LONG, { hWnd: HWND, nIndex: int } ],
  SetWindowLongA: [ LONG, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  SetWindowLongW: [ LONG, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  GetClassWord: [ WORD, { hWnd: HWND, nIndex: int } ],
  SetClassWord: [ WORD, { hWnd: HWND, nIndex: int, wNewWord: WORD } ],
  GetClassLongA: [ DWORD, { hWnd: HWND, nIndex: int } ],
  GetClassLongW: [ DWORD, { hWnd: HWND, nIndex: int } ],
  SetClassLongA: [ DWORD, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  SetClassLongW: [ DWORD, { hWnd: HWND, nIndex: int, dwNewLong: LONG } ],
  GetProcessDefaultLayout: [ BOOL, { pdwDefaultLayout: DWORD.Δ } ],
  SetProcessDefaultLayout: [ BOOL, { dwDefaultLayout: DWORD } ],
  GetDesktopWindow: [ HWND, {  } ],
  GetParent: [ HWND, { hWnd: HWND } ],
  SetParent: [ HWND, { hWndChild: HWND, hWndNewParent: HWND } ],
  EnumChildWindows: [ BOOL, { hWndParent: HWND, lpEnumFunc: WNDENUMPROC, lParam: LPARAM } ],
  FindWindowA: [ HWND, { lpClassName: LPCSTR, lpWindowName: LPCSTR } ],
  FindWindowW: [ HWND, { lpClassName: LPCWSTR, lpWindowName: LPCWSTR } ],
  FindWindowExA: [ HWND, { hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCSTR, lpszWindow: LPCSTR } ],
  FindWindowExW: [ HWND, { hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCWSTR, lpszWindow: LPCWSTR } ],
  GetShellWindow: [ HWND, {  } ],
  RegisterShellHookWindow: [ BOOL, { hwnd: HWND } ],
  DeregisterShellHookWindow: [ BOOL, { hwnd: HWND } ],
  EnumWindows: [ BOOL, { lpEnumFunc: WNDENUMPROC, lParam: LPARAM } ],
  EnumThreadWindows: [ BOOL, { dwThreadId: DWORD, lpfn: WNDENUMPROC, lParam: LPARAM } ],
  GetClassNameA: [ _void, { hWnd: HWND, lpClassName: LPSTR, nMaxCount: int } ],
  GetClassNameW: [ _void, { hWnd: HWND, lpClassName: LPWSTR, nMaxCount: int } ],
  GetTopWindow: [ HWND, { hWnd: HWND } ],
  GetWindowThreadProcessId: [ DWORD, { hWnd: HWND, lpdwProcessId: LPDWORD } ],
  IsGUIThread: [ BOOL, { bConvert: BOOL } ],
  GetLastActivePopup: [ HWND, { hWnd: HWND } ],
  GetWindow: [ HWND, { hWnd: HWND, uCmd: UINT } ],
  SetWindowsHookA: [ HHOOK, { nFilterType: int, pfnFilterProc: HOOKPROC } ],
  SetWindowsHookW: [ HHOOK, { nFilterType: int, pfnFilterProc: HOOKPROC } ],
  UnhookWindowsHook: [ BOOL, { nCode: int, pfnFilterProc: HOOKPROC } ],
  SetWindowsHookExA: [ HHOOK, { idHook: int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD } ],
  SetWindowsHookExW: [ HHOOK, { idHook: int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD } ],
  UnhookWindowsHookEx: [ BOOL, { hhk: HHOOK } ],
  CallNextHookEx: [ LRESULT, { hhk: HHOOK, nCode: int, wParam: WPARAM, lParam: LPARAM } ],
  CheckMenuRadioItem: [ BOOL, { hmenu: HMENU, first: UINT, last: UINT, check: UINT, flags: UINT } ],
  LoadBitmapA: [ HBITMAP, { hInstance: HINSTANCE, lpBitmapName: LPCSTR } ],
  LoadBitmapW: [ HBITMAP, { hInstance: HINSTANCE, lpBitmapName: LPCWSTR } ],
  LoadCursorA: [ HCURSOR, { hInstance: HINSTANCE, lpCursorName: LPCSTR } ],
  LoadCursorW: [ HCURSOR, { hInstance: HINSTANCE, lpCursorName: LPCWSTR } ],
  LoadCursorFromFileA: [ HCURSOR, { lpFileName: LPCSTR } ],
  LoadCursorFromFileW: [ HCURSOR, { lpFileName: LPCWSTR } ],
  CreateCursor: [ HCURSOR, { hInst: HINSTANCE, xHotSpot: int, yHotSpot: int, nWidth: int, nHeight: int, pvANDPlane: _void.Δ, pvXORPlane: _void.Δ } ],
  DestroyCursor: [ BOOL, { hCursor: HCURSOR } ],
  SetSystemCursor: [ BOOL, { hcur: HCURSOR, id: DWORD } ],
  LoadIconA: [ HICON, { hInstance: HINSTANCE, lpIconName: LPCSTR } ],
  LoadIconW: [ HICON, { hInstance: HINSTANCE, lpIconName: LPCWSTR } ],
  PrivateExtractIconsA: [ UINT, { szFileName: LPCSTR, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: HICON.Δ, piconid: UINT.Δ, nIcons: UINT, flags: UINT } ],
  PrivateExtractIconsW: [ UINT, { szFileName: LPCWSTR, nIconIndex: int, cxIcon: int, cyIcon: int, phicon: HICON.Δ, piconid: UINT.Δ, nIcons: UINT, flags: UINT } ],
  CreateIcon: [ HICON, { hInstance: HINSTANCE, nWidth: int, nHeight: int, cPlanes: BYTE, cBitsPixel: BYTE, lpbANDbits: BYTE.Δ, lpbXORbits: BYTE.Δ } ],
  DestroyIcon: [ BOOL, { hIcon: HICON } ],
  LookupIconIdFromDirectory: [ _void, { presbits: PBYTE, fIcon: BOOL } ],
  LookupIconIdFromDirectoryEx: [ _void, { presbits: PBYTE, fIcon: BOOL, cxDesired: int, cyDesired: int, Flags: UINT } ],
  CreateIconFromResource: [ HICON, { presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD } ],
  CreateIconFromResourceEx: [ HICON, { presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD, cxDesired: int, cyDesired: int, Flags: UINT } ],
  LoadImageA: [ HANDLE, { hInst: HINSTANCE, name: LPCSTR, type: UINT, cx: int, cy: int, fuLoad: UINT } ],
  LoadImageW: [ HANDLE, { hInst: HINSTANCE, name: LPCWSTR, type: UINT, cx: int, cy: int, fuLoad: UINT } ],
  CopyImage: [ HANDLE, { h: HANDLE, type: UINT, cx: int, cy: int, flags: UINT } ],
  DrawIconEx: [ BOOL, { hdc: HDC, xLeft: int, yTop: int, hIcon: HICON, cxWidth: int, cyWidth: int, istepIfAniCur: UINT, hbrFlickerFreeDraw: HBRUSH, diFlags: UINT } ],
  CreateIconIndirect: [ HICON, { piconinfo: PICONINFO } ],
  CopyIcon: [ HICON, { hIcon: HICON } ],
  GetIconInfo: [ BOOL, { hIcon: HICON, piconinfo: PICONINFO } ],
  GetIconInfoExA: [ BOOL, { hicon: HICON, piconinfo: PICONINFOEXA } ],
  GetIconInfoExW: [ BOOL, { hicon: HICON, piconinfo: PICONINFOEXW } ],
  LoadStringA: [ _void, { hInstance: HINSTANCE, uID: UINT, lpBuffer: LPSTR, cchBufferMax: int } ],
  LoadStringW: [ _void, { hInstance: HINSTANCE, uID: UINT, lpBuffer: LPWSTR, cchBufferMax: int } ],
  IsDialogMessageA: [ BOOL, { hDlg: HWND, lpMsg: LPMSG } ],
  IsDialogMessageW: [ BOOL, { hDlg: HWND, lpMsg: LPMSG } ],
  MapDialogRect: [ BOOL, { hDlg: HWND, lpRect: LPRECT } ],
  DlgDirListA: [ _void, { hDlg: HWND, lpPathSpec: LPSTR, nIDListBox: int, nIDStaticPath: int, uFileType: UINT } ],
  DlgDirListW: [ _void, { hDlg: HWND, lpPathSpec: LPWSTR, nIDListBox: int, nIDStaticPath: int, uFileType: UINT } ],
  DlgDirSelectExA: [ BOOL, { hwndDlg: HWND, lpString: LPSTR, chCount: int, idListBox: int } ],
  DlgDirSelectExW: [ BOOL, { hwndDlg: HWND, lpString: LPWSTR, chCount: int, idListBox: int } ],
  DlgDirListComboBoxA: [ _void, { hDlg: HWND, lpPathSpec: LPSTR, nIDComboBox: int, nIDStaticPath: int, uFiletype: UINT } ],
  DlgDirListComboBoxW: [ _void, { hDlg: HWND, lpPathSpec: LPWSTR, nIDComboBox: int, nIDStaticPath: int, uFiletype: UINT } ],
  DlgDirSelectComboBoxExA: [ BOOL, { hwndDlg: HWND, lpString: LPSTR, cchOut: int, idComboBox: int } ],
  DlgDirSelectComboBoxExW: [ BOOL, { hwndDlg: HWND, lpString: LPWSTR, cchOut: int, idComboBox: int } ],
  SetScrollInfo: [ _void, { hwnd: HWND, nBar: int, lpsi: LPCSCROLLINFO, redraw: BOOL } ],
  GetScrollInfo: [ BOOL, { hwnd: HWND, nBar: int, lpsi: LPSCROLLINFO } ],
  DefFrameProcA: [ LRESULT, { hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefFrameProcW: [ LRESULT, { hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefMDIChildProcA: [ LRESULT, { hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  DefMDIChildProcW: [ LRESULT, { hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM } ],
  TranslateMDISysAccel: [ BOOL, { hWndClient: HWND, lpMsg: LPMSG } ],
  ArrangeIconicWindows: [ UINT, { hWnd: HWND } ],
  CreateMDIWindowA: [ HWND, { lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM } ],
  CreateMDIWindowW: [ HWND, { lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: int, Y: int, nWidth: int, nHeight: int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM } ],
  TileWindows: [ WORD, { hwndParent: HWND, wHow: UINT, lpRect: RECT.Δ, cKids: UINT, lpKids: HWND.Δ } ],
  CascadeWindows: [ WORD, { hwndParent: HWND, wHow: UINT, lpRect: RECT.Δ, cKids: UINT, lpKids: HWND.Δ } ],
  WinHelpA: [ BOOL, { hWndMain: HWND, lpszHelp: LPCSTR, uCommand: UINT, dwData: ULONG_PTR } ],
  WinHelpW: [ BOOL, { hWndMain: HWND, lpszHelp: LPCWSTR, uCommand: UINT, dwData: ULONG_PTR } ],
  GetGuiResources: [ DWORD, { hProcess: HANDLE, uiFlags: DWORD } ],
  ChangeDisplaySettingsA: [ LONG, { lpDevMode: DEVMODEA.Δ, dwFlags: DWORD } ],
  ChangeDisplaySettingsW: [ LONG, { lpDevMode: DEVMODEW.Δ, dwFlags: DWORD } ],
  ChangeDisplaySettingsExA: [ LONG, { lpszDeviceName: LPCSTR, lpDevMode: DEVMODEA.Δ, hwnd: HWND, dwflags: DWORD, lParam: LPVOID } ],
  ChangeDisplaySettingsExW: [ LONG, { lpszDeviceName: LPCWSTR, lpDevMode: DEVMODEW.Δ, hwnd: HWND, dwflags: DWORD, lParam: LPVOID } ],
  EnumDisplaySettingsA: [ BOOL, { lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: DEVMODEA.Δ } ],
  EnumDisplaySettingsW: [ BOOL, { lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: DEVMODEW.Δ } ],
  EnumDisplaySettingsExA: [ BOOL, { lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: DEVMODEA.Δ, dwFlags: DWORD } ],
  EnumDisplaySettingsExW: [ BOOL, { lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: DEVMODEW.Δ, dwFlags: DWORD } ],
  EnumDisplayDevicesA: [ BOOL, { lpDevice: LPCSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEA, dwFlags: DWORD } ],
  EnumDisplayDevicesW: [ BOOL, { lpDevice: LPCWSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEW, dwFlags: DWORD } ],
  GetDisplayConfigBufferSizes: [ LONG, { flags: UINT32, numPathArrayElements: UINT32.Δ, numModeInfoArrayElements: UINT32.Δ } ],
  SetDisplayConfig: [ LONG, { numPathArrayElements: UINT32, pathArray: DISPLAYCONFIG_PATH_INFO.Δ, numModeInfoArrayElements: UINT32, modeInfoArray: DISPLAYCONFIG_MODE_INFO.Δ, flags: UINT32 } ],
  QueryDisplayConfig: [ LONG, { flags: UINT32, numPathArrayElements: UINT32.Δ, pathArray: DISPLAYCONFIG_PATH_INFO.Δ, numModeInfoArrayElements: UINT32.Δ, modeInfoArray: DISPLAYCONFIG_MODE_INFO.Δ, currentTopologyId: DISPLAYCONFIG_TOPOLOGY_ID.Δ } ],
  DisplayConfigGetDeviceInfo: [ LONG, { requestPacket: DISPLAYCONFIG_DEVICE_INFO_HEADER.Δ } ],
  DisplayConfigSetDeviceInfo: [ LONG, { setPacket: DISPLAYCONFIG_DEVICE_INFO_HEADER.Δ } ],
  SystemParametersInfoA: [ BOOL, { uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT } ],
  SystemParametersInfoW: [ BOOL, { uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT } ],
  SoundSentry: [ BOOL, {  } ],
  SetDebugErrorLevel: [ _void, { dwLevel: DWORD } ],
  SetLastErrorEx: [ _void, { dwErrCode: DWORD, dwType: DWORD } ],
  InternalGetWindowText: [ _void, { hWnd: HWND, pString: LPWSTR, cchMaxCount: int } ],
  CancelShutdown: [ BOOL, {  } ],
  MonitorFromPoint: [ HMONITOR, { pt: POINT, dwFlags: DWORD } ],
  MonitorFromRect: [ HMONITOR, { lprc: LPCRECT, dwFlags: DWORD } ],
  MonitorFromWindow: [ HMONITOR, { hwnd: HWND, dwFlags: DWORD } ],
  GetMonitorInfoA: [ BOOL, { hMonitor: HMONITOR, lpmi: LPMONITORINFO } ],
  GetMonitorInfoW: [ BOOL, { hMonitor: HMONITOR, lpmi: LPMONITORINFO } ],
  EnumDisplayMonitors: [ BOOL, { hdc: HDC, lprcClip: LPCRECT, lpfnEnum: MONITORENUMPROC, dwData: LPARAM } ],
  NotifyWinEvent: [ _void, { event: DWORD, hwnd: HWND, idObject: LONG, idChild: LONG } ],
  SetWinEventHook: [ HWINEVENTHOOK, { eventMin: DWORD, eventMax: DWORD, hmodWinEventProc: HMODULE, pfnWinEventProc: WINEVENTPROC, idProcess: DWORD, idThread: DWORD, dwFlags: DWORD } ],
  IsWinEventHookInstalled: [ BOOL, { event: DWORD } ],
  UnhookWinEvent: [ BOOL, { hWinEventHook: HWINEVENTHOOK } ],
  GetGUIThreadInfo: [ BOOL, { idThread: DWORD, pgui: PGUITHREADINFO } ],
  BlockInput: [ BOOL, { fBlockIt: BOOL } ],
  SetProcessDPIAware: [ BOOL, {  } ],
  IsProcessDPIAware: [ BOOL, {  } ],
  GetWindowModuleFileNameA: [ UINT, { hwnd: HWND, pszFileName: LPSTR, cchFileNameMax: UINT } ],
  GetWindowModuleFileNameW: [ UINT, { hwnd: HWND, pszFileName: LPWSTR, cchFileNameMax: UINT } ],
  GetCursorInfo: [ BOOL, { pci: PCURSORINFO } ],
  GetWindowInfo: [ BOOL, { hwnd: HWND, pwi: PWINDOWINFO } ],
  GetTitleBarInfo: [ BOOL, { hwnd: HWND, pti: PTITLEBARINFO } ],
  GetMenuBarInfo: [ BOOL, { hwnd: HWND, idObject: LONG, idItem: LONG, pmbi: PMENUBARINFO } ],
  GetScrollBarInfo: [ BOOL, { hwnd: HWND, idObject: LONG, psbi: PSCROLLBARINFO } ],
  GetComboBoxInfo: [ BOOL, { hwndCombo: HWND, pcbi: PCOMBOBOXINFO } ],
  GetAncestor: [ HWND, { hwnd: HWND, gaFlags: UINT } ],
  RealChildWindowFromPoint: [ HWND, { hwndParent: HWND, ptParentClientCoords: POINT } ],
  RealGetWindowClassA: [ UINT, { hwnd: HWND, ptszClassName: LPSTR, cchClassNameMax: UINT } ],
  RealGetWindowClassW: [ UINT, { hwnd: HWND, ptszClassName: LPWSTR, cchClassNameMax: UINT } ],
  GetAltTabInfoA: [ BOOL, { hwnd: HWND, iItem: int, pati: PALTTABINFO, pszItemText: LPSTR, cchItemText: UINT } ],
  GetAltTabInfoW: [ BOOL, { hwnd: HWND, iItem: int, pati: PALTTABINFO, pszItemText: LPWSTR, cchItemText: UINT } ],
  GetListBoxInfo: [ DWORD, { hwnd: HWND } ],
  LockWorkStation: [ BOOL, {  } ],
  UserHandleGrantAccess: [ BOOL, { hUserHandle: HANDLE, hJob: HANDLE, bGrant: BOOL } ],
  GetRawInputData: [ UINT, { hRawInput: HRAWINPUT, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT, cbSizeHeader: UINT } ],
  GetRawInputDeviceInfoA: [ UINT, { hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT } ],
  GetRawInputDeviceInfoW: [ UINT, { hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT } ],
  GetRawInputBuffer: [ UINT, { pData: PRAWINPUT, pcbSize: PUINT, cbSizeHeader: UINT } ],
  RegisterRawInputDevices: [ BOOL, { pRawInputDevices: PCRAWINPUTDEVICE, uiNumDevices: UINT, cbSize: UINT } ],
  GetRegisteredRawInputDevices: [ UINT, { pRawInputDevices: PRAWINPUTDEVICE, puiNumDevices: PUINT, cbSize: UINT } ],
  GetRawInputDeviceList: [ UINT, { pRawInputDeviceList: PRAWINPUTDEVICELIST, puiNumDevices: PUINT, cbSize: UINT } ],
  DefRawInputProc: [ LRESULT, { paRawInput: PRAWINPUT.Δ, nInput: INT, cbSizeHeader: UINT } ],
  ChangeWindowMessageFilter: [ BOOL, { message: UINT, dwFlag: DWORD } ],
  ChangeWindowMessageFilterEx: [ BOOL, { hwnd: HWND, message: UINT, action: DWORD, pChangeFilterStruct: PCHANGEFILTERSTRUCT } ],
  GetGestureInfo: [ BOOL, { hGestureInfo: HGESTUREINFO, pGestureInfo: PGESTUREINFO } ],
  GetGestureExtraArgs: [ BOOL, { hGestureInfo: HGESTUREINFO, cbExtraArgs: UINT, pExtraArgs: PBYTE } ],
  CloseGestureInfoHandle: [ BOOL, { hGestureInfo: HGESTUREINFO } ],
  SetGestureConfig: [ BOOL, { hwnd: HWND, dwReserved: DWORD, cIDs: UINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT } ],
  GetGestureConfig: [ BOOL, { hwnd: HWND, dwReserved: DWORD, dwFlags: DWORD, pcIDs: PUINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT } ],
  ShutdownBlockReasonCreate: [ BOOL, { hWnd: HWND, pwszReason: LPCWSTR } ],
  ShutdownBlockReasonQuery: [ BOOL, { hWnd: HWND, pwszBuff: LPWSTR, pcchBuff: DWORD.Δ } ],
  ShutdownBlockReasonDestroy: [ BOOL, { hWnd: HWND } ],
  IsValidCodePage: [ BOOL, { CodePage: UINT } ],
  GetACP: [ UINT, {  } ],
  GetOEMCP: [ UINT, {  } ],
  GetCPInfo: [ BOOL, { CodePage: UINT, lpCPInfo: LPCPINFO } ],
  GetCPInfoExA: [ BOOL, { CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXA } ],
  GetCPInfoExW: [ BOOL, { CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXW } ],
  IsDBCSLeadByte: [ BOOL, { TestChar: BYTE } ],
  IsDBCSLeadByteEx: [ BOOL, { CodePage: UINT, TestChar: BYTE } ],
  MultiByteToWideChar: [ _void, { CodePage: UINT, dwFlags: DWORD, lpMultiByteStr: LPCSTR, cbMultiByte: int, lpWideCharStr: LPWSTR, cchWideChar: int } ],
  WideCharToMultiByte: [ _void, { CodePage: UINT, dwFlags: DWORD, lpWideCharStr: LPCWSTR, cchWideChar: int, lpMultiByteStr: LPSTR, cbMultiByte: int, lpDefaultChar: LPCSTR, lpUsedDefaultChar: LPBOOL } ],
  CompareStringA: [ _void, { Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZCH, cchCount1: int, lpString2: PCNZCH, cchCount2: int } ],
  CompareStringW: [ _void, { Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZWCH, cchCount1: int, lpString2: PCNZWCH, cchCount2: int } ],
  FindNLSString: [ _void, { Locale: LCID, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: int, lpStringValue: LPCWSTR, cchValue: int, pcchFound: LPINT } ],
  FindStringOrdinal: [ _void, { dwFindStringOrdinalFlags: DWORD, lpStringSource: LPCWSTR, cchSource: int, lpStringValue: LPCWSTR, cchValue: int, bIgnoreCase: BOOL } ],
  LCMapStringA: [ _void, { Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpDestStr: LPSTR, cchDest: int } ],
  LCMapStringW: [ _void, { Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpDestStr: LPWSTR, cchDest: int } ],
  GetLocaleInfoA: [ _void, { Locale: LCID, LCType: LCTYPE, lpLCData: LPSTR, cchData: int } ],
  GetLocaleInfoW: [ _void, { Locale: LCID, LCType: LCTYPE, lpLCData: LPWSTR, cchData: int } ],
  SetLocaleInfoA: [ BOOL, { Locale: LCID, LCType: LCTYPE, lpLCData: LPCSTR } ],
  SetLocaleInfoW: [ BOOL, { Locale: LCID, LCType: LCTYPE, lpLCData: LPCWSTR } ],
  GetCalendarInfoA: [ _void, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPSTR, cchData: int, lpValue: LPDWORD } ],
  GetCalendarInfoW: [ _void, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPWSTR, cchData: int, lpValue: LPDWORD } ],
  SetCalendarInfoA: [ BOOL, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCSTR } ],
  SetCalendarInfoW: [ BOOL, { Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCWSTR } ],
  LCIDToLocaleName: [ _void, { Locale: LCID, lpName: LPWSTR, cchName: int, dwFlags: DWORD } ],
  LocaleNameToLCID: [ LCID, { lpName: LPCWSTR, dwFlags: DWORD } ],
  GetTimeFormatA: [ _void, { Locale: LCID, dwFlags: DWORD, lpTime: SYSTEMTIME.Δ, lpFormat: LPCSTR, lpTimeStr: LPSTR, cchTime: int } ],
  GetTimeFormatW: [ _void, { Locale: LCID, dwFlags: DWORD, lpTime: SYSTEMTIME.Δ, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: int } ],
  GetDurationFormat: [ _void, { Locale: LCID, dwFlags: DWORD, lpDuration: SYSTEMTIME.Δ, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: int } ],
  GetDateFormatA: [ _void, { Locale: LCID, dwFlags: DWORD, lpDate: SYSTEMTIME.Δ, lpFormat: LPCSTR, lpDateStr: LPSTR, cchDate: int } ],
  GetDateFormatW: [ _void, { Locale: LCID, dwFlags: DWORD, lpDate: SYSTEMTIME.Δ, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: int } ],
  GetNumberFormatA: [ _void, { Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: NUMBERFMTA.Δ, lpNumberStr: LPSTR, cchNumber: int } ],
  GetNumberFormatW: [ _void, { Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: NUMBERFMTW.Δ, lpNumberStr: LPWSTR, cchNumber: int } ],
  GetCurrencyFormatA: [ _void, { Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: CURRENCYFMTA.Δ, lpCurrencyStr: LPSTR, cchCurrency: int } ],
  GetCurrencyFormatW: [ _void, { Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: CURRENCYFMTW.Δ, lpCurrencyStr: LPWSTR, cchCurrency: int } ],
  EnumCalendarInfoA: [ BOOL, { lpCalInfoEnumProc: CALINFO_ENUMPROCA, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumCalendarInfoW: [ BOOL, { lpCalInfoEnumProc: CALINFO_ENUMPROCW, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumCalendarInfoExA: [ BOOL, { lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumCalendarInfoExW: [ BOOL, { lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW, Locale: LCID, Calendar: CALID, CalType: CALTYPE } ],
  EnumTimeFormatsA: [ BOOL, { lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD } ],
  EnumTimeFormatsW: [ BOOL, { lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsA: [ BOOL, { lpDateFmtEnumProc: DATEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsW: [ BOOL, { lpDateFmtEnumProc: DATEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsExA: [ BOOL, { lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA, Locale: LCID, dwFlags: DWORD } ],
  EnumDateFormatsExW: [ BOOL, { lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW, Locale: LCID, dwFlags: DWORD } ],
  IsValidLanguageGroup: [ BOOL, { LanguageGroup: LGRPID, dwFlags: DWORD } ],
  GetNLSVersion: [ BOOL, { Function: NLS_FUNCTION, Locale: LCID, lpVersionInformation: LPNLSVERSIONINFO } ],
  IsNLSDefinedString: [ BOOL, { Function: NLS_FUNCTION, dwFlags: DWORD, lpVersionInformation: LPNLSVERSIONINFO, lpString: LPCWSTR, cchStr: INT } ],
  IsValidLocale: [ BOOL, { Locale: LCID, dwFlags: DWORD } ],
  GetGeoInfoA: [ _void, { Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPSTR, cchData: int, LangId: LANGID } ],
  GetGeoInfoW: [ _void, { Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPWSTR, cchData: int, LangId: LANGID } ],
  EnumSystemGeoID: [ BOOL, { GeoClass: GEOCLASS, ParentGeoId: GEOID, lpGeoEnumProc: GEO_ENUMPROC } ],
  GetUserGeoID: [ GEOID, { GeoClass: GEOCLASS } ],
  SetUserGeoID: [ BOOL, { GeoId: GEOID } ],
  ConvertDefaultLocale: [ LCID, { Locale: LCID } ],
  GetThreadLocale: [ LCID, {  } ],
  SetThreadLocale: [ BOOL, { Locale: LCID } ],
  GetSystemDefaultUILanguage: [ LANGID, {  } ],
  GetUserDefaultUILanguage: [ LANGID, {  } ],
  GetSystemDefaultLangID: [ LANGID, {  } ],
  GetUserDefaultLangID: [ LANGID, {  } ],
  GetSystemDefaultLCID: [ LCID, {  } ],
  GetUserDefaultLCID: [ LCID, {  } ],
  SetThreadUILanguage: [ LANGID, { LangId: LANGID } ],
  GetThreadUILanguage: [ LANGID, {  } ],
  GetProcessPreferredUILanguages: [ BOOL, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  SetProcessPreferredUILanguages: [ BOOL, { dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG } ],
  GetUserPreferredUILanguages: [ BOOL, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  GetSystemPreferredUILanguages: [ BOOL, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  GetThreadPreferredUILanguages: [ BOOL, { dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG } ],
  SetThreadPreferredUILanguages: [ BOOL, { dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG } ],
  GetFileMUIInfo: [ BOOL, { dwFlags: DWORD, pcwszFilePath: PCWSTR, pFileMUIInfo: PFILEMUIINFO, pcbFileMUIInfo: DWORD.Δ } ],
  GetFileMUIPath: [ BOOL, { dwFlags: DWORD, pcwszFilePath: PCWSTR, pwszLanguage: PWSTR, pcchLanguage: PULONG, pwszFileMUIPath: PWSTR, pcchFileMUIPath: PULONG, pululEnumerator: PULONGLONG } ],
  GetUILanguageInfo: [ BOOL, { dwFlags: DWORD, pwmszLanguage: PCZZWSTR, pwszFallbackLanguages: PZZWSTR, pcchFallbackLanguages: PDWORD, pAttributes: PDWORD } ],
  NotifyUILanguageChange: [ BOOL, { dwFlags: DWORD, pcwstrNewLanguage: PCWSTR, pcwstrPreviousLanguage: PCWSTR, dwReserved: DWORD, pdwStatusRtrn: PDWORD } ],
  GetStringTypeExA: [ BOOL, { Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpCharType: LPWORD } ],
  GetStringTypeExW: [ BOOL, { Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpCharType: LPWORD } ],
  GetStringTypeA: [ BOOL, { Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpCharType: LPWORD } ],
  GetStringTypeW: [ BOOL, { dwInfoType: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpCharType: LPWORD } ],
  FoldStringA: [ _void, { dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: int, lpDestStr: LPSTR, cchDest: int } ],
  FoldStringW: [ _void, { dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpDestStr: LPWSTR, cchDest: int } ],
  EnumSystemLanguageGroupsA: [ BOOL, { lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumSystemLanguageGroupsW: [ BOOL, { lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumLanguageGroupLocalesA: [ BOOL, { lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumLanguageGroupLocalesW: [ BOOL, { lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumUILanguagesA: [ BOOL, { lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumUILanguagesW: [ BOOL, { lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR } ],
  EnumSystemLocalesA: [ BOOL, { lpLocaleEnumProc: LOCALE_ENUMPROCA, dwFlags: DWORD } ],
  EnumSystemLocalesW: [ BOOL, { lpLocaleEnumProc: LOCALE_ENUMPROCW, dwFlags: DWORD } ],
  EnumSystemCodePagesA: [ BOOL, { lpCodePageEnumProc: CODEPAGE_ENUMPROCA, dwFlags: DWORD } ],
  EnumSystemCodePagesW: [ BOOL, { lpCodePageEnumProc: CODEPAGE_ENUMPROCW, dwFlags: DWORD } ],
  NormalizeString: [ _void, { NormForm: NORM_FORM, lpSrcString: LPCWSTR, cwSrcLength: int, lpDstString: LPWSTR, cwDstLength: int } ],
  IsNormalizedString: [ BOOL, { NormForm: NORM_FORM, lpString: LPCWSTR, cwLength: int } ],
  IdnToAscii: [ _void, { dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: int, lpASCIICharStr: LPWSTR, cchASCIIChar: int } ],
  IdnToNameprepUnicode: [ _void, { dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: int, lpNameprepCharStr: LPWSTR, cchNameprepChar: int } ],
  IdnToUnicode: [ _void, { dwFlags: DWORD, lpASCIICharStr: LPCWSTR, cchASCIIChar: int, lpUnicodeCharStr: LPWSTR, cchUnicodeChar: int } ],
  VerifyScripts: [ BOOL, { dwFlags: DWORD, lpLocaleScripts: LPCWSTR, cchLocaleScripts: int, lpTestScripts: LPCWSTR, cchTestScripts: int } ],
  GetStringScripts: [ _void, { dwFlags: DWORD, lpString: LPCWSTR, cchString: int, lpScripts: LPWSTR, cchScripts: int } ],
  GetLocaleInfoEx: [ _void, { lpLocaleName: LPCWSTR, LCType: LCTYPE, lpLCData: LPWSTR, cchData: int } ],
  GetCalendarInfoEx: [ _void, { lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lpCalData: LPWSTR, cchData: int, lpValue: LPDWORD } ],
  GetTimeFormatEx: [ _void, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpTime: SYSTEMTIME.Δ, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: int } ],
  GetDateFormatEx: [ _void, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDate: SYSTEMTIME.Δ, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: int, lpCalendar: LPCWSTR } ],
  GetDurationFormatEx: [ _void, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDuration: SYSTEMTIME.Δ, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: int } ],
  GetNumberFormatEx: [ _void, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: NUMBERFMTW.Δ, lpNumberStr: LPWSTR, cchNumber: int } ],
  GetCurrencyFormatEx: [ _void, { lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: CURRENCYFMTW.Δ, lpCurrencyStr: LPWSTR, cchCurrency: int } ],
  GetUserDefaultLocaleName: [ _void, { lpLocaleName: LPWSTR, cchLocaleName: int } ],
  GetSystemDefaultLocaleName: [ _void, { lpLocaleName: LPWSTR, cchLocaleName: int } ],
  GetNLSVersionEx: [ BOOL, { function: NLS_FUNCTION, lpLocaleName: LPCWSTR, lpVersionInformation: LPNLSVERSIONINFOEX } ],
  CompareStringEx: [ _void, { lpLocaleName: LPCWSTR, dwCmpFlags: DWORD, lpString1: LPCWSTR, cchCount1: int, lpString2: LPCWSTR, cchCount2: int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM } ],
  FindNLSStringEx: [ _void, { lpLocaleName: LPCWSTR, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: int, lpStringValue: LPCWSTR, cchValue: int, pcchFound: LPINT, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM } ],
  LCMapStringEx: [ _void, { lpLocaleName: LPCWSTR, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: int, lpDestStr: LPWSTR, cchDest: int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM } ],
  CompareStringOrdinal: [ _void, { lpString1: LPCWSTR, cchCount1: int, lpString2: LPCWSTR, cchCount2: int, bIgnoreCase: BOOL } ],
  IsValidLocaleName: [ BOOL, { lpLocaleName: LPCWSTR } ],
  EnumCalendarInfoExEx: [ BOOL, { pCalInfoEnumProcExEx: CALINFO_ENUMPROCEXEX, lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lParam: LPARAM } ],
  EnumDateFormatsExEx: [ BOOL, { lpDateFmtEnumProcExEx: DATEFMT_ENUMPROCEXEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM } ],
  EnumTimeFormatsEx: [ BOOL, { lpTimeFmtEnumProcEx: TIMEFMT_ENUMPROCEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM } ],
  EnumSystemLocalesEx: [ BOOL, { lpLocaleEnumProcEx: LOCALE_ENUMPROCEX, dwFlags: DWORD, lParam: LPARAM, lpReserved: LPVOID } ],
  ResolveLocaleName: [ _void, { lpNameToResolve: LPCWSTR, lpLocaleName: LPWSTR, cchLocaleName: int } ],
  PeekConsoleInputA: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  PeekConsoleInputW: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  ReadConsoleInputA: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  ReadConsoleInputW: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD } ],
  WriteConsoleInputA: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: INPUT_RECORD.Δ, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD } ],
  WriteConsoleInputW: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: INPUT_RECORD.Δ, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD } ],
  ReadConsoleOutputA: [ BOOL, { hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT } ],
  ReadConsoleOutputW: [ BOOL, { hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT } ],
  WriteConsoleOutputA: [ BOOL, { hConsoleOutput: HANDLE, lpBuffer: CHAR_INFO.Δ, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT } ],
  WriteConsoleOutputW: [ BOOL, { hConsoleOutput: HANDLE, lpBuffer: CHAR_INFO.Δ, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT } ],
  ReadConsoleOutputCharacterA: [ BOOL, { hConsoleOutput: HANDLE, lpCharacter: LPSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD } ],
  ReadConsoleOutputCharacterW: [ BOOL, { hConsoleOutput: HANDLE, lpCharacter: LPWSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD } ],
  ReadConsoleOutputAttribute: [ BOOL, { hConsoleOutput: HANDLE, lpAttribute: LPWORD, nLength: DWORD, dwReadCoord: COORD, lpNumberOfAttrsRead: LPDWORD } ],
  WriteConsoleOutputCharacterA: [ BOOL, { hConsoleOutput: HANDLE, lpCharacter: LPCSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  WriteConsoleOutputCharacterW: [ BOOL, { hConsoleOutput: HANDLE, lpCharacter: LPCWSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  WriteConsoleOutputAttribute: [ BOOL, { hConsoleOutput: HANDLE, lpAttribute: WORD.Δ, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD } ],
  FillConsoleOutputCharacterA: [ BOOL, { hConsoleOutput: HANDLE, cCharacter: CHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  FillConsoleOutputCharacterW: [ BOOL, { hConsoleOutput: HANDLE, cCharacter: WCHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD } ],
  FillConsoleOutputAttribute: [ BOOL, { hConsoleOutput: HANDLE, wAttribute: WORD, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD } ],
  GetConsoleMode: [ BOOL, { hConsoleHandle: HANDLE, lpMode: LPDWORD } ],
  GetNumberOfConsoleInputEvents: [ BOOL, { hConsoleInput: HANDLE, lpNumberOfEvents: LPDWORD } ],
  GetConsoleScreenBufferInfo: [ BOOL, { hConsoleOutput: HANDLE, lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO } ],
  GetConsoleScreenBufferInfoEx: [ BOOL, { hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX } ],
  SetConsoleScreenBufferInfoEx: [ BOOL, { hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX } ],
  GetLargestConsoleWindowSize: [ COORD, { hConsoleOutput: HANDLE } ],
  GetConsoleCursorInfo: [ BOOL, { hConsoleOutput: HANDLE, lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO } ],
  GetCurrentConsoleFont: [ BOOL, { hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFont: PCONSOLE_FONT_INFO } ],
  GetCurrentConsoleFontEx: [ BOOL, { hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX } ],
  SetCurrentConsoleFontEx: [ BOOL, { hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX } ],
  GetConsoleHistoryInfo: [ BOOL, { lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO } ],
  SetConsoleHistoryInfo: [ BOOL, { lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO } ],
  GetConsoleFontSize: [ COORD, { hConsoleOutput: HANDLE, nFont: DWORD } ],
  GetConsoleSelectionInfo: [ BOOL, { lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO } ],
  GetNumberOfConsoleMouseButtons: [ BOOL, { lpNumberOfMouseButtons: LPDWORD } ],
  SetConsoleMode: [ BOOL, { hConsoleHandle: HANDLE, dwMode: DWORD } ],
  SetConsoleActiveScreenBuffer: [ BOOL, { hConsoleOutput: HANDLE } ],
  FlushConsoleInputBuffer: [ BOOL, { hConsoleInput: HANDLE } ],
  SetConsoleScreenBufferSize: [ BOOL, { hConsoleOutput: HANDLE, dwSize: COORD } ],
  SetConsoleCursorPosition: [ BOOL, { hConsoleOutput: HANDLE, dwCursorPosition: COORD } ],
  SetConsoleCursorInfo: [ BOOL, { hConsoleOutput: HANDLE, lpConsoleCursorInfo: CONSOLE_CURSOR_INFO.Δ } ],
  ScrollConsoleScreenBufferA: [ BOOL, { hConsoleOutput: HANDLE, lpScrollRectangle: SMALL_RECT.Δ, lpClipRectangle: SMALL_RECT.Δ, dwDestinationOrigin: COORD, lpFill: CHAR_INFO.Δ } ],
  ScrollConsoleScreenBufferW: [ BOOL, { hConsoleOutput: HANDLE, lpScrollRectangle: SMALL_RECT.Δ, lpClipRectangle: SMALL_RECT.Δ, dwDestinationOrigin: COORD, lpFill: CHAR_INFO.Δ } ],
  SetConsoleWindowInfo: [ BOOL, { hConsoleOutput: HANDLE, bAbsolute: BOOL, lpConsoleWindow: SMALL_RECT.Δ } ],
  SetConsoleTextAttribute: [ BOOL, { hConsoleOutput: HANDLE, wAttributes: WORD } ],
  SetConsoleCtrlHandler: [ BOOL, { HandlerRoutine: PHANDLER_ROUTINE, Add: BOOL } ],
  GenerateConsoleCtrlEvent: [ BOOL, { dwCtrlEvent: DWORD, dwProcessGroupId: DWORD } ],
  AllocConsole: [ BOOL, {  } ],
  FreeConsole: [ BOOL, {  } ],
  AttachConsole: [ BOOL, { dwProcessId: DWORD } ],
  GetConsoleTitleA: [ DWORD, { lpConsoleTitle: LPSTR, nSize: DWORD } ],
  GetConsoleTitleW: [ DWORD, { lpConsoleTitle: LPWSTR, nSize: DWORD } ],
  GetConsoleOriginalTitleA: [ DWORD, { lpConsoleTitle: LPSTR, nSize: DWORD } ],
  GetConsoleOriginalTitleW: [ DWORD, { lpConsoleTitle: LPWSTR, nSize: DWORD } ],
  SetConsoleTitleA: [ BOOL, { lpConsoleTitle: LPCSTR } ],
  SetConsoleTitleW: [ BOOL, { lpConsoleTitle: LPCWSTR } ],
  ReadConsoleA: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL } ],
  ReadConsoleW: [ BOOL, { hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL } ],
  WriteConsoleA: [ BOOL, { hConsoleOutput: HANDLE, lpBuffer: _void.Δ, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID } ],
  WriteConsoleW: [ BOOL, { hConsoleOutput: HANDLE, lpBuffer: _void.Δ, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID } ],
  CreateConsoleScreenBuffer: [ HANDLE, { dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: SECURITY_ATTRIBUTES.Δ, dwFlags: DWORD, lpScreenBufferData: LPVOID } ],
  GetConsoleCP: [ UINT, {  } ],
  SetConsoleCP: [ BOOL, { wCodePageID: UINT } ],
  GetConsoleOutputCP: [ UINT, {  } ],
  SetConsoleOutputCP: [ BOOL, { wCodePageID: UINT } ],
  GetConsoleDisplayMode: [ BOOL, { lpModeFlags: LPDWORD } ],
  SetConsoleDisplayMode: [ BOOL, { hConsoleOutput: HANDLE, dwFlags: DWORD, lpNewScreenBufferDimensions: PCOORD } ],
  GetConsoleWindow: [ HWND, {  } ],
  GetConsoleProcessList: [ DWORD, { lpdwProcessList: LPDWORD, dwProcessCount: DWORD } ],
  AddConsoleAliasA: [ BOOL, { Source: LPSTR, Target: LPSTR, ExeName: LPSTR } ],
  AddConsoleAliasW: [ BOOL, { Source: LPWSTR, Target: LPWSTR, ExeName: LPWSTR } ],
  GetConsoleAliasA: [ DWORD, { Source: LPSTR, TargetBuffer: LPSTR, TargetBufferLength: DWORD, ExeName: LPSTR } ],
  GetConsoleAliasW: [ DWORD, { Source: LPWSTR, TargetBuffer: LPWSTR, TargetBufferLength: DWORD, ExeName: LPWSTR } ],
  GetConsoleAliasesLengthA: [ DWORD, { ExeName: LPSTR } ],
  GetConsoleAliasesLengthW: [ DWORD, { ExeName: LPWSTR } ],
  GetConsoleAliasExesLengthA: [ DWORD, {  } ],
  GetConsoleAliasExesLengthW: [ DWORD, {  } ],
  GetConsoleAliasesA: [ DWORD, { AliasBuffer: LPSTR, AliasBufferLength: DWORD, ExeName: LPSTR } ],
  GetConsoleAliasesW: [ DWORD, { AliasBuffer: LPWSTR, AliasBufferLength: DWORD, ExeName: LPWSTR } ],
  GetConsoleAliasExesA: [ DWORD, { ExeNameBuffer: LPSTR, ExeNameBufferLength: DWORD } ],
  GetConsoleAliasExesW: [ DWORD, { ExeNameBuffer: LPWSTR, ExeNameBufferLength: DWORD } ],
  VerFindFileA: [ DWORD, { uFlags: DWORD, szFileName: LPCSTR, szWinDir: LPCSTR, szAppDir: LPCSTR, szCurDir: LPSTR, lpuCurDirLen: PUINT, szDestDir: LPSTR, lpuDestDirLen: PUINT } ],
  VerFindFileW: [ DWORD, { uFlags: DWORD, szFileName: LPCWSTR, szWinDir: LPCWSTR, szAppDir: LPCWSTR, szCurDir: LPWSTR, lpuCurDirLen: PUINT, szDestDir: LPWSTR, lpuDestDirLen: PUINT } ],
  VerInstallFileA: [ DWORD, { uFlags: DWORD, szSrcFileName: LPCSTR, szDestFileName: LPCSTR, szSrcDir: LPCSTR, szDestDir: LPCSTR, szCurDir: LPCSTR, szTmpFile: LPSTR, lpuTmpFileLen: PUINT } ],
  VerInstallFileW: [ DWORD, { uFlags: DWORD, szSrcFileName: LPCWSTR, szDestFileName: LPCWSTR, szSrcDir: LPCWSTR, szDestDir: LPCWSTR, szCurDir: LPCWSTR, szTmpFile: LPWSTR, lpuTmpFileLen: PUINT } ],
  GetFileVersionInfoSizeA: [ DWORD, { lptstrFilename: LPCSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoSizeW: [ DWORD, { lptstrFilename: LPCWSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoA: [ BOOL, { lptstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  GetFileVersionInfoW: [ BOOL, { lptstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  GetFileVersionInfoSizeExA: [ DWORD, { dwFlags: DWORD, lpwstrFilename: LPCSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoSizeExW: [ DWORD, { dwFlags: DWORD, lpwstrFilename: LPCWSTR, lpdwHandle: LPDWORD } ],
  GetFileVersionInfoExA: [ BOOL, { dwFlags: DWORD, lpwstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  GetFileVersionInfoExW: [ BOOL, { dwFlags: DWORD, lpwstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID } ],
  VerLanguageNameA: [ DWORD, { wLang: DWORD, szLang: LPSTR, cchLang: DWORD } ],
  VerLanguageNameW: [ DWORD, { wLang: DWORD, szLang: LPWSTR, cchLang: DWORD } ],
  VerQueryValueA: [ BOOL, { pBlock: LPCVOID, lpSubBlock: LPCSTR, lplpBuffer: LPVOID.Δ, puLen: PUINT } ],
  VerQueryValueW: [ BOOL, { pBlock: LPCVOID, lpSubBlock: LPCWSTR, lplpBuffer: LPVOID.Δ, puLen: PUINT } ],
  RegCloseKey: [ LSTATUS, { hKey: HKEY } ],
  RegOverridePredefKey: [ LSTATUS, { hKey: HKEY, hNewHKey: HKEY } ],
  RegOpenUserClassesRoot: [ LSTATUS, { hToken: HANDLE, dwOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY } ],
  RegOpenCurrentUser: [ LSTATUS, { samDesired: REGSAM, phkResult: PHKEY } ],
  RegDisablePredefinedCache: [ LSTATUS, {  } ],
  RegDisablePredefinedCacheEx: [ LSTATUS, {  } ],
  RegConnectRegistryA: [ LSTATUS, { lpMachineName: LPCSTR, hKey: HKEY, phkResult: PHKEY } ],
  RegConnectRegistryW: [ LSTATUS, { lpMachineName: LPCWSTR, hKey: HKEY, phkResult: PHKEY } ],
  RegConnectRegistryExA: [ LSTATUS, { lpMachineName: LPCSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY } ],
  RegConnectRegistryExW: [ LSTATUS, { lpMachineName: LPCWSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY } ],
  RegCreateKeyA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY } ],
  RegCreateKeyW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY } ],
  RegCreateKeyExA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD } ],
  RegCreateKeyExW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD } ],
  RegCreateKeyTransactedA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegCreateKeyTransactedW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegDeleteKeyA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR } ],
  RegDeleteKeyW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR } ],
  RegDeleteKeyExA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD } ],
  RegDeleteKeyExW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD } ],
  RegDeleteKeyTransactedA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID } ],
  RegDeleteKeyTransactedW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID } ],
  RegDisableReflectionKey: [ LONG, { hBase: HKEY } ],
  RegEnableReflectionKey: [ LONG, { hBase: HKEY } ],
  RegQueryReflectionKey: [ LONG, { hBase: HKEY, bIsReflectionDisabled: BOOL.Δ } ],
  RegDeleteValueA: [ LSTATUS, { hKey: HKEY, lpValueName: LPCSTR } ],
  RegDeleteValueW: [ LSTATUS, { hKey: HKEY, lpValueName: LPCWSTR } ],
  RegEnumKeyA: [ LSTATUS, { hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, cchName: DWORD } ],
  RegEnumKeyW: [ LSTATUS, { hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, cchName: DWORD } ],
  RegEnumKeyExA: [ LSTATUS, { hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegEnumKeyExW: [ LSTATUS, { hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPWSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegEnumValueA: [ LSTATUS, { hKey: HKEY, dwIndex: DWORD, lpValueName: LPSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegEnumValueW: [ LSTATUS, { hKey: HKEY, dwIndex: DWORD, lpValueName: LPWSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegFlushKey: [ LSTATUS, { hKey: HKEY } ],
  RegGetKeySecurity: [ LSTATUS, { hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpcbSecurityDescriptor: LPDWORD } ],
  RegLoadKeyA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, lpFile: LPCSTR } ],
  RegLoadKeyW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, lpFile: LPCWSTR } ],
  RegNotifyChangeKeyValue: [ LSTATUS, { hKey: HKEY, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, hEvent: HANDLE, fAsynchronous: BOOL } ],
  RegOpenKeyA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY } ],
  RegOpenKeyW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY } ],
  RegOpenKeyExA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY } ],
  RegOpenKeyExW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY } ],
  RegOpenKeyTransactedA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegOpenKeyTransactedW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID } ],
  RegQueryInfoKeyA: [ LSTATUS, { hKey: HKEY, lpClass: LPSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegQueryInfoKeyW: [ LSTATUS, { hKey: HKEY, lpClass: LPWSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME } ],
  RegQueryValueA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, lpData: LPSTR, lpcbData: PLONG } ],
  RegQueryValueW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, lpData: LPWSTR, lpcbData: PLONG } ],
  RegQueryMultipleValuesA: [ LSTATUS, { hKey: HKEY, val_list: PVALENTA, num_vals: DWORD, lpValueBuf: LPSTR, ldwTotsize: LPDWORD } ],
  RegQueryMultipleValuesW: [ LSTATUS, { hKey: HKEY, val_list: PVALENTW, num_vals: DWORD, lpValueBuf: LPWSTR, ldwTotsize: LPDWORD } ],
  RegQueryValueExA: [ LSTATUS, { hKey: HKEY, lpValueName: LPCSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegQueryValueExW: [ LSTATUS, { hKey: HKEY, lpValueName: LPCWSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD } ],
  RegReplaceKeyA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, lpNewFile: LPCSTR, lpOldFile: LPCSTR } ],
  RegReplaceKeyW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, lpNewFile: LPCWSTR, lpOldFile: LPCWSTR } ],
  RegRestoreKeyA: [ LSTATUS, { hKey: HKEY, lpFile: LPCSTR, dwFlags: DWORD } ],
  RegRestoreKeyW: [ LSTATUS, { hKey: HKEY, lpFile: LPCWSTR, dwFlags: DWORD } ],
  RegRenameKey: [ LSTATUS, { hKey: HKEY, lpSubKeyName: LPCWSTR, lpNewKeyName: LPCWSTR } ],
  RegSaveKeyA: [ LSTATUS, { hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  RegSaveKeyW: [ LSTATUS, { hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  RegSetKeySecurity: [ LSTATUS, { hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  RegSetValueA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, dwType: DWORD, lpData: LPCSTR, cbData: DWORD } ],
  RegSetValueW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, dwType: DWORD, lpData: LPCWSTR, cbData: DWORD } ],
  RegSetValueExA: [ LSTATUS, { hKey: HKEY, lpValueName: LPCSTR, Reserved: DWORD, dwType: DWORD, lpData: BYTE.Δ, cbData: DWORD } ],
  RegSetValueExW: [ LSTATUS, { hKey: HKEY, lpValueName: LPCWSTR, Reserved: DWORD, dwType: DWORD, lpData: BYTE.Δ, cbData: DWORD } ],
  RegUnLoadKeyA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR } ],
  RegUnLoadKeyW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR } ],
  RegDeleteKeyValueA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR } ],
  RegDeleteKeyValueW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR } ],
  RegSetKeyValueA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD } ],
  RegSetKeyValueW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD } ],
  RegDeleteTreeA: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCSTR } ],
  RegDeleteTreeW: [ LSTATUS, { hKey: HKEY, lpSubKey: LPCWSTR } ],
  RegCopyTreeA: [ LSTATUS, { hKeySrc: HKEY, lpSubKey: LPCSTR, hKeyDest: HKEY } ],
  RegCopyTreeW: [ LSTATUS, { hKeySrc: HKEY, lpSubKey: LPCWSTR, hKeyDest: HKEY } ],
  RegGetValueA: [ LSTATUS, { hkey: HKEY, lpSubKey: LPCSTR, lpValue: LPCSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD } ],
  RegGetValueW: [ LSTATUS, { hkey: HKEY, lpSubKey: LPCWSTR, lpValue: LPCWSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD } ],
  RegLoadMUIStringA: [ LSTATUS, { hKey: HKEY, pszValue: LPCSTR, pszOutBuf: LPSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCSTR } ],
  RegLoadMUIStringW: [ LSTATUS, { hKey: HKEY, pszValue: LPCWSTR, pszOutBuf: LPWSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCWSTR } ],
  RegLoadAppKeyA: [ LSTATUS, { lpFile: LPCSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD } ],
  RegLoadAppKeyW: [ LSTATUS, { lpFile: LPCWSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD } ],
  InitiateSystemShutdownA: [ BOOL, { lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL } ],
  InitiateSystemShutdownW: [ BOOL, { lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL } ],
  AbortSystemShutdownA: [ BOOL, { lpMachineName: LPSTR } ],
  AbortSystemShutdownW: [ BOOL, { lpMachineName: LPWSTR } ],
  InitiateSystemShutdownExA: [ BOOL, { lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD } ],
  InitiateSystemShutdownExW: [ BOOL, { lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD } ],
  InitiateShutdownA: [ DWORD, { lpMachineName: LPSTR, lpMessage: LPSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD } ],
  InitiateShutdownW: [ DWORD, { lpMachineName: LPWSTR, lpMessage: LPWSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD } ],
  RegSaveKeyExA: [ LSTATUS, { hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD } ],
  RegSaveKeyExW: [ LSTATUS, { hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD } ],
  WNetAddConnectionA: [ DWORD, { lpRemoteName: LPCSTR, lpPassword: LPCSTR, lpLocalName: LPCSTR } ],
  WNetAddConnectionW: [ DWORD, { lpRemoteName: LPCWSTR, lpPassword: LPCWSTR, lpLocalName: LPCWSTR } ],
  WNetAddConnection2A: [ DWORD, { lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD } ],
  WNetAddConnection2W: [ DWORD, { lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD } ],
  WNetAddConnection3A: [ DWORD, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD } ],
  WNetAddConnection3W: [ DWORD, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD } ],
  WNetCancelConnectionA: [ DWORD, { lpName: LPCSTR, fForce: BOOL } ],
  WNetCancelConnectionW: [ DWORD, { lpName: LPCWSTR, fForce: BOOL } ],
  WNetCancelConnection2A: [ DWORD, { lpName: LPCSTR, dwFlags: DWORD, fForce: BOOL } ],
  WNetCancelConnection2W: [ DWORD, { lpName: LPCWSTR, dwFlags: DWORD, fForce: BOOL } ],
  WNetGetConnectionA: [ DWORD, { lpLocalName: LPCSTR, lpRemoteName: LPSTR, lpnLength: LPDWORD } ],
  WNetGetConnectionW: [ DWORD, { lpLocalName: LPCWSTR, lpRemoteName: LPWSTR, lpnLength: LPDWORD } ],
  WNetRestoreSingleConnectionW: [ DWORD, { hwndParent: HWND, lpDevice: LPCWSTR, fUseUI: BOOL } ],
  WNetUseConnectionA: [ DWORD, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserId: LPCSTR, dwFlags: DWORD, lpAccessName: LPSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD } ],
  WNetUseConnectionW: [ DWORD, { hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserId: LPCWSTR, dwFlags: DWORD, lpAccessName: LPWSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD } ],
  WNetConnectionDialog: [ DWORD, { hwnd: HWND, dwType: DWORD } ],
  WNetDisconnectDialog: [ DWORD, { hwnd: HWND, dwType: DWORD } ],
  WNetConnectionDialog1A: [ DWORD, { lpConnDlgStruct: LPCONNECTDLGSTRUCTA } ],
  WNetConnectionDialog1W: [ DWORD, { lpConnDlgStruct: LPCONNECTDLGSTRUCTW } ],
  WNetDisconnectDialog1A: [ DWORD, { lpConnDlgStruct: LPDISCDLGSTRUCTA } ],
  WNetDisconnectDialog1W: [ DWORD, { lpConnDlgStruct: LPDISCDLGSTRUCTW } ],
  WNetOpenEnumA: [ DWORD, { dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEA, lphEnum: LPHANDLE } ],
  WNetOpenEnumW: [ DWORD, { dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEW, lphEnum: LPHANDLE } ],
  WNetEnumResourceA: [ DWORD, { hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetEnumResourceW: [ DWORD, { hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetCloseEnum: [ DWORD, { hEnum: HANDLE } ],
  WNetGetResourceParentA: [ DWORD, { lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD } ],
  WNetGetResourceParentW: [ DWORD, { lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD } ],
  WNetGetResourceInformationA: [ DWORD, { lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: LPSTR.Δ } ],
  WNetGetResourceInformationW: [ DWORD, { lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: LPWSTR.Δ } ],
  WNetGetUniversalNameA: [ DWORD, { lpLocalPath: LPCSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetGetUniversalNameW: [ DWORD, { lpLocalPath: LPCWSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD } ],
  WNetGetUserA: [ DWORD, { lpName: LPCSTR, lpUserName: LPSTR, lpnLength: LPDWORD } ],
  WNetGetUserW: [ DWORD, { lpName: LPCWSTR, lpUserName: LPWSTR, lpnLength: LPDWORD } ],
  WNetGetProviderNameA: [ DWORD, { dwNetType: DWORD, lpProviderName: LPSTR, lpBufferSize: LPDWORD } ],
  WNetGetProviderNameW: [ DWORD, { dwNetType: DWORD, lpProviderName: LPWSTR, lpBufferSize: LPDWORD } ],
  WNetGetNetworkInformationA: [ DWORD, { lpProvider: LPCSTR, lpNetInfoStruct: LPNETINFOSTRUCT } ],
  WNetGetNetworkInformationW: [ DWORD, { lpProvider: LPCWSTR, lpNetInfoStruct: LPNETINFOSTRUCT } ],
  WNetGetLastErrorA: [ DWORD, { lpError: LPDWORD, lpErrorBuf: LPSTR, nErrorBufSize: DWORD, lpNameBuf: LPSTR, nNameBufSize: DWORD } ],
  WNetGetLastErrorW: [ DWORD, { lpError: LPDWORD, lpErrorBuf: LPWSTR, nErrorBufSize: DWORD, lpNameBuf: LPWSTR, nNameBufSize: DWORD } ],
  MultinetGetConnectionPerformanceA: [ DWORD, { lpNetResource: LPNETRESOURCEA, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT } ],
  MultinetGetConnectionPerformanceW: [ DWORD, { lpNetResource: LPNETRESOURCEW, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT } ],
  DdeSetQualityOfService: [ BOOL, { hwndClient: HWND, pqosNew: SECURITY_QUALITY_OF_SERVICE.Δ, pqosPrev: PSECURITY_QUALITY_OF_SERVICE } ],
  ImpersonateDdeClientWindow: [ BOOL, { hWndClient: HWND, hWndServer: HWND } ],
  PackDDElParam: [ LPARAM, { msg: UINT, uiLo: UINT_PTR, uiHi: UINT_PTR } ],
  UnpackDDElParam: [ BOOL, { msg: UINT, lParam: LPARAM, puiLo: PUINT_PTR, puiHi: PUINT_PTR } ],
  FreeDDElParam: [ BOOL, { msg: UINT, lParam: LPARAM } ],
  ReuseDDElParam: [ LPARAM, { lParam: LPARAM, msgIn: UINT, msgOut: UINT, uiLo: UINT_PTR, uiHi: UINT_PTR } ],
  DdeInitializeA: [ UINT, { pidInst: LPDWORD, pfnCallback: PFNCALLBACK, afCmd: DWORD, ulRes: DWORD } ],
  DdeInitializeW: [ UINT, { pidInst: LPDWORD, pfnCallback: PFNCALLBACK, afCmd: DWORD, ulRes: DWORD } ],
  DdeUninitialize: [ BOOL, { idInst: DWORD } ],
  DdeConnectList: [ HCONVLIST, { idInst: DWORD, hszService: HSZ, hszTopic: HSZ, hConvList: HCONVLIST, pCC: PCONVCONTEXT } ],
  DdeQueryNextServer: [ HCONV, { hConvList: HCONVLIST, hConvPrev: HCONV } ],
  DdeDisconnectList: [ BOOL, { hConvList: HCONVLIST } ],
  DdeConnect: [ HCONV, { idInst: DWORD, hszService: HSZ, hszTopic: HSZ, pCC: PCONVCONTEXT } ],
  DdeDisconnect: [ BOOL, { hConv: HCONV } ],
  DdeReconnect: [ HCONV, { hConv: HCONV } ],
  DdeQueryConvInfo: [ UINT, { hConv: HCONV, idTransaction: DWORD, pConvInfo: PCONVINFO } ],
  DdeSetUserHandle: [ BOOL, { hConv: HCONV, id: DWORD, hUser: DWORD_PTR } ],
  DdeAbandonTransaction: [ BOOL, { idInst: DWORD, hConv: HCONV, idTransaction: DWORD } ],
  DdePostAdvise: [ BOOL, { idInst: DWORD, hszTopic: HSZ, hszItem: HSZ } ],
  DdeEnableCallback: [ BOOL, { idInst: DWORD, hConv: HCONV, wCmd: UINT } ],
  DdeImpersonateClient: [ BOOL, { hConv: HCONV } ],
  DdeNameService: [ HDDEDATA, { idInst: DWORD, hsz1: HSZ, hsz2: HSZ, afCmd: UINT } ],
  DdeClientTransaction: [ HDDEDATA, { pData: LPBYTE, cbData: DWORD, hConv: HCONV, hszItem: HSZ, wFmt: UINT, wType: UINT, dwTimeout: DWORD, pdwResult: LPDWORD } ],
  DdeCreateDataHandle: [ HDDEDATA, { idInst: DWORD, pSrc: LPBYTE, cb: DWORD, cbOff: DWORD, hszItem: HSZ, wFmt: UINT, afCmd: UINT } ],
  DdeAddData: [ HDDEDATA, { hData: HDDEDATA, pSrc: LPBYTE, cb: DWORD, cbOff: DWORD } ],
  DdeGetData: [ DWORD, { hData: HDDEDATA, pDst: LPBYTE, cbMax: DWORD, cbOff: DWORD } ],
  DdeAccessData: [ LPBYTE, { hData: HDDEDATA, pcbDataSize: LPDWORD } ],
  DdeUnaccessData: [ BOOL, { hData: HDDEDATA } ],
  DdeFreeDataHandle: [ BOOL, { hData: HDDEDATA } ],
  DdeGetLastError: [ UINT, { idInst: DWORD } ],
  DdeCreateStringHandleA: [ HSZ, { idInst: DWORD, psz: LPCSTR, iCodePage: int } ],
  DdeCreateStringHandleW: [ HSZ, { idInst: DWORD, psz: LPCWSTR, iCodePage: int } ],
  DdeQueryStringA: [ DWORD, { idInst: DWORD, hsz: HSZ, psz: LPSTR, cchMax: DWORD, iCodePage: int } ],
  DdeQueryStringW: [ DWORD, { idInst: DWORD, hsz: HSZ, psz: LPWSTR, cchMax: DWORD, iCodePage: int } ],
  DdeFreeStringHandle: [ BOOL, { idInst: DWORD, hsz: HSZ } ],
  DdeKeepStringHandle: [ BOOL, { idInst: DWORD, hsz: HSZ } ],
  DdeCmpStringHandles: [ _void, { hsz1: HSZ, hsz2: HSZ } ],
  LZStart: [ INT, {  } ],
  LZDone: [ _void, {  } ],
  CopyLZFile: [ LONG, { hfSource: INT, hfDest: INT } ],
  LZCopy: [ LONG, { hfSource: INT, hfDest: INT } ],
  LZInit: [ INT, { hfSource: INT } ],
  GetExpandedNameA: [ INT, { lpszSource: LPSTR, lpszBuffer: LPSTR } ],
  GetExpandedNameW: [ INT, { lpszSource: LPWSTR, lpszBuffer: LPWSTR } ],
  LZOpenFileA: [ INT, { lpFileName: LPSTR, lpReOpenBuf: LPOFSTRUCT, wStyle: WORD } ],
  LZOpenFileW: [ INT, { lpFileName: LPWSTR, lpReOpenBuf: LPOFSTRUCT, wStyle: WORD } ],
  LZSeek: [ LONG, { hFile: INT, lOffset: LONG, iOrigin: INT } ],
  LZRead: [ INT, { hFile: INT, lpBuffer: CHAR.Δ, cbRead: INT } ],
  LZClose: [ _void, { hFile: INT } ],
  CloseDriver: [ LRESULT, { hDriver: HDRVR, lParam1: LPARAM, lParam2: LPARAM } ],
  OpenDriver: [ HDRVR, { szDriverName: LPCWSTR, szSectionName: LPCWSTR, lParam2: LPARAM } ],
  SendDriverMessage: [ LRESULT, { hDriver: HDRVR, message: UINT, lParam1: LPARAM, lParam2: LPARAM } ],
  DrvGetModuleHandle: [ HMODULE, { hDriver: HDRVR } ],
  GetDriverModuleHandle: [ HMODULE, { hDriver: HDRVR } ],
  DefDriverProc: [ LRESULT, { dwDriverIdentifier: DWORD_PTR, hdrvr: HDRVR, uMsg: UINT, lParam1: LPARAM, lParam2: LPARAM } ],
  sndPlaySoundA: [ BOOL, { pszSound: LPCSTR, fuSound: UINT } ],
  sndPlaySoundW: [ BOOL, { pszSound: LPCWSTR, fuSound: UINT } ],
  PlaySoundA: [ BOOL, { pszSound: LPCSTR, hmod: HMODULE, fdwSound: DWORD } ],
  PlaySoundW: [ BOOL, { pszSound: LPCWSTR, hmod: HMODULE, fdwSound: DWORD } ],
  waveOutGetNumDevs: [ UINT, {  } ],
  waveOutGetDevCapsA: [ MMRESULT, { uDeviceID: UINT_PTR, pwoc: LPWAVEOUTCAPSA, cbwoc: UINT } ],
  waveOutGetDevCapsW: [ MMRESULT, { uDeviceID: UINT_PTR, pwoc: LPWAVEOUTCAPSW, cbwoc: UINT } ],
  waveOutGetVolume: [ MMRESULT, { hwo: HWAVEOUT, pdwVolume: LPDWORD } ],
  waveOutSetVolume: [ MMRESULT, { hwo: HWAVEOUT, dwVolume: DWORD } ],
  waveOutGetErrorTextA: [ MMRESULT, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  waveOutGetErrorTextW: [ MMRESULT, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  waveOutOpen: [ MMRESULT, { phwo: LPHWAVEOUT, uDeviceID: UINT, pwfx: LPCWAVEFORMATEX, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  waveOutClose: [ MMRESULT, { hwo: HWAVEOUT } ],
  waveOutPrepareHeader: [ MMRESULT, { hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveOutUnprepareHeader: [ MMRESULT, { hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveOutWrite: [ MMRESULT, { hwo: HWAVEOUT, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveOutPause: [ MMRESULT, { hwo: HWAVEOUT } ],
  waveOutRestart: [ MMRESULT, { hwo: HWAVEOUT } ],
  waveOutReset: [ MMRESULT, { hwo: HWAVEOUT } ],
  waveOutBreakLoop: [ MMRESULT, { hwo: HWAVEOUT } ],
  waveOutGetPosition: [ MMRESULT, { hwo: HWAVEOUT, pmmt: LPMMTIME, cbmmt: UINT } ],
  waveOutGetPitch: [ MMRESULT, { hwo: HWAVEOUT, pdwPitch: LPDWORD } ],
  waveOutSetPitch: [ MMRESULT, { hwo: HWAVEOUT, dwPitch: DWORD } ],
  waveOutGetPlaybackRate: [ MMRESULT, { hwo: HWAVEOUT, pdwRate: LPDWORD } ],
  waveOutSetPlaybackRate: [ MMRESULT, { hwo: HWAVEOUT, dwRate: DWORD } ],
  waveOutGetID: [ MMRESULT, { hwo: HWAVEOUT, puDeviceID: LPUINT } ],
  waveOutMessage: [ MMRESULT, { hwo: HWAVEOUT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  waveInGetNumDevs: [ UINT, {  } ],
  waveInGetDevCapsA: [ MMRESULT, { uDeviceID: UINT_PTR, pwic: LPWAVEINCAPSA, cbwic: UINT } ],
  waveInGetDevCapsW: [ MMRESULT, { uDeviceID: UINT_PTR, pwic: LPWAVEINCAPSW, cbwic: UINT } ],
  waveInGetErrorTextA: [ MMRESULT, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  waveInGetErrorTextW: [ MMRESULT, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  waveInOpen: [ MMRESULT, { phwi: LPHWAVEIN, uDeviceID: UINT, pwfx: LPCWAVEFORMATEX, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  waveInClose: [ MMRESULT, { hwi: HWAVEIN } ],
  waveInPrepareHeader: [ MMRESULT, { hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveInUnprepareHeader: [ MMRESULT, { hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveInAddBuffer: [ MMRESULT, { hwi: HWAVEIN, pwh: LPWAVEHDR, cbwh: UINT } ],
  waveInStart: [ MMRESULT, { hwi: HWAVEIN } ],
  waveInStop: [ MMRESULT, { hwi: HWAVEIN } ],
  waveInReset: [ MMRESULT, { hwi: HWAVEIN } ],
  waveInGetPosition: [ MMRESULT, { hwi: HWAVEIN, pmmt: LPMMTIME, cbmmt: UINT } ],
  waveInGetID: [ MMRESULT, { hwi: HWAVEIN, puDeviceID: LPUINT } ],
  waveInMessage: [ MMRESULT, { hwi: HWAVEIN, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  midiOutGetNumDevs: [ UINT, {  } ],
  midiStreamOpen: [ MMRESULT, { phms: LPHMIDISTRM, puDeviceID: LPUINT, cMidi: DWORD, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  midiStreamClose: [ MMRESULT, { hms: HMIDISTRM } ],
  midiStreamProperty: [ MMRESULT, { hms: HMIDISTRM, lppropdata: LPBYTE, dwProperty: DWORD } ],
  midiStreamPosition: [ MMRESULT, { hms: HMIDISTRM, lpmmt: LPMMTIME, cbmmt: UINT } ],
  midiStreamOut: [ MMRESULT, { hms: HMIDISTRM, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiStreamPause: [ MMRESULT, { hms: HMIDISTRM } ],
  midiStreamRestart: [ MMRESULT, { hms: HMIDISTRM } ],
  midiStreamStop: [ MMRESULT, { hms: HMIDISTRM } ],
  midiConnect: [ MMRESULT, { hmi: HMIDI, hmo: HMIDIOUT, pReserved: LPVOID } ],
  midiDisconnect: [ MMRESULT, { hmi: HMIDI, hmo: HMIDIOUT, pReserved: LPVOID } ],
  midiOutGetDevCapsA: [ MMRESULT, { uDeviceID: UINT_PTR, pmoc: LPMIDIOUTCAPSA, cbmoc: UINT } ],
  midiOutGetDevCapsW: [ MMRESULT, { uDeviceID: UINT_PTR, pmoc: LPMIDIOUTCAPSW, cbmoc: UINT } ],
  midiOutGetVolume: [ MMRESULT, { hmo: HMIDIOUT, pdwVolume: LPDWORD } ],
  midiOutSetVolume: [ MMRESULT, { hmo: HMIDIOUT, dwVolume: DWORD } ],
  midiOutGetErrorTextA: [ MMRESULT, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  midiOutGetErrorTextW: [ MMRESULT, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  midiOutOpen: [ MMRESULT, { phmo: LPHMIDIOUT, uDeviceID: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  midiOutClose: [ MMRESULT, { hmo: HMIDIOUT } ],
  midiOutPrepareHeader: [ MMRESULT, { hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiOutUnprepareHeader: [ MMRESULT, { hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiOutShortMsg: [ MMRESULT, { hmo: HMIDIOUT, dwMsg: DWORD } ],
  midiOutLongMsg: [ MMRESULT, { hmo: HMIDIOUT, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiOutReset: [ MMRESULT, { hmo: HMIDIOUT } ],
  midiOutCachePatches: [ MMRESULT, { hmo: HMIDIOUT, uBank: UINT, pwpa: LPWORD, fuCache: UINT } ],
  midiOutCacheDrumPatches: [ MMRESULT, { hmo: HMIDIOUT, uPatch: UINT, pwkya: LPWORD, fuCache: UINT } ],
  midiOutGetID: [ MMRESULT, { hmo: HMIDIOUT, puDeviceID: LPUINT } ],
  midiOutMessage: [ MMRESULT, { hmo: HMIDIOUT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  midiInGetNumDevs: [ UINT, {  } ],
  midiInGetDevCapsA: [ MMRESULT, { uDeviceID: UINT_PTR, pmic: LPMIDIINCAPSA, cbmic: UINT } ],
  midiInGetDevCapsW: [ MMRESULT, { uDeviceID: UINT_PTR, pmic: LPMIDIINCAPSW, cbmic: UINT } ],
  midiInGetErrorTextA: [ MMRESULT, { mmrError: MMRESULT, pszText: LPSTR, cchText: UINT } ],
  midiInGetErrorTextW: [ MMRESULT, { mmrError: MMRESULT, pszText: LPWSTR, cchText: UINT } ],
  midiInOpen: [ MMRESULT, { phmi: LPHMIDIIN, uDeviceID: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  midiInClose: [ MMRESULT, { hmi: HMIDIIN } ],
  midiInPrepareHeader: [ MMRESULT, { hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiInUnprepareHeader: [ MMRESULT, { hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiInAddBuffer: [ MMRESULT, { hmi: HMIDIIN, pmh: LPMIDIHDR, cbmh: UINT } ],
  midiInStart: [ MMRESULT, { hmi: HMIDIIN } ],
  midiInStop: [ MMRESULT, { hmi: HMIDIIN } ],
  midiInReset: [ MMRESULT, { hmi: HMIDIIN } ],
  midiInGetID: [ MMRESULT, { hmi: HMIDIIN, puDeviceID: LPUINT } ],
  midiInMessage: [ MMRESULT, { hmi: HMIDIIN, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  auxGetNumDevs: [ UINT, {  } ],
  auxGetDevCapsA: [ MMRESULT, { uDeviceID: UINT_PTR, pac: LPAUXCAPSA, cbac: UINT } ],
  auxGetDevCapsW: [ MMRESULT, { uDeviceID: UINT_PTR, pac: LPAUXCAPSW, cbac: UINT } ],
  auxSetVolume: [ MMRESULT, { uDeviceID: UINT, dwVolume: DWORD } ],
  auxGetVolume: [ MMRESULT, { uDeviceID: UINT, pdwVolume: LPDWORD } ],
  auxOutMessage: [ MMRESULT, { uDeviceID: UINT, uMsg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR } ],
  mixerGetNumDevs: [ UINT, {  } ],
  mixerGetDevCapsA: [ MMRESULT, { uMxId: UINT_PTR, pmxcaps: LPMIXERCAPSA, cbmxcaps: UINT } ],
  mixerGetDevCapsW: [ MMRESULT, { uMxId: UINT_PTR, pmxcaps: LPMIXERCAPSW, cbmxcaps: UINT } ],
  mixerOpen: [ MMRESULT, { phmx: LPHMIXER, uMxId: UINT, dwCallback: DWORD_PTR, dwInstance: DWORD_PTR, fdwOpen: DWORD } ],
  mixerClose: [ MMRESULT, { hmx: HMIXER } ],
  mixerMessage: [ DWORD, { hmx: HMIXER, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR } ],
  mixerGetLineInfoA: [ MMRESULT, { hmxobj: HMIXEROBJ, pmxl: LPMIXERLINEA, fdwInfo: DWORD } ],
  mixerGetLineInfoW: [ MMRESULT, { hmxobj: HMIXEROBJ, pmxl: LPMIXERLINEW, fdwInfo: DWORD } ],
  mixerGetID: [ MMRESULT, { hmxobj: HMIXEROBJ, puMxId: UINT.Δ, fdwId: DWORD } ],
  mixerGetLineControlsA: [ MMRESULT, { hmxobj: HMIXEROBJ, pmxlc: LPMIXERLINECONTROLSA, fdwControls: DWORD } ],
  mixerGetLineControlsW: [ MMRESULT, { hmxobj: HMIXEROBJ, pmxlc: LPMIXERLINECONTROLSW, fdwControls: DWORD } ],
  mixerGetControlDetailsA: [ MMRESULT, { hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD } ],
  mixerGetControlDetailsW: [ MMRESULT, { hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD } ],
  mixerSetControlDetails: [ MMRESULT, { hmxobj: HMIXEROBJ, pmxcd: LPMIXERCONTROLDETAILS, fdwDetails: DWORD } ],
  timeGetSystemTime: [ MMRESULT, { pmmt: LPMMTIME, cbmmt: UINT } ],
  timeGetTime: [ DWORD, {  } ],
  timeSetEvent: [ MMRESULT, { uDelay: UINT, uResolution: UINT, fptc: LPTIMECALLBACK, dwUser: DWORD_PTR, fuEvent: UINT } ],
  timeKillEvent: [ MMRESULT, { uTimerID: UINT } ],
  timeGetDevCaps: [ MMRESULT, { ptc: LPTIMECAPS, cbtc: UINT } ],
  timeBeginPeriod: [ MMRESULT, { uPeriod: UINT } ],
  timeEndPeriod: [ MMRESULT, { uPeriod: UINT } ],
  joyGetNumDevs: [ UINT, {  } ],
  joyGetDevCapsA: [ MMRESULT, { uJoyID: UINT_PTR, pjc: LPJOYCAPSA, cbjc: UINT } ],
  joyGetDevCapsW: [ MMRESULT, { uJoyID: UINT_PTR, pjc: LPJOYCAPSW, cbjc: UINT } ],
  joyGetPos: [ MMRESULT, { uJoyID: UINT, pji: LPJOYINFO } ],
  joyGetPosEx: [ MMRESULT, { uJoyID: UINT, pji: LPJOYINFOEX } ],
  joyGetThreshold: [ MMRESULT, { uJoyID: UINT, puThreshold: LPUINT } ],
  joyReleaseCapture: [ MMRESULT, { uJoyID: UINT } ],
  joySetCapture: [ MMRESULT, { hwnd: HWND, uJoyID: UINT, uPeriod: UINT, fChanged: BOOL } ],
  joySetThreshold: [ MMRESULT, { uJoyID: UINT, uThreshold: UINT } ],
  mmioStringToFOURCCA: [ FOURCC, { sz: LPCSTR, uFlags: UINT } ],
  mmioStringToFOURCCW: [ FOURCC, { sz: LPCWSTR, uFlags: UINT } ],
  mmioInstallIOProcA: [ LPMMIOPROC, { fccIOProc: FOURCC, pIOProc: LPMMIOPROC, dwFlags: DWORD } ],
  mmioInstallIOProcW: [ LPMMIOPROC, { fccIOProc: FOURCC, pIOProc: LPMMIOPROC, dwFlags: DWORD } ],
  mmioOpenA: [ HMMIO, { pszFileName: LPSTR, pmmioinfo: LPMMIOINFO, fdwOpen: DWORD } ],
  mmioOpenW: [ HMMIO, { pszFileName: LPWSTR, pmmioinfo: LPMMIOINFO, fdwOpen: DWORD } ],
  mmioRenameA: [ MMRESULT, { pszFileName: LPCSTR, pszNewFileName: LPCSTR, pmmioinfo: LPCMMIOINFO, fdwRename: DWORD } ],
  mmioRenameW: [ MMRESULT, { pszFileName: LPCWSTR, pszNewFileName: LPCWSTR, pmmioinfo: LPCMMIOINFO, fdwRename: DWORD } ],
  mmioClose: [ MMRESULT, { hmmio: HMMIO, fuClose: UINT } ],
  mmioRead: [ LONG, { hmmio: HMMIO, pch: HPSTR, cch: LONG } ],
  mmioWrite: [ LONG, { hmmio: HMMIO, pch: char.Δ, cch: LONG } ],
  mmioSeek: [ LONG, { hmmio: HMMIO, lOffset: LONG, iOrigin: int } ],
  mmioGetInfo: [ MMRESULT, { hmmio: HMMIO, pmmioinfo: LPMMIOINFO, fuInfo: UINT } ],
  mmioSetInfo: [ MMRESULT, { hmmio: HMMIO, pmmioinfo: LPCMMIOINFO, fuInfo: UINT } ],
  mmioSetBuffer: [ MMRESULT, { hmmio: HMMIO, pchBuffer: LPSTR, cchBuffer: LONG, fuBuffer: UINT } ],
  mmioFlush: [ MMRESULT, { hmmio: HMMIO, fuFlush: UINT } ],
  mmioAdvance: [ MMRESULT, { hmmio: HMMIO, pmmioinfo: LPMMIOINFO, fuAdvance: UINT } ],
  mmioSendMessage: [ LRESULT, { hmmio: HMMIO, uMsg: UINT, lParam1: LPARAM, lParam2: LPARAM } ],
  mmioDescend: [ MMRESULT, { hmmio: HMMIO, pmmcki: LPMMCKINFO, pmmckiParent: MMCKINFO.Δ, fuDescend: UINT } ],
  mmioAscend: [ MMRESULT, { hmmio: HMMIO, pmmcki: LPMMCKINFO, fuAscend: UINT } ],
  mmioCreateChunk: [ MMRESULT, { hmmio: HMMIO, pmmcki: LPMMCKINFO, fuCreate: UINT } ],
  mciSendCommandA: [ MCIERROR, { mciId: MCIDEVICEID, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR } ],
  mciSendCommandW: [ MCIERROR, { mciId: MCIDEVICEID, uMsg: UINT, dwParam1: DWORD_PTR, dwParam2: DWORD_PTR } ],
  mciSendStringA: [ MCIERROR, { lpstrCommand: LPCSTR, lpstrReturnString: LPSTR, uReturnLength: UINT, hwndCallback: HWND } ],
  mciSendStringW: [ MCIERROR, { lpstrCommand: LPCWSTR, lpstrReturnString: LPWSTR, uReturnLength: UINT, hwndCallback: HWND } ],
  mciGetDeviceIDA: [ MCIDEVICEID, { pszDevice: LPCSTR } ],
  mciGetDeviceIDW: [ MCIDEVICEID, { pszDevice: LPCWSTR } ],
  mciGetDeviceIDFromElementIDA: [ MCIDEVICEID, { dwElementID: DWORD, lpstrType: LPCSTR } ],
  mciGetDeviceIDFromElementIDW: [ MCIDEVICEID, { dwElementID: DWORD, lpstrType: LPCWSTR } ],
  mciGetErrorStringA: [ BOOL, { mcierr: MCIERROR, pszText: LPSTR, cchText: UINT } ],
  mciGetErrorStringW: [ BOOL, { mcierr: MCIERROR, pszText: LPWSTR, cchText: UINT } ],
  mciSetYieldProc: [ BOOL, { mciId: MCIDEVICEID, fpYieldProc: YIELDPROC, dwYieldData: DWORD } ],
  mciGetCreatorTask: [ HTASK, { mciId: MCIDEVICEID } ],
  mciGetYieldProc: [ YIELDPROC, { mciId: MCIDEVICEID, pdwYieldData: LPDWORD } ],
  Netbios: [ UCHAR, { pncb: PNCB } ],
  RpcBindingCopy: [ RPC_STATUS, { SourceBinding: RPC_BINDING_HANDLE, DestinationBinding: RPC_BINDING_HANDLE.Δ } ],
  RpcBindingFree: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcBindingSetOption: [ RPC_STATUS, { hBinding: RPC_BINDING_HANDLE, option: ulong, optionValue: ULONG_PTR } ],
  RpcBindingInqOption: [ RPC_STATUS, { hBinding: RPC_BINDING_HANDLE, option: ulong, pOptionValue: ULONG_PTR.Δ } ],
  RpcBindingFromStringBindingA: [ RPC_STATUS, { StringBinding: RPC_CSTR, Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcBindingFromStringBindingW: [ RPC_STATUS, { StringBinding: RPC_WSTR, Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcSsGetContextBinding: [ RPC_STATUS, { ContextHandle: _void.Δ, Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcBindingInqObject: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ObjectUuid: UUID.Δ } ],
  RpcBindingReset: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE } ],
  RpcBindingSetObject: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ObjectUuid: UUID.Δ } ],
  RpcMgmtInqDefaultProtectLevel: [ RPC_STATUS, { AuthnSvc: ulong, AuthnLevel: ulong.Δ } ],
  RpcBindingToStringBindingA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, StringBinding: RPC_CSTR.Δ } ],
  RpcBindingToStringBindingW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, StringBinding: RPC_WSTR.Δ } ],
  RpcBindingVectorFree: [ RPC_STATUS, { BindingVector: _RPC_BINDING_VECTOR.Δ.Δ } ],
  RpcStringBindingComposeA: [ RPC_STATUS, { ObjUuid: RPC_CSTR, ProtSeq: RPC_CSTR, NetworkAddr: RPC_CSTR, Endpoint: RPC_CSTR, Options: RPC_CSTR, StringBinding: RPC_CSTR.Δ } ],
  RpcStringBindingComposeW: [ RPC_STATUS, { ObjUuid: RPC_WSTR, ProtSeq: RPC_WSTR, NetworkAddr: RPC_WSTR, Endpoint: RPC_WSTR, Options: RPC_WSTR, StringBinding: RPC_WSTR.Δ } ],
  RpcStringBindingParseA: [ RPC_STATUS, { StringBinding: RPC_CSTR, ObjUuid: RPC_CSTR.Δ, Protseq: RPC_CSTR.Δ, NetworkAddr: RPC_CSTR.Δ, Endpoint: RPC_CSTR.Δ, NetworkOptions: RPC_CSTR.Δ } ],
  RpcStringBindingParseW: [ RPC_STATUS, { StringBinding: RPC_WSTR, ObjUuid: RPC_WSTR.Δ, Protseq: RPC_WSTR.Δ, NetworkAddr: RPC_WSTR.Δ, Endpoint: RPC_WSTR.Δ, NetworkOptions: RPC_WSTR.Δ } ],
  RpcStringFreeA: [ RPC_STATUS, { String: RPC_CSTR.Δ } ],
  RpcStringFreeW: [ RPC_STATUS, { String: RPC_WSTR.Δ } ],
  RpcIfInqId: [ RPC_STATUS, { RpcIfHandle: RPC_IF_HANDLE, RpcIfId: RPC_IF_ID.Δ } ],
  RpcNetworkIsProtseqValidA: [ RPC_STATUS, { Protseq: RPC_CSTR } ],
  RpcNetworkIsProtseqValidW: [ RPC_STATUS, { Protseq: RPC_WSTR } ],
  RpcMgmtInqComTimeout: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Timeout: uint.Δ } ],
  RpcMgmtSetComTimeout: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Timeout: uint } ],
  RpcMgmtSetCancelTimeout: [ RPC_STATUS, { Timeout: long } ],
  RpcNetworkInqProtseqsA: [ RPC_STATUS, { ProtseqVector: _RPC_PROTSEQ_VECTORA.Δ.Δ } ],
  RpcNetworkInqProtseqsW: [ RPC_STATUS, { ProtseqVector: _RPC_PROTSEQ_VECTORW.Δ.Δ } ],
  RpcObjectInqType: [ RPC_STATUS, { ObjUuid: UUID.Δ, TypeUuid: UUID.Δ } ],
  RpcObjectSetInqFn: [ RPC_STATUS, { InquiryFn: RPC_OBJECT_INQ_FN.Δ } ],
  RpcObjectSetType: [ RPC_STATUS, { ObjUuid: UUID.Δ, TypeUuid: UUID.Δ } ],
  RpcProtseqVectorFreeA: [ RPC_STATUS, { ProtseqVector: _RPC_PROTSEQ_VECTORA.Δ.Δ } ],
  RpcProtseqVectorFreeW: [ RPC_STATUS, { ProtseqVector: _RPC_PROTSEQ_VECTORW.Δ.Δ } ],
  RpcServerInqBindings: [ RPC_STATUS, { BindingVector: _RPC_BINDING_VECTOR.Δ.Δ } ],
  RpcServerInqIf: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: UUID.Δ, MgrEpv: _void.Δ.Δ } ],
  RpcServerListen: [ RPC_STATUS, { MinimumCallThreads: uint, MaxCalls: uint, DontWait: uint } ],
  RpcServerRegisterIf: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: UUID.Δ, MgrEpv: _void.Δ } ],
  RpcServerRegisterIfEx: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: UUID.Δ, MgrEpv: _void.Δ, Flags: uint, MaxCalls: uint, IfCallback: RPC_IF_CALLBACK_FN.Δ } ],
  RpcServerRegisterIf2: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: UUID.Δ, MgrEpv: _void.Δ, Flags: uint, MaxCalls: uint, MaxRpcSize: uint, IfCallbackFn: RPC_IF_CALLBACK_FN.Δ } ],
  RpcServerUnregisterIf: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: UUID.Δ, WaitForCallsToComplete: uint } ],
  RpcServerUnregisterIfEx: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, MgrTypeUuid: UUID.Δ, RundownContextHandles: int } ],
  RpcServerUseAllProtseqs: [ RPC_STATUS, { MaxCalls: uint, SecurityDescriptor: _void.Δ } ],
  RpcServerUseAllProtseqsEx: [ RPC_STATUS, { MaxCalls: uint, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseAllProtseqsIf: [ RPC_STATUS, { MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: _void.Δ } ],
  RpcServerUseAllProtseqsIfEx: [ RPC_STATUS, { MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqA: [ RPC_STATUS, { Protseq: RPC_CSTR, MaxCalls: uint, SecurityDescriptor: _void.Δ } ],
  RpcServerUseProtseqExA: [ RPC_STATUS, { Protseq: RPC_CSTR, MaxCalls: uint, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqW: [ RPC_STATUS, { Protseq: RPC_WSTR, MaxCalls: uint, SecurityDescriptor: _void.Δ } ],
  RpcServerUseProtseqExW: [ RPC_STATUS, { Protseq: RPC_WSTR, MaxCalls: uint, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqEpA: [ RPC_STATUS, { Protseq: RPC_CSTR, MaxCalls: uint, Endpoint: RPC_CSTR, SecurityDescriptor: _void.Δ } ],
  RpcServerUseProtseqEpExA: [ RPC_STATUS, { Protseq: RPC_CSTR, MaxCalls: uint, Endpoint: RPC_CSTR, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqEpW: [ RPC_STATUS, { Protseq: RPC_WSTR, MaxCalls: uint, Endpoint: RPC_WSTR, SecurityDescriptor: _void.Δ } ],
  RpcServerUseProtseqEpExW: [ RPC_STATUS, { Protseq: RPC_WSTR, MaxCalls: uint, Endpoint: RPC_WSTR, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqIfA: [ RPC_STATUS, { Protseq: RPC_CSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: _void.Δ } ],
  RpcServerUseProtseqIfExA: [ RPC_STATUS, { Protseq: RPC_CSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerUseProtseqIfW: [ RPC_STATUS, { Protseq: RPC_WSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: _void.Δ } ],
  RpcServerUseProtseqIfExW: [ RPC_STATUS, { Protseq: RPC_WSTR, MaxCalls: uint, IfSpec: RPC_IF_HANDLE, SecurityDescriptor: _void.Δ, Policy: PRPC_POLICY } ],
  RpcServerYield: [ _void, {  } ],
  RpcMgmtStatsVectorFree: [ RPC_STATUS, { StatsVector: RPC_STATS_VECTOR.Δ.Δ } ],
  RpcMgmtInqStats: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Statistics: RPC_STATS_VECTOR.Δ.Δ } ],
  RpcMgmtIsServerListening: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE } ],
  RpcMgmtStopServerListening: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE } ],
  RpcMgmtWaitServerListen: [ RPC_STATUS, {  } ],
  RpcMgmtSetServerStackSize: [ RPC_STATUS, { ThreadStackSize: ulong } ],
  RpcSsDontSerializeContext: [ _void, {  } ],
  RpcMgmtEnableIdleCleanup: [ RPC_STATUS, {  } ],
  RpcMgmtInqIfIds: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, IfIdVector: RPC_IF_ID_VECTOR.Δ.Δ } ],
  RpcIfIdVectorFree: [ RPC_STATUS, { IfIdVector: RPC_IF_ID_VECTOR.Δ.Δ } ],
  RpcMgmtInqServerPrincNameA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, AuthnSvc: ulong, ServerPrincName: RPC_CSTR.Δ } ],
  RpcMgmtInqServerPrincNameW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, AuthnSvc: ulong, ServerPrincName: RPC_WSTR.Δ } ],
  RpcServerInqDefaultPrincNameA: [ RPC_STATUS, { AuthnSvc: ulong, PrincName: RPC_CSTR.Δ } ],
  RpcServerInqDefaultPrincNameW: [ RPC_STATUS, { AuthnSvc: ulong, PrincName: RPC_WSTR.Δ } ],
  RpcEpResolveBinding: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE } ],
  RpcNsBindingInqEntryNameA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: RPC_CSTR.Δ } ],
  RpcNsBindingInqEntryNameW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: RPC_WSTR.Δ } ],
  RpcBindingCreateA: [ RPC_STATUS, { Template: RPC_BINDING_HANDLE_TEMPLATE_V1_A.Δ, Security: RPC_BINDING_HANDLE_SECURITY_V1_A.Δ, Options: RPC_BINDING_HANDLE_OPTIONS_V1.Δ, Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcBindingCreateW: [ RPC_STATUS, { Template: RPC_BINDING_HANDLE_TEMPLATE_V1_W.Δ, Security: RPC_BINDING_HANDLE_SECURITY_V1_W.Δ, Options: RPC_BINDING_HANDLE_OPTIONS_V1.Δ, Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcBindingGetTrainingContextHandle: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ContextHandle: _void.Δ.Δ } ],
  RpcServerInqBindingHandle: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcImpersonateClient: [ RPC_STATUS, { BindingHandle: RPC_BINDING_HANDLE } ],
  RpcRevertToSelfEx: [ RPC_STATUS, { BindingHandle: RPC_BINDING_HANDLE } ],
  RpcRevertToSelf: [ RPC_STATUS, {  } ],
  RpcBindingInqAuthClientA: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, Privs: RPC_AUTHZ_HANDLE.Δ, ServerPrincName: RPC_CSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingInqAuthClientW: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, Privs: RPC_AUTHZ_HANDLE.Δ, ServerPrincName: RPC_WSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingInqAuthClientExA: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, Privs: RPC_AUTHZ_HANDLE.Δ, ServerPrincName: RPC_CSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ, Flags: ulong } ],
  RpcBindingInqAuthClientExW: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, Privs: RPC_AUTHZ_HANDLE.Δ, ServerPrincName: RPC_WSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthzSvc: ulong.Δ, Flags: ulong } ],
  RpcBindingInqAuthInfoA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingInqAuthInfoW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE.Δ, AuthzSvc: ulong.Δ } ],
  RpcBindingSetAuthInfoA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong } ],
  RpcBindingSetAuthInfoExA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong, SecurityQos: RPC_SECURITY_QOS.Δ } ],
  RpcBindingSetAuthInfoW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong } ],
  RpcBindingSetAuthInfoExW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR, AuthnLevel: ulong, AuthnSvc: ulong, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE, AuthzSvc: ulong, SecurityQOS: RPC_SECURITY_QOS.Δ } ],
  RpcBindingInqAuthInfoExA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_CSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE.Δ, AuthzSvc: ulong.Δ, RpcQosVersion: ulong, SecurityQOS: RPC_SECURITY_QOS.Δ } ],
  RpcBindingInqAuthInfoExW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ServerPrincName: RPC_WSTR.Δ, AuthnLevel: ulong.Δ, AuthnSvc: ulong.Δ, AuthIdentity: RPC_AUTH_IDENTITY_HANDLE.Δ, AuthzSvc: ulong.Δ, RpcQosVersion: ulong, SecurityQOS: RPC_SECURITY_QOS.Δ } ],
  RpcServerCompleteSecurityCallback: [ RPC_STATUS, { BindingHandle: RPC_BINDING_HANDLE, Status: RPC_STATUS } ],
  RpcServerRegisterAuthInfoA: [ RPC_STATUS, { ServerPrincName: RPC_CSTR, AuthnSvc: ulong, GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN, Arg: _void.Δ } ],
  RpcServerRegisterAuthInfoW: [ RPC_STATUS, { ServerPrincName: RPC_WSTR, AuthnSvc: ulong, GetKeyFn: RPC_AUTH_KEY_RETRIEVAL_FN, Arg: _void.Δ } ],
  RpcBindingServerFromClient: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, ServerBinding: RPC_BINDING_HANDLE.Δ } ],
  RpcRaiseException: [ _void, { exception: RPC_STATUS } ],
  RpcTestCancel: [ RPC_STATUS, {  } ],
  RpcServerTestCancel: [ RPC_STATUS, { BindingHandle: RPC_BINDING_HANDLE } ],
  RpcCancelThread: [ RPC_STATUS, { Thread: _void.Δ } ],
  RpcCancelThreadEx: [ RPC_STATUS, { Thread: _void.Δ, Timeout: long } ],
  UuidCreate: [ RPC_STATUS, { Uuid: UUID.Δ } ],
  UuidCreateSequential: [ RPC_STATUS, { Uuid: UUID.Δ } ],
  UuidToStringA: [ RPC_STATUS, { Uuid: UUID.Δ, StringUuid: RPC_CSTR.Δ } ],
  UuidFromStringA: [ RPC_STATUS, { StringUuid: RPC_CSTR, Uuid: UUID.Δ } ],
  UuidToStringW: [ RPC_STATUS, { Uuid: UUID.Δ, StringUuid: RPC_WSTR.Δ } ],
  UuidFromStringW: [ RPC_STATUS, { StringUuid: RPC_WSTR, Uuid: UUID.Δ } ],
  UuidCompare: [ _void, { Uuid1: UUID.Δ, Uuid2: UUID.Δ, Status: RPC_STATUS.Δ } ],
  UuidCreateNil: [ RPC_STATUS, { NilUuid: UUID.Δ } ],
  UuidEqual: [ _void, { Uuid1: UUID.Δ, Uuid2: UUID.Δ, Status: RPC_STATUS.Δ } ],
  UuidHash: [ _void, { Uuid: UUID.Δ, Status: RPC_STATUS.Δ } ],
  UuidIsNil: [ _void, { Uuid: UUID.Δ, Status: RPC_STATUS.Δ } ],
  RpcEpRegisterNoReplaceA: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, BindingVector: RPC_BINDING_VECTOR.Δ, UuidVector: UUID_VECTOR.Δ, Annotation: RPC_CSTR } ],
  RpcEpRegisterNoReplaceW: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, BindingVector: RPC_BINDING_VECTOR.Δ, UuidVector: UUID_VECTOR.Δ, Annotation: RPC_WSTR } ],
  RpcEpRegisterA: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, BindingVector: RPC_BINDING_VECTOR.Δ, UuidVector: UUID_VECTOR.Δ, Annotation: RPC_CSTR } ],
  RpcEpRegisterW: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, BindingVector: RPC_BINDING_VECTOR.Δ, UuidVector: UUID_VECTOR.Δ, Annotation: RPC_WSTR } ],
  RpcEpUnregister: [ RPC_STATUS, { IfSpec: RPC_IF_HANDLE, BindingVector: RPC_BINDING_VECTOR.Δ, UuidVector: UUID_VECTOR.Δ } ],
  DceErrorInqTextA: [ RPC_STATUS, { RpcStatus: RPC_STATUS, ErrorText: RPC_CSTR } ],
  DceErrorInqTextW: [ RPC_STATUS, { RpcStatus: RPC_STATUS, ErrorText: RPC_WSTR } ],
  RpcMgmtEpEltInqBegin: [ RPC_STATUS, { EpBinding: RPC_BINDING_HANDLE, InquiryType: ulong, IfId: RPC_IF_ID.Δ, VersOption: ulong, ObjectUuid: UUID.Δ, InquiryContext: RPC_EP_INQ_HANDLE.Δ } ],
  RpcMgmtEpEltInqDone: [ RPC_STATUS, { InquiryContext: RPC_EP_INQ_HANDLE.Δ } ],
  RpcMgmtEpEltInqNextA: [ RPC_STATUS, { InquiryContext: RPC_EP_INQ_HANDLE, IfId: RPC_IF_ID.Δ, Binding: RPC_BINDING_HANDLE.Δ, ObjectUuid: UUID.Δ, Annotation: RPC_CSTR.Δ } ],
  RpcMgmtEpEltInqNextW: [ RPC_STATUS, { InquiryContext: RPC_EP_INQ_HANDLE, IfId: RPC_IF_ID.Δ, Binding: RPC_BINDING_HANDLE.Δ, ObjectUuid: UUID.Δ, Annotation: RPC_WSTR.Δ } ],
  RpcMgmtEpUnregister: [ RPC_STATUS, { EpBinding: RPC_BINDING_HANDLE, IfId: RPC_IF_ID.Δ, Binding: RPC_BINDING_HANDLE, ObjectUuid: UUID.Δ } ],
  RpcMgmtSetAuthorizationFn: [ RPC_STATUS, { AuthorizationFn: RPC_MGMT_AUTHORIZATION_FN } ],
  RpcExceptionFilter: [ _void, { ExceptionCode: ulong } ],
  I_RpcNegotiateTransferSyntax: [ RPC_STATUS, { Message: RPC_MESSAGE.Δ } ],
  I_RpcGetBuffer: [ RPC_STATUS, { Message: RPC_MESSAGE.Δ } ],
  I_RpcGetBufferWithObject: [ RPC_STATUS, { Message: RPC_MESSAGE.Δ, ObjectUuid: UUID.Δ } ],
  I_RpcSendReceive: [ RPC_STATUS, { Message: RPC_MESSAGE.Δ } ],
  I_RpcFreeBuffer: [ RPC_STATUS, { Message: RPC_MESSAGE.Δ } ],
  I_RpcSend: [ RPC_STATUS, { Message: PRPC_MESSAGE } ],
  I_RpcReceive: [ RPC_STATUS, { Message: PRPC_MESSAGE, Size: uint } ],
  I_RpcFreePipeBuffer: [ RPC_STATUS, { Message: RPC_MESSAGE.Δ } ],
  I_RpcReallocPipeBuffer: [ RPC_STATUS, { Message: PRPC_MESSAGE, NewSize: uint } ],
  I_RpcRequestMutex: [ _void, { Mutex: I_RPC_MUTEX.Δ } ],
  I_RpcClearMutex: [ _void, { Mutex: I_RPC_MUTEX } ],
  I_RpcDeleteMutex: [ _void, { Mutex: I_RPC_MUTEX } ],
  I_RpcAllocate: [ _void, { Size: uint } ],
  I_RpcFree: [ _void, { Object: _void.Δ } ],
  I_RpcPauseExecution: [ _void, { Milliseconds: ulong } ],
  I_RpcGetExtendedError: [ RPC_STATUS, {  } ],
  I_RpcMonitorAssociation: [ RPC_STATUS, { Handle: RPC_BINDING_HANDLE, RundownRoutine: PRPC_RUNDOWN, Context: _void.Δ } ],
  I_RpcStopMonitorAssociation: [ RPC_STATUS, { Handle: RPC_BINDING_HANDLE } ],
  I_RpcGetCurrentCallHandle: [ RPC_BINDING_HANDLE, {  } ],
  I_RpcGetAssociationContext: [ RPC_STATUS, { BindingHandle: RPC_BINDING_HANDLE, AssociationContext: _void.Δ.Δ } ],
  I_RpcGetServerContextList: [ _void, { BindingHandle: RPC_BINDING_HANDLE } ],
  I_RpcSetServerContextList: [ _void, { BindingHandle: RPC_BINDING_HANDLE, ServerContextList: _void.Δ } ],
  I_RpcNsInterfaceExported: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: ushort.Δ, RpcInterfaceInformation: RPC_SERVER_INTERFACE.Δ } ],
  I_RpcNsInterfaceUnexported: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: ushort.Δ, RpcInterfaceInformation: RPC_SERVER_INTERFACE.Δ } ],
  I_RpcBindingToStaticStringBindingW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, StringBinding: ushort.Δ.Δ } ],
  I_RpcBindingInqSecurityContext: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, SecurityContextHandle: _void.Δ.Δ } ],
  I_RpcBindingInqSecurityContextKeyInfo: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, KeyInfo: _void.Δ } ],
  I_RpcBindingInqWireIdForSnego: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, WireId: RPC_CSTR } ],
  I_RpcBindingInqMarshalledTargetInfo: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, MarshalledTargetInfoSize: ulong.Δ, MarshalledTargetInfo: RPC_CSTR.Δ } ],
  I_RpcBindingInqLocalClientPID: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Pid: ulong.Δ } ],
  I_RpcBindingHandleToAsyncHandle: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, AsyncHandle: _void.Δ.Δ } ],
  I_RpcNsBindingSetEntryNameW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: RPC_WSTR } ],
  I_RpcNsBindingSetEntryNameA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, EntryNameSyntax: ulong, EntryName: RPC_CSTR } ],
  I_RpcServerUseProtseqEp2A: [ RPC_STATUS, { NetworkAddress: RPC_CSTR, Protseq: RPC_CSTR, MaxCalls: uint, Endpoint: RPC_CSTR, SecurityDescriptor: _void.Δ, Policy: _void.Δ } ],
  I_RpcServerUseProtseqEp2W: [ RPC_STATUS, { NetworkAddress: RPC_WSTR, Protseq: RPC_WSTR, MaxCalls: uint, Endpoint: RPC_WSTR, SecurityDescriptor: _void.Δ, Policy: _void.Δ } ],
  I_RpcServerUseProtseq2W: [ RPC_STATUS, { NetworkAddress: RPC_WSTR, Protseq: RPC_WSTR, MaxCalls: uint, SecurityDescriptor: _void.Δ, Policy: _void.Δ } ],
  I_RpcServerUseProtseq2A: [ RPC_STATUS, { NetworkAddress: RPC_CSTR, Protseq: RPC_CSTR, MaxCalls: uint, SecurityDescriptor: _void.Δ, Policy: _void.Δ } ],
  I_RpcServerStartService: [ RPC_STATUS, { Protseq: RPC_WSTR, Endpoint: RPC_WSTR, IfSpec: RPC_IF_HANDLE } ],
  I_RpcBindingInqDynamicEndpointW: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, DynamicEndpoint: RPC_WSTR.Δ } ],
  I_RpcBindingInqDynamicEndpointA: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, DynamicEndpoint: RPC_CSTR.Δ } ],
  I_RpcServerCheckClientRestriction: [ RPC_STATUS, { Context: RPC_BINDING_HANDLE } ],
  I_RpcBindingInqTransportType: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Type: uint.Δ } ],
  I_RpcIfInqTransferSyntaxes: [ RPC_STATUS, { RpcIfHandle: RPC_IF_HANDLE, TransferSyntaxes: RPC_TRANSFER_SYNTAX.Δ, TransferSyntaxSize: uint, TransferSyntaxCount: uint.Δ } ],
  I_UuidCreate: [ RPC_STATUS, { Uuid: UUID.Δ } ],
  I_RpcBindingCopy: [ RPC_STATUS, { SourceBinding: RPC_BINDING_HANDLE, DestinationBinding: RPC_BINDING_HANDLE.Δ } ],
  I_RpcBindingIsClientLocal: [ RPC_STATUS, { BindingHandle: RPC_BINDING_HANDLE, ClientLocalFlag: uint.Δ } ],
  I_RpcBindingInqConnId: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, ConnId: _void.Δ.Δ, pfFirstCall: int.Δ } ],
  I_RpcBindingCreateNP: [ RPC_STATUS, { ServerName: RPC_WSTR, ServiceName: RPC_WSTR, NetworkOptions: RPC_WSTR, Binding: RPC_BINDING_HANDLE.Δ } ],
  I_RpcSsDontSerializeContext: [ _void, {  } ],
  I_RpcLaunchDatagramReceiveThread: [ RPC_STATUS, { pAddress: _void.Δ } ],
  I_RpcServerRegisterForwardFunction: [ RPC_STATUS, { pForwardFunction: RPC_FORWARD_FUNCTION.Δ } ],
  I_RpcServerInqAddressChangeFn: [ RPC_ADDRESS_CHANGE_FN, {  } ],
  I_RpcServerSetAddressChangeFn: [ RPC_STATUS, { pAddressChangeFn: RPC_ADDRESS_CHANGE_FN.Δ } ],
  I_RpcServerInqLocalConnAddress: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Buffer: _void.Δ, BufferSize: ulong.Δ, AddressFormat: ulong.Δ } ],
  I_RpcServerInqRemoteConnAddress: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Buffer: _void.Δ, BufferSize: ulong.Δ, AddressFormat: ulong.Δ } ],
  I_RpcSessionStrictContextHandle: [ _void, {  } ],
  I_RpcTurnOnEEInfoPropagation: [ RPC_STATUS, {  } ],
  I_RpcConnectionInqSockBuffSize: [ RPC_STATUS, { RecvBuffSize: ulong.Δ, SendBuffSize: ulong.Δ } ],
  I_RpcConnectionSetSockBuffSize: [ RPC_STATUS, { RecvBuffSize: ulong, SendBuffSize: ulong } ],
  I_RpcServerStartListening: [ RPC_STATUS, { hWnd: _void.Δ } ],
  I_RpcServerStopListening: [ RPC_STATUS, {  } ],
  I_RpcBindingSetAsync: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, BlockingFn: RPC_BLOCKING_FN, ServerTid: ulong } ],
  I_RpcSetThreadParams: [ RPC_STATUS, { fClientFree: int, Context: _void.Δ, hWndClient: _void.Δ } ],
  I_RpcWindowProc: [ _void, { hWnd: _void.Δ, Message: uint, wParam: uint, lParam: ulong } ],
  I_RpcServerUnregisterEndpointA: [ RPC_STATUS, { Protseq: RPC_CSTR, Endpoint: RPC_CSTR } ],
  I_RpcServerUnregisterEndpointW: [ RPC_STATUS, { Protseq: RPC_WSTR, Endpoint: RPC_WSTR } ],
  I_RpcServerInqTransportType: [ RPC_STATUS, { Type: uint.Δ } ],
  I_RpcMapWin32Status: [ _void, { Status: RPC_STATUS } ],
  I_RpcProxyNewConnection: [ RPC_STATUS, { ConnectionType: ulong, ServerAddress: ushort.Δ, ServerPort: ushort.Δ, MinConnTimeout: ushort.Δ, ConnectionParameter: _void.Δ, CallOutState: RDR_CALLOUT_STATE.Δ, ProxyCallbackInterface: I_RpcProxyCallbackInterface.Δ } ],
  I_RpcReplyToClientWithStatus: [ RPC_STATUS, { ConnectionParameter: _void.Δ, RpcStatus: RPC_STATUS } ],
  I_RpcRecordCalloutFailure: [ _void, { RpcStatus: RPC_STATUS, CallOutState: RDR_CALLOUT_STATE.Δ, DllName: ushort.Δ } ],
  I_RpcMgmtEnableDedicatedThreadPool: [ RPC_STATUS, {  } ],
  RpcNsBindingExportA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, BindingVec: RPC_BINDING_VECTOR.Δ, ObjectUuidVec: UUID_VECTOR.Δ } ],
  RpcNsBindingUnexportA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectUuidVec: UUID_VECTOR.Δ } ],
  RpcNsBindingExportW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, BindingVec: RPC_BINDING_VECTOR.Δ, ObjectUuidVec: UUID_VECTOR.Δ } ],
  RpcNsBindingUnexportW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectUuidVec: UUID_VECTOR.Δ } ],
  RpcNsBindingExportPnPA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: UUID_VECTOR.Δ } ],
  RpcNsBindingUnexportPnPA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: UUID_VECTOR.Δ } ],
  RpcNsBindingExportPnPW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: UUID_VECTOR.Δ } ],
  RpcNsBindingUnexportPnPW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjectVector: UUID_VECTOR.Δ } ],
  RpcNsBindingLookupBeginA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: UUID.Δ, BindingMaxCount: ulong, LookupContext: RPC_NS_HANDLE.Δ } ],
  RpcNsBindingLookupBeginW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: UUID.Δ, BindingMaxCount: ulong, LookupContext: RPC_NS_HANDLE.Δ } ],
  RpcNsBindingLookupNext: [ RPC_STATUS, { LookupContext: RPC_NS_HANDLE, BindingVec: _RPC_BINDING_VECTOR.Δ.Δ } ],
  RpcNsBindingLookupDone: [ RPC_STATUS, { LookupContext: RPC_NS_HANDLE.Δ } ],
  RpcNsGroupDeleteA: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_CSTR } ],
  RpcNsGroupMbrAddA: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_CSTR, MemberNameSyntax: ulong, MemberName: RPC_CSTR } ],
  RpcNsGroupMbrRemoveA: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_CSTR, MemberNameSyntax: ulong, MemberName: RPC_CSTR } ],
  RpcNsGroupMbrInqBeginA: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_CSTR, MemberNameSyntax: ulong, InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsGroupMbrInqNextA: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE, MemberName: RPC_CSTR.Δ } ],
  RpcNsGroupDeleteW: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_WSTR } ],
  RpcNsGroupMbrAddW: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_WSTR, MemberNameSyntax: ulong, MemberName: RPC_WSTR } ],
  RpcNsGroupMbrRemoveW: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_WSTR, MemberNameSyntax: ulong, MemberName: RPC_WSTR } ],
  RpcNsGroupMbrInqBeginW: [ RPC_STATUS, { GroupNameSyntax: ulong, GroupName: RPC_WSTR, MemberNameSyntax: ulong, InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsGroupMbrInqNextW: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE, MemberName: RPC_WSTR.Δ } ],
  RpcNsGroupMbrInqDone: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsProfileDeleteA: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR } ],
  RpcNsProfileEltAddA: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR, IfId: RPC_IF_ID.Δ, MemberNameSyntax: ulong, MemberName: RPC_CSTR, Priority: ulong, Annotation: RPC_CSTR } ],
  RpcNsProfileEltRemoveA: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR, IfId: RPC_IF_ID.Δ, MemberNameSyntax: ulong, MemberName: RPC_CSTR } ],
  RpcNsProfileEltInqBeginA: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_CSTR, InquiryType: ulong, IfId: RPC_IF_ID.Δ, VersOption: ulong, MemberNameSyntax: ulong, MemberName: RPC_CSTR, InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsProfileEltInqNextA: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE, IfId: RPC_IF_ID.Δ, MemberName: RPC_CSTR.Δ, Priority: ulong.Δ, Annotation: RPC_CSTR.Δ } ],
  RpcNsProfileDeleteW: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR } ],
  RpcNsProfileEltAddW: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR, IfId: RPC_IF_ID.Δ, MemberNameSyntax: ulong, MemberName: RPC_WSTR, Priority: ulong, Annotation: RPC_WSTR } ],
  RpcNsProfileEltRemoveW: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR, IfId: RPC_IF_ID.Δ, MemberNameSyntax: ulong, MemberName: RPC_WSTR } ],
  RpcNsProfileEltInqBeginW: [ RPC_STATUS, { ProfileNameSyntax: ulong, ProfileName: RPC_WSTR, InquiryType: ulong, IfId: RPC_IF_ID.Δ, VersOption: ulong, MemberNameSyntax: ulong, MemberName: RPC_WSTR, InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsProfileEltInqNextW: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE, IfId: RPC_IF_ID.Δ, MemberName: RPC_WSTR.Δ, Priority: ulong.Δ, Annotation: RPC_WSTR.Δ } ],
  RpcNsProfileEltInqDone: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsEntryObjectInqBeginA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsEntryObjectInqBeginW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsEntryObjectInqNext: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE, ObjUuid: UUID.Δ } ],
  RpcNsEntryObjectInqDone: [ RPC_STATUS, { InquiryContext: RPC_NS_HANDLE.Δ } ],
  RpcNsEntryExpandNameA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, ExpandedName: RPC_CSTR.Δ } ],
  RpcNsMgmtBindingUnexportA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfId: RPC_IF_ID.Δ, VersOption: ulong, ObjectUuidVec: UUID_VECTOR.Δ } ],
  RpcNsMgmtEntryCreateA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR } ],
  RpcNsMgmtEntryDeleteA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR } ],
  RpcNsMgmtEntryInqIfIdsA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfIdVec: RPC_IF_ID_VECTOR.Δ.Δ } ],
  RpcNsMgmtHandleSetExpAge: [ RPC_STATUS, { NsHandle: RPC_NS_HANDLE, ExpirationAge: ulong } ],
  RpcNsMgmtInqExpAge: [ RPC_STATUS, { ExpirationAge: ulong.Δ } ],
  RpcNsMgmtSetExpAge: [ RPC_STATUS, { ExpirationAge: ulong } ],
  RpcNsEntryExpandNameW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, ExpandedName: RPC_WSTR.Δ } ],
  RpcNsMgmtBindingUnexportW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfId: RPC_IF_ID.Δ, VersOption: ulong, ObjectUuidVec: UUID_VECTOR.Δ } ],
  RpcNsMgmtEntryCreateW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR } ],
  RpcNsMgmtEntryDeleteW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR } ],
  RpcNsMgmtEntryInqIfIdsW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfIdVec: RPC_IF_ID_VECTOR.Δ.Δ } ],
  RpcNsBindingImportBeginA: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_CSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: UUID.Δ, ImportContext: RPC_NS_HANDLE.Δ } ],
  RpcNsBindingImportBeginW: [ RPC_STATUS, { EntryNameSyntax: ulong, EntryName: RPC_WSTR, IfSpec: RPC_IF_HANDLE, ObjUuid: UUID.Δ, ImportContext: RPC_NS_HANDLE.Δ } ],
  RpcNsBindingImportNext: [ RPC_STATUS, { ImportContext: RPC_NS_HANDLE, Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcNsBindingImportDone: [ RPC_STATUS, { ImportContext: RPC_NS_HANDLE.Δ } ],
  RpcNsBindingSelect: [ RPC_STATUS, { BindingVec: RPC_BINDING_VECTOR.Δ, Binding: RPC_BINDING_HANDLE.Δ } ],
  RpcAsyncInitializeHandle: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE, Size: uint } ],
  RpcAsyncRegisterInfo: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE } ],
  RpcAsyncGetCallStatus: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE } ],
  RpcAsyncCompleteCall: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE, Reply: _void.Δ } ],
  RpcAsyncAbortCall: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE, ExceptionCode: ulong } ],
  RpcAsyncCancelCall: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE, fAbort: BOOL } ],
  RpcErrorStartEnumeration: [ RPC_STATUS, { EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ } ],
  RpcErrorGetNextRecord: [ RPC_STATUS, { EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ, CopyStrings: BOOL, ErrorInfo: RPC_EXTENDED_ERROR_INFO.Δ } ],
  RpcErrorEndEnumeration: [ RPC_STATUS, { EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ } ],
  RpcErrorResetEnumeration: [ RPC_STATUS, { EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ } ],
  RpcErrorGetNumberOfRecords: [ RPC_STATUS, { EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ, Records: int.Δ } ],
  RpcErrorSaveErrorInfo: [ RPC_STATUS, { EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ, ErrorBlob: PVOID.Δ, BlobSize: size_t.Δ } ],
  RpcErrorLoadErrorInfo: [ RPC_STATUS, { ErrorBlob: PVOID, BlobSize: size_t, EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ } ],
  RpcErrorAddRecord: [ RPC_STATUS, { ErrorInfo: RPC_EXTENDED_ERROR_INFO.Δ } ],
  RpcErrorClearInformation: [ _void, {  } ],
  RpcAsyncCleanupThread: [ RPC_STATUS, { dwTimeout: DWORD } ],
  RpcGetAuthorizationContextForClient: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, ImpersonateOnReturn: BOOL, Reserved1: PVOID, pExpirationTime: PLARGE_INTEGER, Reserved2: LUID, Reserved3: DWORD, Reserved4: PVOID, pAuthzClientContext: PVOID.Δ } ],
  RpcFreeAuthorizationContext: [ RPC_STATUS, { pAuthzClientContext: PVOID.Δ } ],
  RpcSsContextLockExclusive: [ RPC_STATUS, { ServerBindingHandle: RPC_BINDING_HANDLE, UserContext: PVOID } ],
  RpcSsContextLockShared: [ RPC_STATUS, { ServerBindingHandle: RPC_BINDING_HANDLE, UserContext: PVOID } ],
  RpcServerInqCallAttributesW: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, RpcCallAttributes: _void.Δ } ],
  RpcServerInqCallAttributesA: [ RPC_STATUS, { ClientBinding: RPC_BINDING_HANDLE, RpcCallAttributes: _void.Δ } ],
  RpcServerSubscribeForNotification: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Notification: RPC_NOTIFICATIONS, NotificationType: RPC_NOTIFICATION_TYPES, NotificationInfo: RPC_ASYNC_NOTIFICATION_INFO.Δ } ],
  RpcServerUnsubscribeForNotification: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE, Notification: RPC_NOTIFICATIONS, NotificationsQueued: ulong.Δ } ],
  RpcBindingBind: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE, Binding: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE } ],
  RpcBindingUnbind: [ RPC_STATUS, { Binding: RPC_BINDING_HANDLE } ],
  RpcDiagnoseError: [ RPC_STATUS, { BindingHandle: RPC_BINDING_HANDLE, IfSpec: RPC_IF_HANDLE, RpcStatus: RPC_STATUS, EnumHandle: RPC_ERROR_ENUM_HANDLE.Δ, Options: ULONG, ParentWindow: HWND } ],
  I_RpcAsyncSetHandle: [ RPC_STATUS, { Message: PRPC_MESSAGE, pAsync: PRPC_ASYNC_STATE } ],
  I_RpcAsyncAbortCall: [ RPC_STATUS, { pAsync: PRPC_ASYNC_STATE, ExceptionCode: ulong } ],
  I_RpcExceptionFilter: [ _void, { ExceptionCode: ulong } ],
  DragQueryFileA: [ UINT, { hDrop: HDROP, iFile: UINT, lpszFile: LPSTR, cch: UINT } ],
  DragQueryFileW: [ UINT, { hDrop: HDROP, iFile: UINT, lpszFile: LPWSTR, cch: UINT } ],
  DragQueryPoint: [ BOOL, { hDrop: HDROP, lppt: LPPOINT } ],
  DragFinish: [ _void, { hDrop: HDROP } ],
  DragAcceptFiles: [ _void, { hWnd: HWND, fAccept: BOOL } ],
  ShellExecuteA: [ HINSTANCE, { hwnd: HWND, lpOperation: LPCSTR, lpFile: LPCSTR, lpParameters: LPCSTR, lpDirectory: LPCSTR, nShowCmd: INT } ],
  ShellExecuteW: [ HINSTANCE, { hwnd: HWND, lpOperation: LPCWSTR, lpFile: LPCWSTR, lpParameters: LPCWSTR, lpDirectory: LPCWSTR, nShowCmd: INT } ],
  FindExecutableA: [ HINSTANCE, { lpFile: LPCSTR, lpDirectory: LPCSTR, lpResult: LPSTR } ],
  FindExecutableW: [ HINSTANCE, { lpFile: LPCWSTR, lpDirectory: LPCWSTR, lpResult: LPWSTR } ],
  CommandLineToArgvW: [ LPWSTR, { lpCmdLine: LPCWSTR, pNumArgs: int.Δ } ],
  ShellAboutA: [ INT, { hWnd: HWND, szApp: LPCSTR, szOtherStuff: LPCSTR, hIcon: HICON } ],
  ShellAboutW: [ INT, { hWnd: HWND, szApp: LPCWSTR, szOtherStuff: LPCWSTR, hIcon: HICON } ],
  DuplicateIcon: [ HICON, { hInst: HINSTANCE, hIcon: HICON } ],
  ExtractAssociatedIconA: [ HICON, { hInst: HINSTANCE, pszIconPath: LPSTR, piIcon: WORD.Δ } ],
  ExtractAssociatedIconW: [ HICON, { hInst: HINSTANCE, pszIconPath: LPWSTR, piIcon: WORD.Δ } ],
  ExtractAssociatedIconExA: [ HICON, { hInst: HINSTANCE, pszIconPath: LPSTR, piIconIndex: WORD.Δ, piIconId: WORD.Δ } ],
  ExtractAssociatedIconExW: [ HICON, { hInst: HINSTANCE, pszIconPath: LPWSTR, piIconIndex: WORD.Δ, piIconId: WORD.Δ } ],
  ExtractIconA: [ HICON, { hInst: HINSTANCE, lpszExeFileName: LPCSTR, nIconIndex: UINT } ],
  ExtractIconW: [ HICON, { hInst: HINSTANCE, lpszExeFileName: LPCWSTR, nIconIndex: UINT } ],
  SHAppBarMessage: [ UINT_PTR, { dwMessage: DWORD, pData: PAPPBARDATA } ],
  DoEnvironmentSubstA: [ DWORD, { szString: LPSTR, cchString: UINT } ],
  DoEnvironmentSubstW: [ DWORD, { szString: LPWSTR, cchString: UINT } ],
  ExtractIconExA: [ UINT, { lpszFile: LPCSTR, nIconIndex: int, phiconLarge: HICON.Δ, phiconSmall: HICON.Δ, nIcons: UINT } ],
  ExtractIconExW: [ UINT, { lpszFile: LPCWSTR, nIconIndex: int, phiconLarge: HICON.Δ, phiconSmall: HICON.Δ, nIcons: UINT } ],
  SHFileOperationA: [ _void, { lpFileOp: LPSHFILEOPSTRUCTA } ],
  SHFileOperationW: [ _void, { lpFileOp: LPSHFILEOPSTRUCTW } ],
  SHFreeNameMappings: [ _void, { hNameMappings: HANDLE } ],
  ShellExecuteExA: [ BOOL, { pExecInfo: SHELLEXECUTEINFOA.Δ } ],
  ShellExecuteExW: [ BOOL, { pExecInfo: SHELLEXECUTEINFOW.Δ } ],
  SHCreateProcessAsUserW: [ BOOL, { pscpi: PSHCREATEPROCESSINFOW } ],
  SHEvaluateSystemCommandTemplate: [ HRESULT, { pszCmdTemplate: PCWSTR, ppszApplication: PWSTR.Δ, ppszCommandLine: PWSTR.Δ, ppszParameters: PWSTR.Δ } ],
  AssocCreateForClasses: [ HRESULT, { rgClasses: ASSOCIATIONELEMENT.Δ, cClasses: ULONG, riid: IID.Δ, ppv: _void.Δ.Δ } ],
  SHQueryRecycleBinA: [ HRESULT, { pszRootPath: LPCSTR, pSHQueryRBInfo: LPSHQUERYRBINFO } ],
  SHQueryRecycleBinW: [ HRESULT, { pszRootPath: LPCWSTR, pSHQueryRBInfo: LPSHQUERYRBINFO } ],
  SHEmptyRecycleBinA: [ HRESULT, { hwnd: HWND, pszRootPath: LPCSTR, dwFlags: DWORD } ],
  SHEmptyRecycleBinW: [ HRESULT, { hwnd: HWND, pszRootPath: LPCWSTR, dwFlags: DWORD } ],
  SHQueryUserNotificationState: [ HRESULT, { pquns: QUERY_USER_NOTIFICATION_STATE.Δ } ],
  SHGetPropertyStoreForWindow: [ HRESULT, { hwnd: HWND, riid: IID.Δ, ppv: _void.Δ.Δ } ],
  Shell_NotifyIconA: [ BOOL, { dwMessage: DWORD, lpData: PNOTIFYICONDATAA } ],
  Shell_NotifyIconW: [ BOOL, { dwMessage: DWORD, lpData: PNOTIFYICONDATAW } ],
  Shell_NotifyIconGetRect: [ HRESULT, { identifier: NOTIFYICONIDENTIFIER.Δ, iconLocation: RECT.Δ } ],
  SHGetFileInfoA: [ DWORD_PTR, { pszPath: LPCSTR, dwFileAttributes: DWORD, psfi: SHFILEINFOA.Δ, cbFileInfo: UINT, uFlags: UINT } ],
  SHGetFileInfoW: [ DWORD_PTR, { pszPath: LPCWSTR, dwFileAttributes: DWORD, psfi: SHFILEINFOW.Δ, cbFileInfo: UINT, uFlags: UINT } ],
  SHGetStockIconInfo: [ HRESULT, { siid: SHSTOCKICONID, uFlags: UINT, psii: SHSTOCKICONINFO.Δ } ],
  SHGetDiskFreeSpaceExA: [ BOOL, { pszDirectoryName: LPCSTR, pulFreeBytesAvailableToCaller: ULARGE_INTEGER.Δ, pulTotalNumberOfBytes: ULARGE_INTEGER.Δ, pulTotalNumberOfFreeBytes: ULARGE_INTEGER.Δ } ],
  SHGetDiskFreeSpaceExW: [ BOOL, { pszDirectoryName: LPCWSTR, pulFreeBytesAvailableToCaller: ULARGE_INTEGER.Δ, pulTotalNumberOfBytes: ULARGE_INTEGER.Δ, pulTotalNumberOfFreeBytes: ULARGE_INTEGER.Δ } ],
  SHGetNewLinkInfoA: [ BOOL, { pszLinkTo: LPCSTR, pszDir: LPCSTR, pszName: LPSTR, pfMustCopy: BOOL.Δ, uFlags: UINT } ],
  SHGetNewLinkInfoW: [ BOOL, { pszLinkTo: LPCWSTR, pszDir: LPCWSTR, pszName: LPWSTR, pfMustCopy: BOOL.Δ, uFlags: UINT } ],
  SHInvokePrinterCommandA: [ BOOL, { hwnd: HWND, uAction: UINT, lpBuf1: LPCSTR, lpBuf2: LPCSTR, fModal: BOOL } ],
  SHInvokePrinterCommandW: [ BOOL, { hwnd: HWND, uAction: UINT, lpBuf1: LPCWSTR, lpBuf2: LPCWSTR, fModal: BOOL } ],
  SHLoadNonloadedIconOverlayIdentifiers: [ HRESULT, {  } ],
  SHIsFileAvailableOffline: [ HRESULT, { pwszPath: LPCWSTR, pdwStatus: LPDWORD } ],
  SHSetLocalizedName: [ HRESULT, { pszPath: LPCWSTR, pszResModule: LPCWSTR, idsRes: int } ],
  SHRemoveLocalizedName: [ HRESULT, { pszPath: LPCWSTR } ],
  SHGetLocalizedName: [ HRESULT, { pszPath: LPCWSTR, pszResModule: LPWSTR, cch: UINT, pidsRes: int.Δ } ],
  ShellMessageBoxA: [ _void, { hAppInst: HINSTANCE, hWnd: HWND, lpcText: LPCSTR, lpcTitle: LPCSTR, fuStyle: UINT } ],
  ShellMessageBoxW: [ _void, { hAppInst: HINSTANCE, hWnd: HWND, lpcText: LPCWSTR, lpcTitle: LPCWSTR, fuStyle: UINT } ],
  IsLFNDriveA: [ BOOL, { pszPath: LPCSTR } ],
  IsLFNDriveW: [ BOOL, { pszPath: LPCWSTR } ],
  SHEnumerateUnreadMailAccountsA: [ HRESULT, { hKeyUser: HKEY, dwIndex: DWORD, pszMailAddress: LPSTR, cchMailAddress: int } ],
  SHEnumerateUnreadMailAccountsW: [ HRESULT, { hKeyUser: HKEY, dwIndex: DWORD, pszMailAddress: LPWSTR, cchMailAddress: int } ],
  SHGetUnreadMailCountA: [ HRESULT, { hKeyUser: HKEY, pszMailAddress: LPCSTR, pdwCount: DWORD.Δ, pFileTime: FILETIME.Δ, pszShellExecuteCommand: LPSTR, cchShellExecuteCommand: int } ],
  SHGetUnreadMailCountW: [ HRESULT, { hKeyUser: HKEY, pszMailAddress: LPCWSTR, pdwCount: DWORD.Δ, pFileTime: FILETIME.Δ, pszShellExecuteCommand: LPWSTR, cchShellExecuteCommand: int } ],
  SHSetUnreadMailCountA: [ HRESULT, { pszMailAddress: LPCSTR, dwCount: DWORD, pszShellExecuteCommand: LPCSTR } ],
  SHSetUnreadMailCountW: [ HRESULT, { pszMailAddress: LPCWSTR, dwCount: DWORD, pszShellExecuteCommand: LPCWSTR } ],
  SHTestTokenMembership: [ BOOL, { hToken: HANDLE, ulRID: ULONG } ],
  SHGetImageList: [ HRESULT, { iImageList: int, riid: IID.Δ, ppvObj: _void.Δ.Δ } ],
  InitNetworkAddressControl: [ BOOL, {  } ],
  SHGetDriveMedia: [ HRESULT, { pszDrive: LPCWSTR, pdwMediaContent: DWORD.Δ } ],
  __WSAFDIsSet: [ _void, { fd_set.Δ: fd_set.Δ } ],
  accept: [ SOCKET, { s: SOCKET, addr: sockaddr.Δ, addrlen: int.Δ } ],
  bind: [ _void, { s: SOCKET, addr: sockaddr.Δ, namelen: int } ],
  closesocket: [ _void, { s: SOCKET } ],
  connect: [ _void, { s: SOCKET, name: sockaddr.Δ, namelen: int } ],
  ioctlsocket: [ _void, { s: SOCKET, cmd: long, argp: u_long.Δ } ],
  getpeername: [ _void, { s: SOCKET, name: sockaddr.Δ, namelen: int.Δ } ],
  getsockname: [ _void, { s: SOCKET, name: sockaddr.Δ, namelen: int.Δ } ],
  getsockopt: [ _void, { s: SOCKET, level: int, optname: int, optval: char.Δ, optlen: int.Δ } ],
  htonl: [ u_long, { hostlong: u_long } ],
  htons: [ u_short, { hostshort: u_short } ],
  inet_addr: [ _void, { cp: char.Δ } ],
  inet_ntoa: [ _void, { in: IN_ADDR } ],
  listen: [ _void, { s: SOCKET, backlog: int } ],
  ntohl: [ u_long, { netlong: u_long } ],
  ntohs: [ u_short, { netshort: u_short } ],
  recv: [ _void, { s: SOCKET, buf: char.Δ, len: int, flags: int } ],
  recvfrom: [ _void, { s: SOCKET, buf: char.Δ, len: int, flags: int, from: sockaddr.Δ, fromlen: int.Δ } ],
  select: [ _void, { nfds: int, readfds: fd_set.Δ, writefds: fd_set.Δ, exceptfds: fd_set.Δ, timeout: timeval.Δ } ],
  send: [ _void, { s: SOCKET, buf: char.Δ, len: int, flags: int } ],
  sendto: [ _void, { s: SOCKET, buf: char.Δ, len: int, flags: int, to: sockaddr.Δ, tolen: int } ],
  setsockopt: [ _void, { s: SOCKET, level: int, optname: int, optval: char.Δ, optlen: int } ],
  shutdown: [ _void, { s: SOCKET, how: int } ],
  socket: [ SOCKET, { af: int, type: int, protocol: int } ],
  gethostbyaddr: [ HOSTENT, { addr: char.Δ, len: int, type: int } ],
  gethostbyname: [ HOSTENT, { name: char.Δ } ],
  gethostname: [ _void, { name: char.Δ, namelen: int } ],
  getservbyport: [ SERVENT, { port: int, proto: char.Δ } ],
  getservbyname: [ SERVENT, { name: char.Δ, proto: char.Δ } ],
  getprotobynumber: [ PROTOENT, { proto: int } ],
  getprotobyname: [ PROTOENT, { name: char.Δ } ],
  WSAStartup: [ _void, { wVersionRequired: WORD, lpWSAData: LPWSADATA } ],
  WSACleanup: [ _void, {  } ],
  WSASetLastError: [ _void, { iError: int } ],
  WSAGetLastError: [ _void, {  } ],
  WSAIsBlocking: [ BOOL, {  } ],
  WSAUnhookBlockingHook: [ _void, {  } ],
  WSASetBlockingHook: [ FARPROC, { lpBlockFunc: FARPROC } ],
  WSACancelBlockingCall: [ _void, {  } ],
  WSAAsyncGetServByName: [ HANDLE, { hWnd: HWND, wMsg: u_int, name: char.Δ, proto: char.Δ, buf: char.Δ, buflen: int } ],
  WSAAsyncGetServByPort: [ HANDLE, { hWnd: HWND, wMsg: u_int, port: int, proto: char.Δ, buf: char.Δ, buflen: int } ],
  WSAAsyncGetProtoByName: [ HANDLE, { hWnd: HWND, wMsg: u_int, name: char.Δ, buf: char.Δ, buflen: int } ],
  WSAAsyncGetProtoByNumber: [ HANDLE, { hWnd: HWND, wMsg: u_int, number: int, buf: char.Δ, buflen: int } ],
  WSAAsyncGetHostByName: [ HANDLE, { hWnd: HWND, wMsg: u_int, name: char.Δ, buf: char.Δ, buflen: int } ],
  WSAAsyncGetHostByAddr: [ HANDLE, { hWnd: HWND, wMsg: u_int, addr: char.Δ, len: int, type: int, buf: char.Δ, buflen: int } ],
  WSACancelAsyncRequest: [ _void, { hAsyncTaskHandle: HANDLE } ],
  WSAAsyncSelect: [ _void, { s: SOCKET, hWnd: HWND, wMsg: u_int, lEvent: long } ],
  WSARecvEx: [ _void, { s: SOCKET, buf: char.Δ, len: int, flags: int.Δ } ],
  TransmitFile: [ BOOL, { hSocket: SOCKET, hFile: HANDLE, nNumberOfBytesToWrite: DWORD, nNumberOfBytesPerSend: DWORD, lpOverlapped: LPOVERLAPPED, lpTransmitBuffers: LPTRANSMIT_FILE_BUFFERS, dwReserved: DWORD } ],
  AcceptEx: [ BOOL, { sListenSocket: SOCKET, sAcceptSocket: SOCKET, lpOutputBuffer: PVOID, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, lpdwBytesReceived: LPDWORD, lpOverlapped: LPOVERLAPPED } ],
  GetAcceptExSockaddrs: [ _void, { lpOutputBuffer: PVOID, dwReceiveDataLength: DWORD, dwLocalAddressLength: DWORD, dwRemoteAddressLength: DWORD, LocalSockaddr: sockaddr.Δ.Δ, LocalSockaddrLength: LPINT, RemoteSockaddr: sockaddr.Δ.Δ, RemoteSockaddrLength: LPINT } ],
  CryptAcquireContextA: [ BOOL, { phProv: HCRYPTPROV.Δ, szContainer: LPCSTR, szProvider: LPCSTR, dwProvType: DWORD, dwFlags: DWORD } ],
  CryptAcquireContextW: [ BOOL, { phProv: HCRYPTPROV.Δ, szContainer: LPCWSTR, szProvider: LPCWSTR, dwProvType: DWORD, dwFlags: DWORD } ],
  CryptReleaseContext: [ BOOL, { hProv: HCRYPTPROV, dwFlags: DWORD } ],
  CryptGenKey: [ BOOL, { hProv: HCRYPTPROV, Algid: ALG_ID, dwFlags: DWORD, phKey: HCRYPTKEY.Δ } ],
  CryptDeriveKey: [ BOOL, { hProv: HCRYPTPROV, Algid: ALG_ID, hBaseData: HCRYPTHASH, dwFlags: DWORD, phKey: HCRYPTKEY.Δ } ],
  CryptDestroyKey: [ BOOL, { hKey: HCRYPTKEY } ],
  CryptSetKeyParam: [ BOOL, { hKey: HCRYPTKEY, dwParam: DWORD, pbData: BYTE.Δ, dwFlags: DWORD } ],
  CryptGetKeyParam: [ BOOL, { hKey: HCRYPTKEY, dwParam: DWORD, pbData: BYTE.Δ, pdwDataLen: DWORD.Δ, dwFlags: DWORD } ],
  CryptSetHashParam: [ BOOL, { hHash: HCRYPTHASH, dwParam: DWORD, pbData: BYTE.Δ, dwFlags: DWORD } ],
  CryptGetHashParam: [ BOOL, { hHash: HCRYPTHASH, dwParam: DWORD, pbData: BYTE.Δ, pdwDataLen: DWORD.Δ, dwFlags: DWORD } ],
  CryptSetProvParam: [ BOOL, { hProv: HCRYPTPROV, dwParam: DWORD, pbData: BYTE.Δ, dwFlags: DWORD } ],
  CryptGetProvParam: [ BOOL, { hProv: HCRYPTPROV, dwParam: DWORD, pbData: BYTE.Δ, pdwDataLen: DWORD.Δ, dwFlags: DWORD } ],
  CryptGenRandom: [ BOOL, { hProv: HCRYPTPROV, dwLen: DWORD, pbBuffer: BYTE.Δ } ],
  CryptGetUserKey: [ BOOL, { hProv: HCRYPTPROV, dwKeySpec: DWORD, phUserKey: HCRYPTKEY.Δ } ],
  CryptExportKey: [ BOOL, { hKey: HCRYPTKEY, hExpKey: HCRYPTKEY, dwBlobType: DWORD, dwFlags: DWORD, pbData: BYTE.Δ, pdwDataLen: DWORD.Δ } ],
  CryptImportKey: [ BOOL, { hProv: HCRYPTPROV, pbData: BYTE.Δ, dwDataLen: DWORD, hPubKey: HCRYPTKEY, dwFlags: DWORD, phKey: HCRYPTKEY.Δ } ],
  CryptEncrypt: [ BOOL, { hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: BOOL, dwFlags: DWORD, pbData: BYTE.Δ, pdwDataLen: DWORD.Δ, dwBufLen: DWORD } ],
  CryptDecrypt: [ BOOL, { hKey: HCRYPTKEY, hHash: HCRYPTHASH, Final: BOOL, dwFlags: DWORD, pbData: BYTE.Δ, pdwDataLen: DWORD.Δ } ],
  CryptCreateHash: [ BOOL, { hProv: HCRYPTPROV, Algid: ALG_ID, hKey: HCRYPTKEY, dwFlags: DWORD, phHash: HCRYPTHASH.Δ } ],
  CryptHashData: [ BOOL, { hHash: HCRYPTHASH, pbData: BYTE.Δ, dwDataLen: DWORD, dwFlags: DWORD } ],
  CryptHashSessionKey: [ BOOL, { hHash: HCRYPTHASH, hKey: HCRYPTKEY, dwFlags: DWORD } ],
  CryptDestroyHash: [ BOOL, { hHash: HCRYPTHASH } ],
  CryptSignHashA: [ BOOL, { hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: LPCSTR, dwFlags: DWORD, pbSignature: BYTE.Δ, pdwSigLen: DWORD.Δ } ],
  CryptSignHashW: [ BOOL, { hHash: HCRYPTHASH, dwKeySpec: DWORD, szDescription: LPCWSTR, dwFlags: DWORD, pbSignature: BYTE.Δ, pdwSigLen: DWORD.Δ } ],
  CryptVerifySignatureA: [ BOOL, { hHash: HCRYPTHASH, pbSignature: BYTE.Δ, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: LPCSTR, dwFlags: DWORD } ],
  CryptVerifySignatureW: [ BOOL, { hHash: HCRYPTHASH, pbSignature: BYTE.Δ, dwSigLen: DWORD, hPubKey: HCRYPTKEY, szDescription: LPCWSTR, dwFlags: DWORD } ],
  CryptSetProviderA: [ BOOL, { pszProvName: LPCSTR, dwProvType: DWORD } ],
  CryptSetProviderW: [ BOOL, { pszProvName: LPCWSTR, dwProvType: DWORD } ],
  CryptSetProviderExA: [ BOOL, { pszProvName: LPCSTR, dwProvType: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD } ],
  CryptSetProviderExW: [ BOOL, { pszProvName: LPCWSTR, dwProvType: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD } ],
  CryptGetDefaultProviderA: [ BOOL, { dwProvType: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD, pszProvName: LPSTR, pcbProvName: DWORD.Δ } ],
  CryptGetDefaultProviderW: [ BOOL, { dwProvType: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD, pszProvName: LPWSTR, pcbProvName: DWORD.Δ } ],
  CryptEnumProviderTypesA: [ BOOL, { dwIndex: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD, pdwProvType: DWORD.Δ, szTypeName: LPSTR, pcbTypeName: DWORD.Δ } ],
  CryptEnumProviderTypesW: [ BOOL, { dwIndex: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD, pdwProvType: DWORD.Δ, szTypeName: LPWSTR, pcbTypeName: DWORD.Δ } ],
  CryptEnumProvidersA: [ BOOL, { dwIndex: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD, pdwProvType: DWORD.Δ, szProvName: LPSTR, pcbProvName: DWORD.Δ } ],
  CryptEnumProvidersW: [ BOOL, { dwIndex: DWORD, pdwReserved: DWORD.Δ, dwFlags: DWORD, pdwProvType: DWORD.Δ, szProvName: LPWSTR, pcbProvName: DWORD.Δ } ],
  CryptContextAddRef: [ BOOL, { hProv: HCRYPTPROV, pdwReserved: DWORD.Δ, dwFlags: DWORD } ],
  CryptDuplicateKey: [ BOOL, { hKey: HCRYPTKEY, pdwReserved: DWORD.Δ, dwFlags: DWORD, phKey: HCRYPTKEY.Δ } ],
  CryptDuplicateHash: [ BOOL, { hHash: HCRYPTHASH, pdwReserved: DWORD.Δ, dwFlags: DWORD, phHash: HCRYPTHASH.Δ } ],
  GetEncSChannel: [ BOOL, { pData: uchar.Δ.Δ, dwDecSize: DWORD.Δ } ],
  BCryptOpenAlgorithmProvider: [ NTSTATUS, { phAlgorithm: BCRYPT_ALG_HANDLE.Δ, pszAlgId: LPCWSTR, pszImplementation: LPCWSTR, dwFlags: ULONG } ],
  BCryptEnumAlgorithms: [ NTSTATUS, { dwAlgOperations: ULONG, pAlgCount: ULONG.Δ, ppAlgList: _BCRYPT_ALGORITHM_IDENTIFIER.Δ.Δ, dwFlags: ULONG } ],
  BCryptEnumProviders: [ NTSTATUS, { pszAlgId: LPCWSTR, pImplCount: ULONG.Δ, ppImplList: _BCRYPT_PROVIDER_NAME.Δ.Δ, dwFlags: ULONG } ],
  BCryptGetProperty: [ NTSTATUS, { hObject: BCRYPT_HANDLE, pszProperty: LPCWSTR, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ULONG.Δ, dwFlags: ULONG } ],
  BCryptSetProperty: [ NTSTATUS, { hObject: BCRYPT_HANDLE, pszProperty: LPCWSTR, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptCloseAlgorithmProvider: [ NTSTATUS, { hAlgorithm: BCRYPT_ALG_HANDLE, dwFlags: ULONG } ],
  BCryptFreeBuffer: [ _void, { pvBuffer: PVOID } ],
  BCryptGenerateSymmetricKey: [ NTSTATUS, { hAlgorithm: BCRYPT_ALG_HANDLE, phKey: BCRYPT_KEY_HANDLE.Δ, pbKeyObject: PUCHAR, cbKeyObject: ULONG, pbSecret: PUCHAR, cbSecret: ULONG, dwFlags: ULONG } ],
  BCryptGenerateKeyPair: [ NTSTATUS, { hAlgorithm: BCRYPT_ALG_HANDLE, phKey: BCRYPT_KEY_HANDLE.Δ, dwLength: ULONG, dwFlags: ULONG } ],
  BCryptEncrypt: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE, pbInput: PUCHAR, cbInput: ULONG, pPaddingInfo: _void.Δ, pbIV: PUCHAR, cbIV: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ULONG.Δ, dwFlags: ULONG } ],
  BCryptDecrypt: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE, pbInput: PUCHAR, cbInput: ULONG, pPaddingInfo: _void.Δ, pbIV: PUCHAR, cbIV: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ULONG.Δ, dwFlags: ULONG } ],
  BCryptExportKey: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE, hExportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ULONG.Δ, dwFlags: ULONG } ],
  BCryptImportKey: [ NTSTATUS, { hAlgorithm: BCRYPT_ALG_HANDLE, hImportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, phKey: BCRYPT_KEY_HANDLE.Δ, pbKeyObject: PUCHAR, cbKeyObject: ULONG, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptImportKeyPair: [ NTSTATUS, { hAlgorithm: BCRYPT_ALG_HANDLE, hImportKey: BCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, phKey: BCRYPT_KEY_HANDLE.Δ, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptDuplicateKey: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE, phNewKey: BCRYPT_KEY_HANDLE.Δ, pbKeyObject: PUCHAR, cbKeyObject: ULONG, dwFlags: ULONG } ],
  BCryptFinalizeKeyPair: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE, dwFlags: ULONG } ],
  BCryptDestroyKey: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE } ],
  BCryptDestroySecret: [ NTSTATUS, { hSecret: BCRYPT_SECRET_HANDLE } ],
  BCryptSignHash: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE, pPaddingInfo: _void.Δ, pbInput: PUCHAR, cbInput: ULONG, pbOutput: PUCHAR, cbOutput: ULONG, pcbResult: ULONG.Δ, dwFlags: ULONG } ],
  BCryptVerifySignature: [ NTSTATUS, { hKey: BCRYPT_KEY_HANDLE, pPaddingInfo: _void.Δ, pbHash: PUCHAR, cbHash: ULONG, pbSignature: PUCHAR, cbSignature: ULONG, dwFlags: ULONG } ],
  BCryptSecretAgreement: [ NTSTATUS, { hPrivKey: BCRYPT_KEY_HANDLE, hPubKey: BCRYPT_KEY_HANDLE, phAgreedSecret: BCRYPT_SECRET_HANDLE.Δ, dwFlags: ULONG } ],
  BCryptDeriveKey: [ NTSTATUS, { hSharedSecret: BCRYPT_SECRET_HANDLE, pwszKDF: LPCWSTR, pParameterList: BCryptBufferDesc.Δ, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, pcbResult: ULONG.Δ, dwFlags: ULONG } ],
  BCryptCreateHash: [ NTSTATUS, { hAlgorithm: BCRYPT_ALG_HANDLE, phHash: BCRYPT_HASH_HANDLE.Δ, pbHashObject: PUCHAR, cbHashObject: ULONG, pbSecret: PUCHAR, cbSecret: ULONG, dwFlags: ULONG } ],
  BCryptHashData: [ NTSTATUS, { hHash: BCRYPT_HASH_HANDLE, pbInput: PUCHAR, cbInput: ULONG, dwFlags: ULONG } ],
  BCryptFinishHash: [ NTSTATUS, { hHash: BCRYPT_HASH_HANDLE, pbOutput: PUCHAR, cbOutput: ULONG, dwFlags: ULONG } ],
  BCryptDuplicateHash: [ NTSTATUS, { hHash: BCRYPT_HASH_HANDLE, phNewHash: BCRYPT_HASH_HANDLE.Δ, pbHashObject: PUCHAR, cbHashObject: ULONG, dwFlags: ULONG } ],
  BCryptDestroyHash: [ NTSTATUS, { hHash: BCRYPT_HASH_HANDLE } ],
  BCryptGenRandom: [ NTSTATUS, { hAlgorithm: BCRYPT_ALG_HANDLE, pbBuffer: PUCHAR, cbBuffer: ULONG, dwFlags: ULONG } ],
  BCryptDeriveKeyCapi: [ NTSTATUS, { hHash: BCRYPT_HASH_HANDLE, hTargetAlg: BCRYPT_ALG_HANDLE, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, dwFlags: ULONG } ],
  BCryptDeriveKeyPBKDF2: [ NTSTATUS, { hPrf: BCRYPT_ALG_HANDLE, pbPassword: PUCHAR, cbPassword: ULONG, pbSalt: PUCHAR, cbSalt: ULONG, cIterations: ULONGLONG, pbDerivedKey: PUCHAR, cbDerivedKey: ULONG, dwFlags: ULONG } ],
  BCryptQueryProviderRegistration: [ NTSTATUS, { pszProvider: LPCWSTR, dwMode: ULONG, dwInterface: ULONG, pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_PROVIDER_REG.Δ } ],
  BCryptEnumRegisteredProviders: [ NTSTATUS, { pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_PROVIDERS.Δ } ],
  BCryptCreateContext: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, pConfig: PCRYPT_CONTEXT_CONFIG } ],
  BCryptDeleteContext: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR } ],
  BCryptEnumContexts: [ NTSTATUS, { dwTable: ULONG, pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_CONTEXTS.Δ } ],
  BCryptConfigureContext: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, pConfig: PCRYPT_CONTEXT_CONFIG } ],
  BCryptQueryContextConfiguration: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_CONTEXT_CONFIG.Δ } ],
  BCryptAddContextFunction: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, dwPosition: ULONG } ],
  BCryptRemoveContextFunction: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR } ],
  BCryptEnumContextFunctions: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_CONTEXT_FUNCTIONS.Δ } ],
  BCryptConfigureContextFunction: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pConfig: PCRYPT_CONTEXT_FUNCTION_CONFIG } ],
  BCryptQueryContextFunctionConfiguration: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_CONTEXT_FUNCTION_CONFIG.Δ } ],
  BCryptEnumContextFunctionProviders: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_CONTEXT_FUNCTION_PROVIDERS.Δ } ],
  BCryptSetContextFunctionProperty: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProperty: LPCWSTR, cbValue: ULONG, pbValue: PUCHAR } ],
  BCryptQueryContextFunctionProperty: [ NTSTATUS, { dwTable: ULONG, pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProperty: LPCWSTR, pcbValue: ULONG.Δ, ppbValue: PUCHAR.Δ } ],
  BCryptRegisterConfigChangeNotify: [ NTSTATUS, { phEvent: HANDLE.Δ } ],
  BCryptUnregisterConfigChangeNotify: [ NTSTATUS, { hEvent: HANDLE } ],
  BCryptResolveProviders: [ NTSTATUS, { pszContext: LPCWSTR, dwInterface: ULONG, pszFunction: LPCWSTR, pszProvider: LPCWSTR, dwMode: ULONG, dwFlags: ULONG, pcbBuffer: ULONG.Δ, ppBuffer: PCRYPT_PROVIDER_REFS.Δ } ],
  BCryptGetFipsAlgorithmMode: [ NTSTATUS, { pfEnabled: BOOLEAN.Δ } ],
  NCryptOpenStorageProvider: [ SECURITY_STATUS, { phProvider: NCRYPT_PROV_HANDLE.Δ, pszProviderName: LPCWSTR, dwFlags: DWORD } ],
  NCryptEnumAlgorithms: [ SECURITY_STATUS, { hProvider: NCRYPT_PROV_HANDLE, dwAlgOperations: DWORD, pdwAlgCount: DWORD.Δ, ppAlgList: _NCryptAlgorithmName.Δ.Δ, dwFlags: DWORD } ],
  NCryptIsAlgSupported: [ SECURITY_STATUS, { hProvider: NCRYPT_PROV_HANDLE, pszAlgId: LPCWSTR, dwFlags: DWORD } ],
  NCryptEnumKeys: [ SECURITY_STATUS, { hProvider: NCRYPT_PROV_HANDLE, pszScope: LPCWSTR, ppKeyName: NCryptKeyName.Δ.Δ, ppEnumState: PVOID.Δ, dwFlags: DWORD } ],
  NCryptEnumStorageProviders: [ SECURITY_STATUS, { pdwProviderCount: DWORD.Δ, ppProviderList: NCryptProviderName.Δ.Δ, dwFlags: DWORD } ],
  NCryptFreeBuffer: [ SECURITY_STATUS, { pvInput: PVOID } ],
  NCryptOpenKey: [ SECURITY_STATUS, { hProvider: NCRYPT_PROV_HANDLE, phKey: NCRYPT_KEY_HANDLE.Δ, pszKeyName: LPCWSTR, dwLegacyKeySpec: DWORD, dwFlags: DWORD } ],
  NCryptCreatePersistedKey: [ SECURITY_STATUS, { hProvider: NCRYPT_PROV_HANDLE, phKey: NCRYPT_KEY_HANDLE.Δ, pszAlgId: LPCWSTR, pszKeyName: LPCWSTR, dwLegacyKeySpec: DWORD, dwFlags: DWORD } ],
  NCryptGetProperty: [ SECURITY_STATUS, { hObject: NCRYPT_HANDLE, pszProperty: LPCWSTR, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: DWORD.Δ, dwFlags: DWORD } ],
  NCryptSetProperty: [ SECURITY_STATUS, { hObject: NCRYPT_HANDLE, pszProperty: LPCWSTR, pbInput: PBYTE, cbInput: DWORD, dwFlags: DWORD } ],
  NCryptFinalizeKey: [ SECURITY_STATUS, { hKey: NCRYPT_KEY_HANDLE, dwFlags: DWORD } ],
  NCryptEncrypt: [ SECURITY_STATUS, { hKey: NCRYPT_KEY_HANDLE, pbInput: PBYTE, cbInput: DWORD, pPaddingInfo: _void.Δ, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: DWORD.Δ, dwFlags: DWORD } ],
  NCryptDecrypt: [ SECURITY_STATUS, { hKey: NCRYPT_KEY_HANDLE, pbInput: PBYTE, cbInput: DWORD, pPaddingInfo: _void.Δ, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: DWORD.Δ, dwFlags: DWORD } ],
  NCryptImportKey: [ SECURITY_STATUS, { hProvider: NCRYPT_PROV_HANDLE, hImportKey: NCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pParameterList: NCryptBufferDesc.Δ, phKey: NCRYPT_KEY_HANDLE.Δ, pbData: PBYTE, cbData: DWORD, dwFlags: DWORD } ],
  NCryptExportKey: [ SECURITY_STATUS, { hKey: NCRYPT_KEY_HANDLE, hExportKey: NCRYPT_KEY_HANDLE, pszBlobType: LPCWSTR, pParameterList: NCryptBufferDesc.Δ, pbOutput: PBYTE, cbOutput: DWORD, pcbResult: DWORD.Δ, dwFlags: DWORD } ],
  NCryptSignHash: [ SECURITY_STATUS, { hKey: NCRYPT_KEY_HANDLE, pPaddingInfo: _void.Δ, pbHashValue: PBYTE, cbHashValue: DWORD, pbSignature: PBYTE, cbSignature: DWORD, pcbResult: DWORD.Δ, dwFlags: DWORD } ],
  NCryptVerifySignature: [ SECURITY_STATUS, { hKey: NCRYPT_KEY_HANDLE, pPaddingInfo: _void.Δ, pbHashValue: PBYTE, cbHashValue: DWORD, pbSignature: PBYTE, cbSignature: DWORD, dwFlags: DWORD } ],
  NCryptDeleteKey: [ SECURITY_STATUS, { hKey: NCRYPT_KEY_HANDLE, dwFlags: DWORD } ],
  NCryptFreeObject: [ SECURITY_STATUS, { hObject: NCRYPT_HANDLE } ],
  NCryptIsKeyHandle: [ BOOL, { hKey: NCRYPT_KEY_HANDLE } ],
  NCryptTranslateHandle: [ SECURITY_STATUS, { phProvider: NCRYPT_PROV_HANDLE.Δ, phKey: NCRYPT_KEY_HANDLE.Δ, hLegacyProv: HCRYPTPROV, hLegacyKey: HCRYPTKEY, dwLegacyKeySpec: DWORD, dwFlags: DWORD } ],
  NCryptNotifyChangeKey: [ SECURITY_STATUS, { hProvider: NCRYPT_PROV_HANDLE, phEvent: HANDLE.Δ, dwFlags: DWORD } ],
  NCryptSecretAgreement: [ SECURITY_STATUS, { hPrivKey: NCRYPT_KEY_HANDLE, hPubKey: NCRYPT_KEY_HANDLE, phAgreedSecret: NCRYPT_SECRET_HANDLE.Δ, dwFlags: DWORD } ],
  NCryptDeriveKey: [ SECURITY_STATUS, { hSharedSecret: NCRYPT_SECRET_HANDLE, pwszKDF: LPCWSTR, pParameterList: NCryptBufferDesc.Δ, pbDerivedKey: PBYTE, cbDerivedKey: DWORD, pcbResult: DWORD.Δ, dwFlags: ULONG } ],
  CryptFormatObject: [ BOOL, { dwCertEncodingType: DWORD, dwFormatType: DWORD, dwFormatStrType: DWORD, pFormatStruct: _void.Δ, lpszStructType: LPCSTR, pbEncoded: BYTE.Δ, cbEncoded: DWORD, pbFormat: _void.Δ, pcbFormat: DWORD.Δ } ],
  CryptEncodeObjectEx: [ BOOL, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: _void.Δ, dwFlags: DWORD, pEncodePara: PCRYPT_ENCODE_PARA, pvEncoded: _void.Δ, pcbEncoded: DWORD.Δ } ],
  CryptEncodeObject: [ BOOL, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: _void.Δ, pbEncoded: BYTE.Δ, pcbEncoded: DWORD.Δ } ],
  CryptDecodeObjectEx: [ BOOL, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pbEncoded: BYTE.Δ, cbEncoded: DWORD, dwFlags: DWORD, pDecodePara: PCRYPT_DECODE_PARA, pvStructInfo: _void.Δ, pcbStructInfo: DWORD.Δ } ],
  CryptDecodeObject: [ BOOL, { dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pbEncoded: BYTE.Δ, cbEncoded: DWORD, dwFlags: DWORD, pvStructInfo: _void.Δ, pcbStructInfo: DWORD.Δ } ],
  CryptInstallOIDFunctionAddress: [ BOOL, { hModule: HMODULE, dwEncodingType: DWORD, pszFuncName: LPCSTR, cFuncEntry: DWORD, rgFuncEntry: CRYPT_OID_FUNC_ENTRY.Δ, dwFlags: DWORD } ],
  CryptInitOIDFunctionSet: [ HCRYPTOIDFUNCSET, { pszFuncName: LPCSTR, dwFlags: DWORD } ],
  CryptGetOIDFunctionAddress: [ BOOL, { hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pszOID: LPCSTR, dwFlags: DWORD, ppvFuncAddr: _void.Δ.Δ, phFuncAddr: HCRYPTOIDFUNCADDR.Δ } ],
  CryptGetDefaultOIDDllList: [ BOOL, { hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pwszDllList: WCHAR.Δ, pcchDllList: DWORD.Δ } ],
  CryptGetDefaultOIDFunctionAddress: [ BOOL, { hFuncSet: HCRYPTOIDFUNCSET, dwEncodingType: DWORD, pwszDll: LPCWSTR, dwFlags: DWORD, ppvFuncAddr: _void.Δ.Δ, phFuncAddr: HCRYPTOIDFUNCADDR.Δ } ],
  CryptFreeOIDFunctionAddress: [ BOOL, { hFuncAddr: HCRYPTOIDFUNCADDR, dwFlags: DWORD } ],
  CryptRegisterOIDFunction: [ BOOL, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszDll: LPCWSTR, pszOverrideFuncName: LPCSTR } ],
  CryptUnregisterOIDFunction: [ BOOL, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR } ],
  CryptRegisterDefaultOIDFunction: [ BOOL, { dwEncodingType: DWORD, pszFuncName: LPCSTR, dwIndex: DWORD, pwszDll: LPCWSTR } ],
  CryptUnregisterDefaultOIDFunction: [ BOOL, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pwszDll: LPCWSTR } ],
  CryptSetOIDFunctionValue: [ BOOL, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszValueName: LPCWSTR, dwValueType: DWORD, pbValueData: BYTE.Δ, cbValueData: DWORD } ],
  CryptGetOIDFunctionValue: [ BOOL, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, pwszValueName: LPCWSTR, pdwValueType: DWORD.Δ, pbValueData: BYTE.Δ, pcbValueData: DWORD.Δ } ],
  CryptEnumOIDFunction: [ BOOL, { dwEncodingType: DWORD, pszFuncName: LPCSTR, pszOID: LPCSTR, dwFlags: DWORD, pvArg: _void.Δ, pfnEnumOIDFunc: PFN_CRYPT_ENUM_OID_FUNC } ],
  CryptFindOIDInfo: [ PCCRYPT_OID_INFO, { dwKeyType: DWORD, pvKey: _void.Δ, dwGroupId: DWORD } ],
  CryptRegisterOIDInfo: [ BOOL, { pInfo: PCCRYPT_OID_INFO, dwFlags: DWORD } ],
  CryptUnregisterOIDInfo: [ BOOL, { pInfo: PCCRYPT_OID_INFO } ],
  CryptEnumOIDInfo: [ BOOL, { dwGroupId: DWORD, dwFlags: DWORD, pvArg: _void.Δ, pfnEnumOIDInfo: PFN_CRYPT_ENUM_OID_INFO } ],
  CryptFindLocalizedName: [ LPCWSTR, { pwszCryptName: LPCWSTR } ],
  CryptMsgOpenToEncode: [ HCRYPTMSG, { dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: _void.Δ, pszInnerContentObjID: LPSTR, pStreamInfo: PCMSG_STREAM_INFO } ],
  CryptMsgCalculateEncodedLength: [ DWORD, { dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, pvMsgEncodeInfo: _void.Δ, pszInnerContentObjID: LPSTR, cbData: DWORD } ],
  CryptMsgOpenToDecode: [ HCRYPTMSG, { dwMsgEncodingType: DWORD, dwFlags: DWORD, dwMsgType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, pRecipientInfo: PCERT_INFO, pStreamInfo: PCMSG_STREAM_INFO } ],
  CryptMsgDuplicate: [ HCRYPTMSG, { hCryptMsg: HCRYPTMSG } ],
  CryptMsgClose: [ BOOL, { hCryptMsg: HCRYPTMSG } ],
  CryptMsgUpdate: [ BOOL, { hCryptMsg: HCRYPTMSG, pbData: BYTE.Δ, cbData: DWORD, fFinal: BOOL } ],
  CryptMsgGetParam: [ BOOL, { hCryptMsg: HCRYPTMSG, dwParamType: DWORD, dwIndex: DWORD, pvData: _void.Δ, pcbData: DWORD.Δ } ],
  CryptMsgControl: [ BOOL, { hCryptMsg: HCRYPTMSG, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: _void.Δ } ],
  CryptMsgVerifyCountersignatureEncoded: [ BOOL, { hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE, cbSignerInfoCountersignature: DWORD, pciCountersigner: PCERT_INFO } ],
  CryptMsgVerifyCountersignatureEncodedEx: [ BOOL, { hCryptProv: HCRYPTPROV_LEGACY, dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, pbSignerInfoCountersignature: PBYTE, cbSignerInfoCountersignature: DWORD, dwSignerType: DWORD, pvSigner: _void.Δ, dwFlags: DWORD, pvReserved: _void.Δ } ],
  CryptMsgCountersign: [ BOOL, { hCryptMsg: HCRYPTMSG, dwIndex: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO } ],
  CryptMsgCountersignEncoded: [ BOOL, { dwEncodingType: DWORD, pbSignerInfo: PBYTE, cbSignerInfo: DWORD, cCountersigners: DWORD, rgCountersigners: PCMSG_SIGNER_ENCODE_INFO, pbCountersignature: PBYTE, pcbCountersignature: PDWORD } ],
  CertOpenStore: [ HCERTSTORE, { lpszStoreProvider: LPCSTR, dwEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pvPara: _void.Δ } ],
  CertDuplicateStore: [ HCERTSTORE, { hCertStore: HCERTSTORE } ],
  CertSaveStore: [ BOOL, { hCertStore: HCERTSTORE, dwEncodingType: DWORD, dwSaveAs: DWORD, dwSaveTo: DWORD, pvSaveToPara: _void.Δ, dwFlags: DWORD } ],
  CertCloseStore: [ BOOL, { hCertStore: HCERTSTORE, dwFlags: DWORD } ],
  CertGetSubjectCertificateFromStore: [ PCCERT_CONTEXT, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pCertId: PCERT_INFO } ],
  CertEnumCertificatesInStore: [ PCCERT_CONTEXT, { hCertStore: HCERTSTORE, pPrevCertContext: PCCERT_CONTEXT } ],
  CertFindCertificateInStore: [ PCCERT_CONTEXT, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: _void.Δ, pPrevCertContext: PCCERT_CONTEXT } ],
  CertGetIssuerCertificateFromStore: [ PCCERT_CONTEXT, { hCertStore: HCERTSTORE, pSubjectContext: PCCERT_CONTEXT, pPrevIssuerContext: PCCERT_CONTEXT, pdwFlags: DWORD.Δ } ],
  CertVerifySubjectCertificateContext: [ BOOL, { pSubject: PCCERT_CONTEXT, pIssuer: PCCERT_CONTEXT, pdwFlags: DWORD.Δ } ],
  CertDuplicateCertificateContext: [ PCCERT_CONTEXT, { pCertContext: PCCERT_CONTEXT } ],
  CertCreateCertificateContext: [ PCCERT_CONTEXT, { dwCertEncodingType: DWORD, pbCertEncoded: BYTE.Δ, cbCertEncoded: DWORD } ],
  CertFreeCertificateContext: [ BOOL, { pCertContext: PCCERT_CONTEXT } ],
  CertSetCertificateContextProperty: [ BOOL, { pCertContext: PCCERT_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: _void.Δ } ],
  CertGetCertificateContextProperty: [ BOOL, { pCertContext: PCCERT_CONTEXT, dwPropId: DWORD, pvData: _void.Δ, pcbData: DWORD.Δ } ],
  CertEnumCertificateContextProperties: [ DWORD, { pCertContext: PCCERT_CONTEXT, dwPropId: DWORD } ],
  CertCreateCTLEntryFromCertificateContextProperties: [ BOOL, { pCertContext: PCCERT_CONTEXT, cOptAttr: DWORD, rgOptAttr: PCRYPT_ATTRIBUTE, dwFlags: DWORD, pvReserved: _void.Δ, pCtlEntry: PCTL_ENTRY, pcbCtlEntry: DWORD.Δ } ],
  CertSetCertificateContextPropertiesFromCTLEntry: [ BOOL, { pCertContext: PCCERT_CONTEXT, pCtlEntry: PCTL_ENTRY, dwFlags: DWORD } ],
  CertGetCRLFromStore: [ PCCRL_CONTEXT, { hCertStore: HCERTSTORE, pIssuerContext: PCCERT_CONTEXT, pPrevCrlContext: PCCRL_CONTEXT, pdwFlags: DWORD.Δ } ],
  CertEnumCRLsInStore: [ PCCRL_CONTEXT, { hCertStore: HCERTSTORE, pPrevCrlContext: PCCRL_CONTEXT } ],
  CertFindCRLInStore: [ PCCRL_CONTEXT, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: _void.Δ, pPrevCrlContext: PCCRL_CONTEXT } ],
  CertDuplicateCRLContext: [ PCCRL_CONTEXT, { pCrlContext: PCCRL_CONTEXT } ],
  CertCreateCRLContext: [ PCCRL_CONTEXT, { dwCertEncodingType: DWORD, pbCrlEncoded: BYTE.Δ, cbCrlEncoded: DWORD } ],
  CertFreeCRLContext: [ BOOL, { pCrlContext: PCCRL_CONTEXT } ],
  CertSetCRLContextProperty: [ BOOL, { pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: _void.Δ } ],
  CertGetCRLContextProperty: [ BOOL, { pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD, pvData: _void.Δ, pcbData: DWORD.Δ } ],
  CertEnumCRLContextProperties: [ DWORD, { pCrlContext: PCCRL_CONTEXT, dwPropId: DWORD } ],
  CertFindCertificateInCRL: [ BOOL, { pCert: PCCERT_CONTEXT, pCrlContext: PCCRL_CONTEXT, dwFlags: DWORD, pvReserved: _void.Δ, ppCrlEntry: PCRL_ENTRY.Δ } ],
  CertIsValidCRLForCertificate: [ BOOL, { pCert: PCCERT_CONTEXT, pCrl: PCCRL_CONTEXT, dwFlags: DWORD, pvReserved: _void.Δ } ],
  CertAddEncodedCertificateToStore: [ BOOL, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pbCertEncoded: BYTE.Δ, cbCertEncoded: DWORD, dwAddDisposition: DWORD, ppCertContext: PCCERT_CONTEXT.Δ } ],
  CertAddCertificateContextToStore: [ BOOL, { hCertStore: HCERTSTORE, pCertContext: PCCERT_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: PCCERT_CONTEXT.Δ } ],
  CertAddSerializedElementToStore: [ BOOL, { hCertStore: HCERTSTORE, pbElement: BYTE.Δ, cbElement: DWORD, dwAddDisposition: DWORD, dwFlags: DWORD, dwContextTypeFlags: DWORD, pdwContextType: DWORD.Δ, ppvContext: _void.Δ.Δ } ],
  CertDeleteCertificateFromStore: [ BOOL, { pCertContext: PCCERT_CONTEXT } ],
  CertAddEncodedCRLToStore: [ BOOL, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, pbCrlEncoded: BYTE.Δ, cbCrlEncoded: DWORD, dwAddDisposition: DWORD, ppCrlContext: PCCRL_CONTEXT.Δ } ],
  CertAddCRLContextToStore: [ BOOL, { hCertStore: HCERTSTORE, pCrlContext: PCCRL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: PCCRL_CONTEXT.Δ } ],
  CertDeleteCRLFromStore: [ BOOL, { pCrlContext: PCCRL_CONTEXT } ],
  CertSerializeCertificateStoreElement: [ BOOL, { pCertContext: PCCERT_CONTEXT, dwFlags: DWORD, pbElement: BYTE.Δ, pcbElement: DWORD.Δ } ],
  CertSerializeCRLStoreElement: [ BOOL, { pCrlContext: PCCRL_CONTEXT, dwFlags: DWORD, pbElement: BYTE.Δ, pcbElement: DWORD.Δ } ],
  CertDuplicateCTLContext: [ PCCTL_CONTEXT, { pCtlContext: PCCTL_CONTEXT } ],
  CertCreateCTLContext: [ PCCTL_CONTEXT, { dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: BYTE.Δ, cbCtlEncoded: DWORD } ],
  CertFreeCTLContext: [ BOOL, { pCtlContext: PCCTL_CONTEXT } ],
  CertSetCTLContextProperty: [ BOOL, { pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD, dwFlags: DWORD, pvData: _void.Δ } ],
  CertGetCTLContextProperty: [ BOOL, { pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD, pvData: _void.Δ, pcbData: DWORD.Δ } ],
  CertEnumCTLContextProperties: [ DWORD, { pCtlContext: PCCTL_CONTEXT, dwPropId: DWORD } ],
  CertEnumCTLsInStore: [ PCCTL_CONTEXT, { hCertStore: HCERTSTORE, pPrevCtlContext: PCCTL_CONTEXT } ],
  CertFindSubjectInCTL: [ PCTL_ENTRY, { dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: _void.Δ, pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD } ],
  CertFindCTLInStore: [ PCCTL_CONTEXT, { hCertStore: HCERTSTORE, dwMsgAndCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: _void.Δ, pPrevCtlContext: PCCTL_CONTEXT } ],
  CertAddEncodedCTLToStore: [ BOOL, { hCertStore: HCERTSTORE, dwMsgAndCertEncodingType: DWORD, pbCtlEncoded: BYTE.Δ, cbCtlEncoded: DWORD, dwAddDisposition: DWORD, ppCtlContext: PCCTL_CONTEXT.Δ } ],
  CertAddCTLContextToStore: [ BOOL, { hCertStore: HCERTSTORE, pCtlContext: PCCTL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: PCCTL_CONTEXT.Δ } ],
  CertSerializeCTLStoreElement: [ BOOL, { pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD, pbElement: BYTE.Δ, pcbElement: DWORD.Δ } ],
  CertDeleteCTLFromStore: [ BOOL, { pCtlContext: PCCTL_CONTEXT } ],
  CertAddCertificateLinkToStore: [ BOOL, { hCertStore: HCERTSTORE, pCertContext: PCCERT_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: PCCERT_CONTEXT.Δ } ],
  CertAddCRLLinkToStore: [ BOOL, { hCertStore: HCERTSTORE, pCrlContext: PCCRL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: PCCRL_CONTEXT.Δ } ],
  CertAddCTLLinkToStore: [ BOOL, { hCertStore: HCERTSTORE, pCtlContext: PCCTL_CONTEXT, dwAddDisposition: DWORD, ppStoreContext: PCCTL_CONTEXT.Δ } ],
  CertAddStoreToCollection: [ BOOL, { hCollectionStore: HCERTSTORE, hSiblingStore: HCERTSTORE, dwUpdateFlags: DWORD, dwPriority: DWORD } ],
  CertRemoveStoreFromCollection: [ _void, { hCollectionStore: HCERTSTORE, hSiblingStore: HCERTSTORE } ],
  CertControlStore: [ BOOL, { hCertStore: HCERTSTORE, dwFlags: DWORD, dwCtrlType: DWORD, pvCtrlPara: _void.Δ } ],
  CertSetStoreProperty: [ BOOL, { hCertStore: HCERTSTORE, dwPropId: DWORD, dwFlags: DWORD, pvData: _void.Δ } ],
  CertGetStoreProperty: [ BOOL, { hCertStore: HCERTSTORE, dwPropId: DWORD, pvData: _void.Δ, pcbData: DWORD.Δ } ],
  CertCreateContext: [ _void, { dwContextType: DWORD, dwEncodingType: DWORD, pbEncoded: BYTE.Δ, cbEncoded: DWORD, dwFlags: DWORD, pCreatePara: PCERT_CREATE_CONTEXT_PARA } ],
  CertRegisterSystemStore: [ BOOL, { pvSystemStore: _void.Δ, dwFlags: DWORD, pStoreInfo: PCERT_SYSTEM_STORE_INFO, pvReserved: _void.Δ } ],
  CertRegisterPhysicalStore: [ BOOL, { pvSystemStore: _void.Δ, dwFlags: DWORD, pwszStoreName: LPCWSTR, pStoreInfo: PCERT_PHYSICAL_STORE_INFO, pvReserved: _void.Δ } ],
  CertUnregisterSystemStore: [ BOOL, { pvSystemStore: _void.Δ, dwFlags: DWORD } ],
  CertUnregisterPhysicalStore: [ BOOL, { pvSystemStore: _void.Δ, dwFlags: DWORD, pwszStoreName: LPCWSTR } ],
  CertEnumSystemStoreLocation: [ BOOL, { dwFlags: DWORD, pvArg: _void.Δ, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE_LOCATION } ],
  CertEnumSystemStore: [ BOOL, { dwFlags: DWORD, pvSystemStoreLocationPara: _void.Δ, pvArg: _void.Δ, pfnEnum: PFN_CERT_ENUM_SYSTEM_STORE } ],
  CertEnumPhysicalStore: [ BOOL, { pvSystemStore: _void.Δ, dwFlags: DWORD, pvArg: _void.Δ, pfnEnum: PFN_CERT_ENUM_PHYSICAL_STORE } ],
  CertGetEnhancedKeyUsage: [ BOOL, { pCertContext: PCCERT_CONTEXT, dwFlags: DWORD, pUsage: PCERT_ENHKEY_USAGE, pcbUsage: DWORD.Δ } ],
  CertSetEnhancedKeyUsage: [ BOOL, { pCertContext: PCCERT_CONTEXT, pUsage: PCERT_ENHKEY_USAGE } ],
  CertAddEnhancedKeyUsageIdentifier: [ BOOL, { pCertContext: PCCERT_CONTEXT, pszUsageIdentifier: LPCSTR } ],
  CertRemoveEnhancedKeyUsageIdentifier: [ BOOL, { pCertContext: PCCERT_CONTEXT, pszUsageIdentifier: LPCSTR } ],
  CertGetValidUsages: [ BOOL, { cCerts: DWORD, rghCerts: PCCERT_CONTEXT.Δ, cNumOIDs: int.Δ, rghOIDs: LPSTR.Δ, pcbOIDs: DWORD.Δ } ],
  CryptMsgGetAndVerifySigner: [ BOOL, { hCryptMsg: HCRYPTMSG, cSignerStore: DWORD, rghSignerStore: HCERTSTORE.Δ, dwFlags: DWORD, ppSigner: PCCERT_CONTEXT.Δ, pdwSignerIndex: DWORD.Δ } ],
  CryptMsgSignCTL: [ BOOL, { dwMsgEncodingType: DWORD, pbCtlContent: BYTE.Δ, cbCtlContent: DWORD, pSignInfo: PCMSG_SIGNED_ENCODE_INFO, dwFlags: DWORD, pbEncoded: BYTE.Δ, pcbEncoded: DWORD.Δ } ],
  CryptMsgEncodeAndSignCTL: [ BOOL, { dwMsgEncodingType: DWORD, pCtlInfo: PCTL_INFO, pSignInfo: PCMSG_SIGNED_ENCODE_INFO, dwFlags: DWORD, pbEncoded: BYTE.Δ, pcbEncoded: DWORD.Δ } ],
  CertFindSubjectInSortedCTL: [ BOOL, { pSubjectIdentifier: PCRYPT_DATA_BLOB, pCtlContext: PCCTL_CONTEXT, dwFlags: DWORD, pvReserved: _void.Δ, pEncodedAttributes: PCRYPT_DER_BLOB } ],
  CertEnumSubjectInSortedCTL: [ BOOL, { pCtlContext: PCCTL_CONTEXT, ppvNextSubject: _void.Δ.Δ, pSubjectIdentifier: PCRYPT_DER_BLOB, pEncodedAttributes: PCRYPT_DER_BLOB } ],
  CertVerifyCTLUsage: [ BOOL, { dwEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: _void.Δ, pSubjectUsage: PCTL_USAGE, dwFlags: DWORD, pVerifyUsagePara: PCTL_VERIFY_USAGE_PARA, pVerifyUsageStatus: PCTL_VERIFY_USAGE_STATUS } ],
  CertVerifyRevocation: [ BOOL, { dwEncodingType: DWORD, dwRevType: DWORD, cContext: DWORD, rgpvContext: PVOID.Δ, dwFlags: DWORD, pRevPara: PCERT_REVOCATION_PARA, pRevStatus: PCERT_REVOCATION_STATUS } ],
  CertCompareIntegerBlob: [ BOOL, { pInt1: PCRYPT_INTEGER_BLOB, pInt2: PCRYPT_INTEGER_BLOB } ],
  CertCompareCertificate: [ BOOL, { dwCertEncodingType: DWORD, pCertId1: PCERT_INFO, pCertId2: PCERT_INFO } ],
  CertCompareCertificateName: [ BOOL, { dwCertEncodingType: DWORD, pCertName1: PCERT_NAME_BLOB, pCertName2: PCERT_NAME_BLOB } ],
  CertIsRDNAttrsInCertificateName: [ BOOL, { dwCertEncodingType: DWORD, dwFlags: DWORD, pCertName: PCERT_NAME_BLOB, pRDN: PCERT_RDN } ],
  CertComparePublicKeyInfo: [ BOOL, { dwCertEncodingType: DWORD, pPublicKey1: PCERT_PUBLIC_KEY_INFO, pPublicKey2: PCERT_PUBLIC_KEY_INFO } ],
  CertGetPublicKeyLength: [ DWORD, { dwCertEncodingType: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO } ],
  CryptVerifyCertificateSignature: [ BOOL, { hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: BYTE.Δ, cbEncoded: DWORD, pPublicKey: PCERT_PUBLIC_KEY_INFO } ],
  CryptVerifyCertificateSignatureEx: [ BOOL, { hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, dwSubjectType: DWORD, pvSubject: _void.Δ, dwIssuerType: DWORD, pvIssuer: _void.Δ, dwFlags: DWORD, pvReserved: _void.Δ } ],
  CryptHashToBeSigned: [ BOOL, { hCryptProv: HCRYPTPROV_LEGACY, dwCertEncodingType: DWORD, pbEncoded: BYTE.Δ, cbEncoded: DWORD, pbComputedHash: BYTE.Δ, pcbComputedHash: DWORD.Δ } ],
  CryptHashCertificate: [ BOOL, { hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, pbEncoded: BYTE.Δ, cbEncoded: DWORD, pbComputedHash: BYTE.Δ, pcbComputedHash: DWORD.Δ } ],
  CryptHashCertificate2: [ BOOL, { pwszCNGHashAlgid: LPCWSTR, dwFlags: DWORD, pvReserved: _void.Δ, pbEncoded: BYTE.Δ, cbEncoded: DWORD, pbComputedHash: BYTE.Δ, pcbComputedHash: DWORD.Δ } ],
  CryptSignCertificate: [ BOOL, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pbEncodedToBeSigned: BYTE.Δ, cbEncodedToBeSigned: DWORD, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: _void.Δ, pbSignature: BYTE.Δ, pcbSignature: DWORD.Δ } ],
  CryptSignAndEncodeCertificate: [ BOOL, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, lpszStructType: LPCSTR, pvStructInfo: _void.Δ, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pvHashAuxInfo: _void.Δ, pbEncoded: BYTE.Δ, pcbEncoded: DWORD.Δ } ],
  CertVerifyTimeValidity: [ LONG, { pTimeToVerify: LPFILETIME, pCertInfo: PCERT_INFO } ],
  CertVerifyCRLTimeValidity: [ LONG, { pTimeToVerify: LPFILETIME, pCrlInfo: PCRL_INFO } ],
  CertVerifyValidityNesting: [ BOOL, { pSubjectInfo: PCERT_INFO, pIssuerInfo: PCERT_INFO } ],
  CertVerifyCRLRevocation: [ BOOL, { dwCertEncodingType: DWORD, pCertId: PCERT_INFO, cCrlInfo: DWORD, rgpCrlInfo: PCRL_INFO.Δ } ],
  CertAlgIdToOID: [ LPCSTR, { dwAlgId: DWORD } ],
  CertOIDToAlgId: [ DWORD, { pszObjId: LPCSTR } ],
  CertFindExtension: [ PCERT_EXTENSION, { pszObjId: LPCSTR, cExtensions: DWORD, rgExtensions: CERT_EXTENSION.Δ } ],
  CertFindAttribute: [ PCRYPT_ATTRIBUTE, { pszObjId: LPCSTR, cAttr: DWORD, rgAttr: CRYPT_ATTRIBUTE.Δ } ],
  CertFindRDNAttr: [ PCERT_RDN_ATTR, { pszObjId: LPCSTR, pName: PCERT_NAME_INFO } ],
  CertGetIntendedKeyUsage: [ BOOL, { dwCertEncodingType: DWORD, pCertInfo: PCERT_INFO, pbKeyUsage: BYTE.Δ, cbKeyUsage: DWORD } ],
  CryptInstallDefaultContext: [ BOOL, { hCryptProv: HCRYPTPROV, dwDefaultType: DWORD, pvDefaultPara: _void.Δ, dwFlags: DWORD, pvReserved: _void.Δ, phDefaultContext: HCRYPTDEFAULTCONTEXT.Δ } ],
  CryptUninstallDefaultContext: [ BOOL, { hDefaultContext: HCRYPTDEFAULTCONTEXT, dwFlags: DWORD, pvReserved: _void.Δ } ],
  CryptExportPublicKeyInfo: [ BOOL, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: DWORD.Δ } ],
  CryptExportPublicKeyInfoEx: [ BOOL, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, dwKeySpec: DWORD, dwCertEncodingType: DWORD, pszPublicKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: _void.Δ, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: DWORD.Δ } ],
  CryptExportPublicKeyInfoFromBCryptKeyHandle: [ BOOL, { hBCryptKey: BCRYPT_KEY_HANDLE, dwCertEncodingType: DWORD, pszPublicKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: _void.Δ, pInfo: PCERT_PUBLIC_KEY_INFO, pcbInfo: DWORD.Δ } ],
  CryptImportPublicKeyInfo: [ BOOL, { hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, phKey: HCRYPTKEY.Δ } ],
  CryptImportPublicKeyInfoEx: [ BOOL, { hCryptProv: HCRYPTPROV, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, aiKeyAlg: ALG_ID, dwFlags: DWORD, pvAuxInfo: _void.Δ, phKey: HCRYPTKEY.Δ } ],
  CryptImportPublicKeyInfoEx2: [ BOOL, { dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, dwFlags: DWORD, pvAuxInfo: _void.Δ, phKey: BCRYPT_KEY_HANDLE.Δ } ],
  CryptAcquireCertificatePrivateKey: [ BOOL, { pCert: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: _void.Δ, phCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE.Δ, pdwKeySpec: DWORD.Δ, pfCallerFreeProvOrNCryptKey: BOOL.Δ } ],
  CryptFindCertificateKeyProvInfo: [ BOOL, { pCert: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: _void.Δ } ],
  CryptImportPKCS8: [ BOOL, { sPrivateKeyAndParams: CRYPT_PKCS8_IMPORT_PARAMS, dwFlags: DWORD, phCryptProv: HCRYPTPROV.Δ, pvAuxInfo: _void.Δ } ],
  CryptExportPKCS8: [ BOOL, { hCryptProv: HCRYPTPROV, dwKeySpec: DWORD, pszPrivateKeyObjId: LPSTR, dwFlags: DWORD, pvAuxInfo: _void.Δ, pbPrivateKeyBlob: BYTE.Δ, pcbPrivateKeyBlob: DWORD.Δ } ],
  CryptExportPKCS8Ex: [ BOOL, { psExportParams: CRYPT_PKCS8_EXPORT_PARAMS.Δ, dwFlags: DWORD, pvAuxInfo: _void.Δ, pbPrivateKeyBlob: BYTE.Δ, pcbPrivateKeyBlob: DWORD.Δ } ],
  CryptHashPublicKeyInfo: [ BOOL, { hCryptProv: HCRYPTPROV_LEGACY, Algid: ALG_ID, dwFlags: DWORD, dwCertEncodingType: DWORD, pInfo: PCERT_PUBLIC_KEY_INFO, pbComputedHash: BYTE.Δ, pcbComputedHash: DWORD.Δ } ],
  CertRDNValueToStrA: [ DWORD, { dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB, psz: LPSTR, csz: DWORD } ],
  CertRDNValueToStrW: [ DWORD, { dwValueType: DWORD, pValue: PCERT_RDN_VALUE_BLOB, psz: LPWSTR, csz: DWORD } ],
  CertNameToStrA: [ DWORD, { dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB, dwStrType: DWORD, psz: LPSTR, csz: DWORD } ],
  CertNameToStrW: [ DWORD, { dwCertEncodingType: DWORD, pName: PCERT_NAME_BLOB, dwStrType: DWORD, psz: LPWSTR, csz: DWORD } ],
  CertStrToNameA: [ BOOL, { dwCertEncodingType: DWORD, pszX500: LPCSTR, dwStrType: DWORD, pvReserved: _void.Δ, pbEncoded: BYTE.Δ, pcbEncoded: DWORD.Δ, ppszError: LPCSTR.Δ } ],
  CertStrToNameW: [ BOOL, { dwCertEncodingType: DWORD, pszX500: LPCWSTR, dwStrType: DWORD, pvReserved: _void.Δ, pbEncoded: BYTE.Δ, pcbEncoded: DWORD.Δ, ppszError: LPCWSTR.Δ } ],
  CertGetNameStringA: [ DWORD, { pCertContext: PCCERT_CONTEXT, dwType: DWORD, dwFlags: DWORD, pvTypePara: _void.Δ, pszNameString: LPSTR, cchNameString: DWORD } ],
  CertGetNameStringW: [ DWORD, { pCertContext: PCCERT_CONTEXT, dwType: DWORD, dwFlags: DWORD, pvTypePara: _void.Δ, pszNameString: LPWSTR, cchNameString: DWORD } ],
  CryptSignMessage: [ BOOL, { pSignPara: PCRYPT_SIGN_MESSAGE_PARA, fDetachedSignature: BOOL, cToBeSigned: DWORD, rgpbToBeSigned: uchar.Δ.Δ, rgcbToBeSigned: DWORD.Δ, pbSignedBlob: BYTE.Δ, pcbSignedBlob: DWORD.Δ } ],
  CryptVerifyMessageSignature: [ BOOL, { pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbSignedBlob: BYTE.Δ, cbSignedBlob: DWORD, pbDecoded: BYTE.Δ, pcbDecoded: DWORD.Δ, ppSignerCert: PCCERT_CONTEXT.Δ } ],
  CryptGetMessageSignerCount: [ LONG, { dwMsgEncodingType: DWORD, pbSignedBlob: BYTE.Δ, cbSignedBlob: DWORD } ],
  CryptGetMessageCertificates: [ HCERTSTORE, { dwMsgAndCertEncodingType: DWORD, hCryptProv: HCRYPTPROV_LEGACY, dwFlags: DWORD, pbSignedBlob: BYTE.Δ, cbSignedBlob: DWORD } ],
  CryptVerifyDetachedMessageSignature: [ BOOL, { pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbDetachedSignBlob: BYTE.Δ, cbDetachedSignBlob: DWORD, cToBeSigned: DWORD, rgpbToBeSigned: uchar.Δ.Δ, rgcbToBeSigned: DWORD.Δ, ppSignerCert: PCCERT_CONTEXT.Δ } ],
  CryptEncryptMessage: [ BOOL, { pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: DWORD, rgpRecipientCert: PCCERT_CONTEXT.Δ, pbToBeEncrypted: BYTE.Δ, cbToBeEncrypted: DWORD, pbEncryptedBlob: BYTE.Δ, pcbEncryptedBlob: DWORD.Δ } ],
  CryptDecryptMessage: [ BOOL, { pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pbEncryptedBlob: BYTE.Δ, cbEncryptedBlob: DWORD, pbDecrypted: BYTE.Δ, pcbDecrypted: DWORD.Δ, ppXchgCert: PCCERT_CONTEXT.Δ } ],
  CryptSignAndEncryptMessage: [ BOOL, { pSignPara: PCRYPT_SIGN_MESSAGE_PARA, pEncryptPara: PCRYPT_ENCRYPT_MESSAGE_PARA, cRecipientCert: DWORD, rgpRecipientCert: PCCERT_CONTEXT.Δ, pbToBeSignedAndEncrypted: BYTE.Δ, cbToBeSignedAndEncrypted: DWORD, pbSignedAndEncryptedBlob: BYTE.Δ, pcbSignedAndEncryptedBlob: DWORD.Δ } ],
  CryptDecryptAndVerifyMessageSignature: [ BOOL, { pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbEncryptedBlob: BYTE.Δ, cbEncryptedBlob: DWORD, pbDecrypted: BYTE.Δ, pcbDecrypted: DWORD.Δ, ppXchgCert: PCCERT_CONTEXT.Δ, ppSignerCert: PCCERT_CONTEXT.Δ } ],
  CryptDecodeMessage: [ BOOL, { dwMsgTypeFlags: DWORD, pDecryptPara: PCRYPT_DECRYPT_MESSAGE_PARA, pVerifyPara: PCRYPT_VERIFY_MESSAGE_PARA, dwSignerIndex: DWORD, pbEncodedBlob: BYTE.Δ, cbEncodedBlob: DWORD, dwPrevInnerContentType: DWORD, pdwMsgType: DWORD.Δ, pdwInnerContentType: DWORD.Δ, pbDecoded: BYTE.Δ, pcbDecoded: DWORD.Δ, ppXchgCert: PCCERT_CONTEXT.Δ, ppSignerCert: PCCERT_CONTEXT.Δ } ],
  CryptHashMessage: [ BOOL, { pHashPara: PCRYPT_HASH_MESSAGE_PARA, fDetachedHash: BOOL, cToBeHashed: DWORD, rgpbToBeHashed: uchar.Δ.Δ, rgcbToBeHashed: DWORD.Δ, pbHashedBlob: BYTE.Δ, pcbHashedBlob: DWORD.Δ, pbComputedHash: BYTE.Δ, pcbComputedHash: DWORD.Δ } ],
  CryptVerifyMessageHash: [ BOOL, { pHashPara: PCRYPT_HASH_MESSAGE_PARA, pbHashedBlob: BYTE.Δ, cbHashedBlob: DWORD, pbToBeHashed: BYTE.Δ, pcbToBeHashed: DWORD.Δ, pbComputedHash: BYTE.Δ, pcbComputedHash: DWORD.Δ } ],
  CryptVerifyDetachedMessageHash: [ BOOL, { pHashPara: PCRYPT_HASH_MESSAGE_PARA, pbDetachedHashBlob: BYTE.Δ, cbDetachedHashBlob: DWORD, cToBeHashed: DWORD, rgpbToBeHashed: uchar.Δ.Δ, rgcbToBeHashed: DWORD.Δ, pbComputedHash: BYTE.Δ, pcbComputedHash: DWORD.Δ } ],
  CryptSignMessageWithKey: [ BOOL, { pSignPara: PCRYPT_KEY_SIGN_MESSAGE_PARA, pbToBeSigned: BYTE.Δ, cbToBeSigned: DWORD, pbSignedBlob: BYTE.Δ, pcbSignedBlob: DWORD.Δ } ],
  CryptVerifyMessageSignatureWithKey: [ BOOL, { pVerifyPara: PCRYPT_KEY_VERIFY_MESSAGE_PARA, pPublicKeyInfo: PCERT_PUBLIC_KEY_INFO, pbSignedBlob: BYTE.Δ, cbSignedBlob: DWORD, pbDecoded: BYTE.Δ, pcbDecoded: DWORD.Δ } ],
  CertOpenSystemStoreA: [ HCERTSTORE, { hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: LPCSTR } ],
  CertOpenSystemStoreW: [ HCERTSTORE, { hProv: HCRYPTPROV_LEGACY, szSubsystemProtocol: LPCWSTR } ],
  CertAddEncodedCertificateToSystemStoreA: [ BOOL, { szCertStoreName: LPCSTR, pbCertEncoded: BYTE.Δ, cbCertEncoded: DWORD } ],
  CertAddEncodedCertificateToSystemStoreW: [ BOOL, { szCertStoreName: LPCWSTR, pbCertEncoded: BYTE.Δ, cbCertEncoded: DWORD } ],
  FindCertsByIssuer: [ HRESULT, { pCertChains: PCERT_CHAIN, pcbCertChains: DWORD.Δ, pcCertChains: DWORD.Δ, pbEncodedIssuerName: BYTE.Δ, cbEncodedIssuerName: DWORD, pwszPurpose: LPCWSTR, dwKeySpec: DWORD } ],
  CryptQueryObject: [ BOOL, { dwObjectType: DWORD, pvObject: _void.Δ, dwExpectedContentTypeFlags: DWORD, dwExpectedFormatTypeFlags: DWORD, dwFlags: DWORD, pdwMsgAndCertEncodingType: DWORD.Δ, pdwContentType: DWORD.Δ, pdwFormatType: DWORD.Δ, phCertStore: HCERTSTORE.Δ, phMsg: HCRYPTMSG.Δ, ppvContext: _void.Δ.Δ } ],
  CryptMemAlloc: [ LPVOID, { cbSize: ULONG } ],
  CryptMemRealloc: [ LPVOID, { pv: LPVOID, cbSize: ULONG } ],
  CryptMemFree: [ _void, { pv: LPVOID } ],
  CryptCreateAsyncHandle: [ BOOL, { dwFlags: DWORD, phAsync: PHCRYPTASYNC } ],
  CryptSetAsyncParam: [ BOOL, { hAsync: HCRYPTASYNC, pszParamOid: LPSTR, pvParam: LPVOID, pfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC } ],
  CryptGetAsyncParam: [ BOOL, { hAsync: HCRYPTASYNC, pszParamOid: LPSTR, ppvParam: LPVOID.Δ, ppfnFree: PFN_CRYPT_ASYNC_PARAM_FREE_FUNC.Δ } ],
  CryptCloseAsyncHandle: [ BOOL, { hAsync: HCRYPTASYNC } ],
  CryptRetrieveObjectByUrlA: [ BOOL, { pszUrl: LPCSTR, pszObjectOid: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: LPVOID.Δ, hAsyncRetrieve: HCRYPTASYNC, pCredentials: PCRYPT_CREDENTIALS, pvVerify: LPVOID, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO } ],
  CryptRetrieveObjectByUrlW: [ BOOL, { pszUrl: LPCWSTR, pszObjectOid: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, ppvObject: LPVOID.Δ, hAsyncRetrieve: HCRYPTASYNC, pCredentials: PCRYPT_CREDENTIALS, pvVerify: LPVOID, pAuxInfo: PCRYPT_RETRIEVE_AUX_INFO } ],
  CryptInstallCancelRetrieval: [ BOOL, { pfnCancel: PFN_CRYPT_CANCEL_RETRIEVAL, pvArg: _void.Δ, dwFlags: DWORD, pvReserved: _void.Δ } ],
  CryptUninstallCancelRetrieval: [ BOOL, { dwFlags: DWORD, pvReserved: _void.Δ } ],
  CryptCancelAsyncRetrieval: [ BOOL, { hAsyncRetrieval: HCRYPTASYNC } ],
  CryptGetObjectUrl: [ BOOL, { pszUrlOid: LPCSTR, pvPara: LPVOID, dwFlags: DWORD, pUrlArray: PCRYPT_URL_new ArrayT, pcbUrlArray: DWORD.Δ, pUrlInfo: PCRYPT_URL_INFO, pcbUrlInfo: DWORD.Δ, pvReserved: LPVOID } ],
  CryptGetTimeValidObject: [ BOOL, { pszTimeValidOid: LPCSTR, pvPara: LPVOID, pIssuer: PCCERT_CONTEXT, pftValidFor: LPFILETIME, dwFlags: DWORD, dwTimeout: DWORD, ppvObject: LPVOID.Δ, pCredentials: PCRYPT_CREDENTIALS, pExtraInfo: PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO } ],
  CryptFlushTimeValidObject: [ BOOL, { pszFlushTimeValidOid: LPCSTR, pvPara: LPVOID, pIssuer: PCCERT_CONTEXT, dwFlags: DWORD, pvReserved: LPVOID } ],
  CryptProtectData: [ BOOL, { pDataIn: DATA_BLOB.Δ, szDataDescr: LPCWSTR, pOptionalEntropy: DATA_BLOB.Δ, pvReserved: PVOID, pPromptStruct: CRYPTPROTECT_PROMPTSTRUCT.Δ, dwFlags: DWORD, pDataOut: DATA_BLOB.Δ } ],
  CryptUnprotectData: [ BOOL, { pDataIn: DATA_BLOB.Δ, ppszDataDescr: LPWSTR.Δ, pOptionalEntropy: DATA_BLOB.Δ, pvReserved: PVOID, pPromptStruct: CRYPTPROTECT_PROMPTSTRUCT.Δ, dwFlags: DWORD, pDataOut: DATA_BLOB.Δ } ],
  CryptUpdateProtectedState: [ BOOL, { pOldSid: PSID, pwszOldPassword: LPCWSTR, dwFlags: DWORD, pdwSuccessCount: DWORD.Δ, pdwFailureCount: DWORD.Δ } ],
  CryptProtectMemory: [ BOOL, { pDataIn: LPVOID, cbDataIn: DWORD, dwFlags: DWORD } ],
  CryptUnprotectMemory: [ BOOL, { pDataIn: LPVOID, cbDataIn: DWORD, dwFlags: DWORD } ],
  CertCreateSelfSignCertificate: [ PCCERT_CONTEXT, { hCryptProvOrNCryptKey: HCRYPTPROV_OR_NCRYPT_KEY_HANDLE, pSubjectIssuerBlob: PCERT_NAME_BLOB, dwFlags: DWORD, pKeyProvInfo: PCRYPT_KEY_PROV_INFO, pSignatureAlgorithm: PCRYPT_ALGORITHM_IDENTIFIER, pStartTime: PSYSTEMTIME, pEndTime: PSYSTEMTIME, pExtensions: PCERT_EXTENSIONS } ],
  CryptGetKeyIdentifierProperty: [ BOOL, { pKeyIdentifier: CRYPT_HASH_BLOB.Δ, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: _void.Δ, pvData: _void.Δ, pcbData: DWORD.Δ } ],
  CryptSetKeyIdentifierProperty: [ BOOL, { pKeyIdentifier: CRYPT_HASH_BLOB.Δ, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: _void.Δ, pvData: _void.Δ } ],
  CryptEnumKeyIdentifierProperties: [ BOOL, { pKeyIdentifier: CRYPT_HASH_BLOB.Δ, dwPropId: DWORD, dwFlags: DWORD, pwszComputerName: LPCWSTR, pvReserved: _void.Δ, pvArg: _void.Δ, pfnEnum: PFN_CRYPT_ENUM_KEYID_PROP } ],
  CryptCreateKeyIdentifierFromCSP: [ BOOL, { dwCertEncodingType: DWORD, pszPubKeyOID: LPCSTR, pPubKeyStruc: PUBLICKEYSTRUC.Δ, cbPubKeyStruc: DWORD, dwFlags: DWORD, pvReserved: _void.Δ, pbHash: BYTE.Δ, pcbHash: DWORD.Δ } ],
  CertCreateCertificateChainEngine: [ BOOL, { pConfig: PCERT_CHAIN_ENGINE_CONFIG, phChainEngine: HCERTCHAINENGINE.Δ } ],
  CertFreeCertificateChainEngine: [ _void, { hChainEngine: HCERTCHAINENGINE } ],
  CertResyncCertificateChainEngine: [ BOOL, { hChainEngine: HCERTCHAINENGINE } ],
  CertGetCertificateChain: [ BOOL, { hChainEngine: HCERTCHAINENGINE, pCertContext: PCCERT_CONTEXT, pTime: LPFILETIME, hAdditionalStore: HCERTSTORE, pChainPara: PCERT_CHAIN_PARA, dwFlags: DWORD, pvReserved: LPVOID, ppChainContext: PCCERT_CHAIN_CONTEXT.Δ } ],
  CertFreeCertificateChain: [ _void, { pChainContext: PCCERT_CHAIN_CONTEXT } ],
  CertDuplicateCertificateChain: [ PCCERT_CHAIN_CONTEXT, { pChainContext: PCCERT_CHAIN_CONTEXT } ],
  CertFindChainInStore: [ PCCERT_CHAIN_CONTEXT, { hCertStore: HCERTSTORE, dwCertEncodingType: DWORD, dwFindFlags: DWORD, dwFindType: DWORD, pvFindPara: _void.Δ, pPrevChainContext: PCCERT_CHAIN_CONTEXT } ],
  CertVerifyCertificateChainPolicy: [ BOOL, { pszPolicyOID: LPCSTR, pChainContext: PCCERT_CHAIN_CONTEXT, pPolicyPara: PCERT_CHAIN_POLICY_PARA, pPolicyStatus: PCERT_CHAIN_POLICY_STATUS } ],
  CryptStringToBinaryA: [ BOOL, { pszString: LPCSTR, cchString: DWORD, dwFlags: DWORD, pbBinary: BYTE.Δ, pcbBinary: DWORD.Δ, pdwSkip: DWORD.Δ, pdwFlags: DWORD.Δ } ],
  CryptStringToBinaryW: [ BOOL, { pszString: LPCWSTR, cchString: DWORD, dwFlags: DWORD, pbBinary: BYTE.Δ, pcbBinary: DWORD.Δ, pdwSkip: DWORD.Δ, pdwFlags: DWORD.Δ } ],
  CryptBinaryToStringA: [ BOOL, { pbBinary: BYTE.Δ, cbBinary: DWORD, dwFlags: DWORD, pszString: LPSTR, pcchString: DWORD.Δ } ],
  CryptBinaryToStringW: [ BOOL, { pbBinary: BYTE.Δ, cbBinary: DWORD, dwFlags: DWORD, pszString: LPWSTR, pcchString: DWORD.Δ } ],
  PFXImportCertStore: [ HCERTSTORE, { pPFX: CRYPT_DATA_BLOB.Δ, szPassword: LPCWSTR, dwFlags: DWORD } ],
  PFXIsPFXBlob: [ BOOL, { pPFX: CRYPT_DATA_BLOB.Δ } ],
  PFXVerifyPassword: [ BOOL, { pPFX: CRYPT_DATA_BLOB.Δ, szPassword: LPCWSTR, dwFlags: DWORD } ],
  PFXExportCertStoreEx: [ BOOL, { hStore: HCERTSTORE, pPFX: CRYPT_DATA_BLOB.Δ, szPassword: LPCWSTR, pvReserved: _void.Δ, dwFlags: DWORD } ],
  PFXExportCertStore: [ BOOL, { hStore: HCERTSTORE, pPFX: CRYPT_DATA_BLOB.Δ, szPassword: LPCWSTR, dwFlags: DWORD } ],
  CertOpenServerOcspResponse: [ HCERT_SERVER_OCSP_RESPONSE, { pChainContext: PCCERT_CHAIN_CONTEXT, dwFlags: DWORD, pvReserved: LPVOID } ],
  CertAddRefServerOcspResponse: [ _void, { hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE } ],
  CertCloseServerOcspResponse: [ _void, { hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE, dwFlags: DWORD } ],
  CertGetServerOcspResponseContext: [ PCCERT_SERVER_OCSP_RESPONSE_CONTEXT, { hServerOcspResponse: HCERT_SERVER_OCSP_RESPONSE, dwFlags: DWORD, pvReserved: LPVOID } ],
  CertAddRefServerOcspResponseContext: [ _void, { pServerOcspResponseContext: PCCERT_SERVER_OCSP_RESPONSE_CONTEXT } ],
  CertFreeServerOcspResponseContext: [ _void, { pServerOcspResponseContext: PCCERT_SERVER_OCSP_RESPONSE_CONTEXT } ],
  CertRetrieveLogoOrBiometricInfo: [ BOOL, { pCertContext: PCCERT_CONTEXT, lpszLogoOrBiometricType: LPCSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, dwFlags: DWORD, pvReserved: _void.Δ, ppbData: uchar.Δ.Δ, pcbData: DWORD.Δ, ppwszMimeType: LPWSTR.Δ } ],
  CertSelectCertificateChains: [ BOOL, { pSelectionContext: LPCGUID, dwFlags: DWORD, pChainParameters: PCCERT_SELECT_CHAIN_PARA, cCriteria: DWORD, rgpCriteria: PCCERT_SELECT_CRITERIA, hStore: HCERTSTORE, pcSelection: PDWORD, pprgpSelection: _CERT_CHAIN_CONTEXT.Δ.Δ.Δ } ],
  CertFreeCertificateChainList: [ _void, { prgpSelection: PCCERT_CHAIN_CONTEXT.Δ } ],
  CryptRetrieveTimeStamp: [ BOOL, { wszUrl: LPCWSTR, dwRetrievalFlags: DWORD, dwTimeout: DWORD, pszHashId: LPCSTR, pPara: CRYPT_TIMESTAMP_PARA.Δ, pbData: BYTE.Δ, cbData: DWORD, ppTsContext: PCRYPT_TIMESTAMP_CONTEXT.Δ, ppTsSigner: PCCERT_CONTEXT.Δ, phStore: HCERTSTORE.Δ } ],
  CryptVerifyTimeStampSignature: [ BOOL, { pbTSContentInfo: BYTE.Δ, cbTSContentInfo: DWORD, pbData: BYTE.Δ, cbData: DWORD, hAdditionalStore: HCERTSTORE, ppTsContext: PCRYPT_TIMESTAMP_CONTEXT.Δ, ppTsSigner: PCCERT_CONTEXT.Δ, phStore: HCERTSTORE.Δ } ],
  QueryUsersOnEncryptedFile: [ DWORD, { lpFileName: LPCWSTR, pUsers: PENCRYPTION_CERTIFICATE_HASH_LIST.Δ } ],
  QueryRecoveryAgentsOnEncryptedFile: [ DWORD, { lpFileName: LPCWSTR, pRecoveryAgents: PENCRYPTION_CERTIFICATE_HASH_LIST.Δ } ],
  RemoveUsersFromEncryptedFile: [ DWORD, { lpFileName: LPCWSTR, pHashes: PENCRYPTION_CERTIFICATE_HASH_LIST } ],
  AddUsersToEncryptedFile: [ DWORD, { lpFileName: LPCWSTR, pEncryptionCertificates: PENCRYPTION_CERTIFICATE_LIST } ],
  SetUserFileEncryptionKey: [ DWORD, { pEncryptionCertificate: PENCRYPTION_CERTIFICATE } ],
  SetUserFileEncryptionKeyEx: [ DWORD, { pEncryptionCertificate: PENCRYPTION_CERTIFICATE, dwCapabilities: DWORD, dwFlags: DWORD, pvReserved: LPVOID } ],
  FreeEncryptionCertificateHashList: [ _void, { pUsers: PENCRYPTION_CERTIFICATE_HASH_LIST } ],
  EncryptionDisable: [ BOOL, { DirPath: LPCWSTR, Disable: BOOL } ],
  DuplicateEncryptionInfoFile: [ DWORD, { SrcFileName: LPCWSTR, DstFileName: LPCWSTR, dwCreationDistribution: DWORD, dwAttributes: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES } ],
  GetEncryptedFileMetadata: [ DWORD, { lpFileName: LPCWSTR, pcbMetadata: PDWORD, ppbMetadata: PBYTE.Δ } ],
  SetEncryptedFileMetadata: [ DWORD, { lpFileName: LPCWSTR, pbOldMetadata: PBYTE, pbNewMetadata: PBYTE, pOwnerHash: PENCRYPTION_CERTIFICATE_HASH, dwOperation: DWORD, pCertificatesAdded: PENCRYPTION_CERTIFICATE_HASH_LIST } ],
  FreeEncryptedFileMetadata: [ _void, { pbMetadata: PBYTE } ],
  I_RpcNsGetBuffer: [ RPC_STATUS, { Message: PRPC_MESSAGE } ],
  I_RpcNsSendReceive: [ RPC_STATUS, { Message: PRPC_MESSAGE, Handle: RPC_BINDING_HANDLE.Δ } ],
  I_RpcNsRaiseException: [ _void, { Message: PRPC_MESSAGE, Status: RPC_STATUS } ],
  I_RpcReBindBuffer: [ RPC_STATUS, { Message: PRPC_MESSAGE } ],
  I_NsServerBindSearch: [ RPC_STATUS, {  } ],
  I_NsClientBindSearch: [ RPC_STATUS, {  } ],
  I_NsClientBindDone: [ _void, {  } ],
  MIDL_user_allocate: [ _void, { size: size_t } ],
  MIDL_user_free: [ _void, { _void.Δ: _void.Δ } ],
  I_RpcDefaultAllocate: [ _void, { bh: handle_t, size: size_t, RealAlloc: new CallbackT(_void.Δ, [uint]).Δ } ],
  I_RpcDefaultFree: [ _void, { bh: handle_t, _void.Δ: _void.Δ, RealFree: new CallbackT(_void, [_void.Δ]).Δ } ],
  NDRCContextBinding: [ RPC_BINDING_HANDLE, { CContext: NDR_CCONTEXT } ],
  NDRCContextMarshall: [ _void, { CContext: NDR_CCONTEXT, pBuff: _void.Δ } ],
  NDRCContextUnmarshall: [ _void, { pCContext: NDR_CCONTEXT.Δ, hBinding: RPC_BINDING_HANDLE, pBuff: _void.Δ, DataRepresentation: ulong } ],
  NDRCContextUnmarshall2: [ _void, { pCContext: NDR_CCONTEXT.Δ, hBinding: RPC_BINDING_HANDLE, pBuff: _void.Δ, DataRepresentation: ulong } ],
  NDRSContextMarshall: [ _void, { CContext: NDR_SCONTEXT, pBuff: _void.Δ, userRunDownIn: NDR_RUNDOWN } ],
  NDRSContextUnmarshall: [ NDR_SCONTEXT, { pBuff: _void.Δ, DataRepresentation: ulong } ],
  NDRSContextMarshallEx: [ _void, { BindingHandle: RPC_BINDING_HANDLE, CContext: NDR_SCONTEXT, pBuff: _void.Δ, userRunDownIn: NDR_RUNDOWN } ],
  NDRSContextMarshall2: [ _void, { BindingHandle: RPC_BINDING_HANDLE, CContext: NDR_SCONTEXT, pBuff: _void.Δ, userRunDownIn: NDR_RUNDOWN, CtxGuard: _void.Δ, Flags: ulong } ],
  NDRSContextUnmarshallEx: [ NDR_SCONTEXT, { BindingHandle: RPC_BINDING_HANDLE, pBuff: _void.Δ, DataRepresentation: ulong } ],
  NDRSContextUnmarshall2: [ NDR_SCONTEXT, { BindingHandle: RPC_BINDING_HANDLE, pBuff: _void.Δ, DataRepresentation: ulong, CtxGuard: _void.Δ, Flags: ulong } ],
  RpcSsDestroyClientContext: [ _void, { ContextHandle: _void.Δ.Δ } ],
  RpcCsGetTags: [ _void, { hBinding: RPC_BINDING_HANDLE, fServerSide: int, pulSendingTag: ulong.Δ, pulDesiredReceivingTag: ulong.Δ, pulReceivingTag: ulong.Δ, pStatus: error_status_t.Δ } ],
  NdrClientGetSupportedSyntaxes: [ RPC_STATUS, { pInf: RPC_CLIENT_INTERFACE.Δ, pCount: ulong.Δ, pArr: _MIDL_SYNTAX_INFO.Δ.Δ } ],
  NdrServerGetSupportedSyntaxes: [ RPC_STATUS, { pInf: RPC_SERVER_INTERFACE.Δ, pCount: ulong.Δ, pArr: _MIDL_SYNTAX_INFO.Δ.Δ, pPreferSyntaxIndex: ulong.Δ } ],
  NdrSimpleTypeMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, FormatChar: uchar } ],
  NdrPointerMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsArrayMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsTagMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStructMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexStructMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonConformantStringMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStringMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrByteCountPointerMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrClientContextMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_CCONTEXT, fCheck: int } ],
  NdrServerContextMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_SCONTEXT, RundownRoutine: NDR_RUNDOWN } ],
  NdrServerContextNewMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ContextHandle: NDR_SCONTEXT, RundownRoutine: NDR_RUNDOWN, pFormat: PFORMAT_STRING } ],
  NdrSimpleTypeUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, FormatChar: uchar } ],
  NdrCsArrayUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrCsTagUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrRangeUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrCorrelationInitialize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: _void.Δ, CacheSize: ulong, flags: ulong } ],
  NdrCorrelationPass: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrCorrelationFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrPointerUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrSimpleStructUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantStructUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantVaryingStructUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrComplexStructUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrFixedArrayUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantArrayUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantVaryingArrayUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrVaryingArrayUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrComplexArrayUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrNonConformantStringUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrConformantStringUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrEncapsulatedUnionUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrNonEncapsulatedUnionUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrByteCountPointerUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrXmitOrRepAsUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrUserMarshalUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrInterfacePointerUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: uchar.Δ.Δ, pFormat: PFORMAT_STRING, fMustAlloc: uchar } ],
  NdrClientContextUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pContextHandle: NDR_CCONTEXT.Δ, BindHandle: RPC_BINDING_HANDLE } ],
  NdrServerContextUnmarshall: [ NDR_SCONTEXT, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrContextHandleInitialize: [ NDR_SCONTEXT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrServerContextNewUnmarshall: [ NDR_SCONTEXT, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrPointerBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsArrayBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsTagBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStructBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexStructBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStringBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonConformantStringBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrByteCountPointerBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrContextHandleSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrPointerMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrContextHandleMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrCsArrayMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrCsTagMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantStructMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrComplexStructMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrConformantStringMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrNonConformantStringMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerMemorySize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrPointerFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrCsArrayFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrSimpleStructFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantStructFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingStructFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexStructFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrFixedArrayFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantArrayFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConformantVaryingArrayFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrVaryingArrayFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrComplexArrayFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrEncapsulatedUnionFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrNonEncapsulatedUnionFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrByteCountPointerFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrXmitOrRepAsFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrInterfacePointerFree: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: uchar.Δ, pFormat: PFORMAT_STRING } ],
  NdrConvert2: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING, NumberParams: long } ],
  NdrConvert: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrUserMarshalSimpleTypeConvert: [ _void, { pFlags: ulong.Δ, pBuffer: uchar.Δ, FormatChar: uchar } ],
  NdrClientInitializeNew: [ _void, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, ProcNum: uint } ],
  NdrServerInitializeNew: [ _void, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC } ],
  NdrServerInitializePartial: [ _void, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, RequestedBufferSize: ulong } ],
  NdrClientInitialize: [ _void, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, ProcNum: uint } ],
  NdrServerInitialize: [ _void, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC } ],
  NdrServerInitializeUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, pRpcMsg: PRPC_MESSAGE } ],
  NdrServerInitializeMarshall: [ _void, { pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrGetBuffer: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, BufferLength: ulong, Handle: RPC_BINDING_HANDLE } ],
  NdrNsGetBuffer: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, BufferLength: ulong, Handle: RPC_BINDING_HANDLE } ],
  NdrSendReceive: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pBufferEnd: uchar.Δ } ],
  NdrNsSendReceive: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pBufferEnd: uchar.Δ, pAutoHandle: RPC_BINDING_HANDLE.Δ } ],
  NdrFreeBuffer: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE } ],
  NdrGetDcomProtocolVersion: [ RPC_STATUS, { pStubMsg: PMIDL_STUB_MESSAGE, pVersion: RPC_VERSION.Δ } ],
  NdrClientCall2: [ CLIENT_CALL_RETURN, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrClientCall: [ CLIENT_CALL_RETURN, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrAsyncClientCall: [ CLIENT_CALL_RETURN, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrDcomAsyncClientCall: [ CLIENT_CALL_RETURN, { pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING } ],
  NdrAsyncServerCall: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  NdrAsyncStubCall: [ _void, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrDcomAsyncStubCall: [ _void, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrStubCall2: [ _void, { pThis: _void.Δ, pChannel: _void.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrServerCall2: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  NdrStubCall: [ _void, { pThis: _void.Δ, pChannel: _void.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrServerCall: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  NdrServerUnmarshall: [ _void, { pChannel: _void.Δ, pRpcMsg: PRPC_MESSAGE, pStubMsg: PMIDL_STUB_MESSAGE, pStubDescriptor: PMIDL_STUB_DESC, pFormat: PFORMAT_STRING, pParamList: _void.Δ } ],
  NdrServerMarshall: [ _void, { pThis: _void.Δ, pChannel: _void.Δ, pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING } ],
  NdrMapCommAndFaultStatus: [ RPC_STATUS, { pStubMsg: PMIDL_STUB_MESSAGE, pCommStatus: ulong.Δ, pFaultStatus: ulong.Δ, Status: RPC_STATUS } ],
  RpcSsAllocate: [ _void, { Size: size_t } ],
  RpcSsDisableAllocate: [ _void, {  } ],
  RpcSsEnableAllocate: [ _void, {  } ],
  RpcSsFree: [ _void, { NodeToFree: _void.Δ } ],
  RpcSsGetThreadHandle: [ RPC_SS_THREAD_HANDLE, {  } ],
  RpcSsSetClientAllocFree: [ _void, { ClientAlloc: RPC_CLIENT_ALLOC.Δ, ClientFree: RPC_CLIENT_FREE.Δ } ],
  RpcSsSetThreadHandle: [ _void, { Id: RPC_SS_THREAD_HANDLE } ],
  RpcSsSwapClientAllocFree: [ _void, { ClientAlloc: RPC_CLIENT_ALLOC.Δ, ClientFree: RPC_CLIENT_FREE.Δ, OldClientAlloc: new CallbackT(_void.Δ, [uint]).Δ.Δ, OldClientFree: new CallbackT(_void, [_void.Δ]).Δ.Δ } ],
  RpcSmAllocate: [ _void, { Size: size_t, pStatus: RPC_STATUS.Δ } ],
  RpcSmClientFree: [ RPC_STATUS, { pNodeToFree: _void.Δ } ],
  RpcSmDestroyClientContext: [ RPC_STATUS, { ContextHandle: _void.Δ.Δ } ],
  RpcSmDisableAllocate: [ RPC_STATUS, {  } ],
  RpcSmEnableAllocate: [ RPC_STATUS, {  } ],
  RpcSmFree: [ RPC_STATUS, { NodeToFree: _void.Δ } ],
  RpcSmGetThreadHandle: [ RPC_SS_THREAD_HANDLE, { pStatus: RPC_STATUS.Δ } ],
  RpcSmSetClientAllocFree: [ RPC_STATUS, { ClientAlloc: RPC_CLIENT_ALLOC.Δ, ClientFree: RPC_CLIENT_FREE.Δ } ],
  RpcSmSetThreadHandle: [ RPC_STATUS, { Id: RPC_SS_THREAD_HANDLE } ],
  RpcSmSwapClientAllocFree: [ RPC_STATUS, { ClientAlloc: RPC_CLIENT_ALLOC.Δ, ClientFree: RPC_CLIENT_FREE.Δ, OldClientAlloc: new CallbackT(_void.Δ, [uint]).Δ.Δ, OldClientFree: new CallbackT(_void, [_void.Δ]).Δ.Δ } ],
  NdrRpcSsEnableAllocate: [ _void, { pMessage: PMIDL_STUB_MESSAGE } ],
  NdrRpcSsDisableAllocate: [ _void, { pMessage: PMIDL_STUB_MESSAGE } ],
  NdrRpcSmSetClientToOsf: [ _void, { pMessage: PMIDL_STUB_MESSAGE } ],
  NdrRpcSmClientAllocate: [ _void, { Size: size_t } ],
  NdrRpcSmClientFree: [ _void, { NodeToFree: _void.Δ } ],
  NdrRpcSsDefaultAllocate: [ _void, { Size: size_t } ],
  NdrRpcSsDefaultFree: [ _void, { NodeToFree: _void.Δ } ],
  NdrFullPointerXlatInit: [ PFULL_PTR_XLAT_TABLES, { NumberOfPointers: ulong, XlatSide: XLAT_SIDE } ],
  NdrFullPointerXlatFree: [ _void, { pXlatTables: PFULL_PTR_XLAT_TABLES } ],
  NdrAllocate: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, Len: size_t } ],
  NdrClearOutParameters: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pFormat: PFORMAT_STRING, ArgAddr: _void.Δ } ],
  NdrOleAllocate: [ _void, { Size: size_t } ],
  NdrOleFree: [ _void, { NodeToFree: _void.Δ } ],
  NdrGetUserMarshalInfo: [ RPC_STATUS, { pFlags: ulong.Δ, InformationLevel: ulong, pMarshalInfo: NDR_USER_MARSHAL_INFO.Δ } ],
  NdrCreateServerInterfaceFromStub: [ RPC_STATUS, { pStub: IRpcStubBuffer.Δ, pServerIf: RPC_SERVER_INTERFACE.Δ } ],
  NdrClientCall3: [ CLIENT_CALL_RETURN, { pProxyInfo: MIDL_STUBLESS_PROXY_INFO.Δ, nProcNum: ulong, pReturnValue: _void.Δ } ],
  Ndr64AsyncClientCall: [ CLIENT_CALL_RETURN, { pProxyInfo: MIDL_STUBLESS_PROXY_INFO.Δ, nProcNum: ulong, pReturnValue: _void.Δ } ],
  Ndr64DcomAsyncClientCall: [ CLIENT_CALL_RETURN, { pProxyInfo: MIDL_STUBLESS_PROXY_INFO.Δ, nProcNum: ulong, pReturnValue: _void.Δ } ],
  Ndr64AsyncServerCall: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  Ndr64AsyncServerCall64: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  Ndr64AsyncServerCallAll: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  Ndr64AsyncStubCall: [ _void, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  Ndr64DcomAsyncStubCall: [ _void, { pThis: IRpcStubBuffer.Δ, pChannel: IRpcChannelBuffer.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrStubCall3: [ _void, { pThis: _void.Δ, pChannel: _void.Δ, pRpcMsg: PRPC_MESSAGE, pdwStubPhase: ulong.Δ } ],
  NdrServerCallAll: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  NdrServerCallNdr64: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  NdrServerCall3: [ _void, { pRpcMsg: PRPC_MESSAGE } ],
  NdrPartialIgnoreClientMarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: _void.Δ } ],
  NdrPartialIgnoreServerUnmarshall: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: _void.Δ.Δ } ],
  NdrPartialIgnoreClientBufferSize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, pMemory: _void.Δ } ],
  NdrPartialIgnoreServerInitialize: [ _void, { pStubMsg: PMIDL_STUB_MESSAGE, ppMemory: _void.Δ.Δ, pFormat: PFORMAT_STRING } ],
  RpcUserFree: [ _void, { AsyncHandle: handle_t, pBuffer: _void.Δ } ],
  SCardEstablishContext: [ LONG, { dwScope: DWORD, pvReserved1: LPCVOID, pvReserved2: LPCVOID, phContext: LPSCARDCONTEXT } ],
  SCardReleaseContext: [ LONG, { hContext: SCARDCONTEXT } ],
  SCardIsValidContext: [ LONG, { hContext: SCARDCONTEXT } ],
  SCardListReaderGroupsA: [ LONG, { hContext: SCARDCONTEXT, mszGroups: LPSTR, pcchGroups: LPDWORD } ],
  SCardListReaderGroupsW: [ LONG, { hContext: SCARDCONTEXT, mszGroups: LPWSTR, pcchGroups: LPDWORD } ],
  SCardListReadersA: [ LONG, { hContext: SCARDCONTEXT, mszGroups: LPCSTR, mszReaders: LPSTR, pcchReaders: LPDWORD } ],
  SCardListReadersW: [ LONG, { hContext: SCARDCONTEXT, mszGroups: LPCWSTR, mszReaders: LPWSTR, pcchReaders: LPDWORD } ],
  SCardListCardsA: [ LONG, { hContext: SCARDCONTEXT, pbAtr: LPCBYTE, rgquidInterfaces: LPCGUID, cguidInterfaceCount: DWORD, mszCards: LPSTR, pcchCards: LPDWORD } ],
  SCardListCardsW: [ LONG, { hContext: SCARDCONTEXT, pbAtr: LPCBYTE, rgquidInterfaces: LPCGUID, cguidInterfaceCount: DWORD, mszCards: LPWSTR, pcchCards: LPDWORD } ],
  SCardListInterfacesA: [ LONG, { hContext: SCARDCONTEXT, szCard: LPCSTR, pguidInterfaces: LPGUID, pcguidInterfaces: LPDWORD } ],
  SCardListInterfacesW: [ LONG, { hContext: SCARDCONTEXT, szCard: LPCWSTR, pguidInterfaces: LPGUID, pcguidInterfaces: LPDWORD } ],
  SCardGetProviderIdA: [ LONG, { hContext: SCARDCONTEXT, szCard: LPCSTR, pguidProviderId: LPGUID } ],
  SCardGetProviderIdW: [ LONG, { hContext: SCARDCONTEXT, szCard: LPCWSTR, pguidProviderId: LPGUID } ],
  SCardGetCardTypeProviderNameA: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCSTR, dwProviderId: DWORD, szProvider: LPSTR, pcchProvider: LPDWORD } ],
  SCardGetCardTypeProviderNameW: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCWSTR, dwProviderId: DWORD, szProvider: LPWSTR, pcchProvider: LPDWORD } ],
  SCardIntroduceReaderGroupA: [ LONG, { hContext: SCARDCONTEXT, szGroupName: LPCSTR } ],
  SCardIntroduceReaderGroupW: [ LONG, { hContext: SCARDCONTEXT, szGroupName: LPCWSTR } ],
  SCardForgetReaderGroupA: [ LONG, { hContext: SCARDCONTEXT, szGroupName: LPCSTR } ],
  SCardForgetReaderGroupW: [ LONG, { hContext: SCARDCONTEXT, szGroupName: LPCWSTR } ],
  SCardIntroduceReaderA: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCSTR, szDeviceName: LPCSTR } ],
  SCardIntroduceReaderW: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szDeviceName: LPCWSTR } ],
  SCardForgetReaderA: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCSTR } ],
  SCardForgetReaderW: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR } ],
  SCardAddReaderToGroupA: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCSTR, szGroupName: LPCSTR } ],
  SCardAddReaderToGroupW: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szGroupName: LPCWSTR } ],
  SCardRemoveReaderFromGroupA: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCSTR, szGroupName: LPCSTR } ],
  SCardRemoveReaderFromGroupW: [ LONG, { hContext: SCARDCONTEXT, szReaderName: LPCWSTR, szGroupName: LPCWSTR } ],
  SCardIntroduceCardTypeA: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCSTR, pguidPrimaryProvider: LPCGUID, rgguidInterfaces: LPCGUID, dwInterfaceCount: DWORD, pbAtr: LPCBYTE, pbAtrMask: LPCBYTE, cbAtrLen: DWORD } ],
  SCardIntroduceCardTypeW: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCWSTR, pguidPrimaryProvider: LPCGUID, rgguidInterfaces: LPCGUID, dwInterfaceCount: DWORD, pbAtr: LPCBYTE, pbAtrMask: LPCBYTE, cbAtrLen: DWORD } ],
  SCardSetCardTypeProviderNameA: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCSTR, dwProviderId: DWORD, szProvider: LPCSTR } ],
  SCardSetCardTypeProviderNameW: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCWSTR, dwProviderId: DWORD, szProvider: LPCWSTR } ],
  SCardForgetCardTypeA: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCSTR } ],
  SCardForgetCardTypeW: [ LONG, { hContext: SCARDCONTEXT, szCardName: LPCWSTR } ],
  SCardFreeMemory: [ LONG, { hContext: SCARDCONTEXT, pvMem: LPCVOID } ],
  SCardAccessStartedEvent: [ HANDLE, {  } ],
  SCardReleaseStartedEvent: [ _void, {  } ],
  SCardLocateCardsA: [ LONG, { hContext: SCARDCONTEXT, mszCards: LPCSTR, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD } ],
  SCardLocateCardsW: [ LONG, { hContext: SCARDCONTEXT, mszCards: LPCWSTR, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD } ],
  SCardLocateCardsByATRA: [ LONG, { hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD } ],
  SCardLocateCardsByATRW: [ LONG, { hContext: SCARDCONTEXT, rgAtrMasks: LPSCARD_ATRMASK, cAtrs: DWORD, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD } ],
  SCardGetStatusChangeA: [ LONG, { hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEA, cReaders: DWORD } ],
  SCardGetStatusChangeW: [ LONG, { hContext: SCARDCONTEXT, dwTimeout: DWORD, rgReaderStates: LPSCARD_READERSTATEW, cReaders: DWORD } ],
  SCardCancel: [ LONG, { hContext: SCARDCONTEXT } ],
  SCardConnectA: [ LONG, { hContext: SCARDCONTEXT, szReader: LPCSTR, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE, pdwActiveProtocol: LPDWORD } ],
  SCardConnectW: [ LONG, { hContext: SCARDCONTEXT, szReader: LPCWSTR, dwShareMode: DWORD, dwPreferredProtocols: DWORD, phCard: LPSCARDHANDLE, pdwActiveProtocol: LPDWORD } ],
  SCardReconnect: [ LONG, { hCard: SCARDHANDLE, dwShareMode: DWORD, dwPreferredProtocols: DWORD, dwInitialization: DWORD, pdwActiveProtocol: LPDWORD } ],
  SCardDisconnect: [ LONG, { hCard: SCARDHANDLE, dwDisposition: DWORD } ],
  SCardBeginTransaction: [ LONG, { hCard: SCARDHANDLE } ],
  SCardEndTransaction: [ LONG, { hCard: SCARDHANDLE, dwDisposition: DWORD } ],
  SCardCancelTransaction: [ LONG, { hCard: SCARDHANDLE } ],
  SCardState: [ LONG, { hCard: SCARDHANDLE, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD } ],
  SCardStatusA: [ LONG, { hCard: SCARDHANDLE, mszReaderNames: LPSTR, pcchReaderLen: LPDWORD, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD } ],
  SCardStatusW: [ LONG, { hCard: SCARDHANDLE, mszReaderNames: LPWSTR, pcchReaderLen: LPDWORD, pdwState: LPDWORD, pdwProtocol: LPDWORD, pbAtr: LPBYTE, pcbAtrLen: LPDWORD } ],
  SCardTransmit: [ LONG, { hCard: SCARDHANDLE, pioSendPci: LPCSCARD_IO_REQUEST, pbSendBuffer: LPCBYTE, cbSendLength: DWORD, pioRecvPci: LPSCARD_IO_REQUEST, pbRecvBuffer: LPBYTE, pcbRecvLength: LPDWORD } ],
  SCardGetTransmitCount: [ LONG, { hCard: SCARDHANDLE, pcTransmitCount: LPDWORD } ],
  SCardControl: [ LONG, { hCard: SCARDHANDLE, dwControlCode: DWORD, lpInBuffer: LPCVOID, cbInBufferSize: DWORD, lpOutBuffer: LPVOID, cbOutBufferSize: DWORD, lpBytesReturned: LPDWORD } ],
  SCardGetAttrib: [ LONG, { hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPBYTE, pcbAttrLen: LPDWORD } ],
  SCardSetAttrib: [ LONG, { hCard: SCARDHANDLE, dwAttrId: DWORD, pbAttr: LPCBYTE, cbAttrLen: DWORD } ],
  SCardUIDlgSelectCardA: [ LONG, { LPOPENCARDNAME_EXA: LPOPENCARDNAME_EXA } ],
  SCardUIDlgSelectCardW: [ LONG, { LPOPENCARDNAME_EXW: LPOPENCARDNAME_EXW } ],
  GetOpenCardNameA: [ LONG, { LPOPENCARDNAMEA: LPOPENCARDNAMEA } ],
  GetOpenCardNameW: [ LONG, { LPOPENCARDNAMEW: LPOPENCARDNAMEW } ],
  SCardDlgExtendedError: [ LONG, {  } ],
  SCardReadCacheA: [ LONG, { hContext: SCARDCONTEXT, CardIdentifier: UUID.Δ, FreshnessCounter: DWORD, LookupName: LPSTR, Data: PBYTE, DataLen: DWORD.Δ } ],
  SCardReadCacheW: [ LONG, { hContext: SCARDCONTEXT, CardIdentifier: UUID.Δ, FreshnessCounter: DWORD, LookupName: LPWSTR, Data: PBYTE, DataLen: DWORD.Δ } ],
  SCardWriteCacheA: [ LONG, { hContext: SCARDCONTEXT, CardIdentifier: UUID.Δ, FreshnessCounter: DWORD, LookupName: LPSTR, Data: PBYTE, DataLen: DWORD } ],
  SCardWriteCacheW: [ LONG, { hContext: SCARDCONTEXT, CardIdentifier: UUID.Δ, FreshnessCounter: DWORD, LookupName: LPWSTR, Data: PBYTE, DataLen: DWORD } ],
  CreatePropertySheetPageA: [ HPROPSHEETPAGE, { constPropSheetPagePointer: LPCPROPSHEETPAGEA } ],
  CreatePropertySheetPageW: [ HPROPSHEETPAGE, { constPropSheetPagePointer: LPCPROPSHEETPAGEW } ],
  DestroyPropertySheetPage: [ BOOL, { HPROPSHEETPAGE: HPROPSHEETPAGE } ],
  PropertySheetA: [ INT_PTR, { LPCPROPSHEETHEADERA: LPCPROPSHEETHEADERA } ],
  PropertySheetW: [ INT_PTR, { LPCPROPSHEETHEADERW: LPCPROPSHEETHEADERW } ],
  EnumPrintersA: [ BOOL, { Flags: DWORD, Name: LPSTR, Level: DWORD, pPrinterEnum: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrintersW: [ BOOL, { Flags: DWORD, Name: LPWSTR, Level: DWORD, pPrinterEnum: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  GetSpoolFileHandle: [ HANDLE, { hPrinter: HANDLE } ],
  CommitSpoolData: [ HANDLE, { hPrinter: HANDLE, hSpoolFile: HANDLE, cbCommit: DWORD } ],
  CloseSpoolFileHandle: [ BOOL, { hPrinter: HANDLE, hSpoolFile: HANDLE } ],
  OpenPrinterA: [ BOOL, { pPrinterName: LPSTR, phPrinter: LPHANDLE, pDefault: LPPRINTER_DEFAULTSA } ],
  OpenPrinterW: [ BOOL, { pPrinterName: LPWSTR, phPrinter: LPHANDLE, pDefault: LPPRINTER_DEFAULTSW } ],
  ResetPrinterA: [ BOOL, { hPrinter: HANDLE, pDefault: LPPRINTER_DEFAULTSA } ],
  ResetPrinterW: [ BOOL, { hPrinter: HANDLE, pDefault: LPPRINTER_DEFAULTSW } ],
  SetJobA: [ BOOL, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, Command: DWORD } ],
  SetJobW: [ BOOL, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, Command: DWORD } ],
  GetJobA: [ BOOL, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetJobW: [ BOOL, { hPrinter: HANDLE, JobId: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  EnumJobsA: [ BOOL, { hPrinter: HANDLE, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumJobsW: [ BOOL, { hPrinter: HANDLE, FirstJob: DWORD, NoJobs: DWORD, Level: DWORD, pJob: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  AddPrinterA: [ HANDLE, { pName: LPSTR, Level: DWORD, pPrinter: LPBYTE } ],
  AddPrinterW: [ HANDLE, { pName: LPWSTR, Level: DWORD, pPrinter: LPBYTE } ],
  DeletePrinter: [ BOOL, { hPrinter: HANDLE } ],
  SetPrinterA: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, Command: DWORD } ],
  SetPrinterW: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, Command: DWORD } ],
  GetPrinterA: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterW: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pPrinter: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  AddPrinterDriverA: [ BOOL, { pName: LPSTR, Level: DWORD, pDriverInfo: LPBYTE } ],
  AddPrinterDriverW: [ BOOL, { pName: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE } ],
  AddPrinterDriverExA: [ BOOL, { pName: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, dwFileCopyFlags: DWORD } ],
  AddPrinterDriverExW: [ BOOL, { pName: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, dwFileCopyFlags: DWORD } ],
  EnumPrinterDriversA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrinterDriversW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  GetPrinterDriverA: [ BOOL, { hPrinter: HANDLE, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriverW: [ BOOL, { hPrinter: HANDLE, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriverDirectoryA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pDriverDirectory: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriverDirectoryW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pDriverDirectory: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  DeletePrinterDriverA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, pDriverName: LPSTR } ],
  DeletePrinterDriverW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, pDriverName: LPWSTR } ],
  DeletePrinterDriverExA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, pDriverName: LPSTR, dwDeleteFlag: DWORD, dwVersionFlag: DWORD } ],
  DeletePrinterDriverExW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, pDriverName: LPWSTR, dwDeleteFlag: DWORD, dwVersionFlag: DWORD } ],
  AddPrintProcessorA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, pPathName: LPSTR, pPrintProcessorName: LPSTR } ],
  AddPrintProcessorW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, pPathName: LPWSTR, pPrintProcessorName: LPWSTR } ],
  EnumPrintProcessorsA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrintProcessorsW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  GetPrintProcessorDirectoryA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrintProcessorDirectoryW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, Level: DWORD, pPrintProcessorInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  EnumPrintProcessorDatatypesA: [ BOOL, { pName: LPSTR, pPrintProcessorName: LPSTR, Level: DWORD, pDatatypes: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPrintProcessorDatatypesW: [ BOOL, { pName: LPWSTR, pPrintProcessorName: LPWSTR, Level: DWORD, pDatatypes: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  DeletePrintProcessorA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, pPrintProcessorName: LPSTR } ],
  DeletePrintProcessorW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, pPrintProcessorName: LPWSTR } ],
  StartDocPrinterA: [ DWORD, { hPrinter: HANDLE, Level: DWORD, pDocInfo: LPBYTE } ],
  StartDocPrinterW: [ DWORD, { hPrinter: HANDLE, Level: DWORD, pDocInfo: LPBYTE } ],
  StartPagePrinter: [ BOOL, { hPrinter: HANDLE } ],
  WritePrinter: [ BOOL, { hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pcWritten: LPDWORD } ],
  FlushPrinter: [ BOOL, { hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pcWritten: LPDWORD, cSleep: DWORD } ],
  EndPagePrinter: [ BOOL, { hPrinter: HANDLE } ],
  AbortPrinter: [ BOOL, { hPrinter: HANDLE } ],
  ReadPrinter: [ BOOL, { hPrinter: HANDLE, pBuf: LPVOID, cbBuf: DWORD, pNoBytesRead: LPDWORD } ],
  EndDocPrinter: [ BOOL, { hPrinter: HANDLE } ],
  AddJobA: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pData: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  AddJobW: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pData: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  ScheduleJob: [ BOOL, { hPrinter: HANDLE, JobId: DWORD } ],
  PrinterProperties: [ BOOL, { hWnd: HWND, hPrinter: HANDLE } ],
  DocumentPropertiesA: [ LONG, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPSTR, pDevModeOutput: PDEVMODEA, pDevModeInput: PDEVMODEA, fMode: DWORD } ],
  DocumentPropertiesW: [ LONG, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPWSTR, pDevModeOutput: PDEVMODEW, pDevModeInput: PDEVMODEW, fMode: DWORD } ],
  AdvancedDocumentPropertiesA: [ LONG, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPSTR, pDevModeOutput: PDEVMODEA, pDevModeInput: PDEVMODEA } ],
  AdvancedDocumentPropertiesW: [ LONG, { hWnd: HWND, hPrinter: HANDLE, pDeviceName: LPWSTR, pDevModeOutput: PDEVMODEW, pDevModeInput: PDEVMODEW } ],
  ExtDeviceMode: [ LONG, { hWnd: HWND, hInst: HANDLE, pDevModeOutput: LPDEVMODEA, pDeviceName: LPSTR, pPort: LPSTR, pDevModeInput: LPDEVMODEA, pProfile: LPSTR, fMode: DWORD } ],
  GetPrinterDataA: [ DWORD, { hPrinter: HANDLE, pValueName: LPSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDataW: [ DWORD, { hPrinter: HANDLE, pValueName: LPWSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDataExA: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDataExW: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR, pType: LPDWORD, pData: LPBYTE, nSize: DWORD, pcbNeeded: LPDWORD } ],
  EnumPrinterDataA: [ DWORD, { hPrinter: HANDLE, dwIndex: DWORD, pValueName: LPSTR, cbValueName: DWORD, pcbValueName: LPDWORD, pType: LPDWORD, pData: LPBYTE, cbData: DWORD, pcbData: LPDWORD } ],
  EnumPrinterDataW: [ DWORD, { hPrinter: HANDLE, dwIndex: DWORD, pValueName: LPWSTR, cbValueName: DWORD, pcbValueName: LPDWORD, pType: LPDWORD, pData: LPBYTE, cbData: DWORD, pcbData: LPDWORD } ],
  EnumPrinterDataExA: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCSTR, pEnumValues: LPBYTE, cbEnumValues: DWORD, pcbEnumValues: LPDWORD, pnEnumValues: LPDWORD } ],
  EnumPrinterDataExW: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCWSTR, pEnumValues: LPBYTE, cbEnumValues: DWORD, pcbEnumValues: LPDWORD, pnEnumValues: LPDWORD } ],
  EnumPrinterKeyA: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCSTR, pSubkey: LPSTR, cbSubkey: DWORD, pcbSubkey: LPDWORD } ],
  EnumPrinterKeyW: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCWSTR, pSubkey: LPWSTR, cbSubkey: DWORD, pcbSubkey: LPDWORD } ],
  SetPrinterDataA: [ DWORD, { hPrinter: HANDLE, pValueName: LPSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  SetPrinterDataW: [ DWORD, { hPrinter: HANDLE, pValueName: LPWSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  SetPrinterDataExA: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  SetPrinterDataExW: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR, Type: DWORD, pData: LPBYTE, cbData: DWORD } ],
  DeletePrinterDataA: [ DWORD, { hPrinter: HANDLE, pValueName: LPSTR } ],
  DeletePrinterDataW: [ DWORD, { hPrinter: HANDLE, pValueName: LPWSTR } ],
  DeletePrinterDataExA: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCSTR, pValueName: LPCSTR } ],
  DeletePrinterDataExW: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCWSTR, pValueName: LPCWSTR } ],
  DeletePrinterKeyA: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCSTR } ],
  DeletePrinterKeyW: [ DWORD, { hPrinter: HANDLE, pKeyName: LPCWSTR } ],
  WaitForPrinterChange: [ DWORD, { hPrinter: HANDLE, Flags: DWORD } ],
  FindFirstPrinterChangeNotification: [ HANDLE, { hPrinter: HANDLE, fdwFilter: DWORD, fdwOptions: DWORD, pPrinterNotifyOptions: PVOID } ],
  FindNextPrinterChangeNotification: [ BOOL, { hChange: HANDLE, pdwChange: PDWORD, pvReserved: LPVOID, ppPrinterNotifyInfo: LPVOID.Δ } ],
  FreePrinterNotifyInfo: [ BOOL, { pPrinterNotifyInfo: PPRINTER_NOTIFY_INFO } ],
  FindClosePrinterChangeNotification: [ BOOL, { hChange: HANDLE } ],
  PrinterMessageBoxA: [ DWORD, { hPrinter: HANDLE, Error: DWORD, hWnd: HWND, pText: LPSTR, pCaption: LPSTR, dwType: DWORD } ],
  PrinterMessageBoxW: [ DWORD, { hPrinter: HANDLE, Error: DWORD, hWnd: HWND, pText: LPWSTR, pCaption: LPWSTR, dwType: DWORD } ],
  ClosePrinter: [ BOOL, { hPrinter: HANDLE } ],
  AddFormA: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE } ],
  AddFormW: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE } ],
  DeleteFormA: [ BOOL, { hPrinter: HANDLE, pFormName: LPSTR } ],
  DeleteFormW: [ BOOL, { hPrinter: HANDLE, pFormName: LPWSTR } ],
  GetFormA: [ BOOL, { hPrinter: HANDLE, pFormName: LPSTR, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetFormW: [ BOOL, { hPrinter: HANDLE, pFormName: LPWSTR, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  SetFormA: [ BOOL, { hPrinter: HANDLE, pFormName: LPSTR, Level: DWORD, pForm: LPBYTE } ],
  SetFormW: [ BOOL, { hPrinter: HANDLE, pFormName: LPWSTR, Level: DWORD, pForm: LPBYTE } ],
  EnumFormsA: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumFormsW: [ BOOL, { hPrinter: HANDLE, Level: DWORD, pForm: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumMonitorsA: [ BOOL, { pName: LPSTR, Level: DWORD, pMonitor: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumMonitorsW: [ BOOL, { pName: LPWSTR, Level: DWORD, pMonitor: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  AddMonitorA: [ BOOL, { pName: LPSTR, Level: DWORD, pMonitors: LPBYTE } ],
  AddMonitorW: [ BOOL, { pName: LPWSTR, Level: DWORD, pMonitors: LPBYTE } ],
  DeleteMonitorA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, pMonitorName: LPSTR } ],
  DeleteMonitorW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, pMonitorName: LPWSTR } ],
  EnumPortsA: [ BOOL, { pName: LPSTR, Level: DWORD, pPort: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  EnumPortsW: [ BOOL, { pName: LPWSTR, Level: DWORD, pPort: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD, pcReturned: LPDWORD } ],
  AddPortA: [ BOOL, { pName: LPSTR, hWnd: HWND, pMonitorName: LPSTR } ],
  AddPortW: [ BOOL, { pName: LPWSTR, hWnd: HWND, pMonitorName: LPWSTR } ],
  ConfigurePortA: [ BOOL, { pName: LPSTR, hWnd: HWND, pPortName: LPSTR } ],
  ConfigurePortW: [ BOOL, { pName: LPWSTR, hWnd: HWND, pPortName: LPWSTR } ],
  DeletePortA: [ BOOL, { pName: LPSTR, hWnd: HWND, pPortName: LPSTR } ],
  DeletePortW: [ BOOL, { pName: LPWSTR, hWnd: HWND, pPortName: LPWSTR } ],
  XcvDataW: [ BOOL, { hXcv: HANDLE, pszDataName: PCWSTR, pInputData: PBYTE, cbInputData: DWORD, pOutputData: PBYTE, cbOutputData: DWORD, pcbOutputNeeded: PDWORD, pdwStatus: PDWORD } ],
  GetDefaultPrinterA: [ BOOL, { pszBuffer: LPSTR, pcchBuffer: LPDWORD } ],
  GetDefaultPrinterW: [ BOOL, { pszBuffer: LPWSTR, pcchBuffer: LPDWORD } ],
  SetDefaultPrinterA: [ BOOL, { pszPrinter: LPCSTR } ],
  SetDefaultPrinterW: [ BOOL, { pszPrinter: LPCWSTR } ],
  SetPortA: [ BOOL, { pName: LPSTR, pPortName: LPSTR, dwLevel: DWORD, pPortInfo: LPBYTE } ],
  SetPortW: [ BOOL, { pName: LPWSTR, pPortName: LPWSTR, dwLevel: DWORD, pPortInfo: LPBYTE } ],
  AddPrinterConnectionA: [ BOOL, { pName: LPSTR } ],
  AddPrinterConnectionW: [ BOOL, { pName: LPWSTR } ],
  DeletePrinterConnectionA: [ BOOL, { pName: LPSTR } ],
  DeletePrinterConnectionW: [ BOOL, { pName: LPWSTR } ],
  ConnectToPrinterDlg: [ HANDLE, { hwnd: HWND, Flags: DWORD } ],
  AddPrintProvidorA: [ BOOL, { pName: LPSTR, level: DWORD, pProvidorInfo: LPBYTE } ],
  AddPrintProvidorW: [ BOOL, { pName: LPWSTR, level: DWORD, pProvidorInfo: LPBYTE } ],
  DeletePrintProvidorA: [ BOOL, { pName: LPSTR, pEnvironment: LPSTR, pPrintProvidorName: LPSTR } ],
  DeletePrintProvidorW: [ BOOL, { pName: LPWSTR, pEnvironment: LPWSTR, pPrintProvidorName: LPWSTR } ],
  IsValidDevmodeA: [ BOOL, { pDevmode: PDEVMODEA, DevmodeSize: size_t } ],
  IsValidDevmodeW: [ BOOL, { pDevmode: PDEVMODEW, DevmodeSize: size_t } ],
  OpenPrinter2A: [ BOOL, { pPrinterName: LPCSTR, phPrinter: LPHANDLE, pDefault: PPRINTER_DEFAULTSA, pOptions: PPRINTER_OPTIONSA } ],
  OpenPrinter2W: [ BOOL, { pPrinterName: LPCWSTR, phPrinter: LPHANDLE, pDefault: PPRINTER_DEFAULTSW, pOptions: PPRINTER_OPTIONSW } ],
  AddPrinterConnection2A: [ BOOL, { hWnd: HWND, pszName: LPCSTR, dwLevel: DWORD, pConnectionInfo: PVOID } ],
  AddPrinterConnection2W: [ BOOL, { hWnd: HWND, pszName: LPCWSTR, dwLevel: DWORD, pConnectionInfo: PVOID } ],
  InstallPrinterDriverFromPackageA: [ HRESULT, { pszServer: LPCSTR, pszInfPath: LPCSTR, pszDriverName: LPCSTR, pszEnvironment: LPCSTR, dwFlags: DWORD } ],
  InstallPrinterDriverFromPackageW: [ HRESULT, { pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszDriverName: LPCWSTR, pszEnvironment: LPCWSTR, dwFlags: DWORD } ],
  UploadPrinterDriverPackageA: [ HRESULT, { pszServer: LPCSTR, pszInfPath: LPCSTR, pszEnvironment: LPCSTR, dwFlags: DWORD, hwnd: HWND, pszDestInfPath: LPSTR, pcchDestInfPath: PULONG } ],
  UploadPrinterDriverPackageW: [ HRESULT, { pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszEnvironment: LPCWSTR, dwFlags: DWORD, hwnd: HWND, pszDestInfPath: LPWSTR, pcchDestInfPath: PULONG } ],
  GetCorePrinterDriversA: [ HRESULT, { pszServer: LPCSTR, pszEnvironment: LPCSTR, pszzCoreDriverDependencies: LPCSTR, cCorePrinterDrivers: DWORD, pCorePrinterDrivers: PCORE_PRINTER_DRIVERA } ],
  GetCorePrinterDriversW: [ HRESULT, { pszServer: LPCWSTR, pszEnvironment: LPCWSTR, pszzCoreDriverDependencies: LPCWSTR, cCorePrinterDrivers: DWORD, pCorePrinterDrivers: PCORE_PRINTER_DRIVERW } ],
  CorePrinterDriverInstalledA: [ HRESULT, { pszServer: LPCSTR, pszEnvironment: LPCSTR, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: DWORDLONG, pbDriverInstalled: BOOL.Δ } ],
  CorePrinterDriverInstalledW: [ HRESULT, { pszServer: LPCWSTR, pszEnvironment: LPCWSTR, CoreDriverGUID: GUID, ftDriverDate: FILETIME, dwlDriverVersion: DWORDLONG, pbDriverInstalled: BOOL.Δ } ],
  GetPrinterDriverPackagePathA: [ HRESULT, { pszServer: LPCSTR, pszEnvironment: LPCSTR, pszLanguage: LPCSTR, pszPackageID: LPCSTR, pszDriverPackageCab: LPSTR, cchDriverPackageCab: DWORD, pcchRequiredSize: LPDWORD } ],
  GetPrinterDriverPackagePathW: [ HRESULT, { pszServer: LPCWSTR, pszEnvironment: LPCWSTR, pszLanguage: LPCWSTR, pszPackageID: LPCWSTR, pszDriverPackageCab: LPWSTR, cchDriverPackageCab: DWORD, pcchRequiredSize: LPDWORD } ],
  DeletePrinterDriverPackageA: [ HRESULT, { pszServer: LPCSTR, pszInfPath: LPCSTR, pszEnvironment: LPCSTR } ],
  DeletePrinterDriverPackageW: [ HRESULT, { pszServer: LPCWSTR, pszInfPath: LPCWSTR, pszEnvironment: LPCWSTR } ],
  ReportJobProcessingProgress: [ HRESULT, { printerHandle: HANDLE, jobId: ULONG, jobOperation: EPrintXPSJobOperation, jobProgress: EPrintXPSJobProgress } ],
  GetPrinterDriver2A: [ BOOL, { hWnd: HWND, hPrinter: HANDLE, pEnvironment: LPSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrinterDriver2W: [ BOOL, { hWnd: HWND, hPrinter: HANDLE, pEnvironment: LPWSTR, Level: DWORD, pDriverInfo: LPBYTE, cbBuf: DWORD, pcbNeeded: LPDWORD } ],
  GetPrintExecutionData: [ BOOL, { pData: PRINT_EXECUTION_DATA.Δ } ],
  _set_purecall_handler: [ _purecall_handler, { _Handler: _purecall_handler } ],
  _get_purecall_handler: [ _purecall_handler, {  } ],
  _set_invalid_parameter_handler: [ _invalid_parameter_handler, { _Handler: _invalid_parameter_handler } ],
  _get_invalid_parameter_handler: [ _invalid_parameter_handler, {  } ],
  _errno: [ _void, {  } ],
  _set_errno: [ errno_t, { _Value: int } ],
  _get_errno: [ errno_t, { _Value: int.Δ } ],
  __doserrno: [ _void, {  } ],
  _set_doserrno: [ errno_t, { _Value: ulong } ],
  _get_doserrno: [ errno_t, { _Value: ulong.Δ } ],
  __sys_errlist: [ _void, {  } ],
  __sys_nerr: [ _void, {  } ],
  _get_pgmptr: [ errno_t, { _Value: char.Δ.Δ } ],
  _get_wpgmptr: [ errno_t, { _Value: ushort.Δ.Δ } ],
  _set_fmode: [ errno_t, { _Mode: int } ],
  _get_fmode: [ errno_t, { _PMode: int.Δ } ],
  exit: [ _void, { _Code: int } ],
  _exit: [ _void, { _Code: int } ],
  abort: [ _void, {  } ],
  _set_abort_behavior: [ _void, { _Flags: uint, _Mask: uint } ],
  abs: [ _void, { _X: int } ],
  labs: [ _void, { _X: long } ],
  llabs: [ _void, { _X: longlong } ],
  _abs64: [ _void, { longlong: longlong } ],
  atexit: [ _void, { new CallbackT(_void, []).Δ: new CallbackT(_void, []).Δ } ],
  atof: [ _void, { _String: char.Δ } ],
  _atof_l: [ _void, { _String: char.Δ, _Locale: _locale_t } ],
  atoi: [ _void, { _Str: char.Δ } ],
  _atoi_l: [ _void, { _Str: char.Δ, _Locale: _locale_t } ],
  atol: [ _void, { _Str: char.Δ } ],
  _atol_l: [ _void, { _Str: char.Δ, _Locale: _locale_t } ],
  bsearch_s: [ _void, { _Key: _void.Δ, _Base: _void.Δ, _NumOfElements: rsize_t, _SizeOfElements: rsize_t, _PtFuncCompare: new CallbackT(int, [_void.Δ, _void.Δ, _void.Δ]).Δ, _Context: _void.Δ } ],
  bsearch: [ _void, { _Key: _void.Δ, _Base: _void.Δ, _NumOfElements: size_t, _SizeOfElements: size_t, _PtFuncCompare: new CallbackT(int, [_void.Δ, _void.Δ]).Δ } ],
  qsort_s: [ _void, { _Base: _void.Δ, _NumOfElements: rsize_t, _SizeOfElements: rsize_t, _PtFuncCompare: new CallbackT(int, [_void.Δ, _void.Δ, _void.Δ]).Δ, _Context: _void.Δ } ],
  qsort: [ _void, { _Base: _void.Δ, _NumOfElements: size_t, _SizeOfElements: size_t, _PtFuncCompare: new CallbackT(int, [_void.Δ, _void.Δ]).Δ } ],
  _byteswap_ushort: [ _void, { _Short: ushort } ],
  _byteswap_ulong: [ _void, { _Long: ulong } ],
  _byteswap_uint64: [ _void, { _Int64: ulonglong } ],
  div: [ div_t, { _Numerator: int, _Denominator: int } ],
  getenv: [ _void, { _VarName: char.Δ } ],
  getenv_s: [ errno_t, { _ReturnSize: size_t.Δ, _DstBuf: char.Δ, _DstSize: rsize_t, _VarName: char.Δ } ],
  _dupenv_s: [ errno_t, { _PBuffer: char.Δ.Δ, _PBufferSizeInBytes: size_t.Δ, _VarName: char.Δ } ],
  _itoa_s: [ errno_t, { _Value: int, _DstBuf: char.Δ, _Size: size_t, _Radix: int } ],
  _itoa: [ _void, { _Value: int, _Dest: char.Δ, _Radix: int } ],
  _i64toa_s: [ errno_t, { _Val: longlong, _DstBuf: char.Δ, _Size: size_t, _Radix: int } ],
  _i64toa: [ _void, { _Val: longlong, _DstBuf: char.Δ, _Radix: int } ],
  _ui64toa_s: [ errno_t, { _Val: ulonglong, _DstBuf: char.Δ, _Size: size_t, _Radix: int } ],
  _ui64toa: [ _void, { _Val: ulonglong, _DstBuf: char.Δ, _Radix: int } ],
  _atoi64: [ _void, { _String: char.Δ } ],
  _atoi64_l: [ _void, { _String: char.Δ, _Locale: _locale_t } ],
  _strtoi64: [ _void, { _String: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int } ],
  _strtoi64_l: [ _void, { _String: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _strtoui64: [ _void, { _String: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int } ],
  _strtoui64_l: [ _void, { _String: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  ldiv: [ ldiv_t, { _Numerator: long, _Denominator: long } ],
  lldiv: [ lldiv_t, { _Numerator: longlong, _Denominator: longlong } ],
  _ltoa_s: [ errno_t, { _Val: long, _DstBuf: char.Δ, _Size: size_t, _Radix: int } ],
  _ltoa: [ _void, { _Value: long, _Dest: char.Δ, _Radix: int } ],
  mblen: [ _void, { _Ch: char.Δ, _MaxCount: size_t } ],
  _mblen_l: [ _void, { _Ch: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _mbstrlen: [ size_t, { _Str: char.Δ } ],
  _mbstrlen_l: [ size_t, { _Str: char.Δ, _Locale: _locale_t } ],
  _mbstrnlen: [ size_t, { _Str: char.Δ, _MaxCount: size_t } ],
  _mbstrnlen_l: [ size_t, { _Str: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  mbtowc: [ _void, { _DstCh: wchar_t.Δ, _SrcCh: char.Δ, _SrcSizeInBytes: size_t } ],
  _mbtowc_l: [ _void, { _DstCh: wchar_t.Δ, _SrcCh: char.Δ, _SrcSizeInBytes: size_t, _Locale: _locale_t } ],
  mbstowcs_s: [ errno_t, { _PtNumOfCharConverted: size_t.Δ, _DstBuf: wchar_t.Δ, _SizeInWords: size_t, _SrcBuf: char.Δ, _MaxCount: size_t } ],
  mbstowcs: [ size_t, { _Dest: wchar_t.Δ, _Source: char.Δ, _MaxCount: size_t } ],
  _mbstowcs_s_l: [ errno_t, { _PtNumOfCharConverted: size_t.Δ, _DstBuf: wchar_t.Δ, _SizeInWords: size_t, _SrcBuf: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  _mbstowcs_l: [ size_t, { _Dest: wchar_t.Δ, _Source: char.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  rand: [ _void, {  } ],
  _set_error_mode: [ _void, { _Mode: int } ],
  srand: [ _void, { _Seed: uint } ],
  strtod: [ _void, { _Str: char.Δ, _EndPtr: char.Δ.Δ } ],
  _strtod_l: [ _void, { _Str: char.Δ, _EndPtr: char.Δ.Δ, _Locale: _locale_t } ],
  strtol: [ _void, { _Str: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int } ],
  _strtol_l: [ _void, { _Str: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  strtoul: [ _void, { _Str: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int } ],
  _strtoul_l: [ _void, { _Str: char.Δ, _EndPtr: char.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  system: [ _void, { _Command: char.Δ } ],
  _ultoa_s: [ errno_t, { _Val: ulong, _DstBuf: char.Δ, _Size: size_t, _Radix: int } ],
  _ultoa: [ _void, { _Value: ulong, _Dest: char.Δ, _Radix: int } ],
  wctomb: [ _void, { _MbCh: char.Δ, _WCh: wchar_t } ],
  _wctomb_l: [ _void, { _MbCh: char.Δ, _WCh: wchar_t, _Locale: _locale_t } ],
  wctomb_s: [ errno_t, { _SizeConverted: int.Δ, _MbCh: char.Δ, _SizeInBytes: rsize_t, _WCh: wchar_t } ],
  _wctomb_s_l: [ errno_t, { _SizeConverted: int.Δ, _MbCh: char.Δ, _SizeInBytes: size_t, _WCh: wchar_t, _Locale: _locale_t } ],
  wcstombs_s: [ errno_t, { _PtNumOfCharConverted: size_t.Δ, _Dst: char.Δ, _DstSizeInBytes: size_t, _Src: wchar_t.Δ, _MaxCountInBytes: size_t } ],
  wcstombs: [ size_t, { _Dest: char.Δ, _Source: wchar_t.Δ, _MaxCount: size_t } ],
  _wcstombs_s_l: [ errno_t, { _PtNumOfCharConverted: size_t.Δ, _Dst: char.Δ, _DstSizeInBytes: size_t, _Src: wchar_t.Δ, _MaxCountInBytes: size_t, _Locale: _locale_t } ],
  _wcstombs_l: [ size_t, { _Dest: char.Δ, _Source: wchar_t.Δ, _MaxCount: size_t, _Locale: _locale_t } ],
  calloc: [ _void, { _Count: size_t, _Size: size_t } ],
  free: [ _void, { _Memory: _void.Δ } ],
  malloc: [ _void, { _Size: size_t } ],
  realloc: [ _void, { _Memory: _void.Δ, _NewSize: size_t } ],
  _recalloc: [ _void, { _Memory: _void.Δ, _Count: size_t, _Size: size_t } ],
  _aligned_free: [ _void, { _Memory: _void.Δ } ],
  _aligned_malloc: [ _void, { _Size: size_t, _Alignment: size_t } ],
  _aligned_offset_malloc: [ _void, { _Size: size_t, _Alignment: size_t, _Offset: size_t } ],
  _aligned_realloc: [ _void, { _Memory: _void.Δ, _NewSize: size_t, _Alignment: size_t } ],
  _aligned_recalloc: [ _void, { _Memory: _void.Δ, _Count: size_t, _Size: size_t, _Alignment: size_t } ],
  _aligned_offset_realloc: [ _void, { _Memory: _void.Δ, _NewSize: size_t, _Alignment: size_t, _Offset: size_t } ],
  _aligned_offset_recalloc: [ _void, { _Memory: _void.Δ, _Count: size_t, _Size: size_t, _Alignment: size_t, _Offset: size_t } ],
  _aligned_msize: [ size_t, { _Memory: _void.Δ, _Alignment: size_t, _Offset: size_t } ],
  _itow_s: [ errno_t, { _Val: int, _DstBuf: wchar_t.Δ, _SizeInWords: size_t, _Radix: int } ],
  _itow: [ wchar_t, { _Value: int, _Dest: wchar_t.Δ, _Radix: int } ],
  _ltow_s: [ errno_t, { _Val: long, _DstBuf: wchar_t.Δ, _SizeInWords: size_t, _Radix: int } ],
  _ltow: [ wchar_t, { _Value: long, _Dest: wchar_t.Δ, _Radix: int } ],
  _ultow_s: [ errno_t, { _Val: ulong, _DstBuf: wchar_t.Δ, _SizeInWords: size_t, _Radix: int } ],
  _ultow: [ wchar_t, { _Value: ulong, _Dest: wchar_t.Δ, _Radix: int } ],
  wcstod: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ } ],
  _wcstod_l: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Locale: _locale_t } ],
  wcstol: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstol_l: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  wcstoul: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstoul_l: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _wgetenv: [ wchar_t, { _VarName: wchar_t.Δ } ],
  _wgetenv_s: [ errno_t, { _ReturnSize: size_t.Δ, _DstBuf: wchar_t.Δ, _DstSizeInWords: size_t, _VarName: wchar_t.Δ } ],
  _wdupenv_s: [ errno_t, { _Buffer: ushort.Δ.Δ, _BufferSizeInWords: size_t.Δ, _VarName: wchar_t.Δ } ],
  _wsystem: [ _void, { _Command: wchar_t.Δ } ],
  _wtof: [ _void, { _Str: wchar_t.Δ } ],
  _wtof_l: [ _void, { _Str: wchar_t.Δ, _Locale: _locale_t } ],
  _wtoi: [ _void, { _Str: wchar_t.Δ } ],
  _wtoi_l: [ _void, { _Str: wchar_t.Δ, _Locale: _locale_t } ],
  _wtol: [ _void, { _Str: wchar_t.Δ } ],
  _wtol_l: [ _void, { _Str: wchar_t.Δ, _Locale: _locale_t } ],
  _i64tow_s: [ errno_t, { _Val: longlong, _DstBuf: wchar_t.Δ, _SizeInWords: size_t, _Radix: int } ],
  _i64tow: [ wchar_t, { _Val: longlong, _DstBuf: wchar_t.Δ, _Radix: int } ],
  _ui64tow_s: [ errno_t, { _Val: ulonglong, _DstBuf: wchar_t.Δ, _SizeInWords: size_t, _Radix: int } ],
  _ui64tow: [ wchar_t, { _Val: ulonglong, _DstBuf: wchar_t.Δ, _Radix: int } ],
  _wtoi64: [ _void, { _Str: wchar_t.Δ } ],
  _wtoi64_l: [ _void, { _Str: wchar_t.Δ, _Locale: _locale_t } ],
  _wcstoi64: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstoi64_l: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _wcstoui64: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int } ],
  _wcstoui64_l: [ _void, { _Str: wchar_t.Δ, _EndPtr: ushort.Δ.Δ, _Radix: int, _Locale: _locale_t } ],
  _fullpath: [ _void, { _FullPath: char.Δ, _Path: char.Δ, _SizeInBytes: size_t } ],
  _ecvt_s: [ errno_t, { _DstBuf: char.Δ, _Size: size_t, _Val: double, _NumOfDights: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _ecvt: [ _void, { _Val: double, _NumOfDigits: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _fcvt_s: [ errno_t, { _DstBuf: char.Δ, _Size: size_t, _Val: double, _NumOfDec: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _fcvt: [ _void, { _Val: double, _NumOfDec: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  _gcvt_s: [ errno_t, { _DstBuf: char.Δ, _Size: size_t, _Val: double, _NumOfDigits: int } ],
  _gcvt: [ _void, { _Val: double, _NumOfDigits: int, _DstBuf: char.Δ } ],
  _atodbl: [ _void, { _Result: _CRT_DOUBLE.Δ, _Str: char.Δ } ],
  _atoldbl: [ _void, { _Result: _LDOUBLE.Δ, _Str: char.Δ } ],
  _atoflt: [ _void, { _Result: _CRT_FLOAT.Δ, _Str: char.Δ } ],
  _atodbl_l: [ _void, { _Result: _CRT_DOUBLE.Δ, _Str: char.Δ, _Locale: _locale_t } ],
  _atoldbl_l: [ _void, { _Result: _LDOUBLE.Δ, _Str: char.Δ, _Locale: _locale_t } ],
  _atoflt_l: [ _void, { _Result: _CRT_FLOAT.Δ, _Str: char.Δ, _Locale: _locale_t } ],
  _lrotl: [ _void, { _Val: ulong, _Shift: int } ],
  _lrotr: [ _void, { _Val: ulong, _Shift: int } ],
  _makepath_s: [ errno_t, { _PathResult: char.Δ, _SizeInWords: size_t, _Drive: char.Δ, _Dir: char.Δ, _Filename: char.Δ, _Ext: char.Δ } ],
  _makepath: [ _void, { _Path: char.Δ, _Drive: char.Δ, _Dir: char.Δ, _Filename: char.Δ, _Ext: char.Δ } ],
  _onexit: [ _onexit_t, { _Func: _onexit_t } ],
  perror: [ _void, { _ErrMsg: char.Δ } ],
  _putenv: [ _void, { _EnvString: char.Δ } ],
  _putenv_s: [ errno_t, { _Name: char.Δ, _Value: char.Δ } ],
  _searchenv_s: [ errno_t, { _Filename: char.Δ, _EnvVar: char.Δ, _ResultPath: char.Δ, _SizeInBytes: size_t } ],
  _searchenv: [ _void, { _Filename: char.Δ, _EnvVar: char.Δ, _ResultPath: char.Δ } ],
  _splitpath: [ _void, { _FullPath: char.Δ, _Drive: char.Δ, _Dir: char.Δ, _Filename: char.Δ, _Ext: char.Δ } ],
  _splitpath_s: [ errno_t, { _FullPath: char.Δ, _Drive: char.Δ, _DriveSize: size_t, _Dir: char.Δ, _DirSize: size_t, _Filename: char.Δ, _FilenameSize: size_t, _Ext: char.Δ, _ExtSize: size_t } ],
  _swab: [ _void, { _Buf1: char.Δ, _Buf2: char.Δ, _SizeInBytes: int } ],
  _wfullpath: [ wchar_t, { _FullPath: wchar_t.Δ, _Path: wchar_t.Δ, _SizeInWords: size_t } ],
  _wmakepath_s: [ errno_t, { _PathResult: wchar_t.Δ, _SIZE: size_t, _Drive: wchar_t.Δ, _Dir: wchar_t.Δ, _Filename: wchar_t.Δ, _Ext: wchar_t.Δ } ],
  _wmakepath: [ _void, { _ResultPath: wchar_t.Δ, _Drive: wchar_t.Δ, _Dir: wchar_t.Δ, _Filename: wchar_t.Δ, _Ext: wchar_t.Δ } ],
  _wperror: [ _void, { _ErrMsg: wchar_t.Δ } ],
  _wputenv: [ _void, { _EnvString: wchar_t.Δ } ],
  _wputenv_s: [ errno_t, { _Name: wchar_t.Δ, _Value: wchar_t.Δ } ],
  _wsearchenv_s: [ errno_t, { _Filename: wchar_t.Δ, _EnvVar: wchar_t.Δ, _ResultPath: wchar_t.Δ, _SizeInWords: size_t } ],
  _wsearchenv: [ _void, { _Filename: wchar_t.Δ, _EnvVar: wchar_t.Δ, _ResultPath: wchar_t.Δ } ],
  _wsplitpath: [ _void, { _FullPath: wchar_t.Δ, _Drive: wchar_t.Δ, _Dir: wchar_t.Δ, _Filename: wchar_t.Δ, _Ext: wchar_t.Δ } ],
  _wsplitpath_s: [ errno_t, { _FullPath: wchar_t.Δ, _Drive: wchar_t.Δ, _DriveSize: size_t, _Dir: wchar_t.Δ, _DirSize: size_t, _Filename: wchar_t.Δ, _FilenameSize: size_t, _Ext: wchar_t.Δ, _ExtSize: size_t } ],
  _seterrormode: [ _void, { _Mode: int } ],
  _beep: [ _void, { _Frequency: uint, _Duration: uint } ],
  _sleep: [ _void, { _Duration: ulong } ],
  ecvt: [ _void, { _Val: double, _NumOfDigits: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  fcvt: [ _void, { _Val: double, _NumOfDec: int, _PtDec: int.Δ, _PtSign: int.Δ } ],
  gcvt: [ _void, { _Val: double, _NumOfDigits: int, _DstBuf: char.Δ } ],
  itoa: [ _void, { _Val: int, _DstBuf: char.Δ, _Radix: int } ],
  ltoa: [ _void, { _Val: long, _DstBuf: char.Δ, _Radix: int } ],
  putenv: [ _void, { _EnvString: char.Δ } ],
  swab: [ _void, { _Buf1: char.Δ, _Buf2: char.Δ, _SizeInBytes: int } ],
  ultoa: [ _void, { _Val: ulong, _Dstbuf: char.Δ, _Radix: int } ],
  onexit: [ _onexit_t, { _Func: _onexit_t } ],
  IUnknown_QueryInterface_Proxy: [ HRESULT, { This: IUnknown.Δ, riid: IID.Δ, ppvObject: _void.Δ.Δ } ],
  IUnknown_QueryInterface_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IUnknown_AddRef_Proxy: [ ULONG, { This: IUnknown.Δ } ],
  IUnknown_AddRef_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IUnknown_Release_Proxy: [ ULONG, { This: IUnknown.Δ } ],
  IUnknown_Release_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IClassFactory_RemoteCreateInstance_Proxy: [ HRESULT, { This: IClassFactory.Δ, riid: IID.Δ, ppvObject: IUnknown.Δ.Δ } ],
  IClassFactory_RemoteCreateInstance_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IClassFactory_RemoteLockServer_Proxy: [ HRESULT, { This: IClassFactory.Δ, fLock: BOOL } ],
  IClassFactory_RemoteLockServer_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IClassFactory_CreateInstance_Proxy: [ HRESULT, { This: IClassFactory.Δ, pUnkOuter: IUnknown.Δ, riid: IID.Δ, ppvObject: _void.Δ.Δ } ],
  IClassFactory_CreateInstance_Stub: [ HRESULT, { This: IClassFactory.Δ, riid: IID.Δ, ppvObject: IUnknown.Δ.Δ } ],
  IClassFactory_LockServer_Proxy: [ HRESULT, { This: IClassFactory.Δ, fLock: BOOL } ],
  IClassFactory_LockServer_Stub: [ HRESULT, { This: IClassFactory.Δ, fLock: BOOL } ],
  IEnumUnknown_RemoteNext_Proxy: [ HRESULT, { This: IEnumUnknown.Δ, celt: ULONG, rgelt: IUnknown.Δ.Δ, pceltFetched: ULONG.Δ } ],
  IEnumUnknown_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IBindCtx_RemoteSetBindOptions_Proxy: [ HRESULT, { This: IBindCtx.Δ, pbindopts: BIND_OPTS2.Δ } ],
  IBindCtx_RemoteSetBindOptions_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IBindCtx_RemoteGetBindOptions_Proxy: [ HRESULT, { This: IBindCtx.Δ, pbindopts: BIND_OPTS2.Δ } ],
  IBindCtx_RemoteGetBindOptions_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumMoniker_RemoteNext_Proxy: [ HRESULT, { This: IEnumMoniker.Δ, celt: ULONG, rgelt: IMoniker.Δ.Δ, pceltFetched: ULONG.Δ } ],
  IEnumMoniker_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IRunnableObject_RemoteIsRunning_Proxy: [ HRESULT, { This: IRunnableObject.Δ } ],
  IRunnableObject_RemoteIsRunning_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IMoniker_RemoteBindToObject_Proxy: [ HRESULT, { This: IMoniker.Δ, pbc: IBindCtx.Δ, pmkToLeft: IMoniker.Δ, riidResult: IID.Δ, ppvResult: IUnknown.Δ.Δ } ],
  IMoniker_RemoteBindToObject_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IMoniker_RemoteBindToStorage_Proxy: [ HRESULT, { This: IMoniker.Δ, pbc: IBindCtx.Δ, pmkToLeft: IMoniker.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  IMoniker_RemoteBindToStorage_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumString_RemoteNext_Proxy: [ HRESULT, { This: IEnumString.Δ, celt: ULONG, rgelt: LPOLESTR.Δ, pceltFetched: ULONG.Δ } ],
  IEnumString_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ISequentialStream_RemoteRead_Proxy: [ HRESULT, { This: ISequentialStream.Δ, pv: byte.Δ, cb: ULONG, pcbRead: ULONG.Δ } ],
  ISequentialStream_RemoteRead_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ISequentialStream_RemoteWrite_Proxy: [ HRESULT, { This: ISequentialStream.Δ, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  ISequentialStream_RemoteWrite_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IStream_RemoteSeek_Proxy: [ HRESULT, { This: IStream.Δ, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: ULARGE_INTEGER.Δ } ],
  IStream_RemoteSeek_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IStream_RemoteCopyTo_Proxy: [ HRESULT, { This: IStream.Δ, pstm: IStream.Δ, cb: ULARGE_INTEGER, pcbRead: ULARGE_INTEGER.Δ, pcbWritten: ULARGE_INTEGER.Δ } ],
  IStream_RemoteCopyTo_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumSTATSTG_RemoteNext_Proxy: [ HRESULT, { This: IEnumSTATSTG.Δ, celt: ULONG, rgelt: STATSTG.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATSTG_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IStorage_RemoteOpenStream_Proxy: [ HRESULT, { This: IStorage.Δ, pwcsName: OLECHAR.Δ, cbReserved1: ulong, reserved1: byte.Δ, grfMode: DWORD, reserved2: DWORD, ppstm: IStream.Δ.Δ } ],
  IStorage_RemoteOpenStream_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IStorage_RemoteCopyTo_Proxy: [ HRESULT, { This: IStorage.Δ, ciidExclude: DWORD, rgiidExclude: IID.Δ, snbExclude: SNB, pstgDest: IStorage.Δ } ],
  IStorage_RemoteCopyTo_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IStorage_RemoteEnumElements_Proxy: [ HRESULT, { This: IStorage.Δ, reserved1: DWORD, cbReserved2: ulong, reserved2: byte.Δ, reserved3: DWORD, ppenum: IEnumSTATSTG.Δ.Δ } ],
  IStorage_RemoteEnumElements_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ILockBytes_RemoteReadAt_Proxy: [ HRESULT, { This: ILockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: byte.Δ, cb: ULONG, pcbRead: ULONG.Δ } ],
  ILockBytes_RemoteReadAt_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ILockBytes_RemoteWriteAt_Proxy: [ HRESULT, { This: ILockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  ILockBytes_RemoteWriteAt_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumFORMATETC_RemoteNext_Proxy: [ HRESULT, { This: IEnumFORMATETC.Δ, celt: ULONG, rgelt: FORMATETC.Δ, pceltFetched: ULONG.Δ } ],
  IEnumFORMATETC_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumSTATDATA_RemoteNext_Proxy: [ HRESULT, { This: IEnumSTATDATA.Δ, celt: ULONG, rgelt: STATDATA.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATDATA_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IAdviseSink_RemoteOnDataChange_Proxy: [ HRESULT, { This: IAdviseSink.Δ, pFormatetc: FORMATETC.Δ, pStgmed: ASYNC_STGMEDIUM.Δ } ],
  IAdviseSink_RemoteOnDataChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IAdviseSink_RemoteOnViewChange_Proxy: [ HRESULT, { This: IAdviseSink.Δ, dwAspect: DWORD, lindex: LONG } ],
  IAdviseSink_RemoteOnViewChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IAdviseSink_RemoteOnRename_Proxy: [ HRESULT, { This: IAdviseSink.Δ, pmk: IMoniker.Δ } ],
  IAdviseSink_RemoteOnRename_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IAdviseSink_RemoteOnSave_Proxy: [ HRESULT, { This: IAdviseSink.Δ } ],
  IAdviseSink_RemoteOnSave_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IAdviseSink_RemoteOnClose_Proxy: [ HRESULT, { This: IAdviseSink.Δ } ],
  IAdviseSink_RemoteOnClose_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ, pFormatetc: FORMATETC.Δ, pStgmed: ASYNC_STGMEDIUM.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ, dwAspect: DWORD, lindex: LONG } ],
  AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnRename_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ, pmk: IMoniker.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnRename_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnRename_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnRename_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnSave_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnSave_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnSave_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnSave_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnClose_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_RemoteOnClose_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnClose_Proxy: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_RemoteOnClose_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IAdviseSink2_RemoteOnLinkSrcChange_Proxy: [ HRESULT, { This: IAdviseSink2.Δ, pmk: IMoniker.Δ } ],
  IAdviseSink2_RemoteOnLinkSrcChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy: [ HRESULT, { This: AsyncIAdviseSink2.Δ, pmk: IMoniker.Δ } ],
  AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy: [ HRESULT, { This: AsyncIAdviseSink2.Δ } ],
  AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IDataObject_RemoteGetData_Proxy: [ HRESULT, { This: IDataObject.Δ, pformatetcIn: FORMATETC.Δ, pRemoteMedium: STGMEDIUM.Δ } ],
  IDataObject_RemoteGetData_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IDataObject_RemoteGetDataHere_Proxy: [ HRESULT, { This: IDataObject.Δ, pformatetc: FORMATETC.Δ, pRemoteMedium: STGMEDIUM.Δ } ],
  IDataObject_RemoteGetDataHere_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IDataObject_RemoteSetData_Proxy: [ HRESULT, { This: IDataObject.Δ, pformatetc: FORMATETC.Δ, pmedium: FLAG_STGMEDIUM.Δ, fRelease: BOOL } ],
  IDataObject_RemoteSetData_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IFillLockBytes_RemoteFillAppend_Proxy: [ HRESULT, { This: IFillLockBytes.Δ, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  IFillLockBytes_RemoteFillAppend_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IFillLockBytes_RemoteFillAt_Proxy: [ HRESULT, { This: IFillLockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  IFillLockBytes_RemoteFillAt_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ASYNC_STGMEDIUM_UserSize: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  ASYNC_STGMEDIUM_UserMarshal: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  ASYNC_STGMEDIUM_UserUnmarshal: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  ASYNC_STGMEDIUM_UserFree: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  CLIPFORMAT_UserSize: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  CLIPFORMAT_UserMarshal: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  CLIPFORMAT_UserUnmarshal: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  CLIPFORMAT_UserFree: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  FLAG_STGMEDIUM_UserSize: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  FLAG_STGMEDIUM_UserMarshal: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  FLAG_STGMEDIUM_UserUnmarshal: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  FLAG_STGMEDIUM_UserFree: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  HBITMAP_UserSize: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HBITMAP_UserMarshal: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HBITMAP_UserUnmarshal: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HBITMAP_UserFree: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HDC_UserSize: [ _void, { HDC.Δ: HDC.Δ } ],
  HDC_UserMarshal: [ _void, { HDC.Δ: HDC.Δ } ],
  HDC_UserUnmarshal: [ _void, { HDC.Δ: HDC.Δ } ],
  HDC_UserFree: [ _void, { HDC.Δ: HDC.Δ } ],
  HICON_UserSize: [ _void, { HICON.Δ: HICON.Δ } ],
  HICON_UserMarshal: [ _void, { HICON.Δ: HICON.Δ } ],
  HICON_UserUnmarshal: [ _void, { HICON.Δ: HICON.Δ } ],
  HICON_UserFree: [ _void, { HICON.Δ: HICON.Δ } ],
  SNB_UserSize: [ _void, { SNB.Δ: SNB.Δ } ],
  SNB_UserMarshal: [ _void, { SNB.Δ: SNB.Δ } ],
  SNB_UserUnmarshal: [ _void, { SNB.Δ: SNB.Δ } ],
  SNB_UserFree: [ _void, { SNB.Δ: SNB.Δ } ],
  STGMEDIUM_UserSize: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  STGMEDIUM_UserMarshal: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  STGMEDIUM_UserUnmarshal: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  STGMEDIUM_UserFree: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  ASYNC_STGMEDIUM_UserSize64: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  ASYNC_STGMEDIUM_UserMarshal64: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  ASYNC_STGMEDIUM_UserUnmarshal64: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  ASYNC_STGMEDIUM_UserFree64: [ _void, { ASYNC_STGMEDIUM.Δ: ASYNC_STGMEDIUM.Δ } ],
  CLIPFORMAT_UserSize64: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  CLIPFORMAT_UserMarshal64: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  CLIPFORMAT_UserUnmarshal64: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  CLIPFORMAT_UserFree64: [ _void, { CLIPFORMAT.Δ: CLIPFORMAT.Δ } ],
  FLAG_STGMEDIUM_UserSize64: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  FLAG_STGMEDIUM_UserMarshal64: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  FLAG_STGMEDIUM_UserUnmarshal64: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  FLAG_STGMEDIUM_UserFree64: [ _void, { FLAG_STGMEDIUM.Δ: FLAG_STGMEDIUM.Δ } ],
  HBITMAP_UserSize64: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HBITMAP_UserMarshal64: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HBITMAP_UserUnmarshal64: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HBITMAP_UserFree64: [ _void, { HBITMAP.Δ: HBITMAP.Δ } ],
  HDC_UserSize64: [ _void, { HDC.Δ: HDC.Δ } ],
  HDC_UserMarshal64: [ _void, { HDC.Δ: HDC.Δ } ],
  HDC_UserUnmarshal64: [ _void, { HDC.Δ: HDC.Δ } ],
  HDC_UserFree64: [ _void, { HDC.Δ: HDC.Δ } ],
  HICON_UserSize64: [ _void, { HICON.Δ: HICON.Δ } ],
  HICON_UserMarshal64: [ _void, { HICON.Δ: HICON.Δ } ],
  HICON_UserUnmarshal64: [ _void, { HICON.Δ: HICON.Δ } ],
  HICON_UserFree64: [ _void, { HICON.Δ: HICON.Δ } ],
  SNB_UserSize64: [ _void, { SNB.Δ: SNB.Δ } ],
  SNB_UserMarshal64: [ _void, { SNB.Δ: SNB.Δ } ],
  SNB_UserUnmarshal64: [ _void, { SNB.Δ: SNB.Δ } ],
  SNB_UserFree64: [ _void, { SNB.Δ: SNB.Δ } ],
  STGMEDIUM_UserSize64: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  STGMEDIUM_UserMarshal64: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  STGMEDIUM_UserUnmarshal64: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  STGMEDIUM_UserFree64: [ _void, { STGMEDIUM.Δ: STGMEDIUM.Δ } ],
  IEnumUnknown_Next_Proxy: [ HRESULT, { This: IEnumUnknown.Δ, celt: ULONG, rgelt: IUnknown.Δ.Δ, pceltFetched: ULONG.Δ } ],
  IEnumUnknown_Next_Stub: [ HRESULT, { This: IEnumUnknown.Δ, celt: ULONG, rgelt: IUnknown.Δ.Δ, pceltFetched: ULONG.Δ } ],
  IBindCtx_SetBindOptions_Proxy: [ HRESULT, { This: IBindCtx.Δ, pbindopts: BIND_OPTS.Δ } ],
  IBindCtx_SetBindOptions_Stub: [ HRESULT, { This: IBindCtx.Δ, pbindopts: BIND_OPTS2.Δ } ],
  IBindCtx_GetBindOptions_Proxy: [ HRESULT, { This: IBindCtx.Δ, pbindopts: BIND_OPTS.Δ } ],
  IBindCtx_GetBindOptions_Stub: [ HRESULT, { This: IBindCtx.Δ, pbindopts: BIND_OPTS2.Δ } ],
  IEnumMoniker_Next_Proxy: [ HRESULT, { This: IEnumMoniker.Δ, celt: ULONG, rgelt: IMoniker.Δ.Δ, pceltFetched: ULONG.Δ } ],
  IEnumMoniker_Next_Stub: [ HRESULT, { This: IEnumMoniker.Δ, celt: ULONG, rgelt: IMoniker.Δ.Δ, pceltFetched: ULONG.Δ } ],
  IRunnableObject_IsRunning_Proxy: [ BOOL, { This: IRunnableObject.Δ } ],
  IRunnableObject_IsRunning_Stub: [ HRESULT, { This: IRunnableObject.Δ } ],
  IMoniker_BindToObject_Proxy: [ HRESULT, { This: IMoniker.Δ, pbc: IBindCtx.Δ, pmkToLeft: IMoniker.Δ, riidResult: IID.Δ, ppvResult: _void.Δ.Δ } ],
  IMoniker_BindToObject_Stub: [ HRESULT, { This: IMoniker.Δ, pbc: IBindCtx.Δ, pmkToLeft: IMoniker.Δ, riidResult: IID.Δ, ppvResult: IUnknown.Δ.Δ } ],
  IMoniker_BindToStorage_Proxy: [ HRESULT, { This: IMoniker.Δ, pbc: IBindCtx.Δ, pmkToLeft: IMoniker.Δ, riid: IID.Δ, ppvObj: _void.Δ.Δ } ],
  IMoniker_BindToStorage_Stub: [ HRESULT, { This: IMoniker.Δ, pbc: IBindCtx.Δ, pmkToLeft: IMoniker.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  IEnumString_Next_Proxy: [ HRESULT, { This: IEnumString.Δ, celt: ULONG, rgelt: LPOLESTR.Δ, pceltFetched: ULONG.Δ } ],
  IEnumString_Next_Stub: [ HRESULT, { This: IEnumString.Δ, celt: ULONG, rgelt: LPOLESTR.Δ, pceltFetched: ULONG.Δ } ],
  ISequentialStream_Read_Proxy: [ HRESULT, { This: ISequentialStream.Δ, pv: _void.Δ, cb: ULONG, pcbRead: ULONG.Δ } ],
  ISequentialStream_Read_Stub: [ HRESULT, { This: ISequentialStream.Δ, pv: byte.Δ, cb: ULONG, pcbRead: ULONG.Δ } ],
  ISequentialStream_Write_Proxy: [ HRESULT, { This: ISequentialStream.Δ, pv: _void.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  ISequentialStream_Write_Stub: [ HRESULT, { This: ISequentialStream.Δ, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  IStream_Seek_Proxy: [ HRESULT, { This: IStream.Δ, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: ULARGE_INTEGER.Δ } ],
  IStream_Seek_Stub: [ HRESULT, { This: IStream.Δ, dlibMove: LARGE_INTEGER, dwOrigin: DWORD, plibNewPosition: ULARGE_INTEGER.Δ } ],
  IStream_CopyTo_Proxy: [ HRESULT, { This: IStream.Δ, pstm: IStream.Δ, cb: ULARGE_INTEGER, pcbRead: ULARGE_INTEGER.Δ, pcbWritten: ULARGE_INTEGER.Δ } ],
  IStream_CopyTo_Stub: [ HRESULT, { This: IStream.Δ, pstm: IStream.Δ, cb: ULARGE_INTEGER, pcbRead: ULARGE_INTEGER.Δ, pcbWritten: ULARGE_INTEGER.Δ } ],
  IEnumSTATSTG_Next_Proxy: [ HRESULT, { This: IEnumSTATSTG.Δ, celt: ULONG, rgelt: STATSTG.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATSTG_Next_Stub: [ HRESULT, { This: IEnumSTATSTG.Δ, celt: ULONG, rgelt: STATSTG.Δ, pceltFetched: ULONG.Δ } ],
  IStorage_OpenStream_Proxy: [ HRESULT, { This: IStorage.Δ, pwcsName: OLECHAR.Δ, reserved1: _void.Δ, grfMode: DWORD, reserved2: DWORD, ppstm: IStream.Δ.Δ } ],
  IStorage_OpenStream_Stub: [ HRESULT, { This: IStorage.Δ, pwcsName: OLECHAR.Δ, cbReserved1: ulong, reserved1: byte.Δ, grfMode: DWORD, reserved2: DWORD, ppstm: IStream.Δ.Δ } ],
  IStorage_CopyTo_Proxy: [ HRESULT, { This: IStorage.Δ, ciidExclude: DWORD, rgiidExclude: IID.Δ, snbExclude: SNB, pstgDest: IStorage.Δ } ],
  IStorage_CopyTo_Stub: [ HRESULT, { This: IStorage.Δ, ciidExclude: DWORD, rgiidExclude: IID.Δ, snbExclude: SNB, pstgDest: IStorage.Δ } ],
  IStorage_EnumElements_Proxy: [ HRESULT, { This: IStorage.Δ, reserved1: DWORD, reserved2: _void.Δ, reserved3: DWORD, ppenum: IEnumSTATSTG.Δ.Δ } ],
  IStorage_EnumElements_Stub: [ HRESULT, { This: IStorage.Δ, reserved1: DWORD, cbReserved2: ulong, reserved2: byte.Δ, reserved3: DWORD, ppenum: IEnumSTATSTG.Δ.Δ } ],
  ILockBytes_ReadAt_Proxy: [ HRESULT, { This: ILockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: _void.Δ, cb: ULONG, pcbRead: ULONG.Δ } ],
  ILockBytes_ReadAt_Stub: [ HRESULT, { This: ILockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: byte.Δ, cb: ULONG, pcbRead: ULONG.Δ } ],
  ILockBytes_WriteAt_Proxy: [ HRESULT, { This: ILockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: _void.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  ILockBytes_WriteAt_Stub: [ HRESULT, { This: ILockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  IEnumFORMATETC_Next_Proxy: [ HRESULT, { This: IEnumFORMATETC.Δ, celt: ULONG, rgelt: FORMATETC.Δ, pceltFetched: ULONG.Δ } ],
  IEnumFORMATETC_Next_Stub: [ HRESULT, { This: IEnumFORMATETC.Δ, celt: ULONG, rgelt: FORMATETC.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATDATA_Next_Proxy: [ HRESULT, { This: IEnumSTATDATA.Δ, celt: ULONG, rgelt: STATDATA.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATDATA_Next_Stub: [ HRESULT, { This: IEnumSTATDATA.Δ, celt: ULONG, rgelt: STATDATA.Δ, pceltFetched: ULONG.Δ } ],
  IAdviseSink_OnDataChange_Proxy: [ _void, { This: IAdviseSink.Δ, pFormatetc: FORMATETC.Δ, pStgmed: STGMEDIUM.Δ } ],
  IAdviseSink_OnDataChange_Stub: [ HRESULT, { This: IAdviseSink.Δ, pFormatetc: FORMATETC.Δ, pStgmed: ASYNC_STGMEDIUM.Δ } ],
  IAdviseSink_OnViewChange_Proxy: [ _void, { This: IAdviseSink.Δ, dwAspect: DWORD, lindex: LONG } ],
  IAdviseSink_OnViewChange_Stub: [ HRESULT, { This: IAdviseSink.Δ, dwAspect: DWORD, lindex: LONG } ],
  IAdviseSink_OnRename_Proxy: [ _void, { This: IAdviseSink.Δ, pmk: IMoniker.Δ } ],
  IAdviseSink_OnRename_Stub: [ HRESULT, { This: IAdviseSink.Δ, pmk: IMoniker.Δ } ],
  IAdviseSink_OnSave_Proxy: [ _void, { This: IAdviseSink.Δ } ],
  IAdviseSink_OnSave_Stub: [ HRESULT, { This: IAdviseSink.Δ } ],
  IAdviseSink_OnClose_Proxy: [ _void, { This: IAdviseSink.Δ } ],
  IAdviseSink_OnClose_Stub: [ HRESULT, { This: IAdviseSink.Δ } ],
  IAdviseSink2_OnLinkSrcChange_Proxy: [ _void, { This: IAdviseSink2.Δ, pmk: IMoniker.Δ } ],
  IAdviseSink2_OnLinkSrcChange_Stub: [ HRESULT, { This: IAdviseSink2.Δ, pmk: IMoniker.Δ } ],
  IDataObject_GetData_Proxy: [ HRESULT, { This: IDataObject.Δ, pformatetcIn: FORMATETC.Δ, pmedium: STGMEDIUM.Δ } ],
  IDataObject_GetData_Stub: [ HRESULT, { This: IDataObject.Δ, pformatetcIn: FORMATETC.Δ, pRemoteMedium: STGMEDIUM.Δ } ],
  IDataObject_GetDataHere_Proxy: [ HRESULT, { This: IDataObject.Δ, pformatetc: FORMATETC.Δ, pmedium: STGMEDIUM.Δ } ],
  IDataObject_GetDataHere_Stub: [ HRESULT, { This: IDataObject.Δ, pformatetc: FORMATETC.Δ, pRemoteMedium: STGMEDIUM.Δ } ],
  IDataObject_SetData_Proxy: [ HRESULT, { This: IDataObject.Δ, pformatetc: FORMATETC.Δ, pmedium: STGMEDIUM.Δ, fRelease: BOOL } ],
  IDataObject_SetData_Stub: [ HRESULT, { This: IDataObject.Δ, pformatetc: FORMATETC.Δ, pmedium: FLAG_STGMEDIUM.Δ, fRelease: BOOL } ],
  IFillLockBytes_FillAppend_Proxy: [ HRESULT, { This: IFillLockBytes.Δ, pv: _void.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  IFillLockBytes_FillAppend_Stub: [ HRESULT, { This: IFillLockBytes.Δ, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  IFillLockBytes_FillAt_Proxy: [ HRESULT, { This: IFillLockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: _void.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  IFillLockBytes_FillAt_Stub: [ HRESULT, { This: IFillLockBytes.Δ, ulOffset: ULARGE_INTEGER, pv: byte.Δ, cb: ULONG, pcbWritten: ULONG.Δ } ],
  AsyncIAdviseSink_Begin_OnDataChange_Proxy: [ _void, { This: AsyncIAdviseSink.Δ, pFormatetc: FORMATETC.Δ, pStgmed: STGMEDIUM.Δ } ],
  AsyncIAdviseSink_Begin_OnDataChange_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ, pFormatetc: FORMATETC.Δ, pStgmed: ASYNC_STGMEDIUM.Δ } ],
  AsyncIAdviseSink_Finish_OnDataChange_Proxy: [ _void, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_OnDataChange_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_OnViewChange_Proxy: [ _void, { This: AsyncIAdviseSink.Δ, dwAspect: DWORD, lindex: LONG } ],
  AsyncIAdviseSink_Begin_OnViewChange_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ, dwAspect: DWORD, lindex: LONG } ],
  AsyncIAdviseSink_Finish_OnViewChange_Proxy: [ _void, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_OnViewChange_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_OnRename_Proxy: [ _void, { This: AsyncIAdviseSink.Δ, pmk: IMoniker.Δ } ],
  AsyncIAdviseSink_Begin_OnRename_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ, pmk: IMoniker.Δ } ],
  AsyncIAdviseSink_Finish_OnRename_Proxy: [ _void, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_OnRename_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_OnSave_Proxy: [ _void, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_OnSave_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_OnSave_Proxy: [ _void, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_OnSave_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_OnClose_Proxy: [ _void, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Begin_OnClose_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_OnClose_Proxy: [ _void, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink_Finish_OnClose_Stub: [ HRESULT, { This: AsyncIAdviseSink.Δ } ],
  AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy: [ _void, { This: AsyncIAdviseSink2.Δ, pmk: IMoniker.Δ } ],
  AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub: [ HRESULT, { This: AsyncIAdviseSink2.Δ, pmk: IMoniker.Δ } ],
  AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy: [ _void, { This: AsyncIAdviseSink2.Δ } ],
  AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub: [ HRESULT, { This: AsyncIAdviseSink2.Δ } ],
  CoBuildVersion: [ DWORD, {  } ],
  CoInitialize: [ HRESULT, { pvReserved: LPVOID } ],
  CoUninitialize: [ _void, {  } ],
  CoGetMalloc: [ HRESULT, { dwMemContext: DWORD, ppMalloc: LPMALLOC.Δ } ],
  CoGetCurrentProcess: [ DWORD, {  } ],
  CoRegisterMallocSpy: [ HRESULT, { pMallocSpy: LPMALLOCSPY } ],
  CoRevokeMallocSpy: [ HRESULT, {  } ],
  CoCreateStandardMalloc: [ HRESULT, { memctx: DWORD, ppMalloc: IMalloc.Δ.Δ } ],
  CoInitializeEx: [ HRESULT, { pvReserved: LPVOID, dwCoInit: DWORD } ],
  CoGetCallerTID: [ HRESULT, { lpdwTID: LPDWORD } ],
  CoGetCurrentLogicalThreadId: [ HRESULT, { pguid: GUID.Δ } ],
  CoRegisterInitializeSpy: [ HRESULT, { pSpy: LPINITIALIZESPY, puliCookie: ULARGE_INTEGER.Δ } ],
  CoRevokeInitializeSpy: [ HRESULT, { uliCookie: ULARGE_INTEGER } ],
  CoGetContextToken: [ HRESULT, { pToken: ULONG_PTR.Δ } ],
  CoGetSystemSecurityPermissions: [ HRESULT, { comSDType: COMSD, ppSD: PSECURITY_DESCRIPTOR.Δ } ],
  CoGetApartmentType: [ HRESULT, { pAptType: APTTYPE.Δ, pAptQualifier: APTTYPEQUALIFIER.Δ } ],
  CoGetObjectContext: [ HRESULT, { riid: IID.Δ, ppv: LPVOID.Δ } ],
  CoGetClassObject: [ HRESULT, { rclsid: IID.Δ, dwClsContext: DWORD, pvReserved: LPVOID, riid: IID.Δ, ppv: LPVOID.Δ } ],
  CoRegisterClassObject: [ HRESULT, { rclsid: IID.Δ, pUnk: LPUNKNOWN, dwClsContext: DWORD, flags: DWORD, lpdwRegister: LPDWORD } ],
  CoRevokeClassObject: [ HRESULT, { dwRegister: DWORD } ],
  CoResumeClassObjects: [ HRESULT, {  } ],
  CoSuspendClassObjects: [ HRESULT, {  } ],
  CoAddRefServerProcess: [ ULONG, {  } ],
  CoReleaseServerProcess: [ ULONG, {  } ],
  CoGetPSClsid: [ HRESULT, { riid: IID.Δ, pClsid: CLSID.Δ } ],
  CoRegisterPSClsid: [ HRESULT, { riid: IID.Δ, rclsid: IID.Δ } ],
  CoRegisterSurrogate: [ HRESULT, { pSurrogate: LPSURROGATE } ],
  CoGetMarshalSizeMax: [ HRESULT, { pulSize: ULONG.Δ, riid: IID.Δ, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD } ],
  CoMarshalInterface: [ HRESULT, { pStm: LPSTREAM, riid: IID.Δ, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD } ],
  CoUnmarshalInterface: [ HRESULT, { pStm: LPSTREAM, riid: IID.Δ, ppv: LPVOID.Δ } ],
  CoMarshalHresult: [ HRESULT, { pstm: LPSTREAM, hresult: HRESULT } ],
  CoUnmarshalHresult: [ HRESULT, { pstm: LPSTREAM, phresult: HRESULT.Δ } ],
  CoReleaseMarshalData: [ HRESULT, { pStm: LPSTREAM } ],
  CoDisconnectObject: [ HRESULT, { pUnk: LPUNKNOWN, dwReserved: DWORD } ],
  CoLockObjectExternal: [ HRESULT, { pUnk: LPUNKNOWN, fLock: BOOL, fLastUnlockReleases: BOOL } ],
  CoGetStandardMarshal: [ HRESULT, { riid: IID.Δ, pUnk: LPUNKNOWN, dwDestContext: DWORD, pvDestContext: LPVOID, mshlflags: DWORD, ppMarshal: LPMARSHAL.Δ } ],
  CoGetStdMarshalEx: [ HRESULT, { pUnkOuter: LPUNKNOWN, smexflags: DWORD, ppUnkInner: LPUNKNOWN.Δ } ],
  CoIsHandlerConnected: [ BOOL, { pUnk: LPUNKNOWN } ],
  CoMarshalInterThreadInterfaceInStream: [ HRESULT, { riid: IID.Δ, pUnk: LPUNKNOWN, ppStm: LPSTREAM.Δ } ],
  CoGetInterfaceAndReleaseStream: [ HRESULT, { pStm: LPSTREAM, iid: IID.Δ, ppv: LPVOID.Δ } ],
  CoCreateFreeThreadedMarshaler: [ HRESULT, { punkOuter: LPUNKNOWN, ppunkMarshal: LPUNKNOWN.Δ } ],
  CoLoadLibrary: [ HINSTANCE, { lpszLibName: LPOLESTR, bAutoFree: BOOL } ],
  CoFreeLibrary: [ _void, { hInst: HINSTANCE } ],
  CoFreeAllLibraries: [ _void, {  } ],
  CoFreeUnusedLibraries: [ _void, {  } ],
  CoFreeUnusedLibrariesEx: [ _void, { dwUnloadDelay: DWORD, dwReserved: DWORD } ],
  CoDisconnectContext: [ HRESULT, { dwTimeout: DWORD } ],
  CoInitializeSecurity: [ HRESULT, { pSecDesc: PSECURITY_DESCRIPTOR, cAuthSvc: LONG, asAuthSvc: SOLE_AUTHENTICATION_SERVICE.Δ, pReserved1: _void.Δ, dwAuthnLevel: DWORD, dwImpLevel: DWORD, pAuthList: _void.Δ, dwCapabilities: DWORD, pReserved3: _void.Δ } ],
  CoGetCallContext: [ HRESULT, { riid: IID.Δ, ppInterface: _void.Δ.Δ } ],
  CoQueryProxyBlanket: [ HRESULT, { pProxy: IUnknown.Δ, pwAuthnSvc: DWORD.Δ, pAuthzSvc: DWORD.Δ, pServerPrincName: ushort.Δ.Δ, pAuthnLevel: DWORD.Δ, pImpLevel: DWORD.Δ, pAuthInfo: RPC_AUTH_IDENTITY_HANDLE.Δ, pCapabilites: DWORD.Δ } ],
  CoSetProxyBlanket: [ HRESULT, { pProxy: IUnknown.Δ, dwAuthnSvc: DWORD, dwAuthzSvc: DWORD, pServerPrincName: OLECHAR.Δ, dwAuthnLevel: DWORD, dwImpLevel: DWORD, pAuthInfo: RPC_AUTH_IDENTITY_HANDLE, dwCapabilities: DWORD } ],
  CoCopyProxy: [ HRESULT, { pProxy: IUnknown.Δ, ppCopy: IUnknown.Δ.Δ } ],
  CoQueryClientBlanket: [ HRESULT, { pAuthnSvc: DWORD.Δ, pAuthzSvc: DWORD.Δ, pServerPrincName: ushort.Δ.Δ, pAuthnLevel: DWORD.Δ, pImpLevel: DWORD.Δ, pPrivs: RPC_AUTHZ_HANDLE.Δ, pCapabilities: DWORD.Δ } ],
  CoImpersonateClient: [ HRESULT, {  } ],
  CoRevertToSelf: [ HRESULT, {  } ],
  CoQueryAuthenticationServices: [ HRESULT, { pcAuthSvc: DWORD.Δ, asAuthSvc: tagSOLE_AUTHENTICATION_SERVICE.Δ.Δ } ],
  CoSwitchCallContext: [ HRESULT, { pNewObject: IUnknown.Δ, ppOldObject: IUnknown.Δ.Δ } ],
  CoCreateInstance: [ HRESULT, { rclsid: IID.Δ, pUnkOuter: LPUNKNOWN, dwClsContext: DWORD, riid: IID.Δ, ppv: LPVOID.Δ } ],
  CoGetInstanceFromFile: [ HRESULT, { pServerInfo: COSERVERINFO.Δ, pClsid: CLSID.Δ, punkOuter: IUnknown.Δ, dwClsCtx: DWORD, grfMode: DWORD, pwszName: OLECHAR.Δ, dwCount: DWORD, pResults: MULTI_QI.Δ } ],
  CoGetInstanceFromIStorage: [ HRESULT, { pServerInfo: COSERVERINFO.Δ, pClsid: CLSID.Δ, punkOuter: IUnknown.Δ, dwClsCtx: DWORD, pstg: IStorage.Δ, dwCount: DWORD, pResults: MULTI_QI.Δ } ],
  CoCreateInstanceEx: [ HRESULT, { Clsid: IID.Δ, punkOuter: IUnknown.Δ, dwClsCtx: DWORD, pServerInfo: COSERVERINFO.Δ, dwCount: DWORD, pResults: MULTI_QI.Δ } ],
  CoGetCancelObject: [ HRESULT, { dwThreadId: DWORD, iid: IID.Δ, ppUnk: _void.Δ.Δ } ],
  CoSetCancelObject: [ HRESULT, { pUnk: IUnknown.Δ } ],
  CoCancelCall: [ HRESULT, { dwThreadId: DWORD, ulTimeout: ULONG } ],
  CoTestCancel: [ HRESULT, {  } ],
  CoEnableCallCancellation: [ HRESULT, { pReserved: LPVOID } ],
  CoDisableCallCancellation: [ HRESULT, { pReserved: LPVOID } ],
  CoAllowSetForegroundWindow: [ HRESULT, { pUnk: IUnknown.Δ, lpvReserved: LPVOID } ],
  DcomChannelSetHResult: [ HRESULT, { pvReserved: LPVOID, pulReserved: ULONG.Δ, appsHR: HRESULT } ],
  StringFromCLSID: [ HRESULT, { rclsid: IID.Δ, lplpsz: LPOLESTR.Δ } ],
  CLSIDFromString: [ HRESULT, { lpsz: LPCOLESTR, pclsid: LPCLSID } ],
  StringFromIID: [ HRESULT, { rclsid: IID.Δ, lplpsz: LPOLESTR.Δ } ],
  IIDFromString: [ HRESULT, { lpsz: LPCOLESTR, lpiid: LPIID } ],
  CoIsOle1Class: [ BOOL, { rclsid: IID.Δ } ],
  ProgIDFromCLSID: [ HRESULT, { clsid: IID.Δ, lplpszProgID: LPOLESTR.Δ } ],
  CLSIDFromProgID: [ HRESULT, { lpszProgID: LPCOLESTR, lpclsid: LPCLSID } ],
  CLSIDFromProgIDEx: [ HRESULT, { lpszProgID: LPCOLESTR, lpclsid: LPCLSID } ],
  StringFromGUID2: [ _void, { rguid: GUID.Δ, lpsz: LPOLESTR, cchMax: int } ],
  CoCreateGuid: [ HRESULT, { pguid: GUID.Δ } ],
  CoFileTimeToDosDateTime: [ BOOL, { lpFileTime: FILETIME.Δ, lpDosDate: LPWORD, lpDosTime: LPWORD } ],
  CoDosDateTimeToFileTime: [ BOOL, { nDosDate: WORD, nDosTime: WORD, lpFileTime: FILETIME.Δ } ],
  CoFileTimeNow: [ HRESULT, { lpFileTime: FILETIME.Δ } ],
  CoRegisterMessageFilter: [ HRESULT, { lpMessageFilter: LPMESSAGEFILTER, lplpMessageFilter: LPMESSAGEFILTER.Δ } ],
  CoRegisterChannelHook: [ HRESULT, { ExtensionUuid: GUID.Δ, pChannelHook: IChannelHook.Δ } ],
  CoWaitForMultipleHandles: [ HRESULT, { dwFlags: DWORD, dwTimeout: DWORD, cHandles: ULONG, pHandles: LPHANDLE, lpdwindex: LPDWORD } ],
  CoInvalidateRemoteMachineBindings: [ HRESULT, { pszMachineName: LPOLESTR } ],
  CoGetTreatAsClass: [ HRESULT, { clsidOld: IID.Δ, pClsidNew: LPCLSID } ],
  CoTreatAsClass: [ HRESULT, { clsidOld: IID.Δ, clsidNew: IID.Δ } ],
  DllGetClassObject: [ HRESULT, { rclsid: IID.Δ, riid: IID.Δ, ppv: LPVOID.Δ } ],
  DllCanUnloadNow: [ HRESULT, {  } ],
  CoTaskMemAlloc: [ LPVOID, { cb: SIZE_T } ],
  CoTaskMemRealloc: [ LPVOID, { pv: LPVOID, cb: SIZE_T } ],
  CoTaskMemFree: [ _void, { pv: LPVOID } ],
  CreateDataAdviseHolder: [ HRESULT, { ppDAHolder: LPDATAADVISEHOLDER.Δ } ],
  CreateDataCache: [ HRESULT, { pUnkOuter: LPUNKNOWN, rclsid: IID.Δ, iid: IID.Δ, ppv: LPVOID.Δ } ],
  StgCreateDocfile: [ HRESULT, { pwcsName: WCHAR.Δ, grfMode: DWORD, reserved: DWORD, ppstgOpen: IStorage.Δ.Δ } ],
  StgCreateDocfileOnILockBytes: [ HRESULT, { plkbyt: ILockBytes.Δ, grfMode: DWORD, reserved: DWORD, ppstgOpen: IStorage.Δ.Δ } ],
  StgOpenStorage: [ HRESULT, { pwcsName: WCHAR.Δ, pstgPriority: IStorage.Δ, grfMode: DWORD, snbExclude: SNB, reserved: DWORD, ppstgOpen: IStorage.Δ.Δ } ],
  StgOpenStorageOnILockBytes: [ HRESULT, { plkbyt: ILockBytes.Δ, pstgPriority: IStorage.Δ, grfMode: DWORD, snbExclude: SNB, reserved: DWORD, ppstgOpen: IStorage.Δ.Δ } ],
  StgIsStorageFile: [ HRESULT, { pwcsName: WCHAR.Δ } ],
  StgIsStorageILockBytes: [ HRESULT, { plkbyt: ILockBytes.Δ } ],
  StgSetTimes: [ HRESULT, { lpszName: WCHAR.Δ, pctime: FILETIME.Δ, patime: FILETIME.Δ, pmtime: FILETIME.Δ } ],
  StgOpenAsyncDocfileOnIFillLockBytes: [ HRESULT, { pflb: IFillLockBytes.Δ, grfMode: DWORD, asyncFlags: DWORD, ppstgOpen: IStorage.Δ.Δ } ],
  StgGetIFillLockBytesOnILockBytes: [ HRESULT, { pilb: ILockBytes.Δ, ppflb: IFillLockBytes.Δ.Δ } ],
  StgGetIFillLockBytesOnFile: [ HRESULT, { pwcsName: OLECHAR.Δ, ppflb: IFillLockBytes.Δ.Δ } ],
  StgOpenLayoutDocfile: [ HRESULT, { pwcsDfName: OLECHAR.Δ, grfMode: DWORD, reserved: DWORD, ppstgOpen: IStorage.Δ.Δ } ],
  StgCreateStorageEx: [ HRESULT, { pwcsName: WCHAR.Δ, grfMode: DWORD, stgfmt: DWORD, grfAttrs: DWORD, pStgOptions: STGOPTIONS.Δ, pSecurityDescriptor: PSECURITY_DESCRIPTOR, riid: IID.Δ, ppObjectOpen: _void.Δ.Δ } ],
  StgOpenStorageEx: [ HRESULT, { pwcsName: WCHAR.Δ, grfMode: DWORD, stgfmt: DWORD, grfAttrs: DWORD, pStgOptions: STGOPTIONS.Δ, pSecurityDescriptor: PSECURITY_DESCRIPTOR, riid: IID.Δ, ppObjectOpen: _void.Δ.Δ } ],
  BindMoniker: [ HRESULT, { pmk: LPMONIKER, grfOpt: DWORD, iidResult: IID.Δ, ppvResult: LPVOID.Δ } ],
  CoInstall: [ HRESULT, { pbc: IBindCtx.Δ, dwFlags: DWORD, pClassSpec: uCLSSPEC.Δ, pQuery: QUERYCONTEXT.Δ, pszCodeBase: LPWSTR } ],
  CoGetObject: [ HRESULT, { pszName: LPCWSTR, pBindOptions: BIND_OPTS.Δ, riid: IID.Δ, ppv: _void.Δ.Δ } ],
  MkParseDisplayName: [ HRESULT, { pbc: LPBC, szUserName: LPCOLESTR, pchEaten: ULONG.Δ, ppmk: LPMONIKER.Δ } ],
  MonikerRelativePathTo: [ HRESULT, { pmkSrc: LPMONIKER, pmkDest: LPMONIKER, ppmkRelPath: LPMONIKER.Δ, dwReserved: BOOL } ],
  MonikerCommonPrefixWith: [ HRESULT, { pmkThis: LPMONIKER, pmkOther: LPMONIKER, ppmkCommon: LPMONIKER.Δ } ],
  CreateBindCtx: [ HRESULT, { reserved: DWORD, ppbc: LPBC.Δ } ],
  CreateGenericComposite: [ HRESULT, { pmkFirst: LPMONIKER, pmkRest: LPMONIKER, ppmkComposite: LPMONIKER.Δ } ],
  GetClassFile: [ HRESULT, { szFilename: LPCOLESTR, pclsid: CLSID.Δ } ],
  CreateClassMoniker: [ HRESULT, { rclsid: IID.Δ, ppmk: LPMONIKER.Δ } ],
  CreateFileMoniker: [ HRESULT, { lpszPathName: LPCOLESTR, ppmk: LPMONIKER.Δ } ],
  CreateItemMoniker: [ HRESULT, { lpszDelim: LPCOLESTR, lpszItem: LPCOLESTR, ppmk: LPMONIKER.Δ } ],
  CreateAntiMoniker: [ HRESULT, { ppmk: LPMONIKER.Δ } ],
  CreatePointerMoniker: [ HRESULT, { punk: LPUNKNOWN, ppmk: LPMONIKER.Δ } ],
  CreateObjrefMoniker: [ HRESULT, { punk: LPUNKNOWN, ppmk: LPMONIKER.Δ } ],
  GetRunningObjectTable: [ HRESULT, { reserved: DWORD, pprot: LPRUNNINGOBJECTTABLE.Δ } ],
  IOleCache2_RemoteUpdateCache_Proxy: [ HRESULT, { This: IOleCache2.Δ, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LONG_PTR } ],
  IOleCache2_RemoteUpdateCache_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy: [ HRESULT, { This: IOleInPlaceActiveObject.Δ } ],
  IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IOleInPlaceActiveObject_RemoteResizeBorder_Proxy: [ HRESULT, { This: IOleInPlaceActiveObject.Δ, prcBorder: LPCRECT, riid: IID.Δ, pUIWindow: IOleInPlaceUIWindow.Δ, fFrameWindow: BOOL } ],
  IOleInPlaceActiveObject_RemoteResizeBorder_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IViewObject_RemoteDraw_Proxy: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: DVTARGETDEVICE.Δ, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pContinue: IContinue.Δ } ],
  IViewObject_RemoteDraw_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IViewObject_RemoteGetColorSet_Proxy: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: DVTARGETDEVICE.Δ, hicTargetDev: ULONG_PTR, ppColorSet: tagLOGPALETTE.Δ.Δ } ],
  IViewObject_RemoteGetColorSet_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IViewObject_RemoteFreeze_Proxy: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, pdwFreeze: DWORD.Δ } ],
  IViewObject_RemoteFreeze_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IViewObject_RemoteGetAdvise_Proxy: [ HRESULT, { This: IViewObject.Δ, pAspects: DWORD.Δ, pAdvf: DWORD.Δ, ppAdvSink: IAdviseSink.Δ.Δ } ],
  IViewObject_RemoteGetAdvise_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumOLEVERB_RemoteNext_Proxy: [ HRESULT, { This: IEnumOLEVERB.Δ, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ULONG.Δ } ],
  IEnumOLEVERB_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  HACCEL_UserSize: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HACCEL_UserMarshal: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HACCEL_UserUnmarshal: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HACCEL_UserFree: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HGLOBAL_UserSize: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HGLOBAL_UserMarshal: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HGLOBAL_UserUnmarshal: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HGLOBAL_UserFree: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HMENU_UserSize: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HMENU_UserMarshal: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HMENU_UserUnmarshal: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HMENU_UserFree: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HWND_UserSize: [ _void, { HWND.Δ: HWND.Δ } ],
  HWND_UserMarshal: [ _void, { HWND.Δ: HWND.Δ } ],
  HWND_UserUnmarshal: [ _void, { HWND.Δ: HWND.Δ } ],
  HWND_UserFree: [ _void, { HWND.Δ: HWND.Δ } ],
  HACCEL_UserSize64: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HACCEL_UserMarshal64: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HACCEL_UserUnmarshal64: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HACCEL_UserFree64: [ _void, { HACCEL.Δ: HACCEL.Δ } ],
  HGLOBAL_UserSize64: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HGLOBAL_UserMarshal64: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HGLOBAL_UserUnmarshal64: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HGLOBAL_UserFree64: [ _void, { HGLOBAL.Δ: HGLOBAL.Δ } ],
  HMENU_UserSize64: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HMENU_UserMarshal64: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HMENU_UserUnmarshal64: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HMENU_UserFree64: [ _void, { HMENU.Δ: HMENU.Δ } ],
  HWND_UserSize64: [ _void, { HWND.Δ: HWND.Δ } ],
  HWND_UserMarshal64: [ _void, { HWND.Δ: HWND.Δ } ],
  HWND_UserUnmarshal64: [ _void, { HWND.Δ: HWND.Δ } ],
  HWND_UserFree64: [ _void, { HWND.Δ: HWND.Δ } ],
  IOleCache2_UpdateCache_Proxy: [ HRESULT, { This: IOleCache2.Δ, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LPVOID } ],
  IOleCache2_UpdateCache_Stub: [ HRESULT, { This: IOleCache2.Δ, pDataObject: LPDATAOBJECT, grfUpdf: DWORD, pReserved: LONG_PTR } ],
  IOleInPlaceActiveObject_TranslateAccelerator_Proxy: [ HRESULT, { This: IOleInPlaceActiveObject.Δ, lpmsg: LPMSG } ],
  IOleInPlaceActiveObject_TranslateAccelerator_Stub: [ HRESULT, { This: IOleInPlaceActiveObject.Δ } ],
  IOleInPlaceActiveObject_ResizeBorder_Proxy: [ HRESULT, { This: IOleInPlaceActiveObject.Δ, prcBorder: LPCRECT, pUIWindow: IOleInPlaceUIWindow.Δ, fFrameWindow: BOOL } ],
  IOleInPlaceActiveObject_ResizeBorder_Stub: [ HRESULT, { This: IOleInPlaceActiveObject.Δ, prcBorder: LPCRECT, riid: IID.Δ, pUIWindow: IOleInPlaceUIWindow.Δ, fFrameWindow: BOOL } ],
  IViewObject_Draw_Proxy: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: _void.Δ, ptd: DVTARGETDEVICE.Δ, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pfnContinue: new CallbackT(int, [ulong]).Δ, dwContinue: ULONG_PTR } ],
  IViewObject_Draw_Stub: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: DVTARGETDEVICE.Δ, hdcTargetDev: HDC, hdcDraw: HDC, lprcBounds: LPCRECTL, lprcWBounds: LPCRECTL, pContinue: IContinue.Δ } ],
  IViewObject_GetColorSet_Proxy: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: _void.Δ, ptd: DVTARGETDEVICE.Δ, hicTargetDev: HDC, ppColorSet: tagLOGPALETTE.Δ.Δ } ],
  IViewObject_GetColorSet_Stub: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, ptd: DVTARGETDEVICE.Δ, hicTargetDev: ULONG_PTR, ppColorSet: tagLOGPALETTE.Δ.Δ } ],
  IViewObject_Freeze_Proxy: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: _void.Δ, pdwFreeze: DWORD.Δ } ],
  IViewObject_Freeze_Stub: [ HRESULT, { This: IViewObject.Δ, dwDrawAspect: DWORD, lindex: LONG, pvAspect: ULONG_PTR, pdwFreeze: DWORD.Δ } ],
  IViewObject_GetAdvise_Proxy: [ HRESULT, { This: IViewObject.Δ, pAspects: DWORD.Δ, pAdvf: DWORD.Δ, ppAdvSink: IAdviseSink.Δ.Δ } ],
  IViewObject_GetAdvise_Stub: [ HRESULT, { This: IViewObject.Δ, pAspects: DWORD.Δ, pAdvf: DWORD.Δ, ppAdvSink: IAdviseSink.Δ.Δ } ],
  IEnumOLEVERB_Next_Proxy: [ HRESULT, { This: IEnumOLEVERB.Δ, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ULONG.Δ } ],
  IEnumOLEVERB_Next_Stub: [ HRESULT, { This: IEnumOLEVERB.Δ, celt: ULONG, rgelt: LPOLEVERB, pceltFetched: ULONG.Δ } ],
  IServiceProvider_RemoteQueryService_Proxy: [ HRESULT, { This: IServiceProvider.Δ, guidService: GUID.Δ, riid: IID.Δ, ppvObject: IUnknown.Δ.Δ } ],
  IServiceProvider_RemoteQueryService_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IServiceProvider_QueryService_Proxy: [ HRESULT, { This: IServiceProvider.Δ, guidService: GUID.Δ, riid: IID.Δ, ppvObject: _void.Δ.Δ } ],
  IServiceProvider_QueryService_Stub: [ HRESULT, { This: IServiceProvider.Δ, guidService: GUID.Δ, riid: IID.Δ, ppvObject: IUnknown.Δ.Δ } ],
  IDispatch_RemoteInvoke_Proxy: [ HRESULT, { This: IDispatch.Δ, dispIdMember: DISPID, riid: IID.Δ, lcid: LCID, dwFlags: DWORD, pDispParams: DISPPARAMS.Δ, pVarResult: VARIANT.Δ, pExcepInfo: EXCEPINFO.Δ, pArgErr: UINT.Δ, cVarRef: UINT, rgVarRefIdx: UINT.Δ, rgVarRef: VARIANTARG.Δ } ],
  IDispatch_RemoteInvoke_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumVARIANT_RemoteNext_Proxy: [ HRESULT, { This: IEnumVARIANT.Δ, celt: ULONG, rgVar: VARIANT.Δ, pCeltFetched: ULONG.Δ } ],
  IEnumVARIANT_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeComp_RemoteBind_Proxy: [ HRESULT, { This: ITypeComp.Δ, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: ITypeInfo.Δ.Δ, pDescKind: DESCKIND.Δ, ppFuncDesc: LPFUNCDESC.Δ, ppVarDesc: LPVARDESC.Δ, ppTypeComp: ITypeComp.Δ.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeComp_RemoteBind_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeComp_RemoteBindType_Proxy: [ HRESULT, { This: ITypeComp.Δ, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: ITypeInfo.Δ.Δ } ],
  ITypeComp_RemoteBindType_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteGetTypeAttr_Proxy: [ HRESULT, { This: ITypeInfo.Δ, ppTypeAttr: LPTYPEATTR.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeInfo_RemoteGetTypeAttr_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteGetFuncDesc_Proxy: [ HRESULT, { This: ITypeInfo.Δ, index: UINT, ppFuncDesc: LPFUNCDESC.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeInfo_RemoteGetFuncDesc_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteGetVarDesc_Proxy: [ HRESULT, { This: ITypeInfo.Δ, index: UINT, ppVarDesc: LPVARDESC.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeInfo_RemoteGetVarDesc_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteGetNames_Proxy: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, rgBstrNames: BSTR.Δ, cMaxNames: UINT, pcNames: UINT.Δ } ],
  ITypeInfo_RemoteGetNames_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_LocalGetIDsOfNames_Proxy: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_LocalGetIDsOfNames_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_LocalInvoke_Proxy: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_LocalInvoke_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteGetDocumentation_Proxy: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, refPtrFlags: DWORD, pBstrName: BSTR.Δ, pBstrDocString: BSTR.Δ, pdwHelpContext: DWORD.Δ, pBstrHelpFile: BSTR.Δ } ],
  ITypeInfo_RemoteGetDocumentation_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteGetDllEntry_Proxy: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, invKind: INVOKEKIND, refPtrFlags: DWORD, pBstrDllName: BSTR.Δ, pBstrName: BSTR.Δ, pwOrdinal: WORD.Δ } ],
  ITypeInfo_RemoteGetDllEntry_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_LocalAddressOfMember_Proxy: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_LocalAddressOfMember_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteCreateInstance_Proxy: [ HRESULT, { This: ITypeInfo.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  ITypeInfo_RemoteCreateInstance_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_RemoteGetContainingTypeLib_Proxy: [ HRESULT, { This: ITypeInfo.Δ, ppTLib: ITypeLib.Δ.Δ, pIndex: UINT.Δ } ],
  ITypeInfo_RemoteGetContainingTypeLib_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_LocalReleaseTypeAttr_Proxy: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_LocalReleaseTypeAttr_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_LocalReleaseFuncDesc_Proxy: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_LocalReleaseFuncDesc_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo_LocalReleaseVarDesc_Proxy: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_LocalReleaseVarDesc_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeInfo2_RemoteGetDocumentation2_Proxy: [ HRESULT, { This: ITypeInfo2.Δ, memid: MEMBERID, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: BSTR.Δ, pdwHelpStringContext: DWORD.Δ, pbstrHelpStringDll: BSTR.Δ } ],
  ITypeInfo2_RemoteGetDocumentation2_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib_RemoteGetTypeInfoCount_Proxy: [ HRESULT, { This: ITypeLib.Δ, pcTInfo: UINT.Δ } ],
  ITypeLib_RemoteGetTypeInfoCount_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib_RemoteGetLibAttr_Proxy: [ HRESULT, { This: ITypeLib.Δ, ppTLibAttr: LPTLIBATTR.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeLib_RemoteGetLibAttr_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib_RemoteGetDocumentation_Proxy: [ HRESULT, { This: ITypeLib.Δ, index: INT, refPtrFlags: DWORD, pBstrName: BSTR.Δ, pBstrDocString: BSTR.Δ, pdwHelpContext: DWORD.Δ, pBstrHelpFile: BSTR.Δ } ],
  ITypeLib_RemoteGetDocumentation_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib_RemoteIsName_Proxy: [ HRESULT, { This: ITypeLib.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: BOOL.Δ, pBstrLibName: BSTR.Δ } ],
  ITypeLib_RemoteIsName_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib_RemoteFindName_Proxy: [ HRESULT, { This: ITypeLib.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: ITypeInfo.Δ.Δ, rgMemId: MEMBERID.Δ, pcFound: USHORT.Δ, pBstrLibName: BSTR.Δ } ],
  ITypeLib_RemoteFindName_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib_LocalReleaseTLibAttr_Proxy: [ HRESULT, { This: ITypeLib.Δ } ],
  ITypeLib_LocalReleaseTLibAttr_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib2_RemoteGetLibStatistics_Proxy: [ HRESULT, { This: ITypeLib2.Δ, pcUniqueNames: ULONG.Δ, pcchUniqueNames: ULONG.Δ } ],
  ITypeLib2_RemoteGetLibStatistics_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  ITypeLib2_RemoteGetDocumentation2_Proxy: [ HRESULT, { This: ITypeLib2.Δ, index: INT, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: BSTR.Δ, pdwHelpStringContext: DWORD.Δ, pbstrHelpStringDll: BSTR.Δ } ],
  ITypeLib2_RemoteGetDocumentation2_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IPropertyBag_RemoteRead_Proxy: [ HRESULT, { This: IPropertyBag.Δ, pszPropName: LPCOLESTR, pVar: VARIANT.Δ, pErrorLog: IErrorLog.Δ, varType: DWORD, pUnkObj: IUnknown.Δ } ],
  IPropertyBag_RemoteRead_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  BSTR_UserSize: [ _void, { BSTR.Δ: BSTR.Δ } ],
  BSTR_UserMarshal: [ _void, { BSTR.Δ: BSTR.Δ } ],
  BSTR_UserUnmarshal: [ _void, { BSTR.Δ: BSTR.Δ } ],
  BSTR_UserFree: [ _void, { BSTR.Δ: BSTR.Δ } ],
  CLEANLOCALSTORAGE_UserSize: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  CLEANLOCALSTORAGE_UserMarshal: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  CLEANLOCALSTORAGE_UserUnmarshal: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  CLEANLOCALSTORAGE_UserFree: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  VARIANT_UserSize: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  VARIANT_UserMarshal: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  VARIANT_UserUnmarshal: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  VARIANT_UserFree: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  BSTR_UserSize64: [ _void, { BSTR.Δ: BSTR.Δ } ],
  BSTR_UserMarshal64: [ _void, { BSTR.Δ: BSTR.Δ } ],
  BSTR_UserUnmarshal64: [ _void, { BSTR.Δ: BSTR.Δ } ],
  BSTR_UserFree64: [ _void, { BSTR.Δ: BSTR.Δ } ],
  CLEANLOCALSTORAGE_UserSize64: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  CLEANLOCALSTORAGE_UserMarshal64: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  CLEANLOCALSTORAGE_UserUnmarshal64: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  CLEANLOCALSTORAGE_UserFree64: [ _void, { CLEANLOCALSTORAGE.Δ: CLEANLOCALSTORAGE.Δ } ],
  VARIANT_UserSize64: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  VARIANT_UserMarshal64: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  VARIANT_UserUnmarshal64: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  VARIANT_UserFree64: [ _void, { VARIANT.Δ: VARIANT.Δ } ],
  IDispatch_Invoke_Proxy: [ HRESULT, { This: IDispatch.Δ, dispIdMember: DISPID, riid: IID.Δ, lcid: LCID, wFlags: WORD, pDispParams: DISPPARAMS.Δ, pVarResult: VARIANT.Δ, pExcepInfo: EXCEPINFO.Δ, puArgErr: UINT.Δ } ],
  IDispatch_Invoke_Stub: [ HRESULT, { This: IDispatch.Δ, dispIdMember: DISPID, riid: IID.Δ, lcid: LCID, dwFlags: DWORD, pDispParams: DISPPARAMS.Δ, pVarResult: VARIANT.Δ, pExcepInfo: EXCEPINFO.Δ, pArgErr: UINT.Δ, cVarRef: UINT, rgVarRefIdx: UINT.Δ, rgVarRef: VARIANTARG.Δ } ],
  IEnumVARIANT_Next_Proxy: [ HRESULT, { This: IEnumVARIANT.Δ, celt: ULONG, rgVar: VARIANT.Δ, pCeltFetched: ULONG.Δ } ],
  IEnumVARIANT_Next_Stub: [ HRESULT, { This: IEnumVARIANT.Δ, celt: ULONG, rgVar: VARIANT.Δ, pCeltFetched: ULONG.Δ } ],
  ITypeComp_Bind_Proxy: [ HRESULT, { This: ITypeComp.Δ, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: ITypeInfo.Δ.Δ, pDescKind: DESCKIND.Δ, pBindPtr: BINDPTR.Δ } ],
  ITypeComp_Bind_Stub: [ HRESULT, { This: ITypeComp.Δ, szName: LPOLESTR, lHashVal: ULONG, wFlags: WORD, ppTInfo: ITypeInfo.Δ.Δ, pDescKind: DESCKIND.Δ, ppFuncDesc: LPFUNCDESC.Δ, ppVarDesc: LPVARDESC.Δ, ppTypeComp: ITypeComp.Δ.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeComp_BindType_Proxy: [ HRESULT, { This: ITypeComp.Δ, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: ITypeInfo.Δ.Δ, ppTComp: ITypeComp.Δ.Δ } ],
  ITypeComp_BindType_Stub: [ HRESULT, { This: ITypeComp.Δ, szName: LPOLESTR, lHashVal: ULONG, ppTInfo: ITypeInfo.Δ.Δ } ],
  ITypeInfo_GetTypeAttr_Proxy: [ HRESULT, { This: ITypeInfo.Δ, ppTypeAttr: tagTYPEATTR.Δ.Δ } ],
  ITypeInfo_GetTypeAttr_Stub: [ HRESULT, { This: ITypeInfo.Δ, ppTypeAttr: LPTYPEATTR.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeInfo_GetFuncDesc_Proxy: [ HRESULT, { This: ITypeInfo.Δ, index: UINT, ppFuncDesc: tagFUNCDESC.Δ.Δ } ],
  ITypeInfo_GetFuncDesc_Stub: [ HRESULT, { This: ITypeInfo.Δ, index: UINT, ppFuncDesc: LPFUNCDESC.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeInfo_GetVarDesc_Proxy: [ HRESULT, { This: ITypeInfo.Δ, index: UINT, ppVarDesc: tagVARDESC.Δ.Δ } ],
  ITypeInfo_GetVarDesc_Stub: [ HRESULT, { This: ITypeInfo.Δ, index: UINT, ppVarDesc: LPVARDESC.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeInfo_GetNames_Proxy: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, rgBstrNames: BSTR.Δ, cMaxNames: UINT, pcNames: UINT.Δ } ],
  ITypeInfo_GetNames_Stub: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, rgBstrNames: BSTR.Δ, cMaxNames: UINT, pcNames: UINT.Δ } ],
  ITypeInfo_GetIDsOfNames_Proxy: [ HRESULT, { This: ITypeInfo.Δ, rgszNames: LPOLESTR.Δ, cNames: UINT, pMemId: MEMBERID.Δ } ],
  ITypeInfo_GetIDsOfNames_Stub: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_Invoke_Proxy: [ HRESULT, { This: ITypeInfo.Δ, pvInstance: PVOID, memid: MEMBERID, wFlags: WORD, pDispParams: DISPPARAMS.Δ, pVarResult: VARIANT.Δ, pExcepInfo: EXCEPINFO.Δ, puArgErr: UINT.Δ } ],
  ITypeInfo_Invoke_Stub: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_GetDocumentation_Proxy: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, pBstrName: BSTR.Δ, pBstrDocString: BSTR.Δ, pdwHelpContext: DWORD.Δ, pBstrHelpFile: BSTR.Δ } ],
  ITypeInfo_GetDocumentation_Stub: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, refPtrFlags: DWORD, pBstrName: BSTR.Δ, pBstrDocString: BSTR.Δ, pdwHelpContext: DWORD.Δ, pBstrHelpFile: BSTR.Δ } ],
  ITypeInfo_GetDllEntry_Proxy: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, invKind: INVOKEKIND, pBstrDllName: BSTR.Δ, pBstrName: BSTR.Δ, pwOrdinal: WORD.Δ } ],
  ITypeInfo_GetDllEntry_Stub: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, invKind: INVOKEKIND, refPtrFlags: DWORD, pBstrDllName: BSTR.Δ, pBstrName: BSTR.Δ, pwOrdinal: WORD.Δ } ],
  ITypeInfo_AddressOfMember_Proxy: [ HRESULT, { This: ITypeInfo.Δ, memid: MEMBERID, invKind: INVOKEKIND, ppv: PVOID.Δ } ],
  ITypeInfo_AddressOfMember_Stub: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_CreateInstance_Proxy: [ HRESULT, { This: ITypeInfo.Δ, pUnkOuter: IUnknown.Δ, riid: IID.Δ, ppvObj: PVOID.Δ } ],
  ITypeInfo_CreateInstance_Stub: [ HRESULT, { This: ITypeInfo.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  ITypeInfo_GetContainingTypeLib_Proxy: [ HRESULT, { This: ITypeInfo.Δ, ppTLib: ITypeLib.Δ.Δ, pIndex: UINT.Δ } ],
  ITypeInfo_GetContainingTypeLib_Stub: [ HRESULT, { This: ITypeInfo.Δ, ppTLib: ITypeLib.Δ.Δ, pIndex: UINT.Δ } ],
  ITypeInfo_ReleaseTypeAttr_Proxy: [ _void, { This: ITypeInfo.Δ, pTypeAttr: TYPEATTR.Δ } ],
  ITypeInfo_ReleaseTypeAttr_Stub: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_ReleaseFuncDesc_Proxy: [ _void, { This: ITypeInfo.Δ, pFuncDesc: FUNCDESC.Δ } ],
  ITypeInfo_ReleaseFuncDesc_Stub: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo_ReleaseVarDesc_Proxy: [ _void, { This: ITypeInfo.Δ, pVarDesc: VARDESC.Δ } ],
  ITypeInfo_ReleaseVarDesc_Stub: [ HRESULT, { This: ITypeInfo.Δ } ],
  ITypeInfo2_GetDocumentation2_Proxy: [ HRESULT, { This: ITypeInfo2.Δ, memid: MEMBERID, lcid: LCID, pbstrHelpString: BSTR.Δ, pdwHelpStringContext: DWORD.Δ, pbstrHelpStringDll: BSTR.Δ } ],
  ITypeInfo2_GetDocumentation2_Stub: [ HRESULT, { This: ITypeInfo2.Δ, memid: MEMBERID, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: BSTR.Δ, pdwHelpStringContext: DWORD.Δ, pbstrHelpStringDll: BSTR.Δ } ],
  ITypeLib_GetTypeInfoCount_Proxy: [ UINT, { This: ITypeLib.Δ } ],
  ITypeLib_GetTypeInfoCount_Stub: [ HRESULT, { This: ITypeLib.Δ, pcTInfo: UINT.Δ } ],
  ITypeLib_GetLibAttr_Proxy: [ HRESULT, { This: ITypeLib.Δ, ppTLibAttr: tagTLIBATTR.Δ.Δ } ],
  ITypeLib_GetLibAttr_Stub: [ HRESULT, { This: ITypeLib.Δ, ppTLibAttr: LPTLIBATTR.Δ, pDummy: CLEANLOCALSTORAGE.Δ } ],
  ITypeLib_GetDocumentation_Proxy: [ HRESULT, { This: ITypeLib.Δ, index: INT, pBstrName: BSTR.Δ, pBstrDocString: BSTR.Δ, pdwHelpContext: DWORD.Δ, pBstrHelpFile: BSTR.Δ } ],
  ITypeLib_GetDocumentation_Stub: [ HRESULT, { This: ITypeLib.Δ, index: INT, refPtrFlags: DWORD, pBstrName: BSTR.Δ, pBstrDocString: BSTR.Δ, pdwHelpContext: DWORD.Δ, pBstrHelpFile: BSTR.Δ } ],
  ITypeLib_IsName_Proxy: [ HRESULT, { This: ITypeLib.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: BOOL.Δ } ],
  ITypeLib_IsName_Stub: [ HRESULT, { This: ITypeLib.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, pfName: BOOL.Δ, pBstrLibName: BSTR.Δ } ],
  ITypeLib_FindName_Proxy: [ HRESULT, { This: ITypeLib.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: ITypeInfo.Δ.Δ, rgMemId: MEMBERID.Δ, pcFound: USHORT.Δ } ],
  ITypeLib_FindName_Stub: [ HRESULT, { This: ITypeLib.Δ, szNameBuf: LPOLESTR, lHashVal: ULONG, ppTInfo: ITypeInfo.Δ.Δ, rgMemId: MEMBERID.Δ, pcFound: USHORT.Δ, pBstrLibName: BSTR.Δ } ],
  ITypeLib_ReleaseTLibAttr_Proxy: [ _void, { This: ITypeLib.Δ, pTLibAttr: TLIBATTR.Δ } ],
  ITypeLib_ReleaseTLibAttr_Stub: [ HRESULT, { This: ITypeLib.Δ } ],
  ITypeLib2_GetLibStatistics_Proxy: [ HRESULT, { This: ITypeLib2.Δ, pcUniqueNames: ULONG.Δ, pcchUniqueNames: ULONG.Δ } ],
  ITypeLib2_GetLibStatistics_Stub: [ HRESULT, { This: ITypeLib2.Δ, pcUniqueNames: ULONG.Δ, pcchUniqueNames: ULONG.Δ } ],
  ITypeLib2_GetDocumentation2_Proxy: [ HRESULT, { This: ITypeLib2.Δ, index: INT, lcid: LCID, pbstrHelpString: BSTR.Δ, pdwHelpStringContext: DWORD.Δ, pbstrHelpStringDll: BSTR.Δ } ],
  ITypeLib2_GetDocumentation2_Stub: [ HRESULT, { This: ITypeLib2.Δ, index: INT, lcid: LCID, refPtrFlags: DWORD, pbstrHelpString: BSTR.Δ, pdwHelpStringContext: DWORD.Δ, pbstrHelpStringDll: BSTR.Δ } ],
  IPropertyBag_Read_Proxy: [ HRESULT, { This: IPropertyBag.Δ, pszPropName: LPCOLESTR, pVar: VARIANT.Δ, pErrorLog: IErrorLog.Δ } ],
  IPropertyBag_Read_Stub: [ HRESULT, { This: IPropertyBag.Δ, pszPropName: LPCOLESTR, pVar: VARIANT.Δ, pErrorLog: IErrorLog.Δ, varType: DWORD, pUnkObj: IUnknown.Δ } ],
  CreateURLMoniker: [ HRESULT, { pMkCtx: LPMONIKER, szURL: LPCWSTR, ppmk: LPMONIKER.Δ } ],
  CreateURLMonikerEx: [ HRESULT, { pMkCtx: LPMONIKER, szURL: LPCWSTR, ppmk: LPMONIKER.Δ, dwFlags: DWORD } ],
  GetClassURL: [ HRESULT, { szURL: LPCWSTR, pClsID: CLSID.Δ } ],
  CreateAsyncBindCtx: [ HRESULT, { reserved: DWORD, pBSCb: IBindStatusCallback.Δ, pEFetc: IEnumFORMATETC.Δ, ppBC: IBindCtx.Δ.Δ } ],
  CreateURLMonikerEx2: [ HRESULT, { pMkCtx: LPMONIKER, pUri: IUri.Δ, ppmk: LPMONIKER.Δ, dwFlags: DWORD } ],
  CreateAsyncBindCtxEx: [ HRESULT, { pbc: IBindCtx.Δ, dwOptions: DWORD, pBSCb: IBindStatusCallback.Δ, pEnum: IEnumFORMATETC.Δ, ppBC: IBindCtx.Δ.Δ, reserved: DWORD } ],
  MkParseDisplayNameEx: [ HRESULT, { pbc: IBindCtx.Δ, szDisplayName: LPCWSTR, pchEaten: ULONG.Δ, ppmk: LPMONIKER.Δ } ],
  RegisterBindStatusCallback: [ HRESULT, { pBC: LPBC, pBSCb: IBindStatusCallback.Δ, ppBSCBPrev: IBindStatusCallback.Δ.Δ, dwReserved: DWORD } ],
  RevokeBindStatusCallback: [ HRESULT, { pBC: LPBC, pBSCb: IBindStatusCallback.Δ } ],
  GetClassFileOrMime: [ HRESULT, { pBC: LPBC, szFilename: LPCWSTR, pBuffer: LPVOID, cbSize: DWORD, szMime: LPCWSTR, dwReserved: DWORD, pclsid: CLSID.Δ } ],
  IsValidURL: [ HRESULT, { pBC: LPBC, szURL: LPCWSTR, dwReserved: DWORD } ],
  CoGetClassObjectFromURL: [ HRESULT, { rCLASSID: IID.Δ, szCODE: LPCWSTR, dwFileVersionMS: DWORD, dwFileVersionLS: DWORD, szTYPE: LPCWSTR, pBindCtx: LPBINDCTX, dwClsContext: DWORD, pvReserved: LPVOID, riid: IID.Δ, ppv: LPVOID.Δ } ],
  IEInstallScope: [ HRESULT, { pdwScope: LPDWORD } ],
  FaultInIEFeature: [ HRESULT, { hWnd: HWND, pClassSpec: uCLSSPEC.Δ, pQuery: QUERYCONTEXT.Δ, dwFlags: DWORD } ],
  GetComponentIDFromCLSSPEC: [ HRESULT, { pClassspec: uCLSSPEC.Δ, ppszComponentID: LPSTR.Δ } ],
  IsAsyncMoniker: [ HRESULT, { pmk: IMoniker.Δ } ],
  CreateURLBinding: [ HRESULT, { lpszUrl: LPCWSTR, pbc: IBindCtx.Δ, ppBdg: IBinding.Δ.Δ } ],
  RegisterMediaTypes: [ HRESULT, { ctypes: UINT, rgszTypes: LPCSTR.Δ, rgcfTypes: CLIPFORMAT.Δ } ],
  FindMediaType: [ HRESULT, { rgszTypes: LPCSTR, rgcfTypes: CLIPFORMAT.Δ } ],
  CreateFormatEnumerator: [ HRESULT, { cfmtetc: UINT, rgfmtetc: FORMATETC.Δ, ppenumfmtetc: IEnumFORMATETC.Δ.Δ } ],
  RegisterFormatEnumerator: [ HRESULT, { pBC: LPBC, pEFetc: IEnumFORMATETC.Δ, reserved: DWORD } ],
  RevokeFormatEnumerator: [ HRESULT, { pBC: LPBC, pEFetc: IEnumFORMATETC.Δ } ],
  RegisterMediaTypeClass: [ HRESULT, { pBC: LPBC, ctypes: UINT, rgszTypes: LPCSTR.Δ, rgclsID: CLSID.Δ, reserved: DWORD } ],
  FindMediaTypeClass: [ HRESULT, { pBC: LPBC, szType: LPCSTR, pclsID: CLSID.Δ, reserved: DWORD } ],
  UrlMkSetSessionOption: [ HRESULT, { dwOption: DWORD, pBuffer: LPVOID, dwBufferLength: DWORD, dwReserved: DWORD } ],
  UrlMkGetSessionOption: [ HRESULT, { dwOption: DWORD, pBuffer: LPVOID, dwBufferLength: DWORD, pdwBufferLengthOut: DWORD.Δ, dwReserved: DWORD } ],
  FindMimeFromData: [ HRESULT, { pBC: LPBC, pwzUrl: LPCWSTR, pBuffer: LPVOID, cbSize: DWORD, pwzMimeProposed: LPCWSTR, dwMimeFlags: DWORD, ppwzMimeOut: LPWSTR.Δ, dwReserved: DWORD } ],
  ObtainUserAgentString: [ HRESULT, { dwOption: DWORD, pszUAOut: LPSTR, cbSize: DWORD.Δ } ],
  CompareSecurityIds: [ HRESULT, { pbSecurityId1: BYTE.Δ, dwLen1: DWORD, pbSecurityId2: BYTE.Δ, dwLen2: DWORD, dwReserved: DWORD } ],
  CompatFlagsFromClsid: [ HRESULT, { pclsid: CLSID.Δ, pdwCompatFlags: LPDWORD, pdwMiscStatusFlags: LPDWORD } ],
  IBinding_RemoteGetBindResult_Proxy: [ HRESULT, { This: IBinding.Δ, pclsidProtocol: CLSID.Δ, pdwResult: DWORD.Δ, pszResult: LPOLESTR.Δ, dwReserved: DWORD } ],
  IBinding_RemoteGetBindResult_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IBindStatusCallback_RemoteGetBindInfo_Proxy: [ HRESULT, { This: IBindStatusCallback.Δ, grfBINDF: DWORD.Δ, pbindinfo: RemBINDINFO.Δ, pstgmed: RemSTGMEDIUM.Δ } ],
  IBindStatusCallback_RemoteGetBindInfo_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IBindStatusCallback_RemoteOnDataAvailable_Proxy: [ HRESULT, { This: IBindStatusCallback.Δ, grfBSCF: DWORD, dwSize: DWORD, pformatetc: RemFORMATETC.Δ, pstgmed: RemSTGMEDIUM.Δ } ],
  IBindStatusCallback_RemoteOnDataAvailable_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy: [ HRESULT, { This: IBindStatusCallbackEx.Δ, grfBINDF: DWORD.Δ, pbindinfo: RemBINDINFO.Δ, pstgmed: RemSTGMEDIUM.Δ, grfBINDF2: DWORD.Δ, pdwReserved: DWORD.Δ } ],
  IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  CreateUri: [ HRESULT, { pwzURI: LPCWSTR, dwFlags: DWORD, dwReserved: DWORD_PTR, ppURI: IUri.Δ.Δ } ],
  CreateUriWithFragment: [ HRESULT, { pwzURI: LPCWSTR, pwzFragment: LPCWSTR, dwFlags: DWORD, dwReserved: DWORD_PTR, ppURI: IUri.Δ.Δ } ],
  CreateUriFromMultiByteString: [ HRESULT, { pszANSIInputUri: LPCSTR, dwEncodingFlags: DWORD, dwCodePage: DWORD, dwCreateFlags: DWORD, dwReserved: DWORD_PTR, ppUri: IUri.Δ.Δ } ],
  CreateIUriBuilder: [ HRESULT, { pIUri: IUri.Δ, dwFlags: DWORD, dwReserved: DWORD_PTR, ppIUriBuilder: IUriBuilder.Δ.Δ } ],
  IWinInetInfo_RemoteQueryOption_Proxy: [ HRESULT, { This: IWinInetInfo.Δ, dwOption: DWORD, pBuffer: BYTE.Δ, pcbBuf: DWORD.Δ } ],
  IWinInetInfo_RemoteQueryOption_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IWinInetHttpInfo_RemoteQueryInfo_Proxy: [ HRESULT, { This: IWinInetHttpInfo.Δ, dwOption: DWORD, pBuffer: BYTE.Δ, pcbBuf: DWORD.Δ, pdwFlags: DWORD.Δ, pdwReserved: DWORD.Δ } ],
  IWinInetHttpInfo_RemoteQueryInfo_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IBindHost_RemoteMonikerBindToStorage_Proxy: [ HRESULT, { This: IBindHost.Δ, pMk: IMoniker.Δ, pBC: IBindCtx.Δ, pBSC: IBindStatusCallback.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  IBindHost_RemoteMonikerBindToStorage_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IBindHost_RemoteMonikerBindToObject_Proxy: [ HRESULT, { This: IBindHost.Δ, pMk: IMoniker.Δ, pBC: IBindCtx.Δ, pBSC: IBindStatusCallback.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  IBindHost_RemoteMonikerBindToObject_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  HlinkSimpleNavigateToString: [ HRESULT, { szTarget: LPCWSTR, szLocation: LPCWSTR, szTargetFrameName: LPCWSTR, pUnk: IUnknown.Δ, pbc: IBindCtx.Δ, IBindStatusCallback.Δ: IBindStatusCallback.Δ, grfHLNF: DWORD, dwReserved: DWORD } ],
  HlinkSimpleNavigateToMoniker: [ HRESULT, { pmkTarget: IMoniker.Δ, szLocation: LPCWSTR, szTargetFrameName: LPCWSTR, pUnk: IUnknown.Δ, pbc: IBindCtx.Δ, IBindStatusCallback.Δ: IBindStatusCallback.Δ, grfHLNF: DWORD, dwReserved: DWORD } ],
  URLOpenStreamA: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenStreamW: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenPullStreamA: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenPullStreamW: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLDownloadToFileA: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLDownloadToFileW: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLDownloadToCacheFileA: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK, cchFileName: DWORD } ],
  URLDownloadToCacheFileW: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK, cchFileName: DWORD } ],
  URLOpenBlockingStreamA: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  URLOpenBlockingStreamW: [ HRESULT, { LPBINDSTATUSCALLBACK: LPBINDSTATUSCALLBACK } ],
  HlinkGoBack: [ HRESULT, { pUnk: IUnknown.Δ } ],
  HlinkGoForward: [ HRESULT, { pUnk: IUnknown.Δ } ],
  HlinkNavigateString: [ HRESULT, { pUnk: IUnknown.Δ, szTarget: LPCWSTR } ],
  HlinkNavigateMoniker: [ HRESULT, { pUnk: IUnknown.Δ, pmkTarget: IMoniker.Δ } ],
  CoInternetParseUrl: [ HRESULT, { pwzUrl: LPCWSTR, ParseAction: PARSEACTION, dwFlags: DWORD, pszResult: LPWSTR, cchResult: DWORD, pcchResult: DWORD.Δ, dwReserved: DWORD } ],
  CoInternetParseIUri: [ HRESULT, { pIUri: IUri.Δ, ParseAction: PARSEACTION, dwFlags: DWORD, pwzResult: LPWSTR, cchResult: DWORD, pcchResult: DWORD.Δ, dwReserved: DWORD_PTR } ],
  CoInternetCombineUrl: [ HRESULT, { pwzBaseUrl: LPCWSTR, pwzRelativeUrl: LPCWSTR, dwCombineFlags: DWORD, pszResult: LPWSTR, cchResult: DWORD, pcchResult: DWORD.Δ, dwReserved: DWORD } ],
  CoInternetCombineUrlEx: [ HRESULT, { pBaseUri: IUri.Δ, pwzRelativeUrl: LPCWSTR, dwCombineFlags: DWORD, ppCombinedUri: IUri.Δ.Δ, dwReserved: DWORD_PTR } ],
  CoInternetCombineIUri: [ HRESULT, { pBaseUri: IUri.Δ, pRelativeUri: IUri.Δ, dwCombineFlags: DWORD, ppCombinedUri: IUri.Δ.Δ, dwReserved: DWORD_PTR } ],
  CoInternetCompareUrl: [ HRESULT, { pwzUrl1: LPCWSTR, pwzUrl2: LPCWSTR, dwFlags: DWORD } ],
  CoInternetGetProtocolFlags: [ HRESULT, { pwzUrl: LPCWSTR, pdwFlags: DWORD.Δ, dwReserved: DWORD } ],
  CoInternetQueryInfo: [ HRESULT, { pwzUrl: LPCWSTR, QueryOptions: QUERYOPTION, dwQueryFlags: DWORD, pvBuffer: LPVOID, cbBuffer: DWORD, pcbBuffer: DWORD.Δ, dwReserved: DWORD } ],
  CoInternetGetSession: [ HRESULT, { dwSessionMode: DWORD, ppIInternetSession: IInternetSession.Δ.Δ, dwReserved: DWORD } ],
  CoInternetGetSecurityUrl: [ HRESULT, { pwszUrl: LPCWSTR, ppwszSecUrl: LPWSTR.Δ, psuAction: PSUACTION, dwReserved: DWORD } ],
  AsyncInstallDistributionUnit: [ HRESULT, { szDistUnit: LPCWSTR, szTYPE: LPCWSTR, szExt: LPCWSTR, dwFileVersionMS: DWORD, dwFileVersionLS: DWORD, szURL: LPCWSTR, pbc: IBindCtx.Δ, pvReserved: LPVOID, flags: DWORD } ],
  CoInternetGetSecurityUrlEx: [ HRESULT, { pUri: IUri.Δ, ppSecUri: IUri.Δ.Δ, psuAction: PSUACTION, dwReserved: DWORD_PTR } ],
  CoInternetSetFeatureEnabled: [ HRESULT, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, fEnable: BOOL } ],
  CoInternetIsFeatureEnabled: [ HRESULT, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD } ],
  CoInternetIsFeatureEnabledForUrl: [ HRESULT, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, szURL: LPCWSTR, pSecMgr: IInternetSecurityManager.Δ } ],
  CoInternetIsFeatureEnabledForIUri: [ HRESULT, { FeatureEntry: INTERNETFEATURELIST, dwFlags: DWORD, pIUri: IUri.Δ, pSecMgr: IInternetSecurityManagerEx2.Δ } ],
  CoInternetIsFeatureZoneElevationEnabled: [ HRESULT, { szFromURL: LPCWSTR, szToURL: LPCWSTR, pSecMgr: IInternetSecurityManager.Δ, dwFlags: DWORD } ],
  CopyStgMedium: [ HRESULT, { pcstgmedSrc: STGMEDIUM.Δ, pstgmedDest: STGMEDIUM.Δ } ],
  CopyBindInfo: [ HRESULT, { pcbiSrc: BINDINFO.Δ, pbiDest: BINDINFO.Δ } ],
  ReleaseBindInfo: [ _void, { pbindinfo: BINDINFO.Δ } ],
  CoInternetCreateSecurityManager: [ HRESULT, { pSP: IServiceProvider.Δ, ppSM: IInternetSecurityManager.Δ.Δ, dwReserved: DWORD } ],
  CoInternetCreateZoneManager: [ HRESULT, { pSP: IServiceProvider.Δ, ppZM: IInternetZoneManager.Δ.Δ, dwReserved: DWORD } ],
  GetSoftwareUpdateInfo: [ HRESULT, { szDistUnit: LPCWSTR, psdi: LPSOFTDISTINFO } ],
  SetSoftwareUpdateAdvertisementState: [ HRESULT, { szDistUnit: LPCWSTR, dwAdState: DWORD, dwAdvertisedVersionMS: DWORD, dwAdvertisedVersionLS: DWORD } ],
  IsLoggingEnabledA: [ BOOL, { pszUrl: LPCSTR } ],
  IsLoggingEnabledW: [ BOOL, { pwszUrl: LPCWSTR } ],
  WriteHitLogging: [ BOOL, { lpLogginginfo: LPHIT_LOGGING_INFO } ],
  IBinding_GetBindResult_Proxy: [ HRESULT, { This: IBinding.Δ, pclsidProtocol: CLSID.Δ, pdwResult: DWORD.Δ, pszResult: LPOLESTR.Δ, pdwReserved: DWORD.Δ } ],
  IBinding_GetBindResult_Stub: [ HRESULT, { This: IBinding.Δ, pclsidProtocol: CLSID.Δ, pdwResult: DWORD.Δ, pszResult: LPOLESTR.Δ, dwReserved: DWORD } ],
  IBindStatusCallback_GetBindInfo_Proxy: [ HRESULT, { This: IBindStatusCallback.Δ, grfBINDF: DWORD.Δ, pbindinfo: BINDINFO.Δ } ],
  IBindStatusCallback_GetBindInfo_Stub: [ HRESULT, { This: IBindStatusCallback.Δ, grfBINDF: DWORD.Δ, pbindinfo: RemBINDINFO.Δ, pstgmed: RemSTGMEDIUM.Δ } ],
  IBindStatusCallback_OnDataAvailable_Proxy: [ HRESULT, { This: IBindStatusCallback.Δ, grfBSCF: DWORD, dwSize: DWORD, pformatetc: FORMATETC.Δ, pstgmed: STGMEDIUM.Δ } ],
  IBindStatusCallback_OnDataAvailable_Stub: [ HRESULT, { This: IBindStatusCallback.Δ, grfBSCF: DWORD, dwSize: DWORD, pformatetc: RemFORMATETC.Δ, pstgmed: RemSTGMEDIUM.Δ } ],
  IBindStatusCallbackEx_GetBindInfoEx_Proxy: [ HRESULT, { This: IBindStatusCallbackEx.Δ, grfBINDF: DWORD.Δ, pbindinfo: BINDINFO.Δ, grfBINDF2: DWORD.Δ, pdwReserved: DWORD.Δ } ],
  IBindStatusCallbackEx_GetBindInfoEx_Stub: [ HRESULT, { This: IBindStatusCallbackEx.Δ, grfBINDF: DWORD.Δ, pbindinfo: RemBINDINFO.Δ, pstgmed: RemSTGMEDIUM.Δ, grfBINDF2: DWORD.Δ, pdwReserved: DWORD.Δ } ],
  IWinInetInfo_QueryOption_Proxy: [ HRESULT, { This: IWinInetInfo.Δ, dwOption: DWORD, pBuffer: LPVOID, pcbBuf: DWORD.Δ } ],
  IWinInetInfo_QueryOption_Stub: [ HRESULT, { This: IWinInetInfo.Δ, dwOption: DWORD, pBuffer: BYTE.Δ, pcbBuf: DWORD.Δ } ],
  IWinInetHttpInfo_QueryInfo_Proxy: [ HRESULT, { This: IWinInetHttpInfo.Δ, dwOption: DWORD, pBuffer: LPVOID, pcbBuf: DWORD.Δ, pdwFlags: DWORD.Δ, pdwReserved: DWORD.Δ } ],
  IWinInetHttpInfo_QueryInfo_Stub: [ HRESULT, { This: IWinInetHttpInfo.Δ, dwOption: DWORD, pBuffer: BYTE.Δ, pcbBuf: DWORD.Δ, pdwFlags: DWORD.Δ, pdwReserved: DWORD.Δ } ],
  IBindHost_MonikerBindToStorage_Proxy: [ HRESULT, { This: IBindHost.Δ, pMk: IMoniker.Δ, pBC: IBindCtx.Δ, pBSC: IBindStatusCallback.Δ, riid: IID.Δ, ppvObj: _void.Δ.Δ } ],
  IBindHost_MonikerBindToStorage_Stub: [ HRESULT, { This: IBindHost.Δ, pMk: IMoniker.Δ, pBC: IBindCtx.Δ, pBSC: IBindStatusCallback.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  IBindHost_MonikerBindToObject_Proxy: [ HRESULT, { This: IBindHost.Δ, pMk: IMoniker.Δ, pBC: IBindCtx.Δ, pBSC: IBindStatusCallback.Δ, riid: IID.Δ, ppvObj: _void.Δ.Δ } ],
  IBindHost_MonikerBindToObject_Stub: [ HRESULT, { This: IBindHost.Δ, pMk: IMoniker.Δ, pBC: IBindCtx.Δ, pBSC: IBindStatusCallback.Δ, riid: IID.Δ, ppvObj: IUnknown.Δ.Δ } ],
  IEnumSTATPROPSTG_RemoteNext_Proxy: [ HRESULT, { This: IEnumSTATPROPSTG.Δ, celt: ULONG, rgelt: STATPROPSTG.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATPROPSTG_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  IEnumSTATPROPSETSTG_RemoteNext_Proxy: [ HRESULT, { This: IEnumSTATPROPSETSTG.Δ, celt: ULONG, rgelt: STATPROPSETSTG.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATPROPSETSTG_RemoteNext_Stub: [ _void, { This: IRpcStubBuffer.Δ, _pRpcChannelBuffer: IRpcChannelBuffer.Δ, _pRpcMessage: PRPC_MESSAGE, _pdwStubPhase: DWORD.Δ } ],
  PropVariantCopy: [ HRESULT, { pvarDest: PROPVARIANT.Δ, pvarSrc: PROPVARIANT.Δ } ],
  PropVariantClear: [ HRESULT, { pvar: PROPVARIANT.Δ } ],
  FreePropVariantArray: [ HRESULT, { cVariants: ULONG, rgvars: PROPVARIANT.Δ } ],
  StgCreatePropStg: [ HRESULT, { pUnk: IUnknown.Δ, fmtid: IID.Δ, pclsid: CLSID.Δ, grfFlags: DWORD, dwReserved: DWORD, ppPropStg: IPropertyStorage.Δ.Δ } ],
  StgOpenPropStg: [ HRESULT, { pUnk: IUnknown.Δ, fmtid: IID.Δ, grfFlags: DWORD, dwReserved: DWORD, ppPropStg: IPropertyStorage.Δ.Δ } ],
  StgCreatePropSetStg: [ HRESULT, { pStorage: IStorage.Δ, dwReserved: DWORD, ppPropSetStg: IPropertySetStorage.Δ.Δ } ],
  FmtIdToPropStgName: [ HRESULT, { pfmtid: FMTID.Δ, oszName: LPOLESTR } ],
  PropStgNameToFmtId: [ HRESULT, { oszName: LPOLESTR, pfmtid: FMTID.Δ } ],
  StgConvertVariantToProperty: [ SERIALIZEDPROPERTYVALUE, { pvar: PROPVARIANT.Δ, CodePage: USHORT, pprop: SERIALIZEDPROPERTYVALUE.Δ, pcb: ULONG.Δ, pid: PROPID, fReserved: BOOLEAN, pcIndirect: ULONG.Δ } ],
  LPSAFEnew ArrayT_UserSize: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  LPSAFEnew ArrayT_UserMarshal: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  LPSAFEnew ArrayT_UserUnmarshal: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  LPSAFEnew ArrayT_UserFree: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  LPSAFEnew ArrayT_UserSize64: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  LPSAFEnew ArrayT_UserMarshal64: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  LPSAFEnew ArrayT_UserUnmarshal64: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  LPSAFEnew ArrayT_UserFree64: [ _void, { LPSAFEnew ArrayT.Δ: LPSAFEnew ArrayT.Δ } ],
  IEnumSTATPROPSTG_Next_Proxy: [ HRESULT, { This: IEnumSTATPROPSTG.Δ, celt: ULONG, rgelt: STATPROPSTG.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATPROPSTG_Next_Stub: [ HRESULT, { This: IEnumSTATPROPSTG.Δ, celt: ULONG, rgelt: STATPROPSTG.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATPROPSETSTG_Next_Proxy: [ HRESULT, { This: IEnumSTATPROPSETSTG.Δ, celt: ULONG, rgelt: STATPROPSETSTG.Δ, pceltFetched: ULONG.Δ } ],
  IEnumSTATPROPSETSTG_Next_Stub: [ HRESULT, { This: IEnumSTATPROPSETSTG.Δ, celt: ULONG, rgelt: STATPROPSETSTG.Δ, pceltFetched: ULONG.Δ } ],
  CreateStdProgressIndicator: [ HRESULT, { hwndParent: HWND, pszTitle: LPCOLESTR, pIbscCaller: IBindStatusCallback.Δ, ppIbsc: IBindStatusCallback.Δ.Δ } ],
  SysAllocString: [ BSTR, { psz: OLECHAR.Δ } ],
  SysReAllocString: [ INT, { pbstr: BSTR.Δ, psz: OLECHAR.Δ } ],
  SysAllocStringLen: [ BSTR, { strIn: OLECHAR.Δ, ui: UINT } ],
  SysReAllocStringLen: [ INT, { pbstr: BSTR.Δ, psz: OLECHAR.Δ, len: uint } ],
  SysFreeString: [ _void, { bstrString: BSTR } ],
  SysStringLen: [ UINT, { BSTR: BSTR } ],
  SysStringByteLen: [ UINT, { bstr: BSTR } ],
  SysAllocStringByteLen: [ BSTR, { psz: LPCSTR, len: UINT } ],
  DosDateTimeToVariantTime: [ INT, { wDosDate: USHORT, wDosTime: USHORT, pvtime: DOUBLE.Δ } ],
  VariantTimeToDosDateTime: [ INT, { vtime: DOUBLE, pwDosDate: USHORT.Δ, pwDosTime: USHORT.Δ } ],
  SystemTimeToVariantTime: [ INT, { lpSystemTime: LPSYSTEMTIME, pvtime: DOUBLE.Δ } ],
  VariantTimeToSystemTime: [ INT, { vtime: DOUBLE, lpSystemTime: LPSYSTEMTIME } ],
  SafeArrayAllocDescriptor: [ HRESULT, { cDims: UINT, ppsaOut: tagSAFEnew ArrayT.Δ.Δ } ],
  SafeArrayAllocDescriptorEx: [ HRESULT, { vt: VARTYPE, cDims: UINT, ppsaOut: tagSAFEnew ArrayT.Δ.Δ } ],
  SafeArrayAllocData: [ HRESULT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayCreate: [ SAFEnew ArrayT, { vt: VARTYPE, cDims: UINT, rgsabound: SAFEnew ArrayTBOUND.Δ } ],
  SafeArrayCreateEx: [ SAFEnew ArrayT, { vt: VARTYPE, cDims: UINT, rgsabound: SAFEnew ArrayTBOUND.Δ, pvExtra: PVOID } ],
  SafeArrayCopyData: [ HRESULT, { psaSource: SAFEnew ArrayT.Δ, psaTarget: SAFEnew ArrayT.Δ } ],
  SafeArrayDestroyDescriptor: [ HRESULT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayDestroyData: [ HRESULT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayDestroy: [ HRESULT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayRedim: [ HRESULT, { psa: SAFEnew ArrayT.Δ, psaboundNew: SAFEnew ArrayTBOUND.Δ } ],
  SafeArrayGetDim: [ UINT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayGetElemsize: [ UINT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayGetUBound: [ HRESULT, { psa: SAFEnew ArrayT.Δ, nDim: UINT, plUbound: LONG.Δ } ],
  SafeArrayGetLBound: [ HRESULT, { psa: SAFEnew ArrayT.Δ, nDim: UINT, plLbound: LONG.Δ } ],
  SafeArrayLock: [ HRESULT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayUnlock: [ HRESULT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayAccessData: [ HRESULT, { psa: SAFEnew ArrayT.Δ, ppvData: _void.Δ.Δ } ],
  SafeArrayUnaccessData: [ HRESULT, { psa: SAFEnew ArrayT.Δ } ],
  SafeArrayGetElement: [ HRESULT, { psa: SAFEnew ArrayT.Δ, rgIndices: LONG.Δ, pv: _void.Δ } ],
  SafeArrayPutElement: [ HRESULT, { psa: SAFEnew ArrayT.Δ, rgIndices: LONG.Δ, pv: _void.Δ } ],
  SafeArrayCopy: [ HRESULT, { psa: SAFEnew ArrayT.Δ, ppsaOut: tagSAFEnew ArrayT.Δ.Δ } ],
  SafeArrayPtrOfIndex: [ HRESULT, { psa: SAFEnew ArrayT.Δ, rgIndices: LONG.Δ, ppvData: _void.Δ.Δ } ],
  SafeArraySetRecordInfo: [ HRESULT, { psa: SAFEnew ArrayT.Δ, prinfo: IRecordInfo.Δ } ],
  SafeArrayGetRecordInfo: [ HRESULT, { psa: SAFEnew ArrayT.Δ, prinfo: IRecordInfo.Δ.Δ } ],
  SafeArraySetIID: [ HRESULT, { psa: SAFEnew ArrayT.Δ, guid: GUID.Δ } ],
  SafeArrayGetIID: [ HRESULT, { psa: SAFEnew ArrayT.Δ, pguid: GUID.Δ } ],
  SafeArrayGetVartype: [ HRESULT, { psa: SAFEnew ArrayT.Δ, pvt: VARTYPE.Δ } ],
  SafeArrayCreateVector: [ SAFEnew ArrayT, { vt: VARTYPE, lLbound: LONG, cElements: ULONG } ],
  SafeArrayCreateVectorEx: [ SAFEnew ArrayT, { vt: VARTYPE, lLbound: LONG, cElements: ULONG, pvExtra: PVOID } ],
  VariantInit: [ _void, { pvarg: VARIANTARG.Δ } ],
  VariantClear: [ HRESULT, { pvarg: VARIANTARG.Δ } ],
  VariantCopy: [ HRESULT, { pvargDest: VARIANTARG.Δ, pvargSrc: VARIANTARG.Δ } ],
  VariantCopyInd: [ HRESULT, { pvarDest: VARIANT.Δ, pvargSrc: VARIANTARG.Δ } ],
  VariantChangeType: [ HRESULT, { pvargDest: VARIANTARG.Δ, pvarSrc: VARIANTARG.Δ, wFlags: USHORT, vt: VARTYPE } ],
  VariantChangeTypeEx: [ HRESULT, { pvargDest: VARIANTARG.Δ, pvarSrc: VARIANTARG.Δ, lcid: LCID, wFlags: USHORT, vt: VARTYPE } ],
  VectorFromBstr: [ HRESULT, { bstr: BSTR, ppsa: tagSAFEnew ArrayT.Δ.Δ } ],
  BstrFromVector: [ HRESULT, { psa: SAFEnew ArrayT.Δ, pbstr: BSTR.Δ } ],
  VarUI1FromI2: [ HRESULT, { sIn: SHORT, pbOut: BYTE.Δ } ],
  VarUI1FromI4: [ HRESULT, { lIn: LONG, pbOut: BYTE.Δ } ],
  VarUI1FromI8: [ HRESULT, { i64In: LONG64, pbOut: BYTE.Δ } ],
  VarUI1FromR4: [ HRESULT, { fltIn: FLOAT, pbOut: BYTE.Δ } ],
  VarUI1FromR8: [ HRESULT, { dblIn: DOUBLE, pbOut: BYTE.Δ } ],
  VarUI1FromCy: [ HRESULT, { cyIn: CY, pbOut: BYTE.Δ } ],
  VarUI1FromDate: [ HRESULT, { dateIn: DATE, pbOut: BYTE.Δ } ],
  VarUI1FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pbOut: BYTE.Δ } ],
  VarUI1FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pbOut: BYTE.Δ } ],
  VarUI1FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pbOut: BYTE.Δ } ],
  VarUI1FromI1: [ HRESULT, { cIn: CHAR, pbOut: BYTE.Δ } ],
  VarUI1FromUI2: [ HRESULT, { uiIn: USHORT, pbOut: BYTE.Δ } ],
  VarUI1FromUI4: [ HRESULT, { ulIn: ULONG, pbOut: BYTE.Δ } ],
  VarUI1FromUI8: [ HRESULT, { ui64In: ULONG64, pbOut: BYTE.Δ } ],
  VarUI1FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pbOut: BYTE.Δ } ],
  VarI2FromUI1: [ HRESULT, { bIn: BYTE, psOut: SHORT.Δ } ],
  VarI2FromI4: [ HRESULT, { lIn: LONG, psOut: SHORT.Δ } ],
  VarI2FromI8: [ HRESULT, { i64In: LONG64, psOut: SHORT.Δ } ],
  VarI2FromR4: [ HRESULT, { fltIn: FLOAT, psOut: SHORT.Δ } ],
  VarI2FromR8: [ HRESULT, { dblIn: DOUBLE, psOut: SHORT.Δ } ],
  VarI2FromCy: [ HRESULT, { cyIn: CY, psOut: SHORT.Δ } ],
  VarI2FromDate: [ HRESULT, { dateIn: DATE, psOut: SHORT.Δ } ],
  VarI2FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, psOut: SHORT.Δ } ],
  VarI2FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, psOut: SHORT.Δ } ],
  VarI2FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, psOut: SHORT.Δ } ],
  VarI2FromI1: [ HRESULT, { cIn: CHAR, psOut: SHORT.Δ } ],
  VarI2FromUI2: [ HRESULT, { uiIn: USHORT, psOut: SHORT.Δ } ],
  VarI2FromUI4: [ HRESULT, { ulIn: ULONG, psOut: SHORT.Δ } ],
  VarI2FromUI8: [ HRESULT, { ui64In: ULONG64, psOut: SHORT.Δ } ],
  VarI2FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, psOut: SHORT.Δ } ],
  VarI4FromUI1: [ HRESULT, { bIn: BYTE, plOut: LONG.Δ } ],
  VarI4FromI2: [ HRESULT, { sIn: SHORT, plOut: LONG.Δ } ],
  VarI4FromI8: [ HRESULT, { i64In: LONG64, plOut: LONG.Δ } ],
  VarI4FromR4: [ HRESULT, { fltIn: FLOAT, plOut: LONG.Δ } ],
  VarI4FromR8: [ HRESULT, { dblIn: DOUBLE, plOut: LONG.Δ } ],
  VarI4FromCy: [ HRESULT, { cyIn: CY, plOut: LONG.Δ } ],
  VarI4FromDate: [ HRESULT, { dateIn: DATE, plOut: LONG.Δ } ],
  VarI4FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, plOut: LONG.Δ } ],
  VarI4FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, plOut: LONG.Δ } ],
  VarI4FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, plOut: LONG.Δ } ],
  VarI4FromI1: [ HRESULT, { cIn: CHAR, plOut: LONG.Δ } ],
  VarI4FromUI2: [ HRESULT, { uiIn: USHORT, plOut: LONG.Δ } ],
  VarI4FromUI4: [ HRESULT, { ulIn: ULONG, plOut: LONG.Δ } ],
  VarI4FromUI8: [ HRESULT, { ui64In: ULONG64, plOut: LONG.Δ } ],
  VarI4FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, plOut: LONG.Δ } ],
  VarI4FromInt: [ HRESULT, { intIn: INT, plOut: LONG.Δ } ],
  VarI8FromUI1: [ HRESULT, { bIn: BYTE, pi64Out: LONG64.Δ } ],
  VarI8FromI2: [ HRESULT, { sIn: SHORT, pi64Out: LONG64.Δ } ],
  VarI8FromI4: [ HRESULT, { lIn: LONG, pi64Out: LONG64.Δ } ],
  VarI8FromR4: [ HRESULT, { fltIn: FLOAT, pi64Out: LONG64.Δ } ],
  VarI8FromR8: [ HRESULT, { dblIn: DOUBLE, pi64Out: LONG64.Δ } ],
  VarI8FromCy: [ HRESULT, { cyIn: CY, pi64Out: LONG64.Δ } ],
  VarI8FromDate: [ HRESULT, { dateIn: DATE, pi64Out: LONG64.Δ } ],
  VarI8FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ulong, pi64Out: LONG64.Δ } ],
  VarI8FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pi64Out: LONG64.Δ } ],
  VarI8FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pi64Out: LONG64.Δ } ],
  VarI8FromI1: [ HRESULT, { cIn: CHAR, pi64Out: LONG64.Δ } ],
  VarI8FromUI2: [ HRESULT, { uiIn: USHORT, pi64Out: LONG64.Δ } ],
  VarI8FromUI4: [ HRESULT, { ulIn: ULONG, pi64Out: LONG64.Δ } ],
  VarI8FromUI8: [ HRESULT, { ui64In: ULONG64, pi64Out: LONG64.Δ } ],
  VarI8FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pi64Out: LONG64.Δ } ],
  VarI8FromInt: [ HRESULT, { intIn: INT, pi64Out: LONG64.Δ } ],
  VarR4FromUI1: [ HRESULT, { bIn: BYTE, pfltOut: FLOAT.Δ } ],
  VarR4FromI2: [ HRESULT, { sIn: SHORT, pfltOut: FLOAT.Δ } ],
  VarR4FromI4: [ HRESULT, { lIn: LONG, pfltOut: FLOAT.Δ } ],
  VarR4FromI8: [ HRESULT, { i64In: LONG64, pfltOut: FLOAT.Δ } ],
  VarR4FromR8: [ HRESULT, { dblIn: DOUBLE, pfltOut: FLOAT.Δ } ],
  VarR4FromCy: [ HRESULT, { cyIn: CY, pfltOut: FLOAT.Δ } ],
  VarR4FromDate: [ HRESULT, { dateIn: DATE, pfltOut: FLOAT.Δ } ],
  VarR4FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pfltOut: FLOAT.Δ } ],
  VarR4FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pfltOut: FLOAT.Δ } ],
  VarR4FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pfltOut: FLOAT.Δ } ],
  VarR4FromI1: [ HRESULT, { cIn: CHAR, pfltOut: FLOAT.Δ } ],
  VarR4FromUI2: [ HRESULT, { uiIn: USHORT, pfltOut: FLOAT.Δ } ],
  VarR4FromUI4: [ HRESULT, { ulIn: ULONG, pfltOut: FLOAT.Δ } ],
  VarR4FromUI8: [ HRESULT, { ui64In: ULONG64, pfltOut: FLOAT.Δ } ],
  VarR4FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pfltOut: FLOAT.Δ } ],
  VarR8FromUI1: [ HRESULT, { bIn: BYTE, pdblOut: DOUBLE.Δ } ],
  VarR8FromI2: [ HRESULT, { sIn: SHORT, pdblOut: DOUBLE.Δ } ],
  VarR8FromI4: [ HRESULT, { lIn: LONG, pdblOut: DOUBLE.Δ } ],
  VarR8FromI8: [ HRESULT, { i64In: LONG64, pdblOut: DOUBLE.Δ } ],
  VarR8FromR4: [ HRESULT, { fltIn: FLOAT, pdblOut: DOUBLE.Δ } ],
  VarR8FromCy: [ HRESULT, { cyIn: CY, pdblOut: DOUBLE.Δ } ],
  VarR8FromDate: [ HRESULT, { dateIn: DATE, pdblOut: DOUBLE.Δ } ],
  VarR8FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdblOut: DOUBLE.Δ } ],
  VarR8FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pdblOut: DOUBLE.Δ } ],
  VarR8FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pdblOut: DOUBLE.Δ } ],
  VarR8FromI1: [ HRESULT, { cIn: CHAR, pdblOut: DOUBLE.Δ } ],
  VarR8FromUI2: [ HRESULT, { uiIn: USHORT, pdblOut: DOUBLE.Δ } ],
  VarR8FromUI4: [ HRESULT, { ulIn: ULONG, pdblOut: DOUBLE.Δ } ],
  VarR8FromUI8: [ HRESULT, { ui64In: ULONG64, pdblOut: DOUBLE.Δ } ],
  VarR8FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pdblOut: DOUBLE.Δ } ],
  VarDateFromUI1: [ HRESULT, { bIn: BYTE, pdateOut: DATE.Δ } ],
  VarDateFromI2: [ HRESULT, { sIn: SHORT, pdateOut: DATE.Δ } ],
  VarDateFromI4: [ HRESULT, { lIn: LONG, pdateOut: DATE.Δ } ],
  VarDateFromI8: [ HRESULT, { i64In: LONG64, pdateOut: DATE.Δ } ],
  VarDateFromR4: [ HRESULT, { fltIn: FLOAT, pdateOut: DATE.Δ } ],
  VarDateFromR8: [ HRESULT, { dblIn: DOUBLE, pdateOut: DATE.Δ } ],
  VarDateFromCy: [ HRESULT, { cyIn: CY, pdateOut: DATE.Δ } ],
  VarDateFromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdateOut: DATE.Δ } ],
  VarDateFromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pdateOut: DATE.Δ } ],
  VarDateFromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pdateOut: DATE.Δ } ],
  VarDateFromI1: [ HRESULT, { cIn: CHAR, pdateOut: DATE.Δ } ],
  VarDateFromUI2: [ HRESULT, { uiIn: USHORT, pdateOut: DATE.Δ } ],
  VarDateFromUI4: [ HRESULT, { ulIn: ULONG, pdateOut: DATE.Δ } ],
  VarDateFromUI8: [ HRESULT, { ui64In: ULONG64, pdateOut: DATE.Δ } ],
  VarDateFromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pdateOut: DATE.Δ } ],
  VarCyFromUI1: [ HRESULT, { bIn: BYTE, pcyOut: CY.Δ } ],
  VarCyFromI2: [ HRESULT, { sIn: SHORT, pcyOut: CY.Δ } ],
  VarCyFromI4: [ HRESULT, { lIn: LONG, pcyOut: CY.Δ } ],
  VarCyFromI8: [ HRESULT, { i64In: LONG64, pcyOut: CY.Δ } ],
  VarCyFromR4: [ HRESULT, { fltIn: FLOAT, pcyOut: CY.Δ } ],
  VarCyFromR8: [ HRESULT, { dblIn: DOUBLE, pcyOut: CY.Δ } ],
  VarCyFromDate: [ HRESULT, { dateIn: DATE, pcyOut: CY.Δ } ],
  VarCyFromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pcyOut: CY.Δ } ],
  VarCyFromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pcyOut: CY.Δ } ],
  VarCyFromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pcyOut: CY.Δ } ],
  VarCyFromI1: [ HRESULT, { cIn: CHAR, pcyOut: CY.Δ } ],
  VarCyFromUI2: [ HRESULT, { uiIn: USHORT, pcyOut: CY.Δ } ],
  VarCyFromUI4: [ HRESULT, { ulIn: ULONG, pcyOut: CY.Δ } ],
  VarCyFromUI8: [ HRESULT, { ui64In: ULONG64, pcyOut: CY.Δ } ],
  VarCyFromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pcyOut: CY.Δ } ],
  VarBstrFromUI1: [ HRESULT, { bVal: BYTE, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromI2: [ HRESULT, { iVal: SHORT, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromI4: [ HRESULT, { lIn: LONG, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromI8: [ HRESULT, { i64In: LONG64, lcid: LCID, dwFlags: ulong, pbstrOut: BSTR.Δ } ],
  VarBstrFromR4: [ HRESULT, { fltIn: FLOAT, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromR8: [ HRESULT, { dblIn: DOUBLE, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromCy: [ HRESULT, { cyIn: CY, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromDate: [ HRESULT, { dateIn: DATE, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromBool: [ HRESULT, { boolIn: VARIANT_BOOL, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromI1: [ HRESULT, { cIn: CHAR, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromUI2: [ HRESULT, { uiIn: USHORT, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromUI4: [ HRESULT, { ulIn: ULONG, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBstrFromUI8: [ HRESULT, { ui64In: ULONG64, lcid: LCID, dwFlags: ulong, pbstrOut: BSTR.Δ } ],
  VarBstrFromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, lcid: LCID, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarBoolFromUI1: [ HRESULT, { bIn: BYTE, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromI2: [ HRESULT, { sIn: SHORT, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromI4: [ HRESULT, { lIn: LONG, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromI8: [ HRESULT, { i64In: LONG64, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromR4: [ HRESULT, { fltIn: FLOAT, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromR8: [ HRESULT, { dblIn: DOUBLE, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromDate: [ HRESULT, { dateIn: DATE, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromCy: [ HRESULT, { cyIn: CY, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromI1: [ HRESULT, { cIn: CHAR, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromUI2: [ HRESULT, { uiIn: USHORT, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromUI4: [ HRESULT, { ulIn: ULONG, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromUI8: [ HRESULT, { i64In: ULONG64, pboolOut: VARIANT_BOOL.Δ } ],
  VarBoolFromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pboolOut: VARIANT_BOOL.Δ } ],
  VarI1FromUI1: [ HRESULT, { bIn: BYTE, pcOut: CHAR.Δ } ],
  VarI1FromI2: [ HRESULT, { uiIn: SHORT, pcOut: CHAR.Δ } ],
  VarI1FromI4: [ HRESULT, { lIn: LONG, pcOut: CHAR.Δ } ],
  VarI1FromI8: [ HRESULT, { i64In: LONG64, pcOut: CHAR.Δ } ],
  VarI1FromR4: [ HRESULT, { fltIn: FLOAT, pcOut: CHAR.Δ } ],
  VarI1FromR8: [ HRESULT, { dblIn: DOUBLE, pcOut: CHAR.Δ } ],
  VarI1FromDate: [ HRESULT, { dateIn: DATE, pcOut: CHAR.Δ } ],
  VarI1FromCy: [ HRESULT, { cyIn: CY, pcOut: CHAR.Δ } ],
  VarI1FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pcOut: CHAR.Δ } ],
  VarI1FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pcOut: CHAR.Δ } ],
  VarI1FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pcOut: CHAR.Δ } ],
  VarI1FromUI2: [ HRESULT, { uiIn: USHORT, pcOut: CHAR.Δ } ],
  VarI1FromUI4: [ HRESULT, { ulIn: ULONG, pcOut: CHAR.Δ } ],
  VarI1FromUI8: [ HRESULT, { i64In: ULONG64, pcOut: CHAR.Δ } ],
  VarI1FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pcOut: CHAR.Δ } ],
  VarUI2FromUI1: [ HRESULT, { bIn: BYTE, puiOut: USHORT.Δ } ],
  VarUI2FromI2: [ HRESULT, { uiIn: SHORT, puiOut: USHORT.Δ } ],
  VarUI2FromI4: [ HRESULT, { lIn: LONG, puiOut: USHORT.Δ } ],
  VarUI2FromI8: [ HRESULT, { i64In: LONG64, puiOut: USHORT.Δ } ],
  VarUI2FromR4: [ HRESULT, { fltIn: FLOAT, puiOut: USHORT.Δ } ],
  VarUI2FromR8: [ HRESULT, { dblIn: DOUBLE, puiOut: USHORT.Δ } ],
  VarUI2FromDate: [ HRESULT, { dateIn: DATE, puiOut: USHORT.Δ } ],
  VarUI2FromCy: [ HRESULT, { cyIn: CY, puiOut: USHORT.Δ } ],
  VarUI2FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, puiOut: USHORT.Δ } ],
  VarUI2FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, puiOut: USHORT.Δ } ],
  VarUI2FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, puiOut: USHORT.Δ } ],
  VarUI2FromI1: [ HRESULT, { cIn: CHAR, puiOut: USHORT.Δ } ],
  VarUI2FromUI4: [ HRESULT, { ulIn: ULONG, puiOut: USHORT.Δ } ],
  VarUI2FromUI8: [ HRESULT, { i64In: ULONG64, puiOut: USHORT.Δ } ],
  VarUI2FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, puiOut: USHORT.Δ } ],
  VarUI4FromUI1: [ HRESULT, { bIn: BYTE, pulOut: ULONG.Δ } ],
  VarUI4FromI2: [ HRESULT, { uiIn: SHORT, pulOut: ULONG.Δ } ],
  VarUI4FromI4: [ HRESULT, { lIn: LONG, pulOut: ULONG.Δ } ],
  VarUI4FromI8: [ HRESULT, { i64In: LONG64, plOut: ULONG.Δ } ],
  VarUI4FromR4: [ HRESULT, { fltIn: FLOAT, pulOut: ULONG.Δ } ],
  VarUI4FromR8: [ HRESULT, { dblIn: DOUBLE, pulOut: ULONG.Δ } ],
  VarUI4FromDate: [ HRESULT, { dateIn: DATE, pulOut: ULONG.Δ } ],
  VarUI4FromCy: [ HRESULT, { cyIn: CY, pulOut: ULONG.Δ } ],
  VarUI4FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pulOut: ULONG.Δ } ],
  VarUI4FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pulOut: ULONG.Δ } ],
  VarUI4FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pulOut: ULONG.Δ } ],
  VarUI4FromI1: [ HRESULT, { cIn: CHAR, pulOut: ULONG.Δ } ],
  VarUI4FromUI2: [ HRESULT, { uiIn: USHORT, pulOut: ULONG.Δ } ],
  VarUI4FromUI8: [ HRESULT, { ui64In: ULONG64, plOut: ULONG.Δ } ],
  VarUI4FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pulOut: ULONG.Δ } ],
  VarUI8FromUI1: [ HRESULT, { bIn: BYTE, pi64Out: ULONG64.Δ } ],
  VarUI8FromI2: [ HRESULT, { sIn: SHORT, pi64Out: ULONG64.Δ } ],
  VarUI8FromI4: [ HRESULT, { lIn: LONG, pi64Out: ULONG64.Δ } ],
  VarUI8FromI8: [ HRESULT, { ui64In: LONG64, pi64Out: ULONG64.Δ } ],
  VarUI8FromR4: [ HRESULT, { fltIn: FLOAT, pi64Out: ULONG64.Δ } ],
  VarUI8FromR8: [ HRESULT, { dblIn: DOUBLE, pi64Out: ULONG64.Δ } ],
  VarUI8FromCy: [ HRESULT, { cyIn: CY, pi64Out: ULONG64.Δ } ],
  VarUI8FromDate: [ HRESULT, { dateIn: DATE, pi64Out: ULONG64.Δ } ],
  VarUI8FromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ulong, pi64Out: ULONG64.Δ } ],
  VarUI8FromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pi64Out: ULONG64.Δ } ],
  VarUI8FromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pi64Out: ULONG64.Δ } ],
  VarUI8FromI1: [ HRESULT, { cIn: CHAR, pi64Out: ULONG64.Δ } ],
  VarUI8FromUI2: [ HRESULT, { uiIn: USHORT, pi64Out: ULONG64.Δ } ],
  VarUI8FromUI4: [ HRESULT, { ulIn: ULONG, pi64Out: ULONG64.Δ } ],
  VarUI8FromDec: [ HRESULT, { pdecIn: DECIMAL.Δ, pi64Out: ULONG64.Δ } ],
  VarUI8FromInt: [ HRESULT, { intIn: INT, pi64Out: ULONG64.Δ } ],
  VarDecFromUI1: [ HRESULT, { bIn: BYTE, pdecOut: DECIMAL.Δ } ],
  VarDecFromI2: [ HRESULT, { uiIn: SHORT, pdecOut: DECIMAL.Δ } ],
  VarDecFromI4: [ HRESULT, { lIn: LONG, pdecOut: DECIMAL.Δ } ],
  VarDecFromI8: [ HRESULT, { i64In: LONG64, pdecOut: DECIMAL.Δ } ],
  VarDecFromR4: [ HRESULT, { fltIn: FLOAT, pdecOut: DECIMAL.Δ } ],
  VarDecFromR8: [ HRESULT, { dblIn: DOUBLE, pdecOut: DECIMAL.Δ } ],
  VarDecFromDate: [ HRESULT, { dateIn: DATE, pdecOut: DECIMAL.Δ } ],
  VarDecFromCy: [ HRESULT, { cyIn: CY, pdecOut: DECIMAL.Δ } ],
  VarDecFromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pdecOut: DECIMAL.Δ } ],
  VarDecFromDisp: [ HRESULT, { pdispIn: IDispatch.Δ, lcid: LCID, pdecOut: DECIMAL.Δ } ],
  VarDecFromBool: [ HRESULT, { boolIn: VARIANT_BOOL, pdecOut: DECIMAL.Δ } ],
  VarDecFromI1: [ HRESULT, { cIn: CHAR, pdecOut: DECIMAL.Δ } ],
  VarDecFromUI2: [ HRESULT, { uiIn: USHORT, pdecOut: DECIMAL.Δ } ],
  VarDecFromUI4: [ HRESULT, { ulIn: ULONG, pdecOut: DECIMAL.Δ } ],
  VarDecFromUI8: [ HRESULT, { ui64In: ULONG64, pdecOut: DECIMAL.Δ } ],
  VarParseNumFromStr: [ HRESULT, { strIn: LPCOLESTR, lcid: LCID, dwFlags: ULONG, pnumprs: NUMPARSE.Δ, rgbDig: BYTE.Δ } ],
  VarNumFromParseNum: [ HRESULT, { pnumprs: NUMPARSE.Δ, rgbDig: BYTE.Δ, dwVtBits: ULONG, pvar: VARIANT.Δ } ],
  VarAdd: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarAnd: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarCat: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarDiv: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarEqv: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarIdiv: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarImp: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarMod: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarMul: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarOr: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarPow: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarSub: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarXor: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, pvarResult: LPVARIANT } ],
  VarAbs: [ HRESULT, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarFix: [ HRESULT, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarInt: [ HRESULT, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarNeg: [ HRESULT, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarNot: [ HRESULT, { pvarIn: LPVARIANT, pvarResult: LPVARIANT } ],
  VarRound: [ HRESULT, { pvarIn: LPVARIANT, cDecimals: int, pvarResult: LPVARIANT } ],
  VarCmp: [ HRESULT, { pvarLeft: LPVARIANT, pvarRight: LPVARIANT, lcid: LCID, dwFlags: ULONG } ],
  VarDecAdd: [ HRESULT, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecDiv: [ HRESULT, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecMul: [ HRESULT, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecSub: [ HRESULT, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecAbs: [ HRESULT, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecFix: [ HRESULT, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecInt: [ HRESULT, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecNeg: [ HRESULT, { pdecIn: LPDECIMAL, pdecResult: LPDECIMAL } ],
  VarDecRound: [ HRESULT, { pdecIn: LPDECIMAL, cDecimals: int, pdecResult: LPDECIMAL } ],
  VarDecCmp: [ HRESULT, { pdecLeft: LPDECIMAL, pdecRight: LPDECIMAL } ],
  VarDecCmpR8: [ HRESULT, { pdecLeft: LPDECIMAL, dblRight: double } ],
  VarCyAdd: [ HRESULT, { cyLeft: CY, cyRight: CY, pcyResult: LPCY } ],
  VarCyMul: [ HRESULT, { cyLeft: CY, cyRight: CY, pcyResult: LPCY } ],
  VarCyMulI4: [ HRESULT, { cyLeft: CY, lRight: long, pcyResult: LPCY } ],
  VarCyMulI8: [ HRESULT, { cyLeft: CY, lRight: LONG64, pcyResult: LPCY } ],
  VarCySub: [ HRESULT, { cyLeft: CY, cyRight: CY, pcyResult: LPCY } ],
  VarCyAbs: [ HRESULT, { cyIn: CY, pcyResult: LPCY } ],
  VarCyFix: [ HRESULT, { cyIn: CY, pcyResult: LPCY } ],
  VarCyInt: [ HRESULT, { cyIn: CY, pcyResult: LPCY } ],
  VarCyNeg: [ HRESULT, { cyIn: CY, pcyResult: LPCY } ],
  VarCyRound: [ HRESULT, { cyIn: CY, cDecimals: int, pcyResult: LPCY } ],
  VarCyCmp: [ HRESULT, { cyLeft: CY, cyRight: CY } ],
  VarCyCmpR8: [ HRESULT, { cyLeft: CY, dblRight: double } ],
  VarBstrCat: [ HRESULT, { bstrLeft: BSTR, bstrRight: BSTR, pbstrResult: LPBSTR } ],
  VarBstrCmp: [ HRESULT, { bstrLeft: BSTR, bstrRight: BSTR, lcid: LCID, dwFlags: ULONG } ],
  VarR8Pow: [ HRESULT, { dblLeft: double, dblRight: double, pdblResult: double.Δ } ],
  VarR4CmpR8: [ HRESULT, { fltLeft: float, dblRight: double } ],
  VarR8Round: [ HRESULT, { dblIn: double, cDecimals: int, pdblResult: double.Δ } ],
  VarDateFromUdate: [ HRESULT, { pudateIn: UDATE.Δ, dwFlags: ULONG, pdateOut: DATE.Δ } ],
  VarDateFromUdateEx: [ HRESULT, { pudateIn: UDATE.Δ, lcid: LCID, dwFlags: ULONG, pdateOut: DATE.Δ } ],
  VarUdateFromDate: [ HRESULT, { dateIn: DATE, dwFlags: ULONG, pudateOut: UDATE.Δ } ],
  GetAltMonthNames: [ HRESULT, { lcid: LCID, prgp: ushort.Δ.Δ.Δ } ],
  VarFormat: [ HRESULT, { pvarIn: LPVARIANT, pstrFormat: LPOLESTR, iFirstDay: int, iFirstWeek: int, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarFormatDateTime: [ HRESULT, { pvarIn: LPVARIANT, iNamedFormat: int, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarFormatNumber: [ HRESULT, { pvarIn: LPVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarFormatPercent: [ HRESULT, { pvarIn: LPVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarFormatCurrency: [ HRESULT, { pvarIn: LPVARIANT, iNumDig: int, iIncLead: int, iUseParens: int, iGroup: int, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarWeekdayName: [ HRESULT, { iWeekday: int, fAbbrev: int, iFirstDay: int, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarMonthName: [ HRESULT, { iMonth: int, fAbbrev: int, dwFlags: ULONG, pbstrOut: BSTR.Δ } ],
  VarFormatFromTokens: [ HRESULT, { pvarIn: LPVARIANT, pstrFormat: LPOLESTR, pbTokCur: LPBYTE, dwFlags: ULONG, pbstrOut: BSTR.Δ, lcid: LCID } ],
  VarTokenizeFormatString: [ HRESULT, { pstrFormat: LPOLESTR, rgbTok: LPBYTE, cbTok: int, iFirstDay: int, iFirstWeek: int, lcid: LCID, pcbActual: int.Δ } ],
  LHashValOfNameSysA: [ ULONG, { syskind: SYSKIND, lcid: LCID, szName: LPCSTR } ],
  LHashValOfNameSys: [ ULONG, { syskind: SYSKIND, lcid: LCID, szName: OLECHAR.Δ } ],
  LoadTypeLib: [ HRESULT, { szFile: LPCOLESTR, pptlib: ITypeLib.Δ.Δ } ],
  LoadTypeLibEx: [ HRESULT, { szFile: LPCOLESTR, regkind: REGKIND, pptlib: ITypeLib.Δ.Δ } ],
  LoadRegTypeLib: [ HRESULT, { rguid: GUID.Δ, wVerMajor: WORD, wVerMinor: WORD, lcid: LCID, pptlib: ITypeLib.Δ.Δ } ],
  QueryPathOfRegTypeLib: [ HRESULT, { guid: GUID.Δ, wMaj: USHORT, wMin: USHORT, lcid: LCID, lpbstrPathName: LPBSTR } ],
  RegisterTypeLib: [ HRESULT, { ptlib: ITypeLib.Δ, szFullPath: LPCOLESTR, szHelpDir: LPCOLESTR } ],
  UnRegisterTypeLib: [ HRESULT, { libID: GUID.Δ, wVerMajor: WORD, wVerMinor: WORD, lcid: LCID, syskind: SYSKIND } ],
  RegisterTypeLibForUser: [ HRESULT, { ptlib: ITypeLib.Δ, szFullPath: OLECHAR.Δ, szHelpDir: OLECHAR.Δ } ],
  UnRegisterTypeLibForUser: [ HRESULT, { libID: GUID.Δ, wMajorVerNum: WORD, wMinorVerNum: WORD, lcid: LCID, syskind: SYSKIND } ],
  CreateTypeLib: [ HRESULT, { syskind: SYSKIND, szFile: LPCOLESTR, ppctlib: ICreateTypeLib.Δ.Δ } ],
  CreateTypeLib2: [ HRESULT, { syskind: SYSKIND, szFile: LPCOLESTR, ppctlib: ICreateTypeLib2.Δ.Δ } ],
  DispGetParam: [ HRESULT, { pdispparams: DISPPARAMS.Δ, position: UINT, vtTarg: VARTYPE, pvarResult: VARIANT.Δ, puArgErr: UINT.Δ } ],
  DispGetIDsOfNames: [ HRESULT, { ptinfo: ITypeInfo.Δ, rgszNames: ushort.Δ.Δ, cNames: UINT, rgdispid: DISPID.Δ } ],
  DispInvoke: [ HRESULT, { _this: _void.Δ, ptinfo: ITypeInfo.Δ, dispidMember: DISPID, wFlags: WORD, pparams: DISPPARAMS.Δ, pvarResult: VARIANT.Δ, pexcepinfo: EXCEPINFO.Δ, puArgErr: UINT.Δ } ],
  CreateDispTypeInfo: [ HRESULT, { pidata: INTERFACEDATA.Δ, lcid: LCID, pptinfo: ITypeInfo.Δ.Δ } ],
  CreateStdDispatch: [ HRESULT, { punkOuter: IUnknown.Δ, pvThis: _void.Δ, ptinfo: ITypeInfo.Δ, ppunkStdDisp: IUnknown.Δ.Δ } ],
  DispCallFunc: [ HRESULT, { pvInstance: _void.Δ, oVft: ULONG_PTR, cc: CALLCONV, vtReturn: VARTYPE, cActuals: UINT, prgvt: VARTYPE.Δ, prgpvarg: tagVARIANT.Δ.Δ, pvargResult: VARIANT.Δ } ],
  RegisterActiveObject: [ HRESULT, { punk: IUnknown.Δ, rclsid: IID.Δ, dwFlags: DWORD, pdwRegister: DWORD.Δ } ],
  RevokeActiveObject: [ HRESULT, { dwRegister: DWORD, pvReserved: _void.Δ } ],
  GetActiveObject: [ HRESULT, { rclsid: IID.Δ, pvReserved: _void.Δ, ppunk: IUnknown.Δ.Δ } ],
  SetErrorInfo: [ HRESULT, { dwReserved: ULONG, perrinfo: IErrorInfo.Δ } ],
  GetErrorInfo: [ HRESULT, { dwReserved: ULONG, pperrinfo: IErrorInfo.Δ.Δ } ],
  CreateErrorInfo: [ HRESULT, { pperrinfo: ICreateErrorInfo.Δ.Δ } ],
  GetRecordInfoFromTypeInfo: [ HRESULT, { pTypeInfo: ITypeInfo.Δ, ppRecInfo: IRecordInfo.Δ.Δ } ],
  GetRecordInfoFromGuids: [ HRESULT, { rGuidTypeLib: GUID.Δ, uVerMajor: ULONG, uVerMinor: ULONG, lcid: LCID, rGuidTypeInfo: GUID.Δ, ppRecInfo: IRecordInfo.Δ.Δ } ],
  OaBuildVersion: [ ULONG, {  } ],
  ClearCustData: [ _void, { pCustData: LPCUSTDATA } ],
  OaEnablePerUserTLibRegistration: [ _void, {  } ],
  OleBuildVersion: [ DWORD, {  } ],
  ReadClassStg: [ HRESULT, { pStg: LPSTORAGE, pclsid: CLSID.Δ } ],
  WriteClassStg: [ HRESULT, { pStg: LPSTORAGE, rclsid: IID.Δ } ],
  ReadClassStm: [ HRESULT, { pStm: LPSTREAM, pclsid: CLSID.Δ } ],
  WriteClassStm: [ HRESULT, { pStm: LPSTREAM, rclsid: IID.Δ } ],
  WriteFmtUserTypeStg: [ HRESULT, { pstg: LPSTORAGE, cf: CLIPFORMAT, lpszUserType: LPOLESTR } ],
  ReadFmtUserTypeStg: [ HRESULT, { pstg: LPSTORAGE, pcf: CLIPFORMAT.Δ, lplpszUserType: LPOLESTR.Δ } ],
  OleInitialize: [ HRESULT, { pvReserved: LPVOID } ],
  OleUninitialize: [ _void, {  } ],
  OleQueryLinkFromData: [ HRESULT, { pSrcDataObject: LPDATAOBJECT } ],
  OleQueryCreateFromData: [ HRESULT, { pSrcDataObject: LPDATAOBJECT } ],
  OleCreate: [ HRESULT, { rclsid: IID.Δ, riid: IID.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateEx: [ HRESULT, { rclsid: IID.Δ, riid: IID.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: DWORD.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: IAdviseSink.Δ, rgdwConnection: DWORD.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateFromData: [ HRESULT, { pSrcDataObj: LPDATAOBJECT, riid: IID.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateFromDataEx: [ HRESULT, { pSrcDataObj: LPDATAOBJECT, riid: IID.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: DWORD.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: IAdviseSink.Δ, rgdwConnection: DWORD.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateLinkFromData: [ HRESULT, { pSrcDataObj: LPDATAOBJECT, riid: IID.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateLinkFromDataEx: [ HRESULT, { pSrcDataObj: LPDATAOBJECT, riid: IID.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: DWORD.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: IAdviseSink.Δ, rgdwConnection: DWORD.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateStaticFromData: [ HRESULT, { pSrcDataObj: LPDATAOBJECT, iid: IID.Δ, renderopt: DWORD, pFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateLink: [ HRESULT, { pmkLinkSrc: LPMONIKER, riid: IID.Δ, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateLinkEx: [ HRESULT, { pmkLinkSrc: LPMONIKER, riid: IID.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: DWORD.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: IAdviseSink.Δ, rgdwConnection: DWORD.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateLinkToFile: [ HRESULT, { lpszFileName: LPCOLESTR, riid: IID.Δ, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateLinkToFileEx: [ HRESULT, { lpszFileName: LPCOLESTR, riid: IID.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: DWORD.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: IAdviseSink.Δ, rgdwConnection: DWORD.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateFromFile: [ HRESULT, { rclsid: IID.Δ, lpszFileName: LPCOLESTR, riid: IID.Δ, renderopt: DWORD, lpFormatEtc: LPFORMATETC, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleCreateFromFileEx: [ HRESULT, { rclsid: IID.Δ, lpszFileName: LPCOLESTR, riid: IID.Δ, dwFlags: DWORD, renderopt: DWORD, cFormats: ULONG, rgAdvf: DWORD.Δ, rgFormatEtc: LPFORMATETC, lpAdviseSink: IAdviseSink.Δ, rgdwConnection: DWORD.Δ, pClientSite: LPOLECLIENTSITE, pStg: LPSTORAGE, ppvObj: LPVOID.Δ } ],
  OleLoad: [ HRESULT, { pStg: LPSTORAGE, riid: IID.Δ, pClientSite: LPOLECLIENTSITE, ppvObj: LPVOID.Δ } ],
  OleSave: [ HRESULT, { pPS: LPPERSISTSTORAGE, pStg: LPSTORAGE, fSameAsLoad: BOOL } ],
  OleLoadFromStream: [ HRESULT, { pStm: LPSTREAM, iidInterface: IID.Δ, ppvObj: LPVOID.Δ } ],
  OleSaveToStream: [ HRESULT, { pPStm: LPPERSISTSTREAM, pStm: LPSTREAM } ],
  OleSetContainedObject: [ HRESULT, { pUnknown: LPUNKNOWN, fContained: BOOL } ],
  OleNoteObjectVisible: [ HRESULT, { pUnknown: LPUNKNOWN, fVisible: BOOL } ],
  RegisterDragDrop: [ HRESULT, { hwnd: HWND, pDropTarget: LPDROPTARGET } ],
  RevokeDragDrop: [ HRESULT, { hwnd: HWND } ],
  DoDragDrop: [ HRESULT, { pDataObj: LPDATAOBJECT, pDropSource: LPDROPSOURCE, dwOKEffects: DWORD, pdwEffect: LPDWORD } ],
  OleSetClipboard: [ HRESULT, { pDataObj: LPDATAOBJECT } ],
  OleGetClipboard: [ HRESULT, { ppDataObj: LPDATAOBJECT.Δ } ],
  OleFlushClipboard: [ HRESULT, {  } ],
  OleIsCurrentClipboard: [ HRESULT, { pDataObj: LPDATAOBJECT } ],
  OleCreateMenuDescriptor: [ HOLEMENU, { hmenuCombined: HMENU, lpMenuWidths: LPOLEMENUGROUPWIDTHS } ],
  OleSetMenuDescriptor: [ HRESULT, { holemenu: HOLEMENU, hwndFrame: HWND, hwndActiveObject: HWND, lpFrame: LPOLEINPLACEFRAME, lpActiveObj: LPOLEINPLACEACTIVEOBJECT } ],
  OleDestroyMenuDescriptor: [ HRESULT, { holemenu: HOLEMENU } ],
  OleTranslateAccelerator: [ HRESULT, { lpFrame: LPOLEINPLACEFRAME, lpFrameInfo: LPOLEINPLACEFRAMEINFO, lpmsg: LPMSG } ],
  OleDuplicateData: [ HANDLE, { hSrc: HANDLE, cfFormat: CLIPFORMAT, uiFlags: UINT } ],
  OleDraw: [ HRESULT, { pUnknown: LPUNKNOWN, dwAspect: DWORD, hdcDraw: HDC, lprcBounds: LPCRECT } ],
  OleRun: [ HRESULT, { pUnknown: LPUNKNOWN } ],
  OleIsRunning: [ BOOL, { pObject: LPOLEOBJECT } ],
  OleLockRunning: [ HRESULT, { pUnknown: LPUNKNOWN, fLock: BOOL, fLastUnlockCloses: BOOL } ],
  ReleaseStgMedium: [ _void, { LPSTGMEDIUM: LPSTGMEDIUM } ],
  CreateOleAdviseHolder: [ HRESULT, { ppOAHolder: LPOLEADVISEHOLDER.Δ } ],
  OleCreateDefaultHandler: [ HRESULT, { clsid: IID.Δ, pUnkOuter: LPUNKNOWN, riid: IID.Δ, lplpObj: LPVOID.Δ } ],
  OleCreateEmbeddingHelper: [ HRESULT, { clsid: IID.Δ, pUnkOuter: LPUNKNOWN, flags: DWORD, pCF: LPCLASSFACTORY, riid: IID.Δ, lplpObj: LPVOID.Δ } ],
  IsAccelerator: [ BOOL, { hAccel: HACCEL, cAccelEntries: int, lpMsg: LPMSG, lpwCmd: WORD.Δ } ],
  OleGetIconOfFile: [ HGLOBAL, { lpszPath: LPOLESTR, fUseFileAsLabel: BOOL } ],
  OleGetIconOfClass: [ HGLOBAL, { rclsid: IID.Δ, lpszLabel: LPOLESTR, fUseTypeAsLabel: BOOL } ],
  OleMetafilePictFromIconAndLabel: [ HGLOBAL, { hIcon: HICON, lpszLabel: LPOLESTR, lpszSourceFile: LPOLESTR, iIconIndex: UINT } ],
  OleRegGetUserType: [ HRESULT, { clsid: IID.Δ, dwFormOfType: DWORD, pszUserType: LPOLESTR.Δ } ],
  OleRegGetMiscStatus: [ HRESULT, { clsid: IID.Δ, dwAspect: DWORD, pdwStatus: DWORD.Δ } ],
  OleRegEnumFormatEtc: [ HRESULT, { clsid: IID.Δ, dwDirection: DWORD, ppenum: LPENUMFORMATETC.Δ } ],
  OleRegEnumVerbs: [ HRESULT, { clsid: IID.Δ, ppenum: LPENUMOLEVERB.Δ } ],
  OleConvertOLESTREAMToIStorage: [ HRESULT, { lpolestream: LPOLESTREAM, pstg: LPSTORAGE, ptd: DVTARGETDEVICE.Δ } ],
  OleConvertIStorageToOLESTREAM: [ HRESULT, { pstg: LPSTORAGE, lpolestream: LPOLESTREAM } ],
  GetHGlobalFromILockBytes: [ HRESULT, { plkbyt: LPLOCKBYTES, phglobal: HGLOBAL.Δ } ],
  CreateILockBytesOnHGlobal: [ HRESULT, { hGlobal: HGLOBAL, fDeleteOnRelease: BOOL, pplkbyt: LPLOCKBYTES.Δ } ],
  GetHGlobalFromStream: [ HRESULT, { pstm: LPSTREAM, phglobal: HGLOBAL.Δ } ],
  CreateStreamOnHGlobal: [ HRESULT, { hGlobal: HGLOBAL, fDeleteOnRelease: BOOL, ppstm: LPSTREAM.Δ } ],
  OleDoAutoConvert: [ HRESULT, { pStg: LPSTORAGE, pClsidNew: LPCLSID } ],
  OleGetAutoConvert: [ HRESULT, { clsidOld: IID.Δ, pClsidNew: LPCLSID } ],
  OleSetAutoConvert: [ HRESULT, { clsidOld: IID.Δ, clsidNew: IID.Δ } ],
  GetConvertStg: [ HRESULT, { pStg: LPSTORAGE } ],
  SetConvertStg: [ HRESULT, { pStg: LPSTORAGE, fConvert: BOOL } ],
  OleConvertIStorageToOLESTREAMEx: [ HRESULT, { pstg: LPSTORAGE, cfFormat: CLIPFORMAT, lWidth: LONG, lHeight: LONG, dwSize: DWORD, pmedium: LPSTGMEDIUM, polestm: LPOLESTREAM } ],
  OleConvertOLESTREAMToIStorageEx: [ HRESULT, { polestm: LPOLESTREAM, pstg: LPSTORAGE, pcfFormat: CLIPFORMAT.Δ, plwWidth: LONG.Δ, plHeight: LONG.Δ, pdwSize: DWORD.Δ, pmedium: LPSTGMEDIUM } ],
  GetOpenFileNameA: [ BOOL, { LPOPENFILENAMEA: LPOPENFILENAMEA } ],
  GetOpenFileNameW: [ BOOL, { LPOPENFILENAMEW: LPOPENFILENAMEW } ],
  GetSaveFileNameA: [ BOOL, { LPOPENFILENAMEA: LPOPENFILENAMEA } ],
  GetSaveFileNameW: [ BOOL, { LPOPENFILENAMEW: LPOPENFILENAMEW } ],
  GetFileTitleA: [ _void, { LPCSTR: LPCSTR, Buf: LPSTR, cchSize: WORD } ],
  GetFileTitleW: [ _void, { LPCWSTR: LPCWSTR, Buf: LPWSTR, cchSize: WORD } ],
  ChooseColorA: [ BOOL, { LPCHOOSECOLORA: LPCHOOSECOLORA } ],
  ChooseColorW: [ BOOL, { LPCHOOSECOLORW: LPCHOOSECOLORW } ],
  FindTextA: [ HWND, { LPFINDREPLACEA: LPFINDREPLACEA } ],
  FindTextW: [ HWND, { LPFINDREPLACEW: LPFINDREPLACEW } ],
  ReplaceTextA: [ HWND, { LPFINDREPLACEA: LPFINDREPLACEA } ],
  ReplaceTextW: [ HWND, { LPFINDREPLACEW: LPFINDREPLACEW } ],
  ChooseFontA: [ BOOL, { LPCHOOSEFONTA: LPCHOOSEFONTA } ],
  ChooseFontW: [ BOOL, { LPCHOOSEFONTW: LPCHOOSEFONTW } ],
  PrintDlgA: [ BOOL, { pPD: LPPRINTDLGA } ],
  PrintDlgW: [ BOOL, { pPD: LPPRINTDLGW } ],
  PrintDlgExA: [ HRESULT, { pPD: LPPRINTDLGEXA } ],
  PrintDlgExW: [ HRESULT, { pPD: LPPRINTDLGEXW } ],
  CommDlgExtendedError: [ DWORD, {  } ],
  PageSetupDlgA: [ BOOL, { LPPAGESETUPDLGA: LPPAGESETUPDLGA } ],
  PageSetupDlgW: [ BOOL, { LPPAGESETUPDLGW: LPPAGESETUPDLGW } ],
  ua_wcscpy: [ PUWSTR, { Destination: PUWSTR, Source: PCUWSTR } ],
  ChangeServiceConfigA: [ BOOL, { hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR, lpDisplayName: LPCSTR } ],
  ChangeServiceConfigW: [ BOOL, { hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR, lpDisplayName: LPCWSTR } ],
  ChangeServiceConfig2A: [ BOOL, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID } ],
  ChangeServiceConfig2W: [ BOOL, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID } ],
  CloseServiceHandle: [ BOOL, { hSCObject: SC_HANDLE } ],
  ControlService: [ BOOL, { hService: SC_HANDLE, dwControl: DWORD, lpServiceStatus: LPSERVICE_STATUS } ],
  CreateServiceA: [ SC_HANDLE, { hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPCSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR } ],
  CreateServiceW: [ SC_HANDLE, { hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPCWSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR } ],
  DeleteService: [ BOOL, { hService: SC_HANDLE } ],
  EnumDependentServicesA: [ BOOL, { hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD } ],
  EnumDependentServicesW: [ BOOL, { hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD } ],
  EnumServicesStatusA: [ BOOL, { hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD } ],
  EnumServicesStatusW: [ BOOL, { hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD } ],
  EnumServicesStatusExA: [ BOOL, { hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCSTR } ],
  EnumServicesStatusExW: [ BOOL, { hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCWSTR } ],
  GetServiceKeyNameA: [ BOOL, { hSCManager: SC_HANDLE, lpDisplayName: LPCSTR, lpServiceName: LPSTR, lpcchBuffer: LPDWORD } ],
  GetServiceKeyNameW: [ BOOL, { hSCManager: SC_HANDLE, lpDisplayName: LPCWSTR, lpServiceName: LPWSTR, lpcchBuffer: LPDWORD } ],
  GetServiceDisplayNameA: [ BOOL, { hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPSTR, lpcchBuffer: LPDWORD } ],
  GetServiceDisplayNameW: [ BOOL, { hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPWSTR, lpcchBuffer: LPDWORD } ],
  LockServiceDatabase: [ SC_LOCK, { hSCManager: SC_HANDLE } ],
  NotifyBootConfigStatus: [ BOOL, { BootAcceptable: BOOL } ],
  OpenSCManagerA: [ SC_HANDLE, { lpMachineName: LPCSTR, lpDatabaseName: LPCSTR, dwDesiredAccess: DWORD } ],
  OpenSCManagerW: [ SC_HANDLE, { lpMachineName: LPCWSTR, lpDatabaseName: LPCWSTR, dwDesiredAccess: DWORD } ],
  OpenServiceA: [ SC_HANDLE, { hSCManager: SC_HANDLE, lpServiceName: LPCSTR, dwDesiredAccess: DWORD } ],
  OpenServiceW: [ SC_HANDLE, { hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, dwDesiredAccess: DWORD } ],
  QueryServiceConfigA: [ BOOL, { hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceConfigW: [ BOOL, { hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceConfig2A: [ BOOL, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceConfig2W: [ BOOL, { hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceLockStatusA: [ BOOL, { hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceLockStatusW: [ BOOL, { hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceObjectSecurity: [ BOOL, { hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  QueryServiceStatus: [ BOOL, { hService: SC_HANDLE, lpServiceStatus: LPSERVICE_STATUS } ],
  QueryServiceStatusEx: [ BOOL, { hService: SC_HANDLE, InfoLevel: SC_STATUS_TYPE, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD } ],
  RegisterServiceCtrlHandlerA: [ SERVICE_STATUS_HANDLE, { lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION } ],
  RegisterServiceCtrlHandlerW: [ SERVICE_STATUS_HANDLE, { lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION } ],
  RegisterServiceCtrlHandlerExA: [ SERVICE_STATUS_HANDLE, { lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID } ],
  RegisterServiceCtrlHandlerExW: [ SERVICE_STATUS_HANDLE, { lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID } ],
  SetServiceObjectSecurity: [ BOOL, { hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR } ],
  SetServiceStatus: [ BOOL, { hServiceStatus: SERVICE_STATUS_HANDLE, lpServiceStatus: LPSERVICE_STATUS } ],
  StartServiceCtrlDispatcherA: [ BOOL, { lpServiceStartTable: SERVICE_TABLE_ENTRYA.Δ } ],
  StartServiceCtrlDispatcherW: [ BOOL, { lpServiceStartTable: SERVICE_TABLE_ENTRYW.Δ } ],
  StartServiceA: [ BOOL, { hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: LPCSTR.Δ } ],
  StartServiceW: [ BOOL, { hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: LPCWSTR.Δ } ],
  UnlockServiceDatabase: [ BOOL, { ScLock: SC_LOCK } ],
  NotifyServiceStatusChangeA: [ DWORD, { hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYA } ],
  NotifyServiceStatusChangeW: [ DWORD, { hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYW } ],
  ControlServiceExA: [ BOOL, { hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID } ],
  ControlServiceExW: [ BOOL, { hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID } ],
  ImmInstallIMEA: [ HKL, { lpszIMEFileName: LPCSTR, lpszLayoutText: LPCSTR } ],
  ImmInstallIMEW: [ HKL, { lpszIMEFileName: LPCWSTR, lpszLayoutText: LPCWSTR } ],
  ImmGetDefaultIMEWnd: [ HWND, { HWND: HWND } ],
  ImmGetDescriptionA: [ UINT, { HKL: HKL, lpszDescription: LPSTR, uBufLen: UINT } ],
  ImmGetDescriptionW: [ UINT, { HKL: HKL, lpszDescription: LPWSTR, uBufLen: UINT } ],
  ImmGetIMEFileNameA: [ UINT, { HKL: HKL, lpszFileName: LPSTR, uBufLen: UINT } ],
  ImmGetIMEFileNameW: [ UINT, { HKL: HKL, lpszFileName: LPWSTR, uBufLen: UINT } ],
  ImmGetProperty: [ DWORD, { DWORD: DWORD } ],
  ImmIsIME: [ BOOL, { HKL: HKL } ],
  ImmSimulateHotKey: [ BOOL, { DWORD: DWORD } ],
  ImmCreateContext: [ HIMC, {  } ],
  ImmDestroyContext: [ BOOL, { HIMC: HIMC } ],
  ImmGetContext: [ HIMC, { HWND: HWND } ],
  ImmReleaseContext: [ BOOL, { HIMC: HIMC } ],
  ImmAssociateContext: [ HIMC, { HIMC: HIMC } ],
  ImmAssociateContextEx: [ BOOL, { DWORD: DWORD } ],
  ImmGetCompositionStringA: [ LONG, { DWORD: DWORD, lpBuf: LPVOID, dwBufLen: DWORD } ],
  ImmGetCompositionStringW: [ LONG, { DWORD: DWORD, lpBuf: LPVOID, dwBufLen: DWORD } ],
  ImmSetCompositionStringA: [ BOOL, { HIMC: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD } ],
  ImmSetCompositionStringW: [ BOOL, { HIMC: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD } ],
  ImmGetCandidateListCountA: [ DWORD, { HIMC: HIMC, lpdwListCount: LPDWORD } ],
  ImmGetCandidateListCountW: [ DWORD, { HIMC: HIMC, lpdwListCount: LPDWORD } ],
  ImmGetCandidateListA: [ DWORD, { HIMC: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD } ],
  ImmGetCandidateListW: [ DWORD, { HIMC: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD } ],
  ImmGetGuideLineA: [ DWORD, { HIMC: HIMC, dwIndex: DWORD, lpBuf: LPSTR, dwBufLen: DWORD } ],
  ImmGetGuideLineW: [ DWORD, { HIMC: HIMC, dwIndex: DWORD, lpBuf: LPWSTR, dwBufLen: DWORD } ],
  ImmGetConversionStatus: [ BOOL, { HIMC: HIMC, lpfdwConversion: LPDWORD, lpfdwSentence: LPDWORD } ],
  ImmSetConversionStatus: [ BOOL, { DWORD: DWORD } ],
  ImmGetOpenStatus: [ BOOL, { HIMC: HIMC } ],
  ImmSetOpenStatus: [ BOOL, { BOOL: BOOL } ],
  ImmGetCompositionFontA: [ BOOL, { HIMC: HIMC, lplf: LPLOGFONTA } ],
  ImmGetCompositionFontW: [ BOOL, { HIMC: HIMC, lplf: LPLOGFONTW } ],
  ImmSetCompositionFontA: [ BOOL, { HIMC: HIMC, lplf: LPLOGFONTA } ],
  ImmSetCompositionFontW: [ BOOL, { HIMC: HIMC, lplf: LPLOGFONTW } ],
  ImmConfigureIMEA: [ BOOL, { LPVOID: LPVOID } ],
  ImmConfigureIMEW: [ BOOL, { LPVOID: LPVOID } ],
  ImmEscapeA: [ LRESULT, { LPVOID: LPVOID } ],
  ImmEscapeW: [ LRESULT, { LPVOID: LPVOID } ],
  ImmGetConversionListA: [ DWORD, { HIMC: HIMC, lpSrc: LPCSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT } ],
  ImmGetConversionListW: [ DWORD, { HIMC: HIMC, lpSrc: LPCWSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT } ],
  ImmNotifyIME: [ BOOL, { HIMC: HIMC, dwAction: DWORD, dwIndex: DWORD, dwValue: DWORD } ],
  ImmGetStatusWindowPos: [ BOOL, { HIMC: HIMC, lpptPos: LPPOINT } ],
  ImmSetStatusWindowPos: [ BOOL, { HIMC: HIMC, lpptPos: LPPOINT } ],
  ImmGetCompositionWindow: [ BOOL, { HIMC: HIMC, lpCompForm: LPCOMPOSITIONFORM } ],
  ImmSetCompositionWindow: [ BOOL, { HIMC: HIMC, lpCompForm: LPCOMPOSITIONFORM } ],
  ImmGetCandidateWindow: [ BOOL, { DWORD: DWORD, lpCandidate: LPCANDIDATEFORM } ],
  ImmSetCandidateWindow: [ BOOL, { HIMC: HIMC, lpCandidate: LPCANDIDATEFORM } ],
  ImmIsUIMessageA: [ BOOL, { LPARAM: LPARAM } ],
  ImmIsUIMessageW: [ BOOL, { LPARAM: LPARAM } ],
  ImmGetVirtualKey: [ UINT, { HWND: HWND } ],
  ImmRegisterWordA: [ BOOL, { DWORD: DWORD, lpszReading: LPCSTR, lpszRegister: LPCSTR } ],
  ImmRegisterWordW: [ BOOL, { DWORD: DWORD, lpszReading: LPCWSTR, lpszRegister: LPCWSTR } ],
  ImmUnregisterWordA: [ BOOL, { DWORD: DWORD, lpszReading: LPCSTR, lpszUnregister: LPCSTR } ],
  ImmUnregisterWordW: [ BOOL, { DWORD: DWORD, lpszReading: LPCWSTR, lpszUnregister: LPCWSTR } ],
  ImmGetRegisterWordStyleA: [ UINT, { HKL: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFA } ],
  ImmGetRegisterWordStyleW: [ UINT, { HKL: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFW } ],
  ImmEnumRegisterWordA: [ UINT, { LPVOID: LPVOID, lpszReading: LPCSTR, lpszRegister: LPCSTR } ],
  ImmEnumRegisterWordW: [ UINT, { LPVOID: LPVOID, lpszReading: LPCWSTR, lpszRegister: LPCWSTR } ],
  ImmDisableIME: [ BOOL, { DWORD: DWORD } ],
  ImmEnumInputContext: [ BOOL, { idThread: DWORD, lpfn: IMCENUMPROC, lParam: LPARAM } ],
  ImmGetImeMenuItemsA: [ DWORD, { DWORD: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOA, lpImeMenu: LPIMEMENUITEMINFOA, dwSize: DWORD } ],
  ImmGetImeMenuItemsW: [ DWORD, { DWORD: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOW, lpImeMenu: LPIMEMENUITEMINFOW, dwSize: DWORD } ],
  ImmDisableTextFrameService: [ BOOL, { idThread: DWORD } ],
